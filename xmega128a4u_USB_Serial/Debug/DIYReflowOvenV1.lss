
DIYReflowOvenV1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .BOOT         00000042  00020000  00020000  00007620  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000070be  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         000004ae  00802000  000070be  00007172  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000eb9  008024ae  008024ae  00007662  2**2
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00007662  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000076c0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000870  00000000  00000000  00007700  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00010eb5  00000000  00000000  00007f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000053c6  00000000  00000000  00018e25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000b076  00000000  00000000  0001e1eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000196c  00000000  00000000  00029264  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00035f10  00000000  00000000  0002abd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006dc9  00000000  00000000  00060ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000848  00000000  00000000  000678b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000c77c  00000000  00000000  000680f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .BOOT:

00020000 <SP_LoadFlashWord>:

.section .BOOT, "ax"
.global SP_LoadFlashWord

SP_LoadFlashWord:
	in	r19, RAMPZ                         ; Save RAMPZ, which is restored in SP_CommonSPM.
   20000:	3b b7       	in	r19, 0x3b	; 59
	movw	r0, r22                            ; Prepare flash word in R1:R0.
   20002:	0b 01       	movw	r0, r22
	ldi	r20, NVM_CMD_LOAD_FLASH_BUFFER_gc  ; Prepare NVM command in R20.
   20004:	43 e2       	ldi	r20, 0x23	; 35
	jmp	SP_CommonSPM                       ; Jump to common SPM code.
   20006:	13 c0       	rjmp	.+38     	; 0x2002e <SP_CommonSPM>

00020008 <SP_LoadFlashPage>:
		
.section .BOOT, "ax"
.global SP_LoadFlashPage

SP_LoadFlashPage:
	clr	ZL									; Clear low byte of Z, to indicate start of page.
   20008:	ee 27       	eor	r30, r30
	clr	ZH									; Clear high byte of Z, to indicate start of page.
   2000a:	ff 27       	eor	r31, r31

	out	RAMPX, r1							; Clear RAMPX pointer.
   2000c:	19 be       	out	0x39, r1	; 57
	movw	XL, r24							; Load X with data buffer address.
   2000e:	dc 01       	movw	r26, r24

	ldi r20, NVM_CMD_LOAD_FLASH_BUFFER_gc	; Prepare NVM command code in R20.
   20010:	43 e2       	ldi	r20, 0x23	; 35
	sts	NVM_CMD, r20						; Load it into NVM command register.
   20012:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

	ldi	r21, FLASH_PAGE_SIZE / 2			; Load R21 with page word count.
   20016:	50 e8       	ldi	r21, 0x80	; 128
	ldi	r18, CCP_SPM_gc						; Prepare Protect SPM signature in R16.
   20018:	2d e9       	ldi	r18, 0x9D	; 157

0002001a <SP_LoadFlashPage_1>:

SP_LoadFlashPage_1:
	ld	r0, X+								; Load low byte from buffer into R0.
   2001a:	0d 90       	ld	r0, X+
	ld	r1, X+								; Load high byte from buffer into R1.
   2001c:	1d 90       	ld	r1, X+
	sts	CCP, r18							; Enable SPM operation (this disables interrupts for 4 cycles).
   2001e:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	spm										; Self-program.
   20022:	e8 95       	spm
	adiw	ZL, 2							; Move Z to next Flash word.
   20024:	32 96       	adiw	r30, 0x02	; 2


	dec	r21									; Decrement word count.
   20026:	5a 95       	dec	r21


	brne	SP_LoadFlashPage_1				; Repeat until word cont is zero.
   20028:	c1 f7       	brne	.-16     	; 0x2001a <SP_LoadFlashPage_1>

	clr	r1									; Clear R1 for GCC _zero_reg_ to function properly.
   2002a:	11 24       	eor	r1, r1
	ret
   2002c:	08 95       	ret

0002002e <SP_CommonSPM>:
; ---

.section .BOOT, "ax"

SP_CommonSPM:
	movw	ZL, r24          ; Load R25:R24 into Z.
   2002e:	fc 01       	movw	r30, r24
	sts	NVM_CMD, r20     ; Load prepared command into NVM Command register.
   20030:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi	r18, CCP_SPM_gc  ; Prepare Protect SPM signature in R18
   20034:	2d e9       	ldi	r18, 0x9D	; 157
	sts	CCP, r18         ; Enable SPM operation (this disables interrupts for 4 cycles).
   20036:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	spm                      ; Self-program.
   2003a:	e8 95       	spm
	clr	r1               ; Clear R1 for GCC _zero_reg_ to function properly.
   2003c:	11 24       	eor	r1, r1
	out	RAMPZ, r19       ; Restore RAMPZ register.
   2003e:	3b bf       	out	0x3b, r19	; 59
	ret
   20040:	08 95       	ret

Disassembly of section .text:

00000000 <__vectors>:
       0:	a3 c5       	rjmp	.+2886   	; 0xb48 <__ctors_end>
       2:	00 00       	nop
       4:	c7 c5       	rjmp	.+2958   	; 0xb94 <__bad_interrupt>
       6:	00 00       	nop
       8:	c5 c5       	rjmp	.+2954   	; 0xb94 <__bad_interrupt>
       a:	00 00       	nop
       c:	c3 c5       	rjmp	.+2950   	; 0xb94 <__bad_interrupt>
       e:	00 00       	nop
      10:	c1 c5       	rjmp	.+2946   	; 0xb94 <__bad_interrupt>
      12:	00 00       	nop
      14:	bf c5       	rjmp	.+2942   	; 0xb94 <__bad_interrupt>
      16:	00 00       	nop
      18:	bd c5       	rjmp	.+2938   	; 0xb94 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	bb c5       	rjmp	.+2934   	; 0xb94 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b9 c5       	rjmp	.+2930   	; 0xb94 <__bad_interrupt>
      22:	00 00       	nop
      24:	b7 c5       	rjmp	.+2926   	; 0xb94 <__bad_interrupt>
      26:	00 00       	nop
      28:	b5 c5       	rjmp	.+2922   	; 0xb94 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b3 c5       	rjmp	.+2918   	; 0xb94 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b1 c5       	rjmp	.+2914   	; 0xb94 <__bad_interrupt>
      32:	00 00       	nop
      34:	af c5       	rjmp	.+2910   	; 0xb94 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 9e 13 	jmp	0x273c	; 0x273c <__vector_14>
      3c:	ab c5       	rjmp	.+2902   	; 0xb94 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a9 c5       	rjmp	.+2898   	; 0xb94 <__bad_interrupt>
      42:	00 00       	nop
      44:	a7 c5       	rjmp	.+2894   	; 0xb94 <__bad_interrupt>
      46:	00 00       	nop
      48:	a5 c5       	rjmp	.+2890   	; 0xb94 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a3 c5       	rjmp	.+2886   	; 0xb94 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a1 c5       	rjmp	.+2882   	; 0xb94 <__bad_interrupt>
      52:	00 00       	nop
      54:	9f c5       	rjmp	.+2878   	; 0xb94 <__bad_interrupt>
      56:	00 00       	nop
      58:	9d c5       	rjmp	.+2874   	; 0xb94 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	9b c5       	rjmp	.+2870   	; 0xb94 <__bad_interrupt>
      5e:	00 00       	nop
      60:	99 c5       	rjmp	.+2866   	; 0xb94 <__bad_interrupt>
      62:	00 00       	nop
      64:	97 c5       	rjmp	.+2862   	; 0xb94 <__bad_interrupt>
      66:	00 00       	nop
      68:	95 c5       	rjmp	.+2858   	; 0xb94 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	93 c5       	rjmp	.+2854   	; 0xb94 <__bad_interrupt>
      6e:	00 00       	nop
      70:	91 c5       	rjmp	.+2850   	; 0xb94 <__bad_interrupt>
      72:	00 00       	nop
      74:	8f c5       	rjmp	.+2846   	; 0xb94 <__bad_interrupt>
      76:	00 00       	nop
      78:	8d c5       	rjmp	.+2842   	; 0xb94 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	8b c5       	rjmp	.+2838   	; 0xb94 <__bad_interrupt>
      7e:	00 00       	nop
      80:	89 c5       	rjmp	.+2834   	; 0xb94 <__bad_interrupt>
      82:	00 00       	nop
      84:	87 c5       	rjmp	.+2830   	; 0xb94 <__bad_interrupt>
      86:	00 00       	nop
      88:	85 c5       	rjmp	.+2826   	; 0xb94 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	83 c5       	rjmp	.+2822   	; 0xb94 <__bad_interrupt>
      8e:	00 00       	nop
      90:	81 c5       	rjmp	.+2818   	; 0xb94 <__bad_interrupt>
      92:	00 00       	nop
      94:	7f c5       	rjmp	.+2814   	; 0xb94 <__bad_interrupt>
      96:	00 00       	nop
      98:	7d c5       	rjmp	.+2810   	; 0xb94 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	7b c5       	rjmp	.+2806   	; 0xb94 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	79 c5       	rjmp	.+2802   	; 0xb94 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	77 c5       	rjmp	.+2798   	; 0xb94 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	75 c5       	rjmp	.+2794   	; 0xb94 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	73 c5       	rjmp	.+2790   	; 0xb94 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	71 c5       	rjmp	.+2786   	; 0xb94 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	6f c5       	rjmp	.+2782   	; 0xb94 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	6d c5       	rjmp	.+2778   	; 0xb94 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	6b c5       	rjmp	.+2774   	; 0xb94 <__bad_interrupt>
      be:	00 00       	nop
      c0:	69 c5       	rjmp	.+2770   	; 0xb94 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	67 c5       	rjmp	.+2766   	; 0xb94 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	65 c5       	rjmp	.+2762   	; 0xb94 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	63 c5       	rjmp	.+2758   	; 0xb94 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	61 c5       	rjmp	.+2754   	; 0xb94 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	5f c5       	rjmp	.+2750   	; 0xb94 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	5d c5       	rjmp	.+2746   	; 0xb94 <__bad_interrupt>
      da:	00 00       	nop
      dc:	5b c5       	rjmp	.+2742   	; 0xb94 <__bad_interrupt>
      de:	00 00       	nop
      e0:	59 c5       	rjmp	.+2738   	; 0xb94 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	57 c5       	rjmp	.+2734   	; 0xb94 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	55 c5       	rjmp	.+2730   	; 0xb94 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	53 c5       	rjmp	.+2726   	; 0xb94 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	51 c5       	rjmp	.+2722   	; 0xb94 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	4f c5       	rjmp	.+2718   	; 0xb94 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	4d c5       	rjmp	.+2714   	; 0xb94 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	4b c5       	rjmp	.+2710   	; 0xb94 <__bad_interrupt>
      fe:	00 00       	nop
     100:	49 c5       	rjmp	.+2706   	; 0xb94 <__bad_interrupt>
     102:	00 00       	nop
     104:	47 c5       	rjmp	.+2702   	; 0xb94 <__bad_interrupt>
     106:	00 00       	nop
     108:	45 c5       	rjmp	.+2698   	; 0xb94 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	43 c5       	rjmp	.+2694   	; 0xb94 <__bad_interrupt>
     10e:	00 00       	nop
     110:	41 c5       	rjmp	.+2690   	; 0xb94 <__bad_interrupt>
     112:	00 00       	nop
     114:	3f c5       	rjmp	.+2686   	; 0xb94 <__bad_interrupt>
     116:	00 00       	nop
     118:	3d c5       	rjmp	.+2682   	; 0xb94 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	3b c5       	rjmp	.+2678   	; 0xb94 <__bad_interrupt>
     11e:	00 00       	nop
     120:	39 c5       	rjmp	.+2674   	; 0xb94 <__bad_interrupt>
     122:	00 00       	nop
     124:	37 c5       	rjmp	.+2670   	; 0xb94 <__bad_interrupt>
     126:	00 00       	nop
     128:	35 c5       	rjmp	.+2666   	; 0xb94 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	33 c5       	rjmp	.+2662   	; 0xb94 <__bad_interrupt>
     12e:	00 00       	nop
     130:	31 c5       	rjmp	.+2658   	; 0xb94 <__bad_interrupt>
     132:	00 00       	nop
     134:	2f c5       	rjmp	.+2654   	; 0xb94 <__bad_interrupt>
     136:	00 00       	nop
     138:	2d c5       	rjmp	.+2650   	; 0xb94 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	2b c5       	rjmp	.+2646   	; 0xb94 <__bad_interrupt>
     13e:	00 00       	nop
     140:	29 c5       	rjmp	.+2642   	; 0xb94 <__bad_interrupt>
     142:	00 00       	nop
     144:	27 c5       	rjmp	.+2638   	; 0xb94 <__bad_interrupt>
     146:	00 00       	nop
     148:	25 c5       	rjmp	.+2634   	; 0xb94 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	23 c5       	rjmp	.+2630   	; 0xb94 <__bad_interrupt>
     14e:	00 00       	nop
     150:	21 c5       	rjmp	.+2626   	; 0xb94 <__bad_interrupt>
     152:	00 00       	nop
     154:	1f c5       	rjmp	.+2622   	; 0xb94 <__bad_interrupt>
     156:	00 00       	nop
     158:	1d c5       	rjmp	.+2618   	; 0xb94 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	1b c5       	rjmp	.+2614   	; 0xb94 <__bad_interrupt>
     15e:	00 00       	nop
     160:	19 c5       	rjmp	.+2610   	; 0xb94 <__bad_interrupt>
     162:	00 00       	nop
     164:	17 c5       	rjmp	.+2606   	; 0xb94 <__bad_interrupt>
     166:	00 00       	nop
     168:	15 c5       	rjmp	.+2602   	; 0xb94 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	13 c5       	rjmp	.+2598   	; 0xb94 <__bad_interrupt>
     16e:	00 00       	nop
     170:	11 c5       	rjmp	.+2594   	; 0xb94 <__bad_interrupt>
     172:	00 00       	nop
     174:	0f c5       	rjmp	.+2590   	; 0xb94 <__bad_interrupt>
     176:	00 00       	nop
     178:	0d c5       	rjmp	.+2586   	; 0xb94 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	0b c5       	rjmp	.+2582   	; 0xb94 <__bad_interrupt>
     17e:	00 00       	nop
     180:	09 c5       	rjmp	.+2578   	; 0xb94 <__bad_interrupt>
     182:	00 00       	nop
     184:	07 c5       	rjmp	.+2574   	; 0xb94 <__bad_interrupt>
     186:	00 00       	nop
     188:	05 c5       	rjmp	.+2570   	; 0xb94 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	03 c5       	rjmp	.+2566   	; 0xb94 <__bad_interrupt>
     18e:	00 00       	nop
     190:	01 c5       	rjmp	.+2562   	; 0xb94 <__bad_interrupt>
     192:	00 00       	nop
     194:	ff c4       	rjmp	.+2558   	; 0xb94 <__bad_interrupt>
     196:	00 00       	nop
     198:	fd c4       	rjmp	.+2554   	; 0xb94 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	fb c4       	rjmp	.+2550   	; 0xb94 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	f9 c4       	rjmp	.+2546   	; 0xb94 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	f7 c4       	rjmp	.+2542   	; 0xb94 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	f5 c4       	rjmp	.+2538   	; 0xb94 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	f3 c4       	rjmp	.+2534   	; 0xb94 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	f1 c4       	rjmp	.+2530   	; 0xb94 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	ef c4       	rjmp	.+2526   	; 0xb94 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	ed c4       	rjmp	.+2522   	; 0xb94 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	eb c4       	rjmp	.+2518   	; 0xb94 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	e9 c4       	rjmp	.+2514   	; 0xb94 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	e7 c4       	rjmp	.+2510   	; 0xb94 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	e5 c4       	rjmp	.+2506   	; 0xb94 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	e3 c4       	rjmp	.+2502   	; 0xb94 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	e1 c4       	rjmp	.+2498   	; 0xb94 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	df c4       	rjmp	.+2494   	; 0xb94 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	dd c4       	rjmp	.+2490   	; 0xb94 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	db c4       	rjmp	.+2486   	; 0xb94 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	d9 c4       	rjmp	.+2482   	; 0xb94 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	d7 c4       	rjmp	.+2478   	; 0xb94 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	d5 c4       	rjmp	.+2474   	; 0xb94 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	d3 c4       	rjmp	.+2470   	; 0xb94 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	d1 c4       	rjmp	.+2466   	; 0xb94 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 8e 2e 	jmp	0x5d1c	; 0x5d1c <__vector_125>
     1f8:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__vector_126>
     1fc:	7e 29       	or	r23, r14
     1fe:	81 29       	or	r24, r1
     200:	84 29       	or	r24, r4
     202:	87 29       	or	r24, r7
     204:	8a 29       	or	r24, r10
     206:	8d 29       	or	r24, r13
     208:	90 29       	or	r25, r0

0000020a <__trampolines_end>:
     20a:	0d 0a       	sbc	r0, r29
	...

0000020d <__c.5810>:
     20d:	41 54 42 4c 45 44 4f 46 46 20 28 65 29 20 42 6c     ATBLEDOFF (e) Bl
     21d:	75 65 20 4c 45 44 20 4f 66 66 0d 0a 00              ue LED Off...

0000022a <__c.5808>:
     22a:	41 54 42 4c 45 44 4f 4e 20 28 65 29 20 42 6c 75     ATBLEDON (e) Blu
     23a:	65 20 4c 45 44 20 4f 6e 0d 0a 00                    e LED On...

00000245 <__c.5806>:
     245:	41 54 47 4c 45 44 4f 46 46 20 28 65 29 20 47 72     ATGLEDOFF (e) Gr
     255:	65 65 6e 20 4c 45 44 20 4f 66 66 0d 0a 00           een LED Off...

00000263 <__c.5804>:
     263:	41 54 47 4c 45 44 4f 4e 20 28 65 29 20 47 72 65     ATGLEDON (e) Gre
     273:	65 6e 20 4c 45 44 20 4f 6e 0d 0a 00                 en LED On...

0000027f <__c.5802>:
     27f:	41 54 52 4c 45 44 4f 46 46 20 28 65 29 20 52 65     ATRLEDOFF (e) Re
     28f:	64 20 4c 65 64 20 4f 66 66 0d 0a 00                 d Led Off...

0000029b <__c.5800>:
     29b:	41 54 52 4c 45 44 4f 4e 20 28 65 29 20 52 65 64     ATRLEDON (e) Red
     2ab:	20 4c 65 64 20 4f 6e 0d 0a 00                        Led On...

000002b5 <__c.5798>:
     2b5:	41 54 42 55 5a 5a 45 52 4f 46 46 20 28 65 29 20     ATBUZZEROFF (e) 
     2c5:	42 75 7a 7a 65 72 20 4f 66 66 0d 0a 00              Buzzer Off...

000002d2 <__c.5796>:
     2d2:	41 54 42 55 5a 5a 45 52 4f 4e 20 28 65 29 20 42     ATBUZZERON (e) B
     2e2:	75 7a 7a 65 72 20 4f 6e 0d 0a 00                    uzzer On...

000002ed <__c.5794>:
     2ed:	41 54 46 41 4e 4f 46 46 20 28 65 29 20 46 61 6e     ATFANOFF (e) Fan
     2fd:	20 4f 66 66 0d 0a 00                                 Off...

00000304 <__c.5792>:
     304:	41 54 46 41 4e 4f 4e 20 28 65 29 20 46 61 6e 20     ATFANON (e) Fan 
     314:	4f 6e 0d 0a 00                                      On...

00000319 <__c.5790>:
     319:	41 54 42 4f 54 54 4f 4d 48 45 41 54 4f 46 46 20     ATBOTTOMHEATOFF 
     329:	28 65 29 20 42 6f 74 74 6f 6d 20 48 65 61 74 65     (e) Bottom Heate
     339:	72 20 4f 66 66 0d 0a 00                             r Off...

00000341 <__c.5788>:
     341:	41 54 42 4f 54 54 4f 4d 48 45 41 54 4f 4e 20 28     ATBOTTOMHEATON (
     351:	65 29 20 42 6f 74 74 6f 6d 20 48 65 61 74 65 72     e) Bottom Heater
     361:	20 4f 6e 0d 0a 00                                    On...

00000367 <__c.5786>:
     367:	41 54 54 4f 50 48 45 41 54 4f 46 46 20 28 65 29     ATTOPHEATOFF (e)
     377:	20 54 6f 70 20 48 65 61 74 65 72 20 4f 66 66 0d      Top Heater Off.
     387:	0a 00                                               ..

00000389 <__c.5784>:
     389:	41 54 54 4f 50 48 45 41 54 4f 4e 20 28 65 29 20     ATTOPHEATON (e) 
     399:	54 6f 70 20 48 65 61 74 65 72 20 4f 6e 0d 0a 00     Top Heater On...

000003a9 <__c.5782>:
     3a9:	2a 54 45 53 54 20 4d 4f 44 45 20 43 6f 6d 6d 61     *TEST MODE Comma
     3b9:	6e 64 73 2a 0d 0a 00                                nds*...

000003c0 <__c.5780>:
     3c0:	0d 0a 00                                            ...

000003c3 <__c.5778>:
     3c3:	41 54 53 45 4c 45 43 54 45 44 50 52 4f 46 49 4c     ATSELECTEDPROFIL
     3d3:	45 20 28 3f 29 20 47 65 74 20 69 6e 64 65 78 20     E (?) Get index 
     3e3:	6f 66 20 63 75 72 72 65 6e 74 20 70 72 6f 66 69     of current profi
     3f3:	6c 65 0d 0a 00                                      le...

000003f8 <__c.5776>:
     3f8:	41 54 53 54 4f 50 20 28 65 29 20 53 74 6f 70 20     ATSTOP (e) Stop 
     408:	72 65 66 6c 6f 77 0d 0a 00                          reflow...

00000411 <__c.5774>:
     411:	41 54 53 54 41 52 54 20 28 65 29 20 53 74 61 72     ATSTART (e) Star
     421:	74 20 72 65 66 6c 6f 77 0d 0a 00                    t reflow...

0000042c <__c.5772>:
     42c:	2a 52 45 46 4c 4f 57 20 4d 4f 44 45 20 43 6f 6d     *REFLOW MODE Com
     43c:	6d 61 6e 64 73 2a 0d 0a 00                          mands*...

00000445 <__c.5770>:
     445:	0d 0a 00                                            ...

00000448 <__c.5768>:
     448:	41 54 44 45 4c 45 54 45 50 52 4f 46 49 4c 45 20     ATDELETEPROFILE 
     458:	28 3d 29 20 52 65 71 75 69 72 65 73 20 70 72 6f     (=) Requires pro
     468:	66 69 6c 65 20 69 6e 64 65 78 2e 20 43 6c 65 61     file index. Clea
     478:	72 73 20 70 72 6f 66 69 6c 65 0d 0a 00              rs profile...

00000485 <__c.5766>:
     485:	41 54 4d 41 58 50 52 4f 46 49 4c 45 53 49 5a 45     ATMAXPROFILESIZE
     495:	20 28 3f 29 20 47 65 74 20 6d 61 78 20 6e 75 6d      (?) Get max num
     4a5:	62 65 72 20 6f 66 20 65 6c 65 6d 65 6e 74 73 20     ber of elements 
     4b5:	28 3c 74 69 6d 65 3e 2c 3c 74 65 6d 70 3e 29 20     (<time>,<temp>) 
     4c5:	70 65 72 20 70 72 6f 66 69 6c 65 0d 0a 00           per profile...

000004d3 <__c.5764>:
     4d3:	09 54 65 6d 70 20 69 73 20 61 6c 77 61 79 73 20     .Temp is always 
     4e3:	69 6e 20 43 20 61 6e 64 20 69 73 20 6d 75 6c 74     in C and is mult
     4f3:	69 70 6c 69 65 64 20 62 79 20 32 0d 0a 00           iplied by 2...

00000501 <__c.5762>:
     501:	41 54 50 52 4f 46 49 4c 45 20 28 3f 2c 3d 29 0d     ATPROFILE (?,=).
     511:	0a 09 3f 20 52 65 71 75 69 72 65 73 20 70 72 6f     ..? Requires pro
     521:	66 69 6c 65 20 69 6e 64 65 78 2c 20 67 65 74 73     file index, gets
     531:	20 70 72 6f 66 69 6c 65 20 73 65 74 74 69 6e 67      profile setting
     541:	73 0d 0a 09 3d 20 4e 65 77 20 70 72 6f 66 69 6c     s...= New profil
     551:	65 2e 0d 0a 09 3c 49 6e 64 65 78 3e 2c 3c 4e 61     e....<Index>,<Na
     561:	6d 65 3e 2c 3c 74 69 6d 65 3e 2c 3c 74 65 6d 70     me>,<time>,<temp
     571:	3e 2c 3c 74 69 6d 65 3e 2c 3c 74 65 6d 70 3e 2c     >,<time>,<temp>,
     581:	2e 2e 2e 0d 0a 00                                   ......

00000587 <__c.5760>:
     587:	41 54 50 52 4f 46 49 4c 45 4e 41 4d 45 53 20 28     ATPROFILENAMES (
     597:	3f 29 20 47 65 74 20 61 6c 6c 20 70 72 6f 66 69     ?) Get all profi
     5a7:	6c 65 20 6e 61 6d 65 73 0d 0a 00                    le names...

000005b2 <__c.5758>:
     5b2:	41 54 4d 41 58 50 52 4f 46 49 4c 45 53 20 28 3f     ATMAXPROFILES (?
     5c2:	29 20 4d 61 78 20 6e 75 6d 62 65 72 20 6f 66 20     ) Max number of 
     5d2:	70 72 6f 66 69 6c 65 73 0d 0a 09 50 72 6f 66 69     profiles...Profi
     5e2:	6c 65 20 30 20 69 73 20 61 6c 77 61 79 73 20 64     le 0 is always d
     5f2:	65 66 61 75 6c 74 20 61 6e 64 20 63 61 6e 6e 6f     efault and canno
     602:	74 20 62 65 20 63 68 61 6e 67 65 64 0d 0a 00        t be changed...

00000611 <__c.5756>:
     611:	41 54 4d 45 4e 55 53 45 4c 45 43 54 20 28 65 29     ATMENUSELECT (e)
     621:	20 53 65 6c 65 63 74 20 63 75 72 72 65 6e 74 20      Select current 
     631:	6d 65 6e 75 20 69 74 65 6d 20 68 69 67 68 6c 69     menu item highli
     641:	67 68 74 65 64 0d 0a 00                             ghted...

00000649 <__c.5754>:
     649:	41 54 4d 45 4e 55 44 4f 57 4e 20 28 65 29 20 4d     ATMENUDOWN (e) M
     659:	6f 76 65 20 73 65 6c 65 63 74 69 6f 6e 20 64 6f     ove selection do
     669:	77 6e 0d 0a 00                                      wn...

0000066e <__c.5752>:
     66e:	41 54 4d 45 4e 55 55 50 20 28 65 29 20 4d 6f 76     ATMENUUP (e) Mov
     67e:	65 20 73 65 6c 65 63 74 69 6f 6e 20 75 70 0d 0a     e selection up..
	...

0000068f <__c.5750>:
     68f:	2a 4d 45 4e 55 20 4d 4f 44 45 20 43 6f 6d 6d 61     *MENU MODE Comma
     69f:	6e 64 73 2a 0d 0a 00                                nds*...

000006a6 <__c.5748>:
     6a6:	0d 0a 00                                            ...

000006a9 <__c.5746>:
     6a9:	41 54 4c 4f 47 47 49 4e 47 4f 46 46 20 28 65 29     ATLOGGINGOFF (e)
     6b9:	20 44 69 73 61 62 6c 65 20 6c 6f 67 67 69 6e 67      Disable logging
     6c9:	0d 0a 00                                            ...

000006cc <__c.5744>:
     6cc:	41 54 4c 4f 47 47 49 4e 47 4f 4e 20 28 65 29 20     ATLOGGINGON (e) 
     6dc:	45 6e 61 62 6c 65 20 6c 6f 67 67 69 6e 67 0d 0a     Enable logging..
     6ec:	09 52 65 74 75 72 6e 73 20 3c 74 69 6d 65 3e 2c     .Returns <time>,
     6fc:	3c 74 65 6d 70 3e 3c 6e 65 77 6c 69 6e 65 3e 20     <temp><newline> 
     70c:	69 6e 20 63 75 72 72 65 6e 74 20 74 65 6d 70 20     in current temp 
     71c:	6d 6f 64 65 0d 0a 00                                mode...

00000723 <__c.5742>:
     723:	41 54 42 55 5a 5a 45 52 4f 4e 54 49 4d 45 20 28     ATBUZZERONTIME (
     733:	3f 2c 3d 29 0d 0a 09 3f 20 52 65 74 75 72 6e 73     ?,=)...? Returns
     743:	20 6f 6e 20 74 69 6d 65 20 69 6e 20 6d 69 6c 6c      on time in mill
     753:	69 73 65 63 6f 6e 64 73 2e 20 30 20 6d 65 61 6e     iseconds. 0 mean
     763:	73 20 6e 65 76 65 72 20 6f 6e 2e 0d 0a 09 3d 20     s never on....= 
     773:	53 65 74 20 6f 6e 20 74 69 6d 65 20 69 6e 20 6d     Set on time in m
     783:	69 6c 6c 69 73 65 63 6f 6e 64 73 0d 0a 00           illiseconds...

00000791 <__c.5740>:
     791:	09 21 3c 72 20 6c 65 64 3e 2c 21 3c 67 20 6c 65     .!<r led>,!<g le
     7a1:	64 3e 2c 21 3c 62 20 6c 65 64 3e 2c 0d 0a 09 3c     d>,!<b led>,...<
     7b1:	62 61 63 6b 6c 69 67 68 74 3e 2c 3c 74 6f 70 20     backlight>,<top 
     7c1:	68 65 61 74 3e 2c 3c 62 6f 74 74 6f 6d 20 68 65     heat>,<bottom he
     7d1:	61 74 3e 2c 3c 66 61 6e 3e 2c 3c 62 75 7a 7a 65     at>,<fan>,<buzze
     7e1:	72 3e 0d 0a 00                                      r>...

000007e6 <__c.5738>:
     7e6:	41 54 41 4c 4c 53 54 41 54 45 20 28 3f 29 20 47     ATALLSTATE (?) G
     7f6:	65 74 20 66 75 6c 6c 20 6f 76 65 6e 20 73 74 61     et full oven sta
     806:	74 65 20 69 6e 66 6f 20 28 74 65 6d 70 20 69 6e     te info (temp in
     816:	20 63 75 72 72 65 6e 74 20 74 65 6d 70 20 6d 6f      current temp mo
     826:	64 65 29 0d 0a 09 3c 50 72 6f 66 69 6c 65 20 23     de)...<Profile #
     836:	3e 2c 3c 4f 76 65 6e 20 4d 6f 64 65 3e 2c 3c 4f     >,<Oven Mode>,<O
     846:	76 65 6e 20 53 74 61 74 65 3e 2c 3c 54 61 72 67     ven State>,<Targ
     856:	65 74 20 54 69 6d 65 3e 2c 3c 41 63 74 75 61 6c     et Time>,<Actual
     866:	20 54 69 6d 65 3e 2c 0d 0a 09 3c 54 61 72 67 65      Time>,...<Targe
     876:	74 20 54 65 6d 70 3e 2c 3c 41 63 74 75 61 6c 20     t Temp>,<Actual 
     886:	54 65 6d 70 3e 2c 0d 0a 00                          Temp>,...

0000088f <__c.5736>:
     88f:	41 54 4f 56 45 4e 54 45 4d 50 20 28 3f 29 20 47     ATOVENTEMP (?) G
     89f:	65 74 20 63 75 72 72 65 6e 74 20 6f 76 65 6e 20     et current oven 
     8af:	74 65 6d 70 20 69 6e 20 63 75 72 72 65 6e 74 20     temp in current 
     8bf:	74 65 6d 70 20 6d 6f 64 65 0d 0a 00                 temp mode...

000008cb <__c.5734>:
     8cb:	41 54 4f 56 45 4e 53 54 41 54 45 20 28 3f 29 20     ATOVENSTATE (?) 
     8db:	47 65 74 20 6f 76 65 6e 20 73 74 61 74 65 20 28     Get oven state (
     8eb:	52 65 66 6c 6f 77 2c 20 4d 65 6e 75 2c 20 54 65     Reflow, Menu, Te
     8fb:	73 74 29 0d 0a 00                                   st)...

00000901 <__c.5732>:
     901:	41 54 4f 56 45 4e 4d 4f 44 45 20 28 3f 29 20 47     ATOVENMODE (?) G
     911:	65 74 20 6f 76 65 6e 20 6d 6f 64 65 20 28 53 74     et oven mode (St
     921:	6f 70 70 65 64 2c 20 52 75 6e 6e 69 6e 67 2c 20     opped, Running, 
     931:	48 65 61 74 69 6e 67 29 0d 0a 00                    Heating)...

0000093c <__c.5730>:
     93c:	41 54 42 41 43 4b 4c 49 47 48 54 4f 4e 54 49 4d     ATBACKLIGHTONTIM
     94c:	45 20 28 3f 2c 3d 29 0d 0a 09 3f 20 47 65 74 20     E (?,=)...? Get 
     95c:	74 69 6d 65 20 62 61 63 6b 6c 69 67 68 74 20 73     time backlight s
     96c:	74 61 79 73 20 6f 6e 20 28 69 6e 20 73 65 63 6f     tays on (in seco
     97c:	6e 64 73 29 20 30 20 3d 20 69 6e 66 69 6e 69 74     nds) 0 = infinit
     98c:	65 0d 0a 09 3d 20 53 65 74 20 62 61 63 6b 6c 69     e...= Set backli
     99c:	67 68 74 20 6f 6e 20 74 69 6d 65 20 69 6e 20 73     ght on time in s
     9ac:	65 63 6f 6e 64 73 0d 0a 00                          econds...

000009b5 <__c.5728>:
     9b5:	41 54 54 45 4d 50 4d 4f 44 45 43 20 28 65 29 20     ATTEMPMODEC (e) 
     9c5:	53 65 74 20 74 65 6d 70 20 6d 6f 64 65 20 74 6f     Set temp mode to
     9d5:	20 43 65 6c 63 69 75 73 0d 0a 00                     Celcius...

000009e0 <__c.5726>:
     9e0:	41 54 54 45 4d 50 4d 4f 44 45 46 20 28 65 29 20     ATTEMPMODEF (e) 
     9f0:	53 65 74 20 74 65 6d 70 20 6d 6f 64 65 20 74 6f     Set temp mode to
     a00:	20 66 61 68 72 65 6e 68 65 69 74 0d 0a 00            fahrenheit...

00000a0e <__c.5724>:
     a0e:	41 54 54 45 4d 50 4d 4f 44 45 20 28 3f 29 20 52     ATTEMPMODE (?) R
     a1e:	65 74 75 72 6e 20 74 65 6d 70 20 6d 6f 64 65 20     eturn temp mode 
     a2e:	28 43 20 6f 72 20 46 29 0d 0a 00                    (C or F)...

00000a39 <__c.5722>:
     a39:	41 54 42 41 43 4b 4c 49 47 48 54 4f 46 46 20 28     ATBACKLIGHTOFF (
     a49:	65 29 20 54 75 72 6e 20 42 61 63 6b 6c 69 67 68     e) Turn Backligh
     a59:	74 20 4f 66 66 0d 0a 00                             t Off...

00000a61 <__c.5720>:
     a61:	41 54 42 41 43 4b 4c 49 47 48 54 4f 4e 20 28 65     ATBACKLIGHTON (e
     a71:	29 20 54 75 72 6e 20 42 61 63 6b 6c 69 67 68 74     ) Turn Backlight
     a81:	20 4f 6e 20 28 6e 6f 20 74 69 6d 65 6f 75 74 29      On (no timeout)
     a91:	0d 0a 00                                            ...

00000a94 <__c.5718>:
     a94:	41 54 52 45 46 4c 4f 57 4d 4f 44 45 20 28 65 29     ATREFLOWMODE (e)
     aa4:	20 45 6e 74 65 72 20 52 65 66 6c 6f 77 20 4d 6f      Enter Reflow Mo
     ab4:	64 65 0d 0a 00                                      de...

00000ab9 <__c.5716>:
     ab9:	41 54 54 45 53 54 4d 4f 44 45 20 28 65 29 20 45     ATTESTMODE (e) E
     ac9:	6e 74 65 72 20 54 65 73 74 20 4d 6f 64 65 0d 0a     nter Test Mode..
	...

00000ada <__c.5714>:
     ada:	41 54 4d 45 4e 55 4d 4f 44 45 20 28 65 29 20 45     ATMENUMODE (e) E
     aea:	6e 74 65 72 20 4d 65 6e 75 20 4d 6f 64 65 0d 0a     nter Menu Mode..
	...

00000afb <__c.5712>:
     afb:	2a 41 4c 4c 20 4d 4f 44 45 53 20 43 6f 6d 6d 61     *ALL MODES Comma
     b0b:	6e 64 73 2a 0d 0a 00                                nds*...

00000b12 <__c.5710>:
     b12:	0d 0a 00                                            ...

00000b15 <__c.5708>:
     b15:	0d 0a 0d 0a 2a 2a 41 54 20 43 4f 4d 4d 41 4e 44     ....**AT COMMAND
     b25:	53 20 65 3a 20 65 78 65 63 75 74 65 2c 20 3f 3a     S e: execute, ?:
     b35:	20 71 75 65 72 79 2c 20 3d 3a 20 73 65 74 2a 2a      query, =: set**
     b45:	0d 0a 00                                            ...

00000b48 <__ctors_end>:
     b48:	11 24       	eor	r1, r1
     b4a:	1f be       	out	0x3f, r1	; 63
     b4c:	cf ef       	ldi	r28, 0xFF	; 255
     b4e:	cd bf       	out	0x3d, r28	; 61
     b50:	df e3       	ldi	r29, 0x3F	; 63
     b52:	de bf       	out	0x3e, r29	; 62
     b54:	00 e0       	ldi	r16, 0x00	; 0
     b56:	0c bf       	out	0x3c, r16	; 60
     b58:	18 be       	out	0x38, r1	; 56
     b5a:	19 be       	out	0x39, r1	; 57
     b5c:	1a be       	out	0x3a, r1	; 58
     b5e:	1b be       	out	0x3b, r1	; 59

00000b60 <__do_copy_data>:
     b60:	14 e2       	ldi	r17, 0x24	; 36
     b62:	a0 e0       	ldi	r26, 0x00	; 0
     b64:	b0 e2       	ldi	r27, 0x20	; 32
     b66:	ee eb       	ldi	r30, 0xBE	; 190
     b68:	f0 e7       	ldi	r31, 0x70	; 112
     b6a:	00 e0       	ldi	r16, 0x00	; 0
     b6c:	0b bf       	out	0x3b, r16	; 59
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <__do_copy_data+0x14>
     b70:	07 90       	elpm	r0, Z+
     b72:	0d 92       	st	X+, r0
     b74:	ae 3a       	cpi	r26, 0xAE	; 174
     b76:	b1 07       	cpc	r27, r17
     b78:	d9 f7       	brne	.-10     	; 0xb70 <__do_copy_data+0x10>
     b7a:	1b be       	out	0x3b, r1	; 59

00000b7c <__do_clear_bss>:
     b7c:	23 e3       	ldi	r18, 0x33	; 51
     b7e:	ae ea       	ldi	r26, 0xAE	; 174
     b80:	b4 e2       	ldi	r27, 0x24	; 36
     b82:	01 c0       	rjmp	.+2      	; 0xb86 <.do_clear_bss_start>

00000b84 <.do_clear_bss_loop>:
     b84:	1d 92       	st	X+, r1

00000b86 <.do_clear_bss_start>:
     b86:	a7 36       	cpi	r26, 0x67	; 103
     b88:	b2 07       	cpc	r27, r18
     b8a:	e1 f7       	brne	.-8      	; 0xb84 <.do_clear_bss_loop>
     b8c:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <main>
     b90:	0c 94 5d 38 	jmp	0x70ba	; 0x70ba <_exit>

00000b94 <__bad_interrupt>:
     b94:	35 ca       	rjmp	.-2966   	; 0x0 <__vectors>

00000b96 <SP_ReadByte>:

.section .text
.global SP_ReadByte

SP_ReadByte:
	in	r19, RAMPZ      ; Save RAMPZ.
     b96:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24      ; Load RAMPZ with the MSB of the address.
     b98:	8b bf       	out	0x3b, r24	; 59
	movw	ZL, r22         ; Move the low bytes to the Z pointer
     b9a:	fb 01       	movw	r30, r22
	elpm	r24, Z          ; Extended load byte from address pointed to by Z.
     b9c:	86 91       	elpm	r24, Z
	out	RAMPZ, r19      ; Restore RAMPZ register.
     b9e:	3b bf       	out	0x3b, r19	; 59
	ret
     ba0:	08 95       	ret

00000ba2 <SP_ReadWord>:

.section .text
.global SP_ReadWord

SP_ReadWord:
	in	r19, RAMPZ      ; Save RAMPZ.
     ba2:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24      ; Load RAMPZ with the MSB of the address.
     ba4:	8b bf       	out	0x3b, r24	; 59
	movw	ZL, r22         ; Move the low bytes to the Z pointer
     ba6:	fb 01       	movw	r30, r22
	elpm	r24, Z+         ; Extended load byte from address pointed to by Z.
     ba8:	87 91       	elpm	r24, Z+
	elpm	r25, Z          ; Extended load byte from address pointed to by Z.
     baa:	96 91       	elpm	r25, Z
	out	RAMPZ, r19      ; Restore RAMPZ register.
     bac:	3b bf       	out	0x3b, r19	; 59
	ret
     bae:	08 95       	ret

00000bb0 <SP_ReadCalibrationByte>:

.section .text
.global SP_ReadCalibrationByte	

SP_ReadCalibrationByte:
	ldi	r20, NVM_CMD_READ_CALIB_ROW_gc    ; Prepare NVM command in R20.
     bb0:	42 e0       	ldi	r20, 0x02	; 2
	rjmp	SP_CommonLPM                      ; Jump to common LPM code.
     bb2:	7c c0       	rjmp	.+248    	; 0xcac <SP_CommonLPM>

00000bb4 <SP_ReadUserSignatureByte>:

.section .text	
.global SP_ReadUserSignatureByte

SP_ReadUserSignatureByte:
	ldi	r20, NVM_CMD_READ_USER_SIG_ROW_gc  ; Prepare NVM command in R20.
     bb4:	41 e0       	ldi	r20, 0x01	; 1
	rjmp	SP_CommonLPM                       ; Jump to common LPM code.
     bb6:	7a c0       	rjmp	.+244    	; 0xcac <SP_CommonLPM>

00000bb8 <SP_ReadFuseByte>:

.section .text	
.global SP_ReadFuseByte

SP_ReadFuseByte:
	sts	NVM_ADDR0, r24              ; Load fuse byte index into NVM Address Register 0.
     bb8:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__TEXT_REGION_LENGTH__+0x7001c0>
	clr	r24                         ; Prepare a zero.
     bbc:	88 27       	eor	r24, r24
	sts	NVM_ADDR1, r24              ; Load zero into NVM Address Register 1.
     bbe:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <__TEXT_REGION_LENGTH__+0x7001c1>
	sts	NVM_ADDR2, r24              ; Load zero into NVM Address Register 2.
     bc2:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <__TEXT_REGION_LENGTH__+0x7001c2>
	ldi	r20, NVM_CMD_READ_FUSES_gc  ; Prepare NVM command in R20.
     bc6:	47 e0       	ldi	r20, 0x07	; 7
	rcall	SP_CommonCMD                ; Jump to common NVM Action code.
     bc8:	61 d0       	rcall	.+194    	; 0xc8c <SP_CommonCMD>
	movw	r24, r22                    ; Move low byte to 1 byte return address.
     bca:	cb 01       	movw	r24, r22
	ret
     bcc:	08 95       	ret

00000bce <SP_WriteLockBits>:

.section .text	
.global SP_WriteLockBits

SP_WriteLockBits:
	sts	NVM_DATA0, r24                  ; Load lock bits into NVM Data Register 0.
     bce:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <__TEXT_REGION_LENGTH__+0x7001c4>
	ldi	r20, NVM_CMD_WRITE_LOCK_BITS_gc ; Prepare NVM command in R20.
     bd2:	48 e0       	ldi	r20, 0x08	; 8
	rjmp	SP_CommonCMD                    ; Jump to common NVM Action code.
     bd4:	5b c0       	rjmp	.+182    	; 0xc8c <SP_CommonCMD>

00000bd6 <SP_ReadLockBits>:

.section .text		
.global SP_ReadLockBits

SP_ReadLockBits:
	lds	r24, NVM_LOCKBITS       ; Read IO-mapped lock bits.
     bd6:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__TEXT_REGION_LENGTH__+0x7001d0>
	ret
     bda:	08 95       	ret

00000bdc <SP_EraseUserSignatureRow>:

.section .text
.global SP_EraseUserSignatureRow

SP_EraseUserSignatureRow:
	in	r19, RAMPZ                         ; Save RAMPZ, which is restored in SP_CommonSPM.
     bdc:	3b b7       	in	r19, 0x3b	; 59
	ldi	r20, NVM_CMD_ERASE_USER_SIG_ROW_gc ; Prepare NVM command in R20.
     bde:	48 e1       	ldi	r20, 0x18	; 24
	jmp 	SP_CommonSPM                       ; Jump to common SPM code.
     be0:	0d 94 17 00 	jmp	0x2002e	; 0x2002e <SP_CommonSPM>

00000be4 <SP_WriteUserSignatureRow>:

.section .text
.global SP_WriteUserSignatureRow

SP_WriteUserSignatureRow:
	in	r19, RAMPZ                          ; Save RAMPZ, which is restored in SP_CommonSPM.
     be4:	3b b7       	in	r19, 0x3b	; 59
	ldi	r20, NVM_CMD_WRITE_USER_SIG_ROW_gc  ; Prepare NVM command in R20.
     be6:	4a e1       	ldi	r20, 0x1A	; 26
	jmp	SP_CommonSPM                        ; Jump to common SPM code.
     be8:	0d 94 17 00 	jmp	0x2002e	; 0x2002e <SP_CommonSPM>

00000bec <SP_EraseApplicationSection>:

.section .text
.global SP_EraseApplicationSection

SP_EraseApplicationSection:
	in	r19, RAMPZ                 ; Save RAMPZ, which is restored in SP_CommonSPM.
     bec:	3b b7       	in	r19, 0x3b	; 59
	ldi	r20, NVM_CMD_ERASE_APP_gc  ; Prepare NVM command in R20.
     bee:	40 e2       	ldi	r20, 0x20	; 32
	jmp	SP_CommonSPM               ; Jump to common SPM code.
     bf0:	0d 94 17 00 	jmp	0x2002e	; 0x2002e <SP_CommonSPM>

00000bf4 <SP_EraseApplicationPage>:

.section .text	
.global SP_EraseApplicationPage

SP_EraseApplicationPage:
	in	r19, RAMPZ                      ; Save RAMPZ, which is restored in SP_CommonSPM.
     bf4:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                      ; Load RAMPZ with the MSB of the address.
     bf6:	8b bf       	out	0x3b, r24	; 59
	movw    r24, r22                        ; Move low bytes for ZH:ZL to R25:R24
     bf8:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_ERASE_APP_PAGE_gc  ; Prepare NVM command in R20.
     bfa:	42 e2       	ldi	r20, 0x22	; 34
	jmp	SP_CommonSPM                    ; Jump to common SPM code.
     bfc:	0d 94 17 00 	jmp	0x2002e	; 0x2002e <SP_CommonSPM>

00000c00 <SP_ReadFlashPage>:
.section .text		
.global SP_ReadFlashPage

SP_ReadFlashPage:

	in	r19, RAMPZ						; Save RAMPZ during assembly.
     c00:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r22						; Load RAMPZ with MSB of address
     c02:	6b bf       	out	0x3b, r22	; 59
	movw    ZL, r20                     ; Load Z with Flash address.
     c04:	fa 01       	movw	r30, r20

	out	RAMPX, r1						; Load RAMPX with data pointer
     c06:	19 be       	out	0x39, r1	; 57
	movw	XL, r24						; Load X with data buffer address.
     c08:	dc 01       	movw	r26, r24

	ldi	r20, NVM_CMD_NO_OPERATION_gc	; Prepare NVM command code in R20.
     c0a:	40 e0       	ldi	r20, 0x00	; 0
	sts	NVM_CMD, r20					; Set NVM command to No Operation so that LPM reads Flash.
     c0c:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

	ldi	r21, FLASH_PAGE_SIZE / 2		; Load R21 with byte count.
     c10:	50 e8       	ldi	r21, 0x80	; 128

00000c12 <SP_ReadFlashPage_1>:

SP_ReadFlashPage_1:
	elpm	r24, Z+						; Load Flash bytes into R18:r19
     c12:	87 91       	elpm	r24, Z+
	elpm	r25, Z+
     c14:	97 91       	elpm	r25, Z+
	st	X+, r24                         ; Write bytes to buffer.
     c16:	8d 93       	st	X+, r24
	st	X+, r25
     c18:	9d 93       	st	X+, r25

	dec	r21                             ; Decrement word count.
     c1a:	5a 95       	dec	r21

	brne	SP_ReadFlashPage_1          ; Repeat until byte count is zero.
     c1c:	d1 f7       	brne	.-12     	; 0xc12 <SP_ReadFlashPage_1>

	out	RAMPZ, r19
     c1e:	3b bf       	out	0x3b, r19	; 59
	ret
     c20:	08 95       	ret

00000c22 <SP_WriteApplicationPage>:

.section .text		
.global SP_WriteApplicationPage

SP_WriteApplicationPage:
	in	r19, RAMPZ                       ; Save RAMPZ, which is restored in SP_CommonSPM.
     c22:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                       ; Load RAMPZ with the MSB of the address.
     c24:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                         ; Move low bytes of address to ZH:ZL from R23:R22
     c26:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_WRITE_APP_PAGE_gc   ; Prepare NVM command in R20.
     c28:	44 e2       	ldi	r20, 0x24	; 36
	jmp	SP_CommonSPM                     ; Jump to common SPM code.
     c2a:	0d 94 17 00 	jmp	0x2002e	; 0x2002e <SP_CommonSPM>

00000c2e <SP_EraseWriteApplicationPage>:

.section .text
.global SP_EraseWriteApplicationPage

SP_EraseWriteApplicationPage:
	in	r19, RAMPZ                            ; Save RAMPZ, which is restored in SP_CommonSPM.
     c2e:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                            ; Load RAMPZ with the MSB of the address.
     c30:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                              ; Move low bytes of address to ZH:ZL from R23:R22
     c32:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_ERASE_WRITE_APP_PAGE_gc  ; Prepare NVM command in R20.
     c34:	45 e2       	ldi	r20, 0x25	; 37
	jmp	SP_CommonSPM                          ; Jump to common SPM code.
     c36:	0d 94 17 00 	jmp	0x2002e	; 0x2002e <SP_CommonSPM>

00000c3a <SP_EraseFlashBuffer>:

.section .text		
.global SP_EraseFlashBuffer

SP_EraseFlashBuffer:
	in	r19, RAMPZ                          ; Save RAMPZ, which is restored in SP_CommonSPM.
     c3a:	3b b7       	in	r19, 0x3b	; 59
	ldi	r20, NVM_CMD_ERASE_FLASH_BUFFER_gc  ; Prepare NVM command in R20.
     c3c:	46 e2       	ldi	r20, 0x26	; 38
	jmp	SP_CommonSPM                        ; Jump to common SPM code.
     c3e:	0d 94 17 00 	jmp	0x2002e	; 0x2002e <SP_CommonSPM>

00000c42 <SP_EraseBootPage>:

.section .text		
.global SP_EraseBootPage

SP_EraseBootPage:
	in	r19, RAMPZ                         ; Save RAMPZ, which is restored in SP_CommonSPM.
     c42:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                         ; Load RAMPZ with the MSB of the address.
     c44:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                           ; Move low bytes of address to ZH:ZL from R23:R22
     c46:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_ERASE_BOOT_PAGE_gc    ; Prepare NVM command in R20.
     c48:	4a e2       	ldi	r20, 0x2A	; 42
	jmp	SP_CommonSPM                       ; Jump to common SPM code.
     c4a:	0d 94 17 00 	jmp	0x2002e	; 0x2002e <SP_CommonSPM>

00000c4e <SP_WriteBootPage>:

.section .text		
.global SP_WriteBootPage

SP_WriteBootPage:
	in	r19, RAMPZ                       ; Save RAMPZ, which is restored in SP_CommonSPM.
     c4e:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                       ; Load RAMPZ with the MSB of the address.
     c50:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                         ; Move low bytes of address to ZH:ZL from R23:R22
     c52:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_WRITE_BOOT_PAGE_gc  ; Prepare NVM command in R20.
     c54:	4c e2       	ldi	r20, 0x2C	; 44
	jmp	SP_CommonSPM                     ; Jump to common SPM code.
     c56:	0d 94 17 00 	jmp	0x2002e	; 0x2002e <SP_CommonSPM>

00000c5a <SP_EraseWriteBootPage>:

.section .text		
.global SP_EraseWriteBootPage

SP_EraseWriteBootPage:
	in	r19, RAMPZ                             ; Save RAMPZ, which is restored in SP_CommonSPM.
     c5a:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                             ; Load RAMPZ with the MSB of the address.
     c5c:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                               ; Move low bytes of address to ZH:ZL from R23:R22
     c5e:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_ERASE_WRITE_BOOT_PAGE_gc  ; Prepare NVM command in R20.
     c60:	4d e2       	ldi	r20, 0x2D	; 45
	jmp	SP_CommonSPM                           ; Jump to common SPM code.
     c62:	0d 94 17 00 	jmp	0x2002e	; 0x2002e <SP_CommonSPM>

00000c66 <SP_ApplicationCRC>:

.section .text	
.global SP_ApplicationCRC

SP_ApplicationCRC:
	ldi	r20, NVM_CMD_APP_CRC_gc    ; Prepare NVM command in R20.
     c66:	48 e3       	ldi	r20, 0x38	; 56
	rjmp	SP_CommonCMD               ; Jump to common NVM Action code.
     c68:	11 c0       	rjmp	.+34     	; 0xc8c <SP_CommonCMD>

00000c6a <SP_BootCRC>:

.section .text
.global SP_BootCRC

SP_BootCRC:
	ldi	r20, NVM_CMD_BOOT_CRC_gc   ; Prepare NVM command in R20.
     c6a:	49 e3       	ldi	r20, 0x39	; 57
	rjmp	SP_CommonCMD               ; Jump to common NVM Action code.
     c6c:	0f c0       	rjmp	.+30     	; 0xc8c <SP_CommonCMD>

00000c6e <SP_LockSPM>:

.section .text
.global SP_LockSPM

SP_LockSPM:
	ldi	r18, CCP_IOREG_gc     ; Prepare Protect IO-register signature in R18.
     c6e:	28 ed       	ldi	r18, 0xD8	; 216
	sts	CCP, r18              ; Enable IO-register operation (this disables interrupts for 4 cycles).
     c70:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	ldi	r18, NVM_SPMLOCK_bm   ; Prepare bitmask for locking SPM into R18.
     c74:	21 e0       	ldi	r18, 0x01	; 1
	sts	NVM_CTRLB, r18        ; Load bitmask into NVM Control Register B, which locks SPM.
     c76:	20 93 cc 01 	sts	0x01CC, r18	; 0x8001cc <__TEXT_REGION_LENGTH__+0x7001cc>
	ret
     c7a:	08 95       	ret

00000c7c <SP_WaitForSPM>:

.section .text
.global SP_WaitForSPM		

SP_WaitForSPM:
	lds	r18, NVM_STATUS     ; Load the NVM Status register.
     c7c:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
	sbrc	r18, NVM_NVMBUSY_bp ; Check if bit is cleared.
     c80:	27 fd       	sbrc	r18, 7
	rjmp	SP_WaitForSPM       ; Repeat check if bit is not cleared.
     c82:	fc cf       	rjmp	.-8      	; 0xc7c <SP_WaitForSPM>
	clr	r18
     c84:	22 27       	eor	r18, r18
	sts	NVM_CMD, r18        ; Clear up command register to NO_OPERATION.
     c86:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ret
     c8a:	08 95       	ret

00000c8c <SP_CommonCMD>:
; ---

.section .text		

SP_CommonCMD:
	sts	NVM_CMD, r20        ; Load command into NVM Command register.
     c8c:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi	r18, CCP_IOREG_gc   ; Prepare Protect IO-register signature in R18.
     c90:	28 ed       	ldi	r18, 0xD8	; 216
	ldi	r19, NVM_CMDEX_bm   ; Prepare bitmask for setting NVM Command Execute bit into R19.
     c92:	31 e0       	ldi	r19, 0x01	; 1
	sts	CCP, r18            ; Enable IO-register operation (this disables interrupts for 4 cycles).
     c94:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	sts	NVM_CTRLA, r19      ; Load bitmask into NVM Control Register A, which executes the command.
     c98:	30 93 cb 01 	sts	0x01CB, r19	; 0x8001cb <__TEXT_REGION_LENGTH__+0x7001cb>
	lds	r22, NVM_DATA0      ; Load NVM Data Register 0 into R22.
     c9c:	60 91 c4 01 	lds	r22, 0x01C4	; 0x8001c4 <__TEXT_REGION_LENGTH__+0x7001c4>
	lds	r23, NVM_DATA1      ; Load NVM Data Register 1 into R23.
     ca0:	70 91 c5 01 	lds	r23, 0x01C5	; 0x8001c5 <__TEXT_REGION_LENGTH__+0x7001c5>
	lds	r24, NVM_DATA2      ; Load NVM Data Register 2 into R24.
     ca4:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <__TEXT_REGION_LENGTH__+0x7001c6>
	clr	r25                 ; Clear R25 in order to return a clean 32-bit value.
     ca8:	99 27       	eor	r25, r25
	ret
     caa:	08 95       	ret

00000cac <SP_CommonLPM>:
; ---

.section .text		

SP_CommonLPM:
	movw	ZL, r24             ; Load index into Z.
     cac:	fc 01       	movw	r30, r24
	sts	NVM_CMD, r20        ; Load prepared command into NVM Command register.
     cae:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm	r24,Z
     cb2:	84 91       	lpm	r24, Z
	ret
     cb4:	08 95       	ret

00000cb6 <GetProfileInputHanlder>:
	MenuMode = NoMenu;
	OvenMode = ReflowMode;
}

void GetProfileInputHanlder(uint8_t input)
{
     cb6:	cf 92       	push	r12
     cb8:	df 92       	push	r13
     cba:	ef 92       	push	r14
     cbc:	ff 92       	push	r15
     cbe:	0f 93       	push	r16
     cc0:	1f 93       	push	r17
     cc2:	cf 93       	push	r28
     cc4:	df 93       	push	r29
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	da 95       	dec	r29
     ccc:	cd bf       	out	0x3d, r28	; 61
     cce:	de bf       	out	0x3e, r29	; 62
	uint8_t index;
	uint8_t profile[PROFILE_BYTES];
	uint8_t name[MAX_NAME_SIZE];
	
	if (input == '\r')
     cd0:	8d 30       	cpi	r24, 0x0D	; 13
     cd2:	09 f0       	breq	.+2      	; 0xcd6 <GetProfileInputHanlder+0x20>
     cd4:	60 c0       	rjmp	.+192    	; 0xd96 <GetProfileInputHanlder+0xe0>
	{		
		_args[_argsIndex] = '\0';
     cd6:	e0 91 b1 24 	lds	r30, 0x24B1	; 0x8024b1 <_argsIndex>
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	e9 5b       	subi	r30, 0xB9	; 185
     cde:	f8 4d       	sbci	r31, 0xD8	; 216
     ce0:	10 82       	st	Z, r1
				
		index = atoi(_args);
     ce2:	87 e4       	ldi	r24, 0x47	; 71
     ce4:	97 e2       	ldi	r25, 0x27	; 39
     ce6:	0e 94 ee 34 	call	0x69dc	; 0x69dc <atoi>
     cea:	8c 01       	movw	r16, r24
		
		if (index >= MAX_PROFILES)
     cec:	80 31       	cpi	r24, 0x10	; 16
     cee:	78 f0       	brcs	.+30     	; 0xd0e <GetProfileInputHanlder+0x58>
		{
			printf("%s\r\n", ERR_PROFILEINDEX_OOR);
     cf0:	84 e1       	ldi	r24, 0x14	; 20
     cf2:	91 e2       	ldi	r25, 0x21	; 33
     cf4:	9f 93       	push	r25
     cf6:	8f 93       	push	r24
     cf8:	8c e9       	ldi	r24, 0x9C	; 156
     cfa:	93 e2       	ldi	r25, 0x23	; 35
     cfc:	9f 93       	push	r25
     cfe:	8f 93       	push	r24
     d00:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <printf>
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	3f c0       	rjmp	.+126    	; 0xd8c <GetProfileInputHanlder+0xd6>
		}
		else
		{
			LoadProfile(index, profile);
     d0e:	be 01       	movw	r22, r28
     d10:	6f 5f       	subi	r22, 0xFF	; 255
     d12:	7f 4f       	sbci	r23, 0xFF	; 255
     d14:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <LoadProfile>

			if (profile[0] != 0 && profile[0] != 255)
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	81 50       	subi	r24, 0x01	; 1
     d1c:	8e 3f       	cpi	r24, 0xFE	; 254
     d1e:	90 f5       	brcc	.+100    	; 0xd84 <GetProfileInputHanlder+0xce>
			{
				printf("%d,%.12s\r\n", index, profile);
     d20:	ce 01       	movw	r24, r28
     d22:	01 96       	adiw	r24, 0x01	; 1
     d24:	9f 93       	push	r25
     d26:	8f 93       	push	r24
     d28:	11 27       	eor	r17, r17
     d2a:	1f 93       	push	r17
     d2c:	0f 93       	push	r16
     d2e:	85 e3       	ldi	r24, 0x35	; 53
     d30:	91 e2       	ldi	r25, 0x21	; 33
     d32:	9f 93       	push	r25
     d34:	8f 93       	push	r24
     d36:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <printf>

				for(uint16_t i = MAX_NAME_SIZE; i < PROFILE_BYTES; i += 2)
				{								
					if (profile[i] == 0)
     d3a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	0f 90       	pop	r0
     d48:	81 11       	cpse	r24, r1
     d4a:	38 c0       	rjmp	.+112    	; 0xdbc <GetProfileInputHanlder+0x106>
     d4c:	1f c0       	rjmp	.+62     	; 0xd8c <GetProfileInputHanlder+0xd6>
     d4e:	f8 01       	movw	r30, r16
     d50:	31 97       	sbiw	r30, 0x01	; 1
     d52:	80 81       	ld	r24, Z
     d54:	88 23       	and	r24, r24
     d56:	d1 f0       	breq	.+52     	; 0xd8c <GetProfileInputHanlder+0xd6>
						break;
					
					printf("%d,%d\r\n", profile[i], profile[i + 1]);					
     d58:	f8 01       	movw	r30, r16
     d5a:	90 81       	ld	r25, Z
     d5c:	1f 92       	push	r1
     d5e:	9f 93       	push	r25
     d60:	1f 92       	push	r1
     d62:	8f 93       	push	r24
     d64:	ff 92       	push	r15
     d66:	ef 92       	push	r14
     d68:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <printf>
     d6c:	0e 5f       	subi	r16, 0xFE	; 254
     d6e:	1f 4f       	sbci	r17, 0xFF	; 255

			if (profile[0] != 0 && profile[0] != 255)
			{
				printf("%d,%.12s\r\n", index, profile);

				for(uint16_t i = MAX_NAME_SIZE; i < PROFILE_BYTES; i += 2)
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	0c 15       	cp	r16, r12
     d7e:	1d 05       	cpc	r17, r13
     d80:	31 f7       	brne	.-52     	; 0xd4e <GetProfileInputHanlder+0x98>
     d82:	04 c0       	rjmp	.+8      	; 0xd8c <GetProfileInputHanlder+0xd6>
					printf("%d,%d\r\n", profile[i], profile[i + 1]);					
				}
			}
			else
			{
				printf("No Profile\r\n");
     d84:	80 e4       	ldi	r24, 0x40	; 64
     d86:	91 e2       	ldi	r25, 0x21	; 33
     d88:	0e 94 89 35 	call	0x6b12	; 0x6b12 <puts>
			}
		}
		
		_argsIndex = 0;
     d8c:	10 92 b1 24 	sts	0x24B1, r1	; 0x8024b1 <_argsIndex>
		_cmdState = Waiting;
     d90:	10 92 b4 24 	sts	0x24B4, r1	; 0x8024b4 <_cmdState>
     d94:	32 c0       	rjmp	.+100    	; 0xdfa <GetProfileInputHanlder+0x144>
	}
	
	if (input >= 48 && input <= 57 && _argsIndex < 4)
     d96:	90 ed       	ldi	r25, 0xD0	; 208
     d98:	98 0f       	add	r25, r24
     d9a:	9a 30       	cpi	r25, 0x0A	; 10
     d9c:	70 f5       	brcc	.+92     	; 0xdfa <GetProfileInputHanlder+0x144>
     d9e:	90 91 b1 24 	lds	r25, 0x24B1	; 0x8024b1 <_argsIndex>
     da2:	94 30       	cpi	r25, 0x04	; 4
     da4:	50 f5       	brcc	.+84     	; 0xdfa <GetProfileInputHanlder+0x144>
		_args[_argsIndex++] = input;	
     da6:	e0 91 b1 24 	lds	r30, 0x24B1	; 0x8024b1 <_argsIndex>
     daa:	91 e0       	ldi	r25, 0x01	; 1
     dac:	9e 0f       	add	r25, r30
     dae:	90 93 b1 24 	sts	0x24B1, r25	; 0x8024b1 <_argsIndex>
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	e9 5b       	subi	r30, 0xB9	; 185
     db6:	f8 4d       	sbci	r31, 0xD8	; 216
     db8:	80 83       	st	Z, r24
     dba:	1f c0       	rjmp	.+62     	; 0xdfa <GetProfileInputHanlder+0x144>
				for(uint16_t i = MAX_NAME_SIZE; i < PROFILE_BYTES; i += 2)
				{								
					if (profile[i] == 0)
						break;
					
					printf("%d,%d\r\n", profile[i], profile[i + 1]);					
     dbc:	9e 85       	ldd	r25, Y+14	; 0x0e
     dbe:	1f 92       	push	r1
     dc0:	9f 93       	push	r25
     dc2:	1f 92       	push	r1
     dc4:	8f 93       	push	r24
     dc6:	87 e5       	ldi	r24, 0x57	; 87
     dc8:	93 e2       	ldi	r25, 0x23	; 35
     dca:	9f 93       	push	r25
     dcc:	8f 93       	push	r24
     dce:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <printf>
     dd2:	8e 01       	movw	r16, r28
     dd4:	00 5f       	subi	r16, 0xF0	; 240
     dd6:	1f 4f       	sbci	r17, 0xFF	; 255
     dd8:	6e 01       	movw	r12, r28
     dda:	fe ef       	ldi	r31, 0xFE	; 254
     ddc:	cf 1a       	sub	r12, r31
     dde:	df 0a       	sbc	r13, r31
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	0f 2e       	mov	r0, r31
     dee:	f7 e5       	ldi	r31, 0x57	; 87
     df0:	ef 2e       	mov	r14, r31
     df2:	f3 e2       	ldi	r31, 0x23	; 35
     df4:	ff 2e       	mov	r15, r31
     df6:	f0 2d       	mov	r31, r0
     df8:	aa cf       	rjmp	.-172    	; 0xd4e <GetProfileInputHanlder+0x98>
	}
	
	if (input >= 48 && input <= 57 && _argsIndex < 4)
		_args[_argsIndex++] = input;	
	
}
     dfa:	d3 95       	inc	r29
     dfc:	cd bf       	out	0x3d, r28	; 61
     dfe:	de bf       	out	0x3e, r29	; 62
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	1f 91       	pop	r17
     e06:	0f 91       	pop	r16
     e08:	ff 90       	pop	r15
     e0a:	ef 90       	pop	r14
     e0c:	df 90       	pop	r13
     e0e:	cf 90       	pop	r12
     e10:	08 95       	ret

00000e12 <SetBackLightOnTimeInputHandler>:

void SetBackLightOnTimeInputHandler(uint8_t input)
{
	uint8_t time;
	
	if (input >= 48 && input <= 57 && _argsIndex < 4)
     e12:	90 ed       	ldi	r25, 0xD0	; 208
     e14:	98 0f       	add	r25, r24
     e16:	9a 30       	cpi	r25, 0x0A	; 10
     e18:	70 f4       	brcc	.+28     	; 0xe36 <SetBackLightOnTimeInputHandler+0x24>
     e1a:	90 91 b1 24 	lds	r25, 0x24B1	; 0x8024b1 <_argsIndex>
     e1e:	94 30       	cpi	r25, 0x04	; 4
     e20:	50 f4       	brcc	.+20     	; 0xe36 <SetBackLightOnTimeInputHandler+0x24>
		_args[_argsIndex++] = input;	
     e22:	e0 91 b1 24 	lds	r30, 0x24B1	; 0x8024b1 <_argsIndex>
     e26:	91 e0       	ldi	r25, 0x01	; 1
     e28:	9e 0f       	add	r25, r30
     e2a:	90 93 b1 24 	sts	0x24B1, r25	; 0x8024b1 <_argsIndex>
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	e9 5b       	subi	r30, 0xB9	; 185
     e32:	f8 4d       	sbci	r31, 0xD8	; 216
     e34:	80 83       	st	Z, r24
		
	if (input == '\r')
     e36:	8d 30       	cpi	r24, 0x0D	; 13
     e38:	a9 f4       	brne	.+42     	; 0xe64 <SetBackLightOnTimeInputHandler+0x52>
	{
		_args[_argsIndex] = '\0';
     e3a:	e0 91 b1 24 	lds	r30, 0x24B1	; 0x8024b1 <_argsIndex>
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	e9 5b       	subi	r30, 0xB9	; 185
     e42:	f8 4d       	sbci	r31, 0xD8	; 216
     e44:	10 82       	st	Z, r1
		
		time = atoi(_args);
     e46:	87 e4       	ldi	r24, 0x47	; 71
     e48:	97 e2       	ldi	r25, 0x27	; 39
     e4a:	0e 94 ee 34 	call	0x69dc	; 0x69dc <atoi>
     e4e:	99 27       	eor	r25, r25
		
		BackLightOnTime = time;
     e50:	80 93 19 20 	sts	0x2019, r24	; 0x802019 <BackLightOnTime>
     e54:	90 93 1a 20 	sts	0x201A, r25	; 0x80201a <BackLightOnTime+0x1>
		
		SaveSettings();
     e58:	0e 94 e7 18 	call	0x31ce	; 0x31ce <SaveSettings>
		
		_argsIndex = 0;
     e5c:	10 92 b1 24 	sts	0x24B1, r1	; 0x8024b1 <_argsIndex>
		_cmdState = Waiting;		
     e60:	10 92 b4 24 	sts	0x24B4, r1	; 0x8024b4 <_cmdState>
     e64:	08 95       	ret

00000e66 <SetBuzzerOnTimeInputHandler>:

void SetBuzzerOnTimeInputHandler(uint8_t input)
{
	uint16_t time;
	
	if (input >= 48 && input <= 57 && _argsIndex < 4)
     e66:	90 ed       	ldi	r25, 0xD0	; 208
     e68:	98 0f       	add	r25, r24
     e6a:	9a 30       	cpi	r25, 0x0A	; 10
     e6c:	70 f4       	brcc	.+28     	; 0xe8a <SetBuzzerOnTimeInputHandler+0x24>
     e6e:	90 91 b1 24 	lds	r25, 0x24B1	; 0x8024b1 <_argsIndex>
     e72:	94 30       	cpi	r25, 0x04	; 4
     e74:	50 f4       	brcc	.+20     	; 0xe8a <SetBuzzerOnTimeInputHandler+0x24>
		_args[_argsIndex++] = input;	
     e76:	e0 91 b1 24 	lds	r30, 0x24B1	; 0x8024b1 <_argsIndex>
     e7a:	91 e0       	ldi	r25, 0x01	; 1
     e7c:	9e 0f       	add	r25, r30
     e7e:	90 93 b1 24 	sts	0x24B1, r25	; 0x8024b1 <_argsIndex>
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	e9 5b       	subi	r30, 0xB9	; 185
     e86:	f8 4d       	sbci	r31, 0xD8	; 216
     e88:	80 83       	st	Z, r24
		
	if (input == '\r')
     e8a:	8d 30       	cpi	r24, 0x0D	; 13
     e8c:	a1 f4       	brne	.+40     	; 0xeb6 <SetBuzzerOnTimeInputHandler+0x50>
	{
		_args[_argsIndex] = '\0';
     e8e:	e0 91 b1 24 	lds	r30, 0x24B1	; 0x8024b1 <_argsIndex>
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	e9 5b       	subi	r30, 0xB9	; 185
     e96:	f8 4d       	sbci	r31, 0xD8	; 216
     e98:	10 82       	st	Z, r1
		
		time = atoi(_args);
     e9a:	87 e4       	ldi	r24, 0x47	; 71
     e9c:	97 e2       	ldi	r25, 0x27	; 39
     e9e:	0e 94 ee 34 	call	0x69dc	; 0x69dc <atoi>
		
		BuzzerOnTime = time;
     ea2:	80 93 17 20 	sts	0x2017, r24	; 0x802017 <BuzzerOnTime>
     ea6:	90 93 18 20 	sts	0x2018, r25	; 0x802018 <BuzzerOnTime+0x1>
		
		SaveSettings();
     eaa:	0e 94 e7 18 	call	0x31ce	; 0x31ce <SaveSettings>
		
		_argsIndex = 0;
     eae:	10 92 b1 24 	sts	0x24B1, r1	; 0x8024b1 <_argsIndex>
		_cmdState = Waiting;
     eb2:	10 92 b4 24 	sts	0x24B4, r1	; 0x8024b4 <_cmdState>
     eb6:	08 95       	ret

00000eb8 <DeleteProfileInputHanlder>:
	}		
}

void DeleteProfileInputHanlder(uint8_t input)
{
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	da 95       	dec	r29
     ec2:	cd bf       	out	0x3d, r28	; 61
     ec4:	de bf       	out	0x3e, r29	; 62
	uint8_t index;
	uint8_t profile[PROFILE_BYTES];
	
	if (input == '\r')
     ec6:	8d 30       	cpi	r24, 0x0D	; 13
     ec8:	89 f5       	brne	.+98     	; 0xf2c <DeleteProfileInputHanlder+0x74>
	{
		_args[_argsIndex] = '\0';
     eca:	e0 91 b1 24 	lds	r30, 0x24B1	; 0x8024b1 <_argsIndex>
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	e9 5b       	subi	r30, 0xB9	; 185
     ed2:	f8 4d       	sbci	r31, 0xD8	; 216
     ed4:	10 82       	st	Z, r1
		
		index = atoi(_args);
     ed6:	87 e4       	ldi	r24, 0x47	; 71
     ed8:	97 e2       	ldi	r25, 0x27	; 39
     eda:	0e 94 ee 34 	call	0x69dc	; 0x69dc <atoi>
		
		if (index >= MAX_PROFILES)
     ede:	80 31       	cpi	r24, 0x10	; 16
     ee0:	78 f0       	brcs	.+30     	; 0xf00 <DeleteProfileInputHanlder+0x48>
		{
			printf("%s\r\n", ERR_PROFILEINDEX_OOR);
     ee2:	84 e1       	ldi	r24, 0x14	; 20
     ee4:	91 e2       	ldi	r25, 0x21	; 33
     ee6:	9f 93       	push	r25
     ee8:	8f 93       	push	r24
     eea:	8c e9       	ldi	r24, 0x9C	; 156
     eec:	93 e2       	ldi	r25, 0x23	; 35
     eee:	9f 93       	push	r25
     ef0:	8f 93       	push	r24
     ef2:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <printf>
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	11 c0       	rjmp	.+34     	; 0xf22 <DeleteProfileInputHanlder+0x6a>
		}
		else
		{
			memset(profile, 0, PROFILE_BYTES);
     f00:	be 01       	movw	r22, r28
     f02:	6f 5f       	subi	r22, 0xFF	; 255
     f04:	7f 4f       	sbci	r23, 0xFF	; 255
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	31 e0       	ldi	r19, 0x01	; 1
     f0a:	fb 01       	movw	r30, r22
     f0c:	a9 01       	movw	r20, r18
     f0e:	11 92       	st	Z+, r1
     f10:	41 50       	subi	r20, 0x01	; 1
     f12:	50 40       	sbci	r21, 0x00	; 0
     f14:	e1 f7       	brne	.-8      	; 0xf0e <DeleteProfileInputHanlder+0x56>
			
			SaveProfile(index, profile);
     f16:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <SaveProfile>
			LoadProfileNames();
     f1a:	0e 94 39 18 	call	0x3072	; 0x3072 <LoadProfileNames>
			DrawMenu();		
     f1e:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <DrawMenu>
		}
		
		_argsIndex = 0;
     f22:	10 92 b1 24 	sts	0x24B1, r1	; 0x8024b1 <_argsIndex>
		_cmdState = Waiting;
     f26:	10 92 b4 24 	sts	0x24B4, r1	; 0x8024b4 <_cmdState>
     f2a:	12 c0       	rjmp	.+36     	; 0xf50 <DeleteProfileInputHanlder+0x98>
	}
	
	if (input >= 48 && input <= 57 && _argsIndex < 4)
     f2c:	90 ed       	ldi	r25, 0xD0	; 208
     f2e:	98 0f       	add	r25, r24
     f30:	9a 30       	cpi	r25, 0x0A	; 10
     f32:	70 f4       	brcc	.+28     	; 0xf50 <DeleteProfileInputHanlder+0x98>
     f34:	90 91 b1 24 	lds	r25, 0x24B1	; 0x8024b1 <_argsIndex>
     f38:	94 30       	cpi	r25, 0x04	; 4
     f3a:	50 f4       	brcc	.+20     	; 0xf50 <DeleteProfileInputHanlder+0x98>
		_args[_argsIndex++] = input;	
     f3c:	e0 91 b1 24 	lds	r30, 0x24B1	; 0x8024b1 <_argsIndex>
     f40:	91 e0       	ldi	r25, 0x01	; 1
     f42:	9e 0f       	add	r25, r30
     f44:	90 93 b1 24 	sts	0x24B1, r25	; 0x8024b1 <_argsIndex>
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	e9 5b       	subi	r30, 0xB9	; 185
     f4c:	f8 4d       	sbci	r31, 0xD8	; 216
     f4e:	80 83       	st	Z, r24
}
     f50:	d3 95       	inc	r29
     f52:	cd bf       	out	0x3d, r28	; 61
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	08 95       	ret

00000f5c <CreateProfileInputHandler>:
void CreateProfileInputHandler(uint8_t input)
{
	static uint8_t index;
	uint8_t element;

	if (input == ',')
     f5c:	8c 32       	cpi	r24, 0x2C	; 44
     f5e:	09 f0       	breq	.+2      	; 0xf62 <CreateProfileInputHandler+0x6>
     f60:	79 c0       	rjmp	.+242    	; 0x1054 <CreateProfileInputHandler+0xf8>
	{
		_args[_argsIndex] = '\0';
     f62:	e0 91 b1 24 	lds	r30, 0x24B1	; 0x8024b1 <_argsIndex>
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	e9 5b       	subi	r30, 0xB9	; 185
     f6a:	f8 4d       	sbci	r31, 0xD8	; 216
     f6c:	10 82       	st	Z, r1
		_argsIndex = 0;
     f6e:	10 92 b1 24 	sts	0x24B1, r1	; 0x8024b1 <_argsIndex>
		
		if (_newProfileState == NewProfile_Index)
     f72:	80 91 b3 24 	lds	r24, 0x24B3	; 0x8024b3 <_newProfileState>
     f76:	81 11       	cpse	r24, r1
     f78:	2a c0       	rjmp	.+84     	; 0xfce <CreateProfileInputHandler+0x72>
		{
			index = atoi(_args);
     f7a:	87 e4       	ldi	r24, 0x47	; 71
     f7c:	97 e2       	ldi	r25, 0x27	; 39
     f7e:	0e 94 ee 34 	call	0x69dc	; 0x69dc <atoi>
     f82:	80 93 ae 24 	sts	0x24AE, r24	; 0x8024ae <__data_end>
			_argsIndex = 0;
     f86:	10 92 b1 24 	sts	0x24B1, r1	; 0x8024b1 <_argsIndex>
			
			if (index >= MAX_PROFILES || index == 0) //Can't override index 0: the default profile
     f8a:	81 50       	subi	r24, 0x01	; 1
     f8c:	8f 30       	cpi	r24, 0x0F	; 15
     f8e:	88 f0       	brcs	.+34     	; 0xfb2 <CreateProfileInputHandler+0x56>
			{
				printf("%s\r\n", ERR_PROFILEINDEX_OOR);
     f90:	84 e1       	ldi	r24, 0x14	; 20
     f92:	91 e2       	ldi	r25, 0x21	; 33
     f94:	9f 93       	push	r25
     f96:	8f 93       	push	r24
     f98:	8c e9       	ldi	r24, 0x9C	; 156
     f9a:	93 e2       	ldi	r25, 0x23	; 35
     f9c:	9f 93       	push	r25
     f9e:	8f 93       	push	r24
     fa0:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <printf>
				_cmdState = Waiting;
     fa4:	10 92 b4 24 	sts	0x24B4, r1	; 0x8024b4 <_cmdState>
				return;
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	08 95       	ret
			}	
						
			memset(_newProfile, 0, PROFILE_BYTES);
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	91 e0       	ldi	r25, 0x01	; 1
     fb6:	e7 e7       	ldi	r30, 0x77	; 119
     fb8:	f7 e2       	ldi	r31, 0x27	; 39
     fba:	df 01       	movw	r26, r30
     fbc:	9c 01       	movw	r18, r24
     fbe:	1d 92       	st	X+, r1
     fc0:	21 50       	subi	r18, 0x01	; 1
     fc2:	30 40       	sbci	r19, 0x00	; 0
     fc4:	e1 f7       	brne	.-8      	; 0xfbe <CreateProfileInputHandler+0x62>
			_newProfileState = NewProfile_Name;		
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	80 93 b3 24 	sts	0x24B3, r24	; 0x8024b3 <_newProfileState>
     fcc:	08 95       	ret
		}
		else if(_newProfileState == NewProfile_Name)
     fce:	80 91 b3 24 	lds	r24, 0x24B3	; 0x8024b3 <_newProfileState>
     fd2:	81 30       	cpi	r24, 0x01	; 1
     fd4:	51 f5       	brne	.+84     	; 0x102a <CreateProfileInputHandler+0xce>
		{

			
			for(uint8_t i = 0; i < MAX_NAME_SIZE; i++)
			{
				if (_args[i] == 0 || _args[i] == 255)
     fd6:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <_args>
     fda:	88 23       	and	r24, r24
     fdc:	f1 f0       	breq	.+60     	; 0x101a <CreateProfileInputHandler+0xbe>
     fde:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <_args>
     fe2:	8f 3f       	cpi	r24, 0xFF	; 255
     fe4:	09 f0       	breq	.+2      	; 0xfe8 <CreateProfileInputHandler+0x8c>
     fe6:	71 c0       	rjmp	.+226    	; 0x10ca <CreateProfileInputHandler+0x16e>
     fe8:	18 c0       	rjmp	.+48     	; 0x101a <CreateProfileInputHandler+0xbe>
     fea:	fc 01       	movw	r30, r24
     fec:	e9 5b       	subi	r30, 0xB9	; 185
     fee:	f8 4d       	sbci	r31, 0xD8	; 216
     ff0:	40 81       	ld	r20, Z
     ff2:	44 23       	and	r20, r20
     ff4:	91 f0       	breq	.+36     	; 0x101a <CreateProfileInputHandler+0xbe>
     ff6:	fc 01       	movw	r30, r24
     ff8:	e9 5b       	subi	r30, 0xB9	; 185
     ffa:	f8 4d       	sbci	r31, 0xD8	; 216
     ffc:	40 81       	ld	r20, Z
     ffe:	4f 3f       	cpi	r20, 0xFF	; 255
    1000:	61 f0       	breq	.+24     	; 0x101a <CreateProfileInputHandler+0xbe>
					break;
					
				_newProfile[i] = _args[i];
    1002:	fc 01       	movw	r30, r24
    1004:	e9 5b       	subi	r30, 0xB9	; 185
    1006:	f8 4d       	sbci	r31, 0xD8	; 216
    1008:	40 81       	ld	r20, Z
    100a:	fc 01       	movw	r30, r24
    100c:	e9 58       	subi	r30, 0x89	; 137
    100e:	f8 4d       	sbci	r31, 0xD8	; 216
    1010:	40 83       	st	Z, r20
    1012:	01 96       	adiw	r24, 0x01	; 1
		}
		else if(_newProfileState == NewProfile_Name)
		{

			
			for(uint8_t i = 0; i < MAX_NAME_SIZE; i++)
    1014:	8c 30       	cpi	r24, 0x0C	; 12
    1016:	91 05       	cpc	r25, r1
    1018:	41 f7       	brne	.-48     	; 0xfea <CreateProfileInputHandler+0x8e>
					break;
					
				_newProfile[i] = _args[i];
			}
						
			_elementIndex = 0;
    101a:	10 92 af 24 	sts	0x24AF, r1	; 0x8024af <_elementIndex>
    101e:	10 92 b0 24 	sts	0x24B0, r1	; 0x8024b0 <_elementIndex+0x1>
			_newProfileState = NewProfile_Element;		
    1022:	82 e0       	ldi	r24, 0x02	; 2
    1024:	80 93 b3 24 	sts	0x24B3, r24	; 0x8024b3 <_newProfileState>
    1028:	08 95       	ret
		}		
		else
		{
			element = atoi(_args);
    102a:	87 e4       	ldi	r24, 0x47	; 71
    102c:	97 e2       	ldi	r25, 0x27	; 39
    102e:	0e 94 ee 34 	call	0x69dc	; 0x69dc <atoi>
			_newProfile[_elementIndex + MAX_NAME_SIZE] = element;
    1032:	e0 91 af 24 	lds	r30, 0x24AF	; 0x8024af <_elementIndex>
    1036:	f0 91 b0 24 	lds	r31, 0x24B0	; 0x8024b0 <_elementIndex+0x1>
    103a:	ed 57       	subi	r30, 0x7D	; 125
    103c:	f8 4d       	sbci	r31, 0xD8	; 216
    103e:	80 83       	st	Z, r24
			_elementIndex++;
    1040:	80 91 af 24 	lds	r24, 0x24AF	; 0x8024af <_elementIndex>
    1044:	90 91 b0 24 	lds	r25, 0x24B0	; 0x8024b0 <_elementIndex+0x1>
    1048:	01 96       	adiw	r24, 0x01	; 1
    104a:	80 93 af 24 	sts	0x24AF, r24	; 0x8024af <_elementIndex>
    104e:	90 93 b0 24 	sts	0x24B0, r25	; 0x8024b0 <_elementIndex+0x1>
    1052:	08 95       	ret
		}		
	}	
	else if (input == '\r')		
    1054:	8d 30       	cpi	r24, 0x0D	; 13
    1056:	79 f4       	brne	.+30     	; 0x1076 <CreateProfileInputHandler+0x11a>
	{
		SaveProfile(index, _newProfile);	
    1058:	67 e7       	ldi	r22, 0x77	; 119
    105a:	77 e2       	ldi	r23, 0x27	; 39
    105c:	80 91 ae 24 	lds	r24, 0x24AE	; 0x8024ae <__data_end>
    1060:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <SaveProfile>
		LoadProfileNames();	
    1064:	0e 94 39 18 	call	0x3072	; 0x3072 <LoadProfileNames>
		DrawMenu();
    1068:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <DrawMenu>
		_argsIndex = 0;
    106c:	10 92 b1 24 	sts	0x24B1, r1	; 0x8024b1 <_argsIndex>
		_cmdState = Waiting;		
    1070:	10 92 b4 24 	sts	0x24B4, r1	; 0x8024b4 <_cmdState>
    1074:	08 95       	ret
	}
	else 
	{
		if (_newProfileState == NewProfile_Index || _newProfileState == NewProfile_Element)
    1076:	90 91 b3 24 	lds	r25, 0x24B3	; 0x8024b3 <_newProfileState>
    107a:	99 23       	and	r25, r25
    107c:	21 f0       	breq	.+8      	; 0x1086 <CreateProfileInputHandler+0x12a>
    107e:	90 91 b3 24 	lds	r25, 0x24B3	; 0x8024b3 <_newProfileState>
    1082:	92 30       	cpi	r25, 0x02	; 2
    1084:	99 f4       	brne	.+38     	; 0x10ac <CreateProfileInputHandler+0x150>
		{
			if (input >= 48 && input <= 57 && _argsIndex < 4)
    1086:	90 ed       	ldi	r25, 0xD0	; 208
    1088:	98 0f       	add	r25, r24
    108a:	9a 30       	cpi	r25, 0x0A	; 10
    108c:	28 f5       	brcc	.+74     	; 0x10d8 <CreateProfileInputHandler+0x17c>
    108e:	90 91 b1 24 	lds	r25, 0x24B1	; 0x8024b1 <_argsIndex>
    1092:	94 30       	cpi	r25, 0x04	; 4
    1094:	08 f5       	brcc	.+66     	; 0x10d8 <CreateProfileInputHandler+0x17c>
			_args[_argsIndex++] = input;
    1096:	e0 91 b1 24 	lds	r30, 0x24B1	; 0x8024b1 <_argsIndex>
    109a:	91 e0       	ldi	r25, 0x01	; 1
    109c:	9e 0f       	add	r25, r30
    109e:	90 93 b1 24 	sts	0x24B1, r25	; 0x8024b1 <_argsIndex>
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	e9 5b       	subi	r30, 0xB9	; 185
    10a6:	f8 4d       	sbci	r31, 0xD8	; 216
    10a8:	80 83       	st	Z, r24
    10aa:	08 95       	ret
		}
		else if (_argsIndex < MAX_NAME_SIZE - 1) //Name mode
    10ac:	90 91 b1 24 	lds	r25, 0x24B1	; 0x8024b1 <_argsIndex>
    10b0:	9b 30       	cpi	r25, 0x0B	; 11
    10b2:	90 f4       	brcc	.+36     	; 0x10d8 <CreateProfileInputHandler+0x17c>
		{
			_args[_argsIndex++] = input;
    10b4:	e0 91 b1 24 	lds	r30, 0x24B1	; 0x8024b1 <_argsIndex>
    10b8:	91 e0       	ldi	r25, 0x01	; 1
    10ba:	9e 0f       	add	r25, r30
    10bc:	90 93 b1 24 	sts	0x24B1, r25	; 0x8024b1 <_argsIndex>
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	e9 5b       	subi	r30, 0xB9	; 185
    10c4:	f8 4d       	sbci	r31, 0xD8	; 216
    10c6:	80 83       	st	Z, r24
    10c8:	08 95       	ret
			for(uint8_t i = 0; i < MAX_NAME_SIZE; i++)
			{
				if (_args[i] == 0 || _args[i] == 255)
					break;
					
				_newProfile[i] = _args[i];
    10ca:	80 91 47 27 	lds	r24, 0x2747	; 0x802747 <_args>
    10ce:	80 93 77 27 	sts	0x2777, r24	; 0x802777 <_newProfile>
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	89 cf       	rjmp	.-238    	; 0xfea <CreateProfileInputHandler+0x8e>
    10d8:	08 95       	ret

000010da <GetOvenState>:

void (* _inputHandler)(uint8_t);

uint8_t * GetOvenState()
{
	if (OvenState == OvenHeating)
    10da:	80 91 e1 24 	lds	r24, 0x24E1	; 0x8024e1 <OvenState>
    10de:	82 30       	cpi	r24, 0x02	; 2
    10e0:	59 f0       	breq	.+22     	; 0x10f8 <GetOvenState+0x1e>
		return "Heating";
	else if (OvenState == OvenRunning)
    10e2:	81 30       	cpi	r24, 0x01	; 1
    10e4:	61 f0       	breq	.+24     	; 0x10fe <GetOvenState+0x24>
		return "Running";
	else if (OvenState == OvenStopped && ReflowIsFinished)
    10e6:	81 11       	cpse	r24, r1
    10e8:	0d c0       	rjmp	.+26     	; 0x1104 <GetOvenState+0x2a>
    10ea:	80 91 da 24 	lds	r24, 0x24DA	; 0x8024da <ReflowIsFinished>
    10ee:	88 23       	and	r24, r24
    10f0:	61 f0       	breq	.+24     	; 0x110a <GetOvenState+0x30>
		return "Finished";
    10f2:	8c e5       	ldi	r24, 0x5C	; 92
    10f4:	91 e2       	ldi	r25, 0x21	; 33
    10f6:	08 95       	ret
void (* _inputHandler)(uint8_t);

uint8_t * GetOvenState()
{
	if (OvenState == OvenHeating)
		return "Heating";
    10f8:	8c e4       	ldi	r24, 0x4C	; 76
    10fa:	91 e2       	ldi	r25, 0x21	; 33
    10fc:	08 95       	ret
	else if (OvenState == OvenRunning)
		return "Running";
    10fe:	84 e5       	ldi	r24, 0x54	; 84
    1100:	91 e2       	ldi	r25, 0x21	; 33
    1102:	08 95       	ret
	else if (OvenState == OvenStopped && ReflowIsFinished)
		return "Finished";
	else
		return "Stopped";
    1104:	85 e6       	ldi	r24, 0x65	; 101
    1106:	91 e2       	ldi	r25, 0x21	; 33
    1108:	08 95       	ret
    110a:	85 e6       	ldi	r24, 0x65	; 101
    110c:	91 e2       	ldi	r25, 0x21	; 33
}
    110e:	08 95       	ret

00001110 <GetOvenMode>:

uint8_t * GetOvenMode()
{
	if (OvenMode == TestMode)
    1110:	80 91 df 24 	lds	r24, 0x24DF	; 0x8024df <OvenMode>
    1114:	82 30       	cpi	r24, 0x02	; 2
    1116:	29 f0       	breq	.+10     	; 0x1122 <GetOvenMode+0x12>
		return "Test";
	else if (OvenMode == ReflowMode)
    1118:	81 30       	cpi	r24, 0x01	; 1
    111a:	31 f0       	breq	.+12     	; 0x1128 <GetOvenMode+0x18>
		return "Reflow";
	else
		return "Menu";
    111c:	89 e7       	ldi	r24, 0x79	; 121
    111e:	91 e2       	ldi	r25, 0x21	; 33
    1120:	08 95       	ret
}

uint8_t * GetOvenMode()
{
	if (OvenMode == TestMode)
		return "Test";
    1122:	8d e6       	ldi	r24, 0x6D	; 109
    1124:	91 e2       	ldi	r25, 0x21	; 33
    1126:	08 95       	ret
	else if (OvenMode == ReflowMode)
		return "Reflow";
    1128:	82 e7       	ldi	r24, 0x72	; 114
    112a:	91 e2       	ldi	r25, 0x21	; 33
	else
		return "Menu";
}
    112c:	08 95       	ret

0000112e <StopTestMode>:

void StopTestMode()
{
	HTOP_OFF;
    112e:	e0 e0       	ldi	r30, 0x00	; 0
    1130:	f6 e0       	ldi	r31, 0x06	; 6
    1132:	80 e4       	ldi	r24, 0x40	; 64
    1134:	86 83       	std	Z+6, r24	; 0x06
	HBOTTOM_OFF;
    1136:	80 e8       	ldi	r24, 0x80	; 128
    1138:	86 83       	std	Z+6, r24	; 0x06
	FAN_OFF;
    113a:	80 e2       	ldi	r24, 0x20	; 32
    113c:	86 83       	std	Z+6, r24	; 0x06
	BUZZER_OFF;
    113e:	88 e0       	ldi	r24, 0x08	; 8
    1140:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
	RLED_OFF;
    1144:	e0 e2       	ldi	r30, 0x20	; 32
    1146:	f6 e0       	ldi	r31, 0x06	; 6
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	85 83       	std	Z+5, r24	; 0x05
	GLED_OFF;
    114c:	82 e0       	ldi	r24, 0x02	; 2
    114e:	85 83       	std	Z+5, r24	; 0x05
	BLED_ON;
    1150:	84 e0       	ldi	r24, 0x04	; 4
    1152:	86 83       	std	Z+6, r24	; 0x06
    1154:	08 95       	ret

00001156 <SwitchToMenuMode>:
}

void SwitchToMenuMode()
{
	StopOven();
    1156:	0e 94 55 19 	call	0x32aa	; 0x32aa <StopOven>
	StopTestMode();
    115a:	e9 df       	rcall	.-46     	; 0x112e <StopTestMode>
	OvenMode = ProfileMenuMode;
    115c:	10 92 df 24 	sts	0x24DF, r1	; 0x8024df <OvenMode>
	MenuMode = ProfileMenu;
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <MenuMode>
	DrawMenu();
    1166:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <DrawMenu>
    116a:	08 95       	ret

0000116c <SwitchToTestMode>:
}

void SwitchToTestMode()
{
	StopTestMode();
    116c:	e0 df       	rcall	.-64     	; 0x112e <StopTestMode>
	StopOven();
    116e:	0e 94 55 19 	call	0x32aa	; 0x32aa <StopOven>
	OvenMode = TestMode;
    1172:	82 e0       	ldi	r24, 0x02	; 2
    1174:	80 93 df 24 	sts	0x24DF, r24	; 0x8024df <OvenMode>
	
	DrawString("TEST MODE", 0, 0, false);
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	40 e0       	ldi	r20, 0x00	; 0
    117c:	60 e0       	ldi	r22, 0x00	; 0
    117e:	8e e7       	ldi	r24, 0x7E	; 126
    1180:	91 e2       	ldi	r25, 0x21	; 33
    1182:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
	FlushScreenBuffer();	
    1186:	0c 94 d4 12 	jmp	0x25a8	; 0x25a8 <FlushScreenBuffer>
    118a:	08 95       	ret

0000118c <SwitchToReflowMode>:
}

void SwitchToReflowMode()
{
	StopTestMode();
    118c:	d0 df       	rcall	.-96     	; 0x112e <StopTestMode>
	MenuMode = NoMenu;
    118e:	10 92 16 20 	sts	0x2016, r1	; 0x802016 <MenuMode>
	OvenMode = ReflowMode;
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	80 93 df 24 	sts	0x24DF, r24	; 0x8024df <OvenMode>
    1198:	08 95       	ret

0000119a <CheckMode>:
	}
}

Bool CheckMode(OvenModeEnum mode)
{
	if (OvenMode != mode)
    119a:	90 91 df 24 	lds	r25, 0x24DF	; 0x8024df <OvenMode>
    119e:	98 17       	cp	r25, r24
    11a0:	b1 f1       	breq	.+108    	; 0x120e <CheckMode+0x74>
	{
		if (mode == TestMode)
    11a2:	82 30       	cpi	r24, 0x02	; 2
    11a4:	81 f4       	brne	.+32     	; 0x11c6 <CheckMode+0x2c>
			printf("%s\r\n", ERR_TESTMODE);
    11a6:	88 e8       	ldi	r24, 0x88	; 136
    11a8:	91 e2       	ldi	r25, 0x21	; 33
    11aa:	9f 93       	push	r25
    11ac:	8f 93       	push	r24
    11ae:	8c e9       	ldi	r24, 0x9C	; 156
    11b0:	93 e2       	ldi	r25, 0x23	; 35
    11b2:	9f 93       	push	r25
    11b4:	8f 93       	push	r24
    11b6:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <printf>
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
			printf("%s\r\n", ERR_REFLOWMODE);
		
		if (mode == ProfileMenuMode)
			printf("%s\r\n", ERR_MENUMODE);
			
		return false;	
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	08 95       	ret
	if (OvenMode != mode)
	{
		if (mode == TestMode)
			printf("%s\r\n", ERR_TESTMODE);
		
		if (mode == ReflowMode)
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	81 f4       	brne	.+32     	; 0x11ea <CheckMode+0x50>
			printf("%s\r\n", ERR_REFLOWMODE);
    11ca:	81 ea       	ldi	r24, 0xA1	; 161
    11cc:	91 e2       	ldi	r25, 0x21	; 33
    11ce:	9f 93       	push	r25
    11d0:	8f 93       	push	r24
    11d2:	8c e9       	ldi	r24, 0x9C	; 156
    11d4:	93 e2       	ldi	r25, 0x23	; 35
    11d6:	9f 93       	push	r25
    11d8:	8f 93       	push	r24
    11da:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <printf>
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
		
		if (mode == ProfileMenuMode)
			printf("%s\r\n", ERR_MENUMODE);
			
		return false;	
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	08 95       	ret
			printf("%s\r\n", ERR_TESTMODE);
		
		if (mode == ReflowMode)
			printf("%s\r\n", ERR_REFLOWMODE);
		
		if (mode == ProfileMenuMode)
    11ea:	81 11       	cpse	r24, r1
    11ec:	12 c0       	rjmp	.+36     	; 0x1212 <CheckMode+0x78>
			printf("%s\r\n", ERR_MENUMODE);
    11ee:	8c eb       	ldi	r24, 0xBC	; 188
    11f0:	91 e2       	ldi	r25, 0x21	; 33
    11f2:	9f 93       	push	r25
    11f4:	8f 93       	push	r24
    11f6:	8c e9       	ldi	r24, 0x9C	; 156
    11f8:	93 e2       	ldi	r25, 0x23	; 35
    11fa:	9f 93       	push	r25
    11fc:	8f 93       	push	r24
    11fe:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <printf>
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
			
		return false;	
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	08 95       	ret
	}
	
	return true;
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	08 95       	ret
			printf("%s\r\n", ERR_REFLOWMODE);
		
		if (mode == ProfileMenuMode)
			printf("%s\r\n", ERR_MENUMODE);
			
		return false;	
    1212:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return true;
}
    1214:	08 95       	ret

00001216 <ProcessExecuteCommand>:

void ProcessExecuteCommand(uint8_t * command)
{
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	d8 2f       	mov	r29, r24
    121c:	c9 2f       	mov	r28, r25
					
	if (strcmp(command, ATMENUMODE) == 0)	//ANY MODE
    121e:	65 ed       	ldi	r22, 0xD5	; 213
    1220:	71 e2       	ldi	r23, 0x21	; 33
    1222:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    1226:	89 2b       	or	r24, r25
    1228:	11 f4       	brne	.+4      	; 0x122e <ProcessExecuteCommand+0x18>
	{
		SwitchToMenuMode();
    122a:	95 df       	rcall	.-214    	; 0x1156 <SwitchToMenuMode>
    122c:	a2 c1       	rjmp	.+836    	; 0x1572 <ProcessExecuteCommand+0x35c>
	}
	else if (strcmp(command, ATTESTMODE) == 0)
    122e:	6e ed       	ldi	r22, 0xDE	; 222
    1230:	71 e2       	ldi	r23, 0x21	; 33
    1232:	8d 2f       	mov	r24, r29
    1234:	9c 2f       	mov	r25, r28
    1236:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    123a:	89 2b       	or	r24, r25
    123c:	11 f4       	brne	.+4      	; 0x1242 <ProcessExecuteCommand+0x2c>
	{
		SwitchToTestMode();
    123e:	96 df       	rcall	.-212    	; 0x116c <SwitchToTestMode>
    1240:	98 c1       	rjmp	.+816    	; 0x1572 <ProcessExecuteCommand+0x35c>
	}
	else if (strcmp(command, ATREFLOWMODE) == 0)
    1242:	67 ee       	ldi	r22, 0xE7	; 231
    1244:	71 e2       	ldi	r23, 0x21	; 33
    1246:	8d 2f       	mov	r24, r29
    1248:	9c 2f       	mov	r25, r28
    124a:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    124e:	89 2b       	or	r24, r25
    1250:	11 f4       	brne	.+4      	; 0x1256 <ProcessExecuteCommand+0x40>
	{
		SwitchToReflowMode();
    1252:	9c df       	rcall	.-200    	; 0x118c <SwitchToReflowMode>
    1254:	8e c1       	rjmp	.+796    	; 0x1572 <ProcessExecuteCommand+0x35c>
	}
	else if (strcmp(command, ATBACKLIGHTON) == 0)
    1256:	62 ef       	ldi	r22, 0xF2	; 242
    1258:	71 e2       	ldi	r23, 0x21	; 33
    125a:	8d 2f       	mov	r24, r29
    125c:	9c 2f       	mov	r25, r28
    125e:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    1262:	89 2b       	or	r24, r25
    1264:	21 f4       	brne	.+8      	; 0x126e <ProcessExecuteCommand+0x58>
	{
		BL_ON;
    1266:	88 e0       	ldi	r24, 0x08	; 8
    1268:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
    126c:	82 c1       	rjmp	.+772    	; 0x1572 <ProcessExecuteCommand+0x35c>
	}
	else if (strcmp(command, ATBACKLIGHTOFF) == 0)
    126e:	6e ef       	ldi	r22, 0xFE	; 254
    1270:	71 e2       	ldi	r23, 0x21	; 33
    1272:	8d 2f       	mov	r24, r29
    1274:	9c 2f       	mov	r25, r28
    1276:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    127a:	89 2b       	or	r24, r25
    127c:	21 f4       	brne	.+8      	; 0x1286 <ProcessExecuteCommand+0x70>
	{
		BL_OFF;
    127e:	88 e0       	ldi	r24, 0x08	; 8
    1280:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
    1284:	76 c1       	rjmp	.+748    	; 0x1572 <ProcessExecuteCommand+0x35c>
	}
	else if (strcmp(command, ATTEMPMODEF) == 0)
    1286:	6b e0       	ldi	r22, 0x0B	; 11
    1288:	72 e2       	ldi	r23, 0x22	; 34
    128a:	8d 2f       	mov	r24, r29
    128c:	9c 2f       	mov	r25, r28
    128e:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    1292:	89 2b       	or	r24, r25
    1294:	31 f4       	brne	.+12     	; 0x12a2 <ProcessExecuteCommand+0x8c>
	{
		TempType = F;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	80 93 e0 24 	sts	0x24E0, r24	; 0x8024e0 <TempType>
		SaveSettings();
    129c:	0e 94 e7 18 	call	0x31ce	; 0x31ce <SaveSettings>
    12a0:	68 c1       	rjmp	.+720    	; 0x1572 <ProcessExecuteCommand+0x35c>
	}
	else if (strcmp(command, ATTEMPMODEC) == 0)
    12a2:	65 e1       	ldi	r22, 0x15	; 21
    12a4:	72 e2       	ldi	r23, 0x22	; 34
    12a6:	8d 2f       	mov	r24, r29
    12a8:	9c 2f       	mov	r25, r28
    12aa:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    12ae:	89 2b       	or	r24, r25
    12b0:	29 f4       	brne	.+10     	; 0x12bc <ProcessExecuteCommand+0xa6>
	{
		TempType = C;
    12b2:	10 92 e0 24 	sts	0x24E0, r1	; 0x8024e0 <TempType>
		SaveSettings();
    12b6:	0e 94 e7 18 	call	0x31ce	; 0x31ce <SaveSettings>
    12ba:	5b c1       	rjmp	.+694    	; 0x1572 <ProcessExecuteCommand+0x35c>
	}
	else if (strcmp(command, ATLOGGINGON) == 0)
    12bc:	6f e1       	ldi	r22, 0x1F	; 31
    12be:	72 e2       	ldi	r23, 0x22	; 34
    12c0:	8d 2f       	mov	r24, r29
    12c2:	9c 2f       	mov	r25, r28
    12c4:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    12c8:	89 2b       	or	r24, r25
    12ca:	21 f4       	brne	.+8      	; 0x12d4 <ProcessExecuteCommand+0xbe>
	{
		LoggingOn = true;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	80 93 db 24 	sts	0x24DB, r24	; 0x8024db <LoggingOn>
    12d2:	4f c1       	rjmp	.+670    	; 0x1572 <ProcessExecuteCommand+0x35c>
	}
	else if (strcmp(command, ATLOGGINGOFF) == 0)
    12d4:	69 e2       	ldi	r22, 0x29	; 41
    12d6:	72 e2       	ldi	r23, 0x22	; 34
    12d8:	8d 2f       	mov	r24, r29
    12da:	9c 2f       	mov	r25, r28
    12dc:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    12e0:	89 2b       	or	r24, r25
    12e2:	19 f4       	brne	.+6      	; 0x12ea <ProcessExecuteCommand+0xd4>
	{
		LoggingOn = false;
    12e4:	10 92 db 24 	sts	0x24DB, r1	; 0x8024db <LoggingOn>
    12e8:	44 c1       	rjmp	.+648    	; 0x1572 <ProcessExecuteCommand+0x35c>
	}	
	else if (strcmp(command, ATMENUUP) == 0 && CheckMode(ProfileMenuMode))	//MENU MODE
    12ea:	64 e3       	ldi	r22, 0x34	; 52
    12ec:	72 e2       	ldi	r23, 0x22	; 34
    12ee:	8d 2f       	mov	r24, r29
    12f0:	9c 2f       	mov	r25, r28
    12f2:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    12f6:	89 2b       	or	r24, r25
    12f8:	39 f4       	brne	.+14     	; 0x1308 <ProcessExecuteCommand+0xf2>
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	4e df       	rcall	.-356    	; 0x119a <CheckMode>
    12fe:	88 23       	and	r24, r24
    1300:	19 f0       	breq	.+6      	; 0x1308 <ProcessExecuteCommand+0xf2>
	{
		MenuUp();
    1302:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <MenuUp>
    1306:	35 c1       	rjmp	.+618    	; 0x1572 <ProcessExecuteCommand+0x35c>
	}
	else if (strcmp(command, ATMENUDOWN) == 0 && CheckMode(ProfileMenuMode))
    1308:	6b e3       	ldi	r22, 0x3B	; 59
    130a:	72 e2       	ldi	r23, 0x22	; 34
    130c:	8d 2f       	mov	r24, r29
    130e:	9c 2f       	mov	r25, r28
    1310:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    1314:	89 2b       	or	r24, r25
    1316:	39 f4       	brne	.+14     	; 0x1326 <ProcessExecuteCommand+0x110>
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	3f df       	rcall	.-386    	; 0x119a <CheckMode>
    131c:	88 23       	and	r24, r24
    131e:	19 f0       	breq	.+6      	; 0x1326 <ProcessExecuteCommand+0x110>
	{
		MenuDown();
    1320:	0e 94 15 18 	call	0x302a	; 0x302a <MenuDown>
    1324:	26 c1       	rjmp	.+588    	; 0x1572 <ProcessExecuteCommand+0x35c>
	}
	else if (strcmp(command, ATMENUSELECT) == 0 && CheckMode(ProfileMenuMode))
    1326:	64 e4       	ldi	r22, 0x44	; 68
    1328:	72 e2       	ldi	r23, 0x22	; 34
    132a:	8d 2f       	mov	r24, r29
    132c:	9c 2f       	mov	r25, r28
    132e:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    1332:	89 2b       	or	r24, r25
    1334:	39 f4       	brne	.+14     	; 0x1344 <ProcessExecuteCommand+0x12e>
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	30 df       	rcall	.-416    	; 0x119a <CheckMode>
    133a:	88 23       	and	r24, r24
    133c:	19 f0       	breq	.+6      	; 0x1344 <ProcessExecuteCommand+0x12e>
	{
		SetCommand();
    133e:	0e 94 4e 1b 	call	0x369c	; 0x369c <SetCommand>
    1342:	17 c1       	rjmp	.+558    	; 0x1572 <ProcessExecuteCommand+0x35c>
	}
	else if (strcmp(command, ATTOPHEATON) == 0 && CheckMode(TestMode))	//TEST MODE
    1344:	6f e4       	ldi	r22, 0x4F	; 79
    1346:	72 e2       	ldi	r23, 0x22	; 34
    1348:	8d 2f       	mov	r24, r29
    134a:	9c 2f       	mov	r25, r28
    134c:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    1350:	89 2b       	or	r24, r25
    1352:	41 f4       	brne	.+16     	; 0x1364 <ProcessExecuteCommand+0x14e>
    1354:	82 e0       	ldi	r24, 0x02	; 2
    1356:	21 df       	rcall	.-446    	; 0x119a <CheckMode>
    1358:	88 23       	and	r24, r24
    135a:	21 f0       	breq	.+8      	; 0x1364 <ProcessExecuteCommand+0x14e>
	{
		HTOP_ON;
    135c:	80 e4       	ldi	r24, 0x40	; 64
    135e:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    1362:	07 c1       	rjmp	.+526    	; 0x1572 <ProcessExecuteCommand+0x35c>
	}
	else if (strcmp(command, ATTOPHEATOFF) == 0 && CheckMode(TestMode))
    1364:	69 e5       	ldi	r22, 0x59	; 89
    1366:	72 e2       	ldi	r23, 0x22	; 34
    1368:	8d 2f       	mov	r24, r29
    136a:	9c 2f       	mov	r25, r28
    136c:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    1370:	89 2b       	or	r24, r25
    1372:	41 f4       	brne	.+16     	; 0x1384 <ProcessExecuteCommand+0x16e>
    1374:	82 e0       	ldi	r24, 0x02	; 2
    1376:	11 df       	rcall	.-478    	; 0x119a <CheckMode>
    1378:	88 23       	and	r24, r24
    137a:	21 f0       	breq	.+8      	; 0x1384 <ProcessExecuteCommand+0x16e>
	{
		HTOP_OFF;
    137c:	80 e4       	ldi	r24, 0x40	; 64
    137e:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    1382:	f7 c0       	rjmp	.+494    	; 0x1572 <ProcessExecuteCommand+0x35c>
	}
	else if (strcmp(command, ATBOTTOMHEATON) == 0 && CheckMode(TestMode))
    1384:	64 e6       	ldi	r22, 0x64	; 100
    1386:	72 e2       	ldi	r23, 0x22	; 34
    1388:	8d 2f       	mov	r24, r29
    138a:	9c 2f       	mov	r25, r28
    138c:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    1390:	89 2b       	or	r24, r25
    1392:	41 f4       	brne	.+16     	; 0x13a4 <ProcessExecuteCommand+0x18e>
    1394:	82 e0       	ldi	r24, 0x02	; 2
    1396:	01 df       	rcall	.-510    	; 0x119a <CheckMode>
    1398:	88 23       	and	r24, r24
    139a:	21 f0       	breq	.+8      	; 0x13a4 <ProcessExecuteCommand+0x18e>
	{
		HBOTTOM_ON;
    139c:	80 e8       	ldi	r24, 0x80	; 128
    139e:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    13a2:	e7 c0       	rjmp	.+462    	; 0x1572 <ProcessExecuteCommand+0x35c>
	}
	else if (strcmp(command, ATBOTTOMHEATOFF) == 0 && CheckMode(TestMode))
    13a4:	61 e7       	ldi	r22, 0x71	; 113
    13a6:	72 e2       	ldi	r23, 0x22	; 34
    13a8:	8d 2f       	mov	r24, r29
    13aa:	9c 2f       	mov	r25, r28
    13ac:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    13b0:	89 2b       	or	r24, r25
    13b2:	41 f4       	brne	.+16     	; 0x13c4 <ProcessExecuteCommand+0x1ae>
    13b4:	82 e0       	ldi	r24, 0x02	; 2
    13b6:	f1 de       	rcall	.-542    	; 0x119a <CheckMode>
    13b8:	88 23       	and	r24, r24
    13ba:	21 f0       	breq	.+8      	; 0x13c4 <ProcessExecuteCommand+0x1ae>
	{
		HBOTTOM_OFF;
    13bc:	80 e8       	ldi	r24, 0x80	; 128
    13be:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    13c2:	d7 c0       	rjmp	.+430    	; 0x1572 <ProcessExecuteCommand+0x35c>
	}
	else if (strcmp(command, ATFANON) == 0 && CheckMode(TestMode))
    13c4:	6f e7       	ldi	r22, 0x7F	; 127
    13c6:	72 e2       	ldi	r23, 0x22	; 34
    13c8:	8d 2f       	mov	r24, r29
    13ca:	9c 2f       	mov	r25, r28
    13cc:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    13d0:	89 2b       	or	r24, r25
    13d2:	41 f4       	brne	.+16     	; 0x13e4 <ProcessExecuteCommand+0x1ce>
    13d4:	82 e0       	ldi	r24, 0x02	; 2
    13d6:	e1 de       	rcall	.-574    	; 0x119a <CheckMode>
    13d8:	88 23       	and	r24, r24
    13da:	21 f0       	breq	.+8      	; 0x13e4 <ProcessExecuteCommand+0x1ce>
	{
		FAN_ON;
    13dc:	80 e2       	ldi	r24, 0x20	; 32
    13de:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    13e2:	c7 c0       	rjmp	.+398    	; 0x1572 <ProcessExecuteCommand+0x35c>
	}
	else if (strcmp(command, ATFANOFF) == 0 && CheckMode(TestMode))
    13e4:	65 e8       	ldi	r22, 0x85	; 133
    13e6:	72 e2       	ldi	r23, 0x22	; 34
    13e8:	8d 2f       	mov	r24, r29
    13ea:	9c 2f       	mov	r25, r28
    13ec:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    13f0:	89 2b       	or	r24, r25
    13f2:	41 f4       	brne	.+16     	; 0x1404 <ProcessExecuteCommand+0x1ee>
    13f4:	82 e0       	ldi	r24, 0x02	; 2
    13f6:	d1 de       	rcall	.-606    	; 0x119a <CheckMode>
    13f8:	88 23       	and	r24, r24
    13fa:	21 f0       	breq	.+8      	; 0x1404 <ProcessExecuteCommand+0x1ee>
	{
		FAN_OFF;
    13fc:	80 e2       	ldi	r24, 0x20	; 32
    13fe:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    1402:	b7 c0       	rjmp	.+366    	; 0x1572 <ProcessExecuteCommand+0x35c>
	}
	else if (strcmp(command, ATBUZZERON) == 0 && CheckMode(TestMode))
    1404:	6c e8       	ldi	r22, 0x8C	; 140
    1406:	72 e2       	ldi	r23, 0x22	; 34
    1408:	8d 2f       	mov	r24, r29
    140a:	9c 2f       	mov	r25, r28
    140c:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    1410:	89 2b       	or	r24, r25
    1412:	41 f4       	brne	.+16     	; 0x1424 <ProcessExecuteCommand+0x20e>
    1414:	82 e0       	ldi	r24, 0x02	; 2
    1416:	c1 de       	rcall	.-638    	; 0x119a <CheckMode>
    1418:	88 23       	and	r24, r24
    141a:	21 f0       	breq	.+8      	; 0x1424 <ProcessExecuteCommand+0x20e>
	{
		BUZZER_ON;
    141c:	88 e0       	ldi	r24, 0x08	; 8
    141e:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    1422:	a7 c0       	rjmp	.+334    	; 0x1572 <ProcessExecuteCommand+0x35c>
	}
	else if (strcmp(command, ATBUZZEROFF) == 0 && CheckMode(TestMode))
    1424:	65 e9       	ldi	r22, 0x95	; 149
    1426:	72 e2       	ldi	r23, 0x22	; 34
    1428:	8d 2f       	mov	r24, r29
    142a:	9c 2f       	mov	r25, r28
    142c:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    1430:	89 2b       	or	r24, r25
    1432:	41 f4       	brne	.+16     	; 0x1444 <ProcessExecuteCommand+0x22e>
    1434:	82 e0       	ldi	r24, 0x02	; 2
    1436:	b1 de       	rcall	.-670    	; 0x119a <CheckMode>
    1438:	88 23       	and	r24, r24
    143a:	21 f0       	breq	.+8      	; 0x1444 <ProcessExecuteCommand+0x22e>
	{
		BUZZER_OFF;
    143c:	88 e0       	ldi	r24, 0x08	; 8
    143e:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    1442:	97 c0       	rjmp	.+302    	; 0x1572 <ProcessExecuteCommand+0x35c>
	}
	else if (strcmp(command, ATRLEDON) == 0 && CheckMode(TestMode))
    1444:	6f e9       	ldi	r22, 0x9F	; 159
    1446:	72 e2       	ldi	r23, 0x22	; 34
    1448:	8d 2f       	mov	r24, r29
    144a:	9c 2f       	mov	r25, r28
    144c:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    1450:	89 2b       	or	r24, r25
    1452:	41 f4       	brne	.+16     	; 0x1464 <ProcessExecuteCommand+0x24e>
    1454:	82 e0       	ldi	r24, 0x02	; 2
    1456:	a1 de       	rcall	.-702    	; 0x119a <CheckMode>
    1458:	88 23       	and	r24, r24
    145a:	21 f0       	breq	.+8      	; 0x1464 <ProcessExecuteCommand+0x24e>
	{
		RLED_ON;
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
    1462:	87 c0       	rjmp	.+270    	; 0x1572 <ProcessExecuteCommand+0x35c>
	}
	else if (strcmp(command, ATRLEDOFF) == 0 && CheckMode(TestMode))
    1464:	66 ea       	ldi	r22, 0xA6	; 166
    1466:	72 e2       	ldi	r23, 0x22	; 34
    1468:	8d 2f       	mov	r24, r29
    146a:	9c 2f       	mov	r25, r28
    146c:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    1470:	89 2b       	or	r24, r25
    1472:	41 f4       	brne	.+16     	; 0x1484 <ProcessExecuteCommand+0x26e>
    1474:	82 e0       	ldi	r24, 0x02	; 2
    1476:	91 de       	rcall	.-734    	; 0x119a <CheckMode>
    1478:	88 23       	and	r24, r24
    147a:	21 f0       	breq	.+8      	; 0x1484 <ProcessExecuteCommand+0x26e>
	{
		RLED_OFF;
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
    1482:	77 c0       	rjmp	.+238    	; 0x1572 <ProcessExecuteCommand+0x35c>
	}
	else if (strcmp(command, ATGLEDON) == 0 && CheckMode(TestMode))
    1484:	6e ea       	ldi	r22, 0xAE	; 174
    1486:	72 e2       	ldi	r23, 0x22	; 34
    1488:	8d 2f       	mov	r24, r29
    148a:	9c 2f       	mov	r25, r28
    148c:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    1490:	89 2b       	or	r24, r25
    1492:	41 f4       	brne	.+16     	; 0x14a4 <ProcessExecuteCommand+0x28e>
    1494:	82 e0       	ldi	r24, 0x02	; 2
    1496:	81 de       	rcall	.-766    	; 0x119a <CheckMode>
    1498:	88 23       	and	r24, r24
    149a:	21 f0       	breq	.+8      	; 0x14a4 <ProcessExecuteCommand+0x28e>
	{
		GLED_ON;
    149c:	82 e0       	ldi	r24, 0x02	; 2
    149e:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
    14a2:	67 c0       	rjmp	.+206    	; 0x1572 <ProcessExecuteCommand+0x35c>
	}
	else if (strcmp(command, ATGLEDOFF) == 0 && CheckMode(TestMode))
    14a4:	65 eb       	ldi	r22, 0xB5	; 181
    14a6:	72 e2       	ldi	r23, 0x22	; 34
    14a8:	8d 2f       	mov	r24, r29
    14aa:	9c 2f       	mov	r25, r28
    14ac:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    14b0:	89 2b       	or	r24, r25
    14b2:	41 f4       	brne	.+16     	; 0x14c4 <ProcessExecuteCommand+0x2ae>
    14b4:	82 e0       	ldi	r24, 0x02	; 2
    14b6:	71 de       	rcall	.-798    	; 0x119a <CheckMode>
    14b8:	88 23       	and	r24, r24
    14ba:	21 f0       	breq	.+8      	; 0x14c4 <ProcessExecuteCommand+0x2ae>
	{
		GLED_OFF;
    14bc:	82 e0       	ldi	r24, 0x02	; 2
    14be:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
    14c2:	57 c0       	rjmp	.+174    	; 0x1572 <ProcessExecuteCommand+0x35c>
	}
	else if (strcmp(command, ATBLEDON) == 0 && CheckMode(TestMode))
    14c4:	6d eb       	ldi	r22, 0xBD	; 189
    14c6:	72 e2       	ldi	r23, 0x22	; 34
    14c8:	8d 2f       	mov	r24, r29
    14ca:	9c 2f       	mov	r25, r28
    14cc:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    14d0:	89 2b       	or	r24, r25
    14d2:	41 f4       	brne	.+16     	; 0x14e4 <ProcessExecuteCommand+0x2ce>
    14d4:	82 e0       	ldi	r24, 0x02	; 2
    14d6:	61 de       	rcall	.-830    	; 0x119a <CheckMode>
    14d8:	88 23       	and	r24, r24
    14da:	21 f0       	breq	.+8      	; 0x14e4 <ProcessExecuteCommand+0x2ce>
	{
		BLED_ON;
    14dc:	84 e0       	ldi	r24, 0x04	; 4
    14de:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
    14e2:	47 c0       	rjmp	.+142    	; 0x1572 <ProcessExecuteCommand+0x35c>
	}
	else if (strcmp(command, ATBLEDOFF) == 0 && CheckMode(TestMode))
    14e4:	64 ec       	ldi	r22, 0xC4	; 196
    14e6:	72 e2       	ldi	r23, 0x22	; 34
    14e8:	8d 2f       	mov	r24, r29
    14ea:	9c 2f       	mov	r25, r28
    14ec:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    14f0:	89 2b       	or	r24, r25
    14f2:	41 f4       	brne	.+16     	; 0x1504 <ProcessExecuteCommand+0x2ee>
    14f4:	82 e0       	ldi	r24, 0x02	; 2
    14f6:	51 de       	rcall	.-862    	; 0x119a <CheckMode>
    14f8:	88 23       	and	r24, r24
    14fa:	21 f0       	breq	.+8      	; 0x1504 <ProcessExecuteCommand+0x2ee>
	{
		BLED_OFF;
    14fc:	84 e0       	ldi	r24, 0x04	; 4
    14fe:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
    1502:	37 c0       	rjmp	.+110    	; 0x1572 <ProcessExecuteCommand+0x35c>
	}
	else if (strcmp(command, ATSTART) == 0 && CheckMode(ReflowMode))	//REFLOW MODE
    1504:	6c ec       	ldi	r22, 0xCC	; 204
    1506:	72 e2       	ldi	r23, 0x22	; 34
    1508:	8d 2f       	mov	r24, r29
    150a:	9c 2f       	mov	r25, r28
    150c:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    1510:	89 2b       	or	r24, r25
    1512:	39 f4       	brne	.+14     	; 0x1522 <ProcessExecuteCommand+0x30c>
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	41 de       	rcall	.-894    	; 0x119a <CheckMode>
    1518:	88 23       	and	r24, r24
    151a:	19 f0       	breq	.+6      	; 0x1522 <ProcessExecuteCommand+0x30c>
	{
		StartOven();
    151c:	0e 94 59 19 	call	0x32b2	; 0x32b2 <StartOven>
    1520:	28 c0       	rjmp	.+80     	; 0x1572 <ProcessExecuteCommand+0x35c>
	}	
	else if (strcmp(command, ATSTOP) == 0 && CheckMode(ReflowMode))
    1522:	62 ed       	ldi	r22, 0xD2	; 210
    1524:	72 e2       	ldi	r23, 0x22	; 34
    1526:	8d 2f       	mov	r24, r29
    1528:	9c 2f       	mov	r25, r28
    152a:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    152e:	89 2b       	or	r24, r25
    1530:	39 f4       	brne	.+14     	; 0x1540 <ProcessExecuteCommand+0x32a>
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	32 de       	rcall	.-924    	; 0x119a <CheckMode>
    1536:	88 23       	and	r24, r24
    1538:	19 f0       	breq	.+6      	; 0x1540 <ProcessExecuteCommand+0x32a>
	{
		StopOven();
    153a:	0e 94 55 19 	call	0x32aa	; 0x32aa <StopOven>
    153e:	19 c0       	rjmp	.+50     	; 0x1572 <ProcessExecuteCommand+0x35c>
	}					
	else
	{
		printf("%s,%s\r\n", ERR_UNKNOWN_CMD, command);
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
    1544:	87 ed       	ldi	r24, 0xD7	; 215
    1546:	92 e2       	ldi	r25, 0x22	; 34
    1548:	9f 93       	push	r25
    154a:	8f 93       	push	r24
    154c:	8d ee       	ldi	r24, 0xED	; 237
    154e:	92 e2       	ldi	r25, 0x22	; 34
    1550:	9f 93       	push	r25
    1552:	8f 93       	push	r24
    1554:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <printf>
		memset(command, 0, MAX_COMMAND_LEN);
    1558:	ed 2f       	mov	r30, r29
    155a:	fc 2f       	mov	r31, r28
    155c:	80 e2       	ldi	r24, 0x20	; 32
    155e:	df 01       	movw	r26, r30
    1560:	1d 92       	st	X+, r1
    1562:	8a 95       	dec	r24
    1564:	e9 f7       	brne	.-6      	; 0x1560 <ProcessExecuteCommand+0x34a>
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
	}			
}
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	08 95       	ret

00001578 <ProcessQueryCommand>:

void ProcessQueryCommand(uint8_t * command)
{
    1578:	2f 92       	push	r2
    157a:	3f 92       	push	r3
    157c:	4f 92       	push	r4
    157e:	5f 92       	push	r5
    1580:	6f 92       	push	r6
    1582:	7f 92       	push	r7
    1584:	8f 92       	push	r8
    1586:	9f 92       	push	r9
    1588:	af 92       	push	r10
    158a:	bf 92       	push	r11
    158c:	cf 92       	push	r12
    158e:	df 92       	push	r13
    1590:	ef 92       	push	r14
    1592:	ff 92       	push	r15
    1594:	0f 93       	push	r16
    1596:	1f 93       	push	r17
    1598:	cf 93       	push	r28
    159a:	df 93       	push	r29
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
    15a0:	cf 5c       	subi	r28, 0xCF	; 207
    15a2:	d1 09       	sbc	r29, r1
    15a4:	cd bf       	out	0x3d, r28	; 61
    15a6:	de bf       	out	0x3e, r29	; 62
    15a8:	8c 01       	movw	r16, r24
	_cmdState = Waiting;
    15aa:	10 92 b4 24 	sts	0x24B4, r1	; 0x8024b4 <_cmdState>
	
	if (strcmp(command, ATTEMPMODE) == 0)	//ANY MODE
    15ae:	65 ef       	ldi	r22, 0xF5	; 245
    15b0:	72 e2       	ldi	r23, 0x22	; 34
    15b2:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    15b6:	89 2b       	or	r24, r25
    15b8:	71 f4       	brne	.+28     	; 0x15d6 <ProcessQueryCommand+0x5e>
	{
		if (TempType == C)
    15ba:	80 91 e0 24 	lds	r24, 0x24E0	; 0x8024e0 <TempType>
    15be:	81 11       	cpse	r24, r1
    15c0:	05 c0       	rjmp	.+10     	; 0x15cc <ProcessQueryCommand+0x54>
			printf("C\r\n");
    15c2:	8e ef       	ldi	r24, 0xFE	; 254
    15c4:	92 e2       	ldi	r25, 0x22	; 34
    15c6:	0e 94 89 35 	call	0x6b12	; 0x6b12 <puts>
    15ca:	65 c3       	rjmp	.+1738   	; 0x1c96 <ProcessQueryCommand+0x71e>
		else
			printf("F\r\n");
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	93 e2       	ldi	r25, 0x23	; 35
    15d0:	0e 94 89 35 	call	0x6b12	; 0x6b12 <puts>
    15d4:	60 c3       	rjmp	.+1728   	; 0x1c96 <ProcessQueryCommand+0x71e>
	}
	else if (strcmp(command, ATBACKLIGHTONTIME) == 0)
    15d6:	64 e0       	ldi	r22, 0x04	; 4
    15d8:	73 e2       	ldi	r23, 0x23	; 35
    15da:	c8 01       	movw	r24, r16
    15dc:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    15e0:	89 2b       	or	r24, r25
    15e2:	89 f4       	brne	.+34     	; 0x1606 <ProcessQueryCommand+0x8e>
	{
		printf("%d\r\n", BackLightOnTime);
    15e4:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <BackLightOnTime+0x1>
    15e8:	8f 93       	push	r24
    15ea:	80 91 19 20 	lds	r24, 0x2019	; 0x802019 <BackLightOnTime>
    15ee:	8f 93       	push	r24
    15f0:	8a e5       	ldi	r24, 0x5A	; 90
    15f2:	93 e2       	ldi	r25, 0x23	; 35
    15f4:	9f 93       	push	r25
    15f6:	8f 93       	push	r24
    15f8:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <printf>
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	48 c3       	rjmp	.+1680   	; 0x1c96 <ProcessQueryCommand+0x71e>
	}
	else if (strcmp(command, ATOVENSTATE) == 0)
    1606:	64 e1       	ldi	r22, 0x14	; 20
    1608:	73 e2       	ldi	r23, 0x23	; 35
    160a:	c8 01       	movw	r24, r16
    160c:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    1610:	89 2b       	or	r24, r25
    1612:	71 f4       	brne	.+28     	; 0x1630 <ProcessQueryCommand+0xb8>
	{
		printf("%s\r\n", GetOvenState());
    1614:	62 dd       	rcall	.-1340   	; 0x10da <GetOvenState>
    1616:	9f 93       	push	r25
    1618:	8f 93       	push	r24
    161a:	8c e9       	ldi	r24, 0x9C	; 156
    161c:	93 e2       	ldi	r25, 0x23	; 35
    161e:	9f 93       	push	r25
    1620:	8f 93       	push	r24
    1622:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <printf>
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	33 c3       	rjmp	.+1638   	; 0x1c96 <ProcessQueryCommand+0x71e>
	}
	else if (strcmp(command, ATOVENTEMP) == 0)
    1630:	6e e1       	ldi	r22, 0x1E	; 30
    1632:	73 e2       	ldi	r23, 0x23	; 35
    1634:	c8 01       	movw	r24, r16
    1636:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    163a:	89 2b       	or	r24, r25
    163c:	61 f5       	brne	.+88     	; 0x1696 <ProcessQueryCommand+0x11e>
	{
		uint16_t temp = GetTemp() >> 4;
    163e:	0e 94 8b 30 	call	0x6116	; 0x6116 <GetTemp>
    1642:	bc 01       	movw	r22, r24
    1644:	72 95       	swap	r23
    1646:	62 95       	swap	r22
    1648:	6f 70       	andi	r22, 0x0F	; 15
    164a:	67 27       	eor	r22, r23
    164c:	7f 70       	andi	r23, 0x0F	; 15
    164e:	67 27       	eor	r22, r23
		
		if (TempType == F)
    1650:	80 91 e0 24 	lds	r24, 0x24E0	; 0x8024e0 <TempType>
    1654:	81 30       	cpi	r24, 0x01	; 1
    1656:	91 f4       	brne	.+36     	; 0x167c <ProcessQueryCommand+0x104>
			temp = ((float)temp * 1.8) + 32;
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	0e 94 66 32 	call	0x64cc	; 0x64cc <__floatunsisf>
    1660:	26 e6       	ldi	r18, 0x66	; 102
    1662:	36 e6       	ldi	r19, 0x66	; 102
    1664:	46 ee       	ldi	r20, 0xE6	; 230
    1666:	5f e3       	ldi	r21, 0x3F	; 63
    1668:	0e 94 18 33 	call	0x6630	; 0x6630 <__mulsf3>
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	40 e0       	ldi	r20, 0x00	; 0
    1672:	52 e4       	ldi	r21, 0x42	; 66
    1674:	0e 94 65 31 	call	0x62ca	; 0x62ca <__addsf3>
    1678:	0e 94 3a 32 	call	0x6474	; 0x6474 <__fixunssfsi>
			
		printf("%d\r\n", temp);
    167c:	7f 93       	push	r23
    167e:	6f 93       	push	r22
    1680:	8a e5       	ldi	r24, 0x5A	; 90
    1682:	93 e2       	ldi	r25, 0x23	; 35
    1684:	9f 93       	push	r25
    1686:	8f 93       	push	r24
    1688:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <printf>
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	00 c3       	rjmp	.+1536   	; 0x1c96 <ProcessQueryCommand+0x71e>
	}
	else if (strcmp(command, ATALLSTATE) == 0)
    1696:	67 e2       	ldi	r22, 0x27	; 39
    1698:	73 e2       	ldi	r23, 0x23	; 35
    169a:	c8 01       	movw	r24, r16
    169c:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    16a0:	89 2b       	or	r24, r25
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <ProcessQueryCommand+0x12e>
    16a4:	ae c0       	rjmp	.+348    	; 0x1802 <ProcessQueryCommand+0x28a>
	{
		uint16_t tTemp = GetTargetTemp(RunTime);
    16a6:	80 91 8f 2e 	lds	r24, 0x2E8F	; 0x802e8f <RunTime>
    16aa:	90 91 90 2e 	lds	r25, 0x2E90	; 0x802e90 <RunTime+0x1>
    16ae:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <GetTargetTemp>
    16b2:	8c 01       	movw	r16, r24
		uint16_t aTemp = GetTemp() >> 4;
    16b4:	0e 94 8b 30 	call	0x6116	; 0x6116 <GetTemp>
    16b8:	7c 01       	movw	r14, r24
    16ba:	f6 94       	lsr	r15
    16bc:	e7 94       	ror	r14
    16be:	f6 94       	lsr	r15
    16c0:	e7 94       	ror	r14
    16c2:	f6 94       	lsr	r15
    16c4:	e7 94       	ror	r14
    16c6:	f6 94       	lsr	r15
    16c8:	e7 94       	ror	r14

		if (TempType == F)
    16ca:	80 91 e0 24 	lds	r24, 0x24E0	; 0x8024e0 <TempType>
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	41 f5       	brne	.+80     	; 0x1722 <ProcessQueryCommand+0x1aa>
		{
			tTemp = ((float)tTemp * 1.8) + 32;
    16d2:	b8 01       	movw	r22, r16
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	0e 94 66 32 	call	0x64cc	; 0x64cc <__floatunsisf>
    16dc:	26 e6       	ldi	r18, 0x66	; 102
    16de:	36 e6       	ldi	r19, 0x66	; 102
    16e0:	46 ee       	ldi	r20, 0xE6	; 230
    16e2:	5f e3       	ldi	r21, 0x3F	; 63
    16e4:	0e 94 18 33 	call	0x6630	; 0x6630 <__mulsf3>
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	40 e0       	ldi	r20, 0x00	; 0
    16ee:	52 e4       	ldi	r21, 0x42	; 66
    16f0:	0e 94 65 31 	call	0x62ca	; 0x62ca <__addsf3>
    16f4:	0e 94 3a 32 	call	0x6474	; 0x6474 <__fixunssfsi>
    16f8:	8b 01       	movw	r16, r22
			aTemp = ((float)aTemp * 1.8) + 32;			
    16fa:	b7 01       	movw	r22, r14
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	0e 94 66 32 	call	0x64cc	; 0x64cc <__floatunsisf>
    1704:	26 e6       	ldi	r18, 0x66	; 102
    1706:	36 e6       	ldi	r19, 0x66	; 102
    1708:	46 ee       	ldi	r20, 0xE6	; 230
    170a:	5f e3       	ldi	r21, 0x3F	; 63
    170c:	0e 94 18 33 	call	0x6630	; 0x6630 <__mulsf3>
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	40 e0       	ldi	r20, 0x00	; 0
    1716:	52 e4       	ldi	r21, 0x42	; 66
    1718:	0e 94 65 31 	call	0x62ca	; 0x62ca <__addsf3>
    171c:	0e 94 3a 32 	call	0x6474	; 0x6474 <__fixunssfsi>
    1720:	7b 01       	movw	r14, r22

		
		//Profile #, Oven Mode, Oven State, Target Time, Actual Time, Target Temp, Actual Temp, r led, g led, b led, backlight, top heat, bottom heat, fan, buzzer
		printf("%d,%s,%s,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\r\n", 
			ProfileNumber, GetOvenMode(), GetOvenState(), MaxTime, RunTime, tTemp, aTemp, 
			RLED_STATE != 0, GLED_STATE != 0, BLED_STATE != 0, BL_STATE != 0, HTOP_STATE != 0, HBOTTOM_STATE != 0, FAN_STATE != 0, BUZZER_STATE != 0);
    1722:	60 90 88 06 	lds	r6, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    1726:	e0 e0       	ldi	r30, 0x00	; 0
    1728:	f6 e0       	ldi	r31, 0x06	; 6
    172a:	70 84       	ldd	r7, Z+8	; 0x08
    172c:	80 84       	ldd	r8, Z+8	; 0x08
    172e:	90 84       	ldd	r9, Z+8	; 0x08
    1730:	e0 e2       	ldi	r30, 0x20	; 32
    1732:	f6 e0       	ldi	r31, 0x06	; 6
    1734:	a0 84       	ldd	r10, Z+8	; 0x08
    1736:	b0 84       	ldd	r11, Z+8	; 0x08
    1738:	c0 84       	ldd	r12, Z+8	; 0x08
    173a:	d0 84       	ldd	r13, Z+8	; 0x08
			aTemp = ((float)aTemp * 1.8) + 32;			
		}

		
		//Profile #, Oven Mode, Oven State, Target Time, Actual Time, Target Temp, Actual Temp, r led, g led, b led, backlight, top heat, bottom heat, fan, buzzer
		printf("%d,%s,%s,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\r\n", 
    173c:	30 90 8f 2e 	lds	r3, 0x2E8F	; 0x802e8f <RunTime>
    1740:	20 90 90 2e 	lds	r2, 0x2E90	; 0x802e90 <RunTime+0x1>
    1744:	50 90 91 2e 	lds	r5, 0x2E91	; 0x802e91 <MaxTime>
    1748:	40 90 92 2e 	lds	r4, 0x2E92	; 0x802e92 <MaxTime+0x1>
    174c:	c6 dc       	rcall	.-1652   	; 0x10da <GetOvenState>
    174e:	c2 53       	subi	r28, 0x32	; 50
    1750:	df 4f       	sbci	r29, 0xFF	; 255
    1752:	88 83       	st	Y, r24
    1754:	ce 5c       	subi	r28, 0xCE	; 206
    1756:	d0 40       	sbci	r29, 0x00	; 0
    1758:	c1 53       	subi	r28, 0x31	; 49
    175a:	df 4f       	sbci	r29, 0xFF	; 255
    175c:	98 83       	st	Y, r25
    175e:	cf 5c       	subi	r28, 0xCF	; 207
    1760:	d0 40       	sbci	r29, 0x00	; 0
    1762:	d6 dc       	rcall	.-1620   	; 0x1110 <GetOvenMode>
    1764:	63 fa       	bst	r6, 3
    1766:	66 24       	eor	r6, r6
    1768:	60 f8       	bld	r6, 0
    176a:	1f 92       	push	r1
    176c:	6f 92       	push	r6
    176e:	75 fa       	bst	r7, 5
    1770:	77 24       	eor	r7, r7
    1772:	70 f8       	bld	r7, 0
    1774:	1f 92       	push	r1
    1776:	7f 92       	push	r7
    1778:	28 2d       	mov	r18, r8
    177a:	88 0c       	add	r8, r8
    177c:	33 0b       	sbc	r19, r19
    177e:	23 2f       	mov	r18, r19
    1780:	22 1f       	adc	r18, r18
    1782:	22 27       	eor	r18, r18
    1784:	22 1f       	adc	r18, r18
    1786:	1f 92       	push	r1
    1788:	2f 93       	push	r18
    178a:	96 fa       	bst	r9, 6
    178c:	99 24       	eor	r9, r9
    178e:	90 f8       	bld	r9, 0
    1790:	1f 92       	push	r1
    1792:	9f 92       	push	r9
    1794:	a3 fa       	bst	r10, 3
    1796:	aa 24       	eor	r10, r10
    1798:	a0 f8       	bld	r10, 0
    179a:	1f 92       	push	r1
    179c:	af 92       	push	r10
    179e:	b2 fa       	bst	r11, 2
    17a0:	bb 24       	eor	r11, r11
    17a2:	b0 f8       	bld	r11, 0
    17a4:	1f 92       	push	r1
    17a6:	bf 92       	push	r11
    17a8:	c1 fa       	bst	r12, 1
    17aa:	cc 24       	eor	r12, r12
    17ac:	c0 f8       	bld	r12, 0
    17ae:	1f 92       	push	r1
    17b0:	cf 92       	push	r12
    17b2:	d0 fa       	bst	r13, 0
    17b4:	dd 24       	eor	r13, r13
    17b6:	d0 f8       	bld	r13, 0
    17b8:	1f 92       	push	r1
    17ba:	df 92       	push	r13
    17bc:	ff 92       	push	r15
    17be:	ef 92       	push	r14
    17c0:	1f 93       	push	r17
    17c2:	0f 93       	push	r16
    17c4:	2f 92       	push	r2
    17c6:	3f 92       	push	r3
    17c8:	4f 92       	push	r4
    17ca:	5f 92       	push	r5
    17cc:	c1 53       	subi	r28, 0x31	; 49
    17ce:	df 4f       	sbci	r29, 0xFF	; 255
    17d0:	28 81       	ld	r18, Y
    17d2:	cf 5c       	subi	r28, 0xCF	; 207
    17d4:	d0 40       	sbci	r29, 0x00	; 0
    17d6:	2f 93       	push	r18
    17d8:	c2 53       	subi	r28, 0x32	; 50
    17da:	df 4f       	sbci	r29, 0xFF	; 255
    17dc:	e8 81       	ld	r30, Y
    17de:	ce 5c       	subi	r28, 0xCE	; 206
    17e0:	d0 40       	sbci	r29, 0x00	; 0
    17e2:	ef 93       	push	r30
    17e4:	9f 93       	push	r25
    17e6:	8f 93       	push	r24
    17e8:	80 91 d9 24 	lds	r24, 0x24D9	; 0x8024d9 <ProfileNumber>
    17ec:	1f 92       	push	r1
    17ee:	8f 93       	push	r24
    17f0:	80 e3       	ldi	r24, 0x30	; 48
    17f2:	93 e2       	ldi	r25, 0x23	; 35
    17f4:	9f 93       	push	r25
    17f6:	8f 93       	push	r24
    17f8:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <printf>
    17fc:	cd bf       	out	0x3d, r28	; 61
    17fe:	de bf       	out	0x3e, r29	; 62
    1800:	4a c2       	rjmp	.+1172   	; 0x1c96 <ProcessQueryCommand+0x71e>
			ProfileNumber, GetOvenMode(), GetOvenState(), MaxTime, RunTime, tTemp, aTemp, 
			RLED_STATE != 0, GLED_STATE != 0, BLED_STATE != 0, BL_STATE != 0, HTOP_STATE != 0, HBOTTOM_STATE != 0, FAN_STATE != 0, BUZZER_STATE != 0);

	}
	else if (strcmp(command, ATOVENMODE) == 0)
    1802:	6f e5       	ldi	r22, 0x5F	; 95
    1804:	73 e2       	ldi	r23, 0x23	; 35
    1806:	c8 01       	movw	r24, r16
    1808:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    180c:	89 2b       	or	r24, r25
    180e:	71 f4       	brne	.+28     	; 0x182c <ProcessQueryCommand+0x2b4>
	{
		printf("%s\r\n", GetOvenMode());
    1810:	7f dc       	rcall	.-1794   	; 0x1110 <GetOvenMode>
    1812:	9f 93       	push	r25
    1814:	8f 93       	push	r24
    1816:	8c e9       	ldi	r24, 0x9C	; 156
    1818:	93 e2       	ldi	r25, 0x23	; 35
    181a:	9f 93       	push	r25
    181c:	8f 93       	push	r24
    181e:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <printf>
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	35 c2       	rjmp	.+1130   	; 0x1c96 <ProcessQueryCommand+0x71e>
	}	
	else if (strcmp(command, ATBUZZERONTIME) == 0)
    182c:	68 e6       	ldi	r22, 0x68	; 104
    182e:	73 e2       	ldi	r23, 0x23	; 35
    1830:	c8 01       	movw	r24, r16
    1832:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    1836:	89 2b       	or	r24, r25
    1838:	89 f4       	brne	.+34     	; 0x185c <ProcessQueryCommand+0x2e4>
	{
		printf("%d\r\n", BuzzerOnTime);
    183a:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <BuzzerOnTime+0x1>
    183e:	8f 93       	push	r24
    1840:	80 91 17 20 	lds	r24, 0x2017	; 0x802017 <BuzzerOnTime>
    1844:	8f 93       	push	r24
    1846:	8a e5       	ldi	r24, 0x5A	; 90
    1848:	93 e2       	ldi	r25, 0x23	; 35
    184a:	9f 93       	push	r25
    184c:	8f 93       	push	r24
    184e:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <printf>
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	1d c2       	rjmp	.+1082   	; 0x1c96 <ProcessQueryCommand+0x71e>
	}
	else if (strcmp(command, ATMAXPROFILES) == 0 && CheckMode(ProfileMenuMode))	//MENU MODE
    185c:	65 e7       	ldi	r22, 0x75	; 117
    185e:	73 e2       	ldi	r23, 0x23	; 35
    1860:	c8 01       	movw	r24, r16
    1862:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    1866:	89 2b       	or	r24, r25
    1868:	91 f4       	brne	.+36     	; 0x188e <ProcessQueryCommand+0x316>
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	96 dc       	rcall	.-1748   	; 0x119a <CheckMode>
    186e:	88 23       	and	r24, r24
    1870:	71 f0       	breq	.+28     	; 0x188e <ProcessQueryCommand+0x316>
	{
		printf("%d\r\n", MAX_PROFILES);
    1872:	1f 92       	push	r1
    1874:	80 e1       	ldi	r24, 0x10	; 16
    1876:	8f 93       	push	r24
    1878:	8a e5       	ldi	r24, 0x5A	; 90
    187a:	93 e2       	ldi	r25, 0x23	; 35
    187c:	9f 93       	push	r25
    187e:	8f 93       	push	r24
    1880:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <printf>
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	04 c2       	rjmp	.+1032   	; 0x1c96 <ProcessQueryCommand+0x71e>
	}
	else if (strcmp(command, ATPROFILENAMES) == 0 && CheckMode(ProfileMenuMode))
    188e:	61 e8       	ldi	r22, 0x81	; 129
    1890:	73 e2       	ldi	r23, 0x23	; 35
    1892:	c8 01       	movw	r24, r16
    1894:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    1898:	89 2b       	or	r24, r25
    189a:	09 f0       	breq	.+2      	; 0x189e <ProcessQueryCommand+0x326>
    189c:	42 c0       	rjmp	.+132    	; 0x1922 <ProcessQueryCommand+0x3aa>
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	7c dc       	rcall	.-1800   	; 0x119a <CheckMode>
    18a2:	88 23       	and	r24, r24
    18a4:	f1 f1       	breq	.+124    	; 0x1922 <ProcessQueryCommand+0x3aa>
	{
		uint8_t pnames[MAX_PROFILES * MAX_NAME_SIZE];
		uint8_t name[MAX_NAME_SIZE + 1];
		
		GetProfileNames(pnames);
    18a6:	ce 01       	movw	r24, r28
    18a8:	01 96       	adiw	r24, 0x01	; 1
    18aa:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <GetProfileNames>
		
		printf("0,Default\r\n");
    18ae:	8e e8       	ldi	r24, 0x8E	; 142
    18b0:	93 e2       	ldi	r25, 0x23	; 35
    18b2:	0e 94 89 35 	call	0x6b12	; 0x6b12 <puts>
    18b6:	fe 01       	movw	r30, r28
    18b8:	31 96       	adiw	r30, 0x01	; 1
    18ba:	4e 01       	movw	r8, r28
    18bc:	95 eb       	ldi	r25, 0xB5	; 181
    18be:	89 0e       	add	r8, r25
    18c0:	91 1c       	adc	r9, r1
    18c2:	cc 24       	eor	r12, r12
    18c4:	c3 94       	inc	r12
    18c6:	d1 2c       	mov	r13, r1
    18c8:	7e 01       	movw	r14, r28
    18ca:	21 ec       	ldi	r18, 0xC1	; 193
    18cc:	e2 0e       	add	r14, r18
    18ce:	f1 1c       	adc	r15, r1
				name[c] = pnames[(i * MAX_NAME_SIZE) + c];
			}
			
			name[MAX_NAME_SIZE] = '\0';
			
			printf("%d,%s\r\n", i + 1, name);
    18d0:	0f 2e       	mov	r0, r31
    18d2:	f9 e9       	ldi	r31, 0x99	; 153
    18d4:	af 2e       	mov	r10, r31
    18d6:	f3 e2       	ldi	r31, 0x23	; 35
    18d8:	bf 2e       	mov	r11, r31
    18da:	f0 2d       	mov	r31, r0
    18dc:	1d c0       	rjmp	.+58     	; 0x1918 <ProcessQueryCommand+0x3a0>
		
		for(uint8_t i = 0; i < MAX_PROFILES - 1; i++)
		{
			for(uint8_t c = 0; c < MAX_NAME_SIZE; c++)
			{
				name[c] = pnames[(i * MAX_NAME_SIZE) + c];
    18de:	81 91       	ld	r24, Z+
    18e0:	8d 93       	st	X+, r24
		
		printf("0,Default\r\n");
		
		for(uint8_t i = 0; i < MAX_PROFILES - 1; i++)
		{
			for(uint8_t c = 0; c < MAX_NAME_SIZE; c++)
    18e2:	e0 17       	cp	r30, r16
    18e4:	f1 07       	cpc	r31, r17
    18e6:	d9 f7       	brne	.-10     	; 0x18de <ProcessQueryCommand+0x366>
			{
				name[c] = pnames[(i * MAX_NAME_SIZE) + c];
			}
			
			name[MAX_NAME_SIZE] = '\0';
    18e8:	f7 01       	movw	r30, r14
    18ea:	14 86       	std	Z+12, r1	; 0x0c
			
			printf("%d,%s\r\n", i + 1, name);
    18ec:	ff 92       	push	r15
    18ee:	ef 92       	push	r14
    18f0:	df 92       	push	r13
    18f2:	cf 92       	push	r12
    18f4:	bf 92       	push	r11
    18f6:	af 92       	push	r10
    18f8:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <printf>
    18fc:	ff ef       	ldi	r31, 0xFF	; 255
    18fe:	cf 1a       	sub	r12, r31
    1900:	df 0a       	sbc	r13, r31
    1902:	f8 01       	movw	r30, r16
		
		GetProfileNames(pnames);
		
		printf("0,Default\r\n");
		
		for(uint8_t i = 0; i < MAX_PROFILES - 1; i++)
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	80 16       	cp	r8, r16
    1912:	91 06       	cpc	r9, r17
    1914:	09 f4       	brne	.+2      	; 0x1918 <ProcessQueryCommand+0x3a0>
    1916:	bf c1       	rjmp	.+894    	; 0x1c96 <ProcessQueryCommand+0x71e>
    1918:	d7 01       	movw	r26, r14
    191a:	8f 01       	movw	r16, r30
    191c:	04 5f       	subi	r16, 0xF4	; 244
    191e:	1f 4f       	sbci	r17, 0xFF	; 255
    1920:	de cf       	rjmp	.-68     	; 0x18de <ProcessQueryCommand+0x366>
			name[MAX_NAME_SIZE] = '\0';
			
			printf("%d,%s\r\n", i + 1, name);
		}
	}
	else if (strcmp(command, ATPROFILE) == 0 && CheckMode(ProfileMenuMode))
    1922:	68 eb       	ldi	r22, 0xB8	; 184
    1924:	73 e2       	ldi	r23, 0x23	; 35
    1926:	c8 01       	movw	r24, r16
    1928:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    192c:	89 2b       	or	r24, r25
    192e:	81 f4       	brne	.+32     	; 0x1950 <ProcessQueryCommand+0x3d8>
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	33 dc       	rcall	.-1946   	; 0x119a <CheckMode>
    1934:	88 23       	and	r24, r24
    1936:	61 f0       	breq	.+24     	; 0x1950 <ProcessQueryCommand+0x3d8>
	{
		_argsIndex = 0;
    1938:	10 92 b1 24 	sts	0x24B1, r1	; 0x8024b1 <_argsIndex>
		_cmdState = Await_Params;
    193c:	85 e0       	ldi	r24, 0x05	; 5
    193e:	80 93 b4 24 	sts	0x24B4, r24	; 0x8024b4 <_cmdState>
		_inputHandler = &GetProfileInputHanlder;
    1942:	8b e5       	ldi	r24, 0x5B	; 91
    1944:	96 e0       	ldi	r25, 0x06	; 6
    1946:	80 93 77 28 	sts	0x2877, r24	; 0x802877 <_inputHandler>
    194a:	90 93 78 28 	sts	0x2878, r25	; 0x802878 <_inputHandler+0x1>
    194e:	a3 c1       	rjmp	.+838    	; 0x1c96 <ProcessQueryCommand+0x71e>
	}
	else if (strcmp(command, ATMAXPROFILESIZE) == 0 && CheckMode(ProfileMenuMode))	
    1950:	61 ea       	ldi	r22, 0xA1	; 161
    1952:	73 e2       	ldi	r23, 0x23	; 35
    1954:	c8 01       	movw	r24, r16
    1956:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    195a:	89 2b       	or	r24, r25
    195c:	91 f4       	brne	.+36     	; 0x1982 <ProcessQueryCommand+0x40a>
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	1c dc       	rcall	.-1992   	; 0x119a <CheckMode>
    1962:	88 23       	and	r24, r24
    1964:	71 f0       	breq	.+28     	; 0x1982 <ProcessQueryCommand+0x40a>
	{
		//Profile size will be the number of flash pages. Subtract 12 for the name and divide by 2 because there are two bytes per entry.
		printf("%d\r\n", (PROFILE_BYTES - MAX_NAME_SIZE) / 2); 
    1966:	1f 92       	push	r1
    1968:	8a e7       	ldi	r24, 0x7A	; 122
    196a:	8f 93       	push	r24
    196c:	8a e5       	ldi	r24, 0x5A	; 90
    196e:	93 e2       	ldi	r25, 0x23	; 35
    1970:	9f 93       	push	r25
    1972:	8f 93       	push	r24
    1974:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <printf>
    1978:	0f 90       	pop	r0
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	8a c1       	rjmp	.+788    	; 0x1c96 <ProcessQueryCommand+0x71e>
	}	
	else if (strcmp(command, ATSELECTEDPROFILE) == 0 && CheckMode(ReflowMode))	//REFLOW MODE
    1982:	60 eb       	ldi	r22, 0xB0	; 176
    1984:	73 e2       	ldi	r23, 0x23	; 35
    1986:	c8 01       	movw	r24, r16
    1988:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    198c:	89 2b       	or	r24, r25
    198e:	99 f4       	brne	.+38     	; 0x19b6 <ProcessQueryCommand+0x43e>
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	03 dc       	rcall	.-2042   	; 0x119a <CheckMode>
    1994:	88 23       	and	r24, r24
    1996:	79 f0       	breq	.+30     	; 0x19b6 <ProcessQueryCommand+0x43e>
	{
		printf("%d\r\n", SelectedIndex);
    1998:	80 91 d1 24 	lds	r24, 0x24D1	; 0x8024d1 <SelectedIndex>
    199c:	1f 92       	push	r1
    199e:	8f 93       	push	r24
    19a0:	8a e5       	ldi	r24, 0x5A	; 90
    19a2:	93 e2       	ldi	r25, 0x23	; 35
    19a4:	9f 93       	push	r25
    19a6:	8f 93       	push	r24
    19a8:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <printf>
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	70 c1       	rjmp	.+736    	; 0x1c96 <ProcessQueryCommand+0x71e>
	}	
	else if (strcmp(command, "") == 0)						
    19b6:	f8 01       	movw	r30, r16
    19b8:	80 81       	ld	r24, Z
    19ba:	81 11       	cpse	r24, r1
    19bc:	55 c1       	rjmp	.+682    	; 0x1c68 <ProcessQueryCommand+0x6f0>
	{
		printf_P(PSTR("\r\n\r\n**AT COMMANDS e: execute, ?: query, =: set**\r\n"));
    19be:	85 e1       	ldi	r24, 0x15	; 21
    19c0:	9b e0       	ldi	r25, 0x0B	; 11
    19c2:	9f 93       	push	r25
    19c4:	8f 93       	push	r24
    19c6:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("\r\n"));
    19ca:	82 e1       	ldi	r24, 0x12	; 18
    19cc:	9b e0       	ldi	r25, 0x0B	; 11
    19ce:	9f 93       	push	r25
    19d0:	8f 93       	push	r24
    19d2:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("*ALL MODES Commands*\r\n"));
    19d6:	8b ef       	ldi	r24, 0xFB	; 251
    19d8:	9a e0       	ldi	r25, 0x0A	; 10
    19da:	9f 93       	push	r25
    19dc:	8f 93       	push	r24
    19de:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATMENUMODE (e) Enter Menu Mode\r\n"));
    19e2:	8a ed       	ldi	r24, 0xDA	; 218
    19e4:	9a e0       	ldi	r25, 0x0A	; 10
    19e6:	9f 93       	push	r25
    19e8:	8f 93       	push	r24
    19ea:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATTESTMODE (e) Enter Test Mode\r\n"));
    19ee:	89 eb       	ldi	r24, 0xB9	; 185
    19f0:	9a e0       	ldi	r25, 0x0A	; 10
    19f2:	9f 93       	push	r25
    19f4:	8f 93       	push	r24
    19f6:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATREFLOWMODE (e) Enter Reflow Mode\r\n"));
    19fa:	84 e9       	ldi	r24, 0x94	; 148
    19fc:	9a e0       	ldi	r25, 0x0A	; 10
    19fe:	9f 93       	push	r25
    1a00:	8f 93       	push	r24
    1a02:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATBACKLIGHTON (e) Turn Backlight On (no timeout)\r\n"));
    1a06:	81 e6       	ldi	r24, 0x61	; 97
    1a08:	9a e0       	ldi	r25, 0x0A	; 10
    1a0a:	9f 93       	push	r25
    1a0c:	8f 93       	push	r24
    1a0e:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATBACKLIGHTOFF (e) Turn Backlight Off\r\n"));
    1a12:	89 e3       	ldi	r24, 0x39	; 57
    1a14:	9a e0       	ldi	r25, 0x0A	; 10
    1a16:	9f 93       	push	r25
    1a18:	8f 93       	push	r24
    1a1a:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATTEMPMODE (?) Return temp mode (C or F)\r\n"));
    1a1e:	8e e0       	ldi	r24, 0x0E	; 14
    1a20:	9a e0       	ldi	r25, 0x0A	; 10
    1a22:	9f 93       	push	r25
    1a24:	8f 93       	push	r24
    1a26:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATTEMPMODEF (e) Set temp mode to fahrenheit\r\n"));
    1a2a:	80 ee       	ldi	r24, 0xE0	; 224
    1a2c:	99 e0       	ldi	r25, 0x09	; 9
    1a2e:	9f 93       	push	r25
    1a30:	8f 93       	push	r24
    1a32:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATTEMPMODEC (e) Set temp mode to Celcius\r\n"));
    1a36:	85 eb       	ldi	r24, 0xB5	; 181
    1a38:	99 e0       	ldi	r25, 0x09	; 9
    1a3a:	9f 93       	push	r25
    1a3c:	8f 93       	push	r24
    1a3e:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATBACKLIGHTONTIME (?,=)\r\n\t? Get time backlight stays on (in seconds) 0 = infinite\r\n\t= Set backlight on time in seconds\r\n"));
    1a42:	8c e3       	ldi	r24, 0x3C	; 60
    1a44:	99 e0       	ldi	r25, 0x09	; 9
    1a46:	9f 93       	push	r25
    1a48:	8f 93       	push	r24
    1a4a:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATOVENMODE (?) Get oven mode (Stopped, Running, Heating)\r\n"));
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	99 e0       	ldi	r25, 0x09	; 9
    1a52:	9f 93       	push	r25
    1a54:	8f 93       	push	r24
    1a56:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATOVENSTATE (?) Get oven state (Reflow, Menu, Test)\r\n"));
    1a5a:	8b ec       	ldi	r24, 0xCB	; 203
    1a5c:	98 e0       	ldi	r25, 0x08	; 8
    1a5e:	9f 93       	push	r25
    1a60:	8f 93       	push	r24
    1a62:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATOVENTEMP (?) Get current oven temp in current temp mode\r\n"));
    1a66:	8f e8       	ldi	r24, 0x8F	; 143
    1a68:	98 e0       	ldi	r25, 0x08	; 8
    1a6a:	9f 93       	push	r25
    1a6c:	8f 93       	push	r24
    1a6e:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATALLSTATE (?) Get full oven state info (temp in current temp mode)\r\n\t<Profile #>,<Oven Mode>,<Oven State>,<Target Time>,<Actual Time>,\r\n\t<Target Temp>,<Actual Temp>,\r\n"));
    1a72:	86 ee       	ldi	r24, 0xE6	; 230
    1a74:	97 e0       	ldi	r25, 0x07	; 7
    1a76:	9f 93       	push	r25
    1a78:	8f 93       	push	r24
    1a7a:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("\t!<r led>,!<g led>,!<b led>,\r\n\t<backlight>,<top heat>,<bottom heat>,<fan>,<buzzer>\r\n"));
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	de bf       	out	0x3e, r29	; 62
    1a82:	81 e9       	ldi	r24, 0x91	; 145
    1a84:	97 e0       	ldi	r25, 0x07	; 7
    1a86:	9f 93       	push	r25
    1a88:	8f 93       	push	r24
    1a8a:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATBUZZERONTIME (?,=)\r\n\t? Returns on time in milliseconds. 0 means never on.\r\n\t= Set on time in milliseconds\r\n"));
    1a8e:	83 e2       	ldi	r24, 0x23	; 35
    1a90:	97 e0       	ldi	r25, 0x07	; 7
    1a92:	9f 93       	push	r25
    1a94:	8f 93       	push	r24
    1a96:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATLOGGINGON (e) Enable logging\r\n\tReturns <time>,<temp><newline> in current temp mode\r\n"));
    1a9a:	8c ec       	ldi	r24, 0xCC	; 204
    1a9c:	96 e0       	ldi	r25, 0x06	; 6
    1a9e:	9f 93       	push	r25
    1aa0:	8f 93       	push	r24
    1aa2:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATLOGGINGOFF (e) Disable logging\r\n"));
    1aa6:	89 ea       	ldi	r24, 0xA9	; 169
    1aa8:	96 e0       	ldi	r25, 0x06	; 6
    1aaa:	9f 93       	push	r25
    1aac:	8f 93       	push	r24
    1aae:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("\r\n"));
    1ab2:	86 ea       	ldi	r24, 0xA6	; 166
    1ab4:	96 e0       	ldi	r25, 0x06	; 6
    1ab6:	9f 93       	push	r25
    1ab8:	8f 93       	push	r24
    1aba:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("*MENU MODE Commands*\r\n"));
    1abe:	8f e8       	ldi	r24, 0x8F	; 143
    1ac0:	96 e0       	ldi	r25, 0x06	; 6
    1ac2:	9f 93       	push	r25
    1ac4:	8f 93       	push	r24
    1ac6:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATMENUUP (e) Move selection up\r\n"));
    1aca:	8e e6       	ldi	r24, 0x6E	; 110
    1acc:	96 e0       	ldi	r25, 0x06	; 6
    1ace:	9f 93       	push	r25
    1ad0:	8f 93       	push	r24
    1ad2:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATMENUDOWN (e) Move selection down\r\n"));
    1ad6:	89 e4       	ldi	r24, 0x49	; 73
    1ad8:	96 e0       	ldi	r25, 0x06	; 6
    1ada:	9f 93       	push	r25
    1adc:	8f 93       	push	r24
    1ade:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATMENUSELECT (e) Select current menu item highlighted\r\n"));
    1ae2:	81 e1       	ldi	r24, 0x11	; 17
    1ae4:	96 e0       	ldi	r25, 0x06	; 6
    1ae6:	9f 93       	push	r25
    1ae8:	8f 93       	push	r24
    1aea:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATMAXPROFILES (?) Max number of profiles\r\n\tProfile 0 is always default and cannot be changed\r\n"));
    1aee:	82 eb       	ldi	r24, 0xB2	; 178
    1af0:	95 e0       	ldi	r25, 0x05	; 5
    1af2:	9f 93       	push	r25
    1af4:	8f 93       	push	r24
    1af6:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATPROFILENAMES (?) Get all profile names\r\n"));
    1afa:	87 e8       	ldi	r24, 0x87	; 135
    1afc:	95 e0       	ldi	r25, 0x05	; 5
    1afe:	9f 93       	push	r25
    1b00:	8f 93       	push	r24
    1b02:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATPROFILE (?,=)\r\n\t? Requires profile index, gets profile settings\r\n\t= New profile.\r\n\t<Index>,<Name>,<time>,<temp>,<time>,<temp>,...\r\n"));
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	95 e0       	ldi	r25, 0x05	; 5
    1b0a:	9f 93       	push	r25
    1b0c:	8f 93       	push	r24
    1b0e:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("\tTemp is always in C and is multiplied by 2\r\n"));
    1b12:	83 ed       	ldi	r24, 0xD3	; 211
    1b14:	94 e0       	ldi	r25, 0x04	; 4
    1b16:	9f 93       	push	r25
    1b18:	8f 93       	push	r24
    1b1a:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATMAXPROFILESIZE (?) Get max number of elements (<time>,<temp>) per profile\r\n"));
    1b1e:	85 e8       	ldi	r24, 0x85	; 133
    1b20:	94 e0       	ldi	r25, 0x04	; 4
    1b22:	9f 93       	push	r25
    1b24:	8f 93       	push	r24
    1b26:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATDELETEPROFILE (=) Requires profile index. Clears profile\r\n"));
    1b2a:	88 e4       	ldi	r24, 0x48	; 72
    1b2c:	94 e0       	ldi	r25, 0x04	; 4
    1b2e:	9f 93       	push	r25
    1b30:	8f 93       	push	r24
    1b32:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("\r\n"));
    1b36:	85 e4       	ldi	r24, 0x45	; 69
    1b38:	94 e0       	ldi	r25, 0x04	; 4
    1b3a:	9f 93       	push	r25
    1b3c:	8f 93       	push	r24
    1b3e:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("*REFLOW MODE Commands*\r\n"));
    1b42:	cd bf       	out	0x3d, r28	; 61
    1b44:	de bf       	out	0x3e, r29	; 62
    1b46:	8c e2       	ldi	r24, 0x2C	; 44
    1b48:	94 e0       	ldi	r25, 0x04	; 4
    1b4a:	9f 93       	push	r25
    1b4c:	8f 93       	push	r24
    1b4e:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATSTART (e) Start reflow\r\n"));
    1b52:	81 e1       	ldi	r24, 0x11	; 17
    1b54:	94 e0       	ldi	r25, 0x04	; 4
    1b56:	9f 93       	push	r25
    1b58:	8f 93       	push	r24
    1b5a:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATSTOP (e) Stop reflow\r\n"));
    1b5e:	88 ef       	ldi	r24, 0xF8	; 248
    1b60:	93 e0       	ldi	r25, 0x03	; 3
    1b62:	9f 93       	push	r25
    1b64:	8f 93       	push	r24
    1b66:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATSELECTEDPROFILE (?) Get index of current profile\r\n"));
    1b6a:	83 ec       	ldi	r24, 0xC3	; 195
    1b6c:	93 e0       	ldi	r25, 0x03	; 3
    1b6e:	9f 93       	push	r25
    1b70:	8f 93       	push	r24
    1b72:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("\r\n"));
    1b76:	80 ec       	ldi	r24, 0xC0	; 192
    1b78:	93 e0       	ldi	r25, 0x03	; 3
    1b7a:	9f 93       	push	r25
    1b7c:	8f 93       	push	r24
    1b7e:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("*TEST MODE Commands*\r\n"));
    1b82:	89 ea       	ldi	r24, 0xA9	; 169
    1b84:	93 e0       	ldi	r25, 0x03	; 3
    1b86:	9f 93       	push	r25
    1b88:	8f 93       	push	r24
    1b8a:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATTOPHEATON (e) Top Heater On\r\n"));
    1b8e:	89 e8       	ldi	r24, 0x89	; 137
    1b90:	93 e0       	ldi	r25, 0x03	; 3
    1b92:	9f 93       	push	r25
    1b94:	8f 93       	push	r24
    1b96:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATTOPHEATOFF (e) Top Heater Off\r\n"));
    1b9a:	87 e6       	ldi	r24, 0x67	; 103
    1b9c:	93 e0       	ldi	r25, 0x03	; 3
    1b9e:	9f 93       	push	r25
    1ba0:	8f 93       	push	r24
    1ba2:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATBOTTOMHEATON (e) Bottom Heater On\r\n"));
    1ba6:	81 e4       	ldi	r24, 0x41	; 65
    1ba8:	93 e0       	ldi	r25, 0x03	; 3
    1baa:	9f 93       	push	r25
    1bac:	8f 93       	push	r24
    1bae:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATBOTTOMHEATOFF (e) Bottom Heater Off\r\n"));
    1bb2:	89 e1       	ldi	r24, 0x19	; 25
    1bb4:	93 e0       	ldi	r25, 0x03	; 3
    1bb6:	9f 93       	push	r25
    1bb8:	8f 93       	push	r24
    1bba:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATFANON (e) Fan On\r\n"));
    1bbe:	84 e0       	ldi	r24, 0x04	; 4
    1bc0:	93 e0       	ldi	r25, 0x03	; 3
    1bc2:	9f 93       	push	r25
    1bc4:	8f 93       	push	r24
    1bc6:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATFANOFF (e) Fan Off\r\n"));
    1bca:	8d ee       	ldi	r24, 0xED	; 237
    1bcc:	92 e0       	ldi	r25, 0x02	; 2
    1bce:	9f 93       	push	r25
    1bd0:	8f 93       	push	r24
    1bd2:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATBUZZERON (e) Buzzer On\r\n"));
    1bd6:	82 ed       	ldi	r24, 0xD2	; 210
    1bd8:	92 e0       	ldi	r25, 0x02	; 2
    1bda:	9f 93       	push	r25
    1bdc:	8f 93       	push	r24
    1bde:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATBUZZEROFF (e) Buzzer Off\r\n"));
    1be2:	85 eb       	ldi	r24, 0xB5	; 181
    1be4:	92 e0       	ldi	r25, 0x02	; 2
    1be6:	9f 93       	push	r25
    1be8:	8f 93       	push	r24
    1bea:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATRLEDON (e) Red Led On\r\n"));
    1bee:	8b e9       	ldi	r24, 0x9B	; 155
    1bf0:	92 e0       	ldi	r25, 0x02	; 2
    1bf2:	9f 93       	push	r25
    1bf4:	8f 93       	push	r24
    1bf6:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATRLEDOFF (e) Red Led Off\r\n"));
    1bfa:	8f e7       	ldi	r24, 0x7F	; 127
    1bfc:	92 e0       	ldi	r25, 0x02	; 2
    1bfe:	9f 93       	push	r25
    1c00:	8f 93       	push	r24
    1c02:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATGLEDON (e) Green LED On\r\n"));
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	83 e6       	ldi	r24, 0x63	; 99
    1c0c:	92 e0       	ldi	r25, 0x02	; 2
    1c0e:	9f 93       	push	r25
    1c10:	8f 93       	push	r24
    1c12:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATGLEDOFF (e) Green LED Off\r\n"));
    1c16:	85 e4       	ldi	r24, 0x45	; 69
    1c18:	92 e0       	ldi	r25, 0x02	; 2
    1c1a:	9f 93       	push	r25
    1c1c:	8f 93       	push	r24
    1c1e:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATBLEDON (e) Blue LED On\r\n"));
    1c22:	8a e2       	ldi	r24, 0x2A	; 42
    1c24:	92 e0       	ldi	r25, 0x02	; 2
    1c26:	9f 93       	push	r25
    1c28:	8f 93       	push	r24
    1c2a:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("ATBLEDOFF (e) Blue LED Off\r\n"));
    1c2e:	8d e0       	ldi	r24, 0x0D	; 13
    1c30:	92 e0       	ldi	r25, 0x02	; 2
    1c32:	9f 93       	push	r25
    1c34:	8f 93       	push	r24
    1c36:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf_P(PSTR("\r\n"));		
    1c3a:	8a e0       	ldi	r24, 0x0A	; 10
    1c3c:	92 e0       	ldi	r25, 0x02	; 2
    1c3e:	9f 93       	push	r25
    1c40:	8f 93       	push	r24
    1c42:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <printf_P>
		printf("\r\nDIY Rreflow Oven\r\n%s\r\n%s\r\n\r\n", OVEN_VERSION, OVEN_DATE);
    1c46:	80 ec       	ldi	r24, 0xC0	; 192
    1c48:	93 e2       	ldi	r25, 0x23	; 35
    1c4a:	9f 93       	push	r25
    1c4c:	8f 93       	push	r24
    1c4e:	8b ec       	ldi	r24, 0xCB	; 203
    1c50:	93 e2       	ldi	r25, 0x23	; 35
    1c52:	9f 93       	push	r25
    1c54:	8f 93       	push	r24
    1c56:	87 ed       	ldi	r24, 0xD7	; 215
    1c58:	93 e2       	ldi	r25, 0x23	; 35
    1c5a:	9f 93       	push	r25
    1c5c:	8f 93       	push	r24
    1c5e:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <printf>
    1c62:	cd bf       	out	0x3d, r28	; 61
    1c64:	de bf       	out	0x3e, r29	; 62
    1c66:	17 c0       	rjmp	.+46     	; 0x1c96 <ProcessQueryCommand+0x71e>
	}
	else
	{

		printf("%s,%s\r\n", ERR_UNKNOWN_CMD, command);
    1c68:	1f 93       	push	r17
    1c6a:	0f 93       	push	r16
    1c6c:	87 ed       	ldi	r24, 0xD7	; 215
    1c6e:	92 e2       	ldi	r25, 0x22	; 34
    1c70:	9f 93       	push	r25
    1c72:	8f 93       	push	r24
    1c74:	8d ee       	ldi	r24, 0xED	; 237
    1c76:	92 e2       	ldi	r25, 0x22	; 34
    1c78:	9f 93       	push	r25
    1c7a:	8f 93       	push	r24
    1c7c:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <printf>
		memset(command, 0, MAX_COMMAND_LEN);
    1c80:	80 e2       	ldi	r24, 0x20	; 32
    1c82:	f8 01       	movw	r30, r16
    1c84:	11 92       	st	Z+, r1
    1c86:	8a 95       	dec	r24
    1c88:	e9 f7       	brne	.-6      	; 0x1c84 <ProcessQueryCommand+0x70c>
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
	}	
}
    1c96:	c1 53       	subi	r28, 0x31	; 49
    1c98:	df 4f       	sbci	r29, 0xFF	; 255
    1c9a:	cd bf       	out	0x3d, r28	; 61
    1c9c:	de bf       	out	0x3e, r29	; 62
    1c9e:	df 91       	pop	r29
    1ca0:	cf 91       	pop	r28
    1ca2:	1f 91       	pop	r17
    1ca4:	0f 91       	pop	r16
    1ca6:	ff 90       	pop	r15
    1ca8:	ef 90       	pop	r14
    1caa:	df 90       	pop	r13
    1cac:	cf 90       	pop	r12
    1cae:	bf 90       	pop	r11
    1cb0:	af 90       	pop	r10
    1cb2:	9f 90       	pop	r9
    1cb4:	8f 90       	pop	r8
    1cb6:	7f 90       	pop	r7
    1cb8:	6f 90       	pop	r6
    1cba:	5f 90       	pop	r5
    1cbc:	4f 90       	pop	r4
    1cbe:	3f 90       	pop	r3
    1cc0:	2f 90       	pop	r2
    1cc2:	08 95       	ret

00001cc4 <ProcessSetCommand>:

void ProcessSetCommand(uint8_t * command)
{
    1cc4:	cf 93       	push	r28
    1cc6:	df 93       	push	r29
    1cc8:	d8 2f       	mov	r29, r24
    1cca:	c9 2f       	mov	r28, r25
	_cmdState = Waiting;
    1ccc:	10 92 b4 24 	sts	0x24B4, r1	; 0x8024b4 <_cmdState>
	//requires more info as input
	
	if (strcmp(command, ATBACKLIGHTONTIME) == 0)	//ANY MODE
    1cd0:	64 e0       	ldi	r22, 0x04	; 4
    1cd2:	73 e2       	ldi	r23, 0x23	; 35
    1cd4:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    1cd8:	89 2b       	or	r24, r25
    1cda:	61 f4       	brne	.+24     	; 0x1cf4 <ProcessSetCommand+0x30>
	{
		_argsIndex = 0;
    1cdc:	10 92 b1 24 	sts	0x24B1, r1	; 0x8024b1 <_argsIndex>
		_cmdState = Await_Params;
    1ce0:	85 e0       	ldi	r24, 0x05	; 5
    1ce2:	80 93 b4 24 	sts	0x24B4, r24	; 0x8024b4 <_cmdState>
		_inputHandler = &SetBackLightOnTimeInputHandler;
    1ce6:	89 e0       	ldi	r24, 0x09	; 9
    1ce8:	97 e0       	ldi	r25, 0x07	; 7
    1cea:	80 93 77 28 	sts	0x2877, r24	; 0x802877 <_inputHandler>
    1cee:	90 93 78 28 	sts	0x2878, r25	; 0x802878 <_inputHandler+0x1>
    1cf2:	63 c0       	rjmp	.+198    	; 0x1dba <ProcessSetCommand+0xf6>
	}
	else if (strcmp(command, ATBUZZERONTIME) == 0)
    1cf4:	68 e6       	ldi	r22, 0x68	; 104
    1cf6:	73 e2       	ldi	r23, 0x23	; 35
    1cf8:	8d 2f       	mov	r24, r29
    1cfa:	9c 2f       	mov	r25, r28
    1cfc:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    1d00:	89 2b       	or	r24, r25
    1d02:	61 f4       	brne	.+24     	; 0x1d1c <ProcessSetCommand+0x58>
	{
		_argsIndex = 0;
    1d04:	10 92 b1 24 	sts	0x24B1, r1	; 0x8024b1 <_argsIndex>
		_cmdState = Await_Params;
    1d08:	85 e0       	ldi	r24, 0x05	; 5
    1d0a:	80 93 b4 24 	sts	0x24B4, r24	; 0x8024b4 <_cmdState>
		_inputHandler = &SetBuzzerOnTimeInputHandler;
    1d0e:	83 e3       	ldi	r24, 0x33	; 51
    1d10:	97 e0       	ldi	r25, 0x07	; 7
    1d12:	80 93 77 28 	sts	0x2877, r24	; 0x802877 <_inputHandler>
    1d16:	90 93 78 28 	sts	0x2878, r25	; 0x802878 <_inputHandler+0x1>
    1d1a:	4f c0       	rjmp	.+158    	; 0x1dba <ProcessSetCommand+0xf6>
	}
	else if (strcmp(command, ATDELETEPROFILE) == 0 && CheckMode(ProfileMenuMode)) // MENU MODE
    1d1c:	66 ef       	ldi	r22, 0xF6	; 246
    1d1e:	73 e2       	ldi	r23, 0x23	; 35
    1d20:	8d 2f       	mov	r24, r29
    1d22:	9c 2f       	mov	r25, r28
    1d24:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    1d28:	89 2b       	or	r24, r25
    1d2a:	81 f4       	brne	.+32     	; 0x1d4c <ProcessSetCommand+0x88>
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	35 da       	rcall	.-2966   	; 0x119a <CheckMode>
    1d30:	88 23       	and	r24, r24
    1d32:	61 f0       	breq	.+24     	; 0x1d4c <ProcessSetCommand+0x88>
	{
		_argsIndex = 0;
    1d34:	10 92 b1 24 	sts	0x24B1, r1	; 0x8024b1 <_argsIndex>
		_cmdState = Await_Params;
    1d38:	85 e0       	ldi	r24, 0x05	; 5
    1d3a:	80 93 b4 24 	sts	0x24B4, r24	; 0x8024b4 <_cmdState>
		_inputHandler = &DeleteProfileInputHanlder;
    1d3e:	8c e5       	ldi	r24, 0x5C	; 92
    1d40:	97 e0       	ldi	r25, 0x07	; 7
    1d42:	80 93 77 28 	sts	0x2877, r24	; 0x802877 <_inputHandler>
    1d46:	90 93 78 28 	sts	0x2878, r25	; 0x802878 <_inputHandler+0x1>
    1d4a:	37 c0       	rjmp	.+110    	; 0x1dba <ProcessSetCommand+0xf6>
	}	
	else if (strcmp(command, ATPROFILE) == 0 && CheckMode(ProfileMenuMode))
    1d4c:	68 eb       	ldi	r22, 0xB8	; 184
    1d4e:	73 e2       	ldi	r23, 0x23	; 35
    1d50:	8d 2f       	mov	r24, r29
    1d52:	9c 2f       	mov	r25, r28
    1d54:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <strcmp>
    1d58:	89 2b       	or	r24, r25
    1d5a:	b1 f4       	brne	.+44     	; 0x1d88 <ProcessSetCommand+0xc4>
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	1d da       	rcall	.-3014   	; 0x119a <CheckMode>
    1d60:	88 23       	and	r24, r24
    1d62:	91 f0       	breq	.+36     	; 0x1d88 <ProcessSetCommand+0xc4>
	{
		_elementIndex = 0;
    1d64:	10 92 af 24 	sts	0x24AF, r1	; 0x8024af <_elementIndex>
    1d68:	10 92 b0 24 	sts	0x24B0, r1	; 0x8024b0 <_elementIndex+0x1>
		_argsIndex = 0;
    1d6c:	10 92 b1 24 	sts	0x24B1, r1	; 0x8024b1 <_argsIndex>
		_cmdState = Await_Params;
    1d70:	85 e0       	ldi	r24, 0x05	; 5
    1d72:	80 93 b4 24 	sts	0x24B4, r24	; 0x8024b4 <_cmdState>
		_newProfileState = NewProfile_Index;
    1d76:	10 92 b3 24 	sts	0x24B3, r1	; 0x8024b3 <_newProfileState>
		_inputHandler = &CreateProfileInputHandler;
    1d7a:	8e ea       	ldi	r24, 0xAE	; 174
    1d7c:	97 e0       	ldi	r25, 0x07	; 7
    1d7e:	80 93 77 28 	sts	0x2877, r24	; 0x802877 <_inputHandler>
    1d82:	90 93 78 28 	sts	0x2878, r25	; 0x802878 <_inputHandler+0x1>
    1d86:	19 c0       	rjmp	.+50     	; 0x1dba <ProcessSetCommand+0xf6>
	}
	else
	{
		printf("%s,%s\r\n", ERR_UNKNOWN_CMD, command);
    1d88:	cf 93       	push	r28
    1d8a:	df 93       	push	r29
    1d8c:	87 ed       	ldi	r24, 0xD7	; 215
    1d8e:	92 e2       	ldi	r25, 0x22	; 34
    1d90:	9f 93       	push	r25
    1d92:	8f 93       	push	r24
    1d94:	8d ee       	ldi	r24, 0xED	; 237
    1d96:	92 e2       	ldi	r25, 0x22	; 34
    1d98:	9f 93       	push	r25
    1d9a:	8f 93       	push	r24
    1d9c:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <printf>
		memset(command, 0, MAX_COMMAND_LEN);
    1da0:	ed 2f       	mov	r30, r29
    1da2:	fc 2f       	mov	r31, r28
    1da4:	80 e2       	ldi	r24, 0x20	; 32
    1da6:	df 01       	movw	r26, r30
    1da8:	1d 92       	st	X+, r1
    1daa:	8a 95       	dec	r24
    1dac:	e9 f7       	brne	.-6      	; 0x1da8 <ProcessSetCommand+0xe4>
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	0f 90       	pop	r0
    1db4:	0f 90       	pop	r0
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
	}
}
    1dba:	df 91       	pop	r29
    1dbc:	cf 91       	pop	r28
    1dbe:	08 95       	ret

00001dc0 <ToUpper>:

uint8_t ToUpper(uint8_t c)
{
	if (c > 96 && c < 123)
    1dc0:	9f e9       	ldi	r25, 0x9F	; 159
    1dc2:	98 0f       	add	r25, r24
    1dc4:	9a 31       	cpi	r25, 0x1A	; 26
    1dc6:	08 f4       	brcc	.+2      	; 0x1dca <ToUpper+0xa>
	c -= 32;
    1dc8:	80 52       	subi	r24, 0x20	; 32
	
	return c;
}	 
    1dca:	08 95       	ret

00001dcc <ProcessInput>:

//Queries and Sets are called after the first blank space or enter
void ProcessInput(uint8_t c)	
{
    1dcc:	cf 93       	push	r28
    1dce:	c8 2f       	mov	r28, r24
	uint8_t cUp = ToUpper(c);
    1dd0:	f7 df       	rcall	.-18     	; 0x1dc0 <ToUpper>
	
	
	
	switch (_cmdState)
    1dd2:	90 91 b4 24 	lds	r25, 0x24B4	; 0x8024b4 <_cmdState>
    1dd6:	92 30       	cpi	r25, 0x02	; 2
    1dd8:	41 f1       	breq	.+80     	; 0x1e2a <ProcessInput+0x5e>
    1dda:	28 f4       	brcc	.+10     	; 0x1de6 <ProcessInput+0x1a>
    1ddc:	99 23       	and	r25, r25
    1dde:	51 f0       	breq	.+20     	; 0x1df4 <ProcessInput+0x28>
    1de0:	91 30       	cpi	r25, 0x01	; 1
    1de2:	61 f0       	breq	.+24     	; 0x1dfc <ProcessInput+0x30>
    1de4:	67 c0       	rjmp	.+206    	; 0x1eb4 <ProcessInput+0xe8>
    1de6:	93 30       	cpi	r25, 0x03	; 3
    1de8:	09 f4       	brne	.+2      	; 0x1dec <ProcessInput+0x20>
    1dea:	54 c0       	rjmp	.+168    	; 0x1e94 <ProcessInput+0xc8>
    1dec:	95 30       	cpi	r25, 0x05	; 5
    1dee:	09 f4       	brne	.+2      	; 0x1df2 <ProcessInput+0x26>
    1df0:	5b c0       	rjmp	.+182    	; 0x1ea8 <ProcessInput+0xdc>
    1df2:	60 c0       	rjmp	.+192    	; 0x1eb4 <ProcessInput+0xe8>
	{
		case Waiting:
		
			if (cUp == 'A');
				_cmdState = A_Received;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	80 93 b4 24 	sts	0x24B4, r24	; 0x8024b4 <_cmdState>
			break;
    1dfa:	5c c0       	rjmp	.+184    	; 0x1eb4 <ProcessInput+0xe8>
		case A_Received:
			if (cUp == 'T')
    1dfc:	84 35       	cpi	r24, 0x54	; 84
    1dfe:	91 f4       	brne	.+36     	; 0x1e24 <ProcessInput+0x58>
			{
				_cmdState = T_Received;
    1e00:	82 e0       	ldi	r24, 0x02	; 2
    1e02:	80 93 b4 24 	sts	0x24B4, r24	; 0x8024b4 <_cmdState>
				memset(_command, 0, MAX_COMMAND_LEN);
    1e06:	80 e2       	ldi	r24, 0x20	; 32
    1e08:	e7 e5       	ldi	r30, 0x57	; 87
    1e0a:	f7 e2       	ldi	r31, 0x27	; 39
    1e0c:	df 01       	movw	r26, r30
    1e0e:	1d 92       	st	X+, r1
    1e10:	8a 95       	dec	r24
    1e12:	e9 f7       	brne	.-6      	; 0x1e0e <ProcessInput+0x42>
				memset(&_args[0], 0, sizeof(_args));;				
    1e14:	80 e1       	ldi	r24, 0x10	; 16
    1e16:	e7 e4       	ldi	r30, 0x47	; 71
    1e18:	f7 e2       	ldi	r31, 0x27	; 39
    1e1a:	df 01       	movw	r26, r30
    1e1c:	1d 92       	st	X+, r1
    1e1e:	8a 95       	dec	r24
    1e20:	e9 f7       	brne	.-6      	; 0x1e1c <ProcessInput+0x50>
    1e22:	48 c0       	rjmp	.+144    	; 0x1eb4 <ProcessInput+0xe8>
			}
			else
				_cmdState = Waiting;
    1e24:	10 92 b4 24 	sts	0x24B4, r1	; 0x8024b4 <_cmdState>
    1e28:	45 c0       	rjmp	.+138    	; 0x1eb4 <ProcessInput+0xe8>
			break;
		case T_Received:
			if (cUp == '?')
    1e2a:	8f 33       	cpi	r24, 0x3F	; 63
    1e2c:	31 f4       	brne	.+12     	; 0x1e3a <ProcessInput+0x6e>
			{
				_cmdModifier = '?';
    1e2e:	80 93 79 28 	sts	0x2879, r24	; 0x802879 <_cmdModifier>
				_cmdState = Query_Received;
    1e32:	83 e0       	ldi	r24, 0x03	; 3
    1e34:	80 93 b4 24 	sts	0x24B4, r24	; 0x8024b4 <_cmdState>
    1e38:	3d c0       	rjmp	.+122    	; 0x1eb4 <ProcessInput+0xe8>
			}
			else if (cUp == '=')
    1e3a:	8d 33       	cpi	r24, 0x3D	; 61
    1e3c:	51 f4       	brne	.+20     	; 0x1e52 <ProcessInput+0x86>
			{
				_index = 0;
    1e3e:	10 92 b2 24 	sts	0x24B2, r1	; 0x8024b2 <_index>
				_cmdModifier = '=';
    1e42:	80 93 79 28 	sts	0x2879, r24	; 0x802879 <_cmdModifier>
				_index = 0;
    1e46:	10 92 b2 24 	sts	0x24B2, r1	; 0x8024b2 <_index>
				ProcessSetCommand(_command);
    1e4a:	87 e5       	ldi	r24, 0x57	; 87
    1e4c:	97 e2       	ldi	r25, 0x27	; 39
    1e4e:	3a df       	rcall	.-396    	; 0x1cc4 <ProcessSetCommand>
    1e50:	31 c0       	rjmp	.+98     	; 0x1eb4 <ProcessInput+0xe8>
			}
			else if (cUp > 46 && cUp < 91 && _index < MAX_COMMAND_LEN)
    1e52:	91 ed       	ldi	r25, 0xD1	; 209
    1e54:	98 0f       	add	r25, r24
    1e56:	9c 32       	cpi	r25, 0x2C	; 44
    1e58:	78 f4       	brcc	.+30     	; 0x1e78 <ProcessInput+0xac>
    1e5a:	90 91 b2 24 	lds	r25, 0x24B2	; 0x8024b2 <_index>
    1e5e:	90 32       	cpi	r25, 0x20	; 32
    1e60:	58 f4       	brcc	.+22     	; 0x1e78 <ProcessInput+0xac>
			{
				_command[_index++] = cUp;
    1e62:	e0 91 b2 24 	lds	r30, 0x24B2	; 0x8024b2 <_index>
    1e66:	91 e0       	ldi	r25, 0x01	; 1
    1e68:	9e 0f       	add	r25, r30
    1e6a:	90 93 b2 24 	sts	0x24B2, r25	; 0x8024b2 <_index>
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	e9 5a       	subi	r30, 0xA9	; 169
    1e72:	f8 4d       	sbci	r31, 0xD8	; 216
    1e74:	80 83       	st	Z, r24
    1e76:	1e c0       	rjmp	.+60     	; 0x1eb4 <ProcessInput+0xe8>
			}
			else if (cUp == '\r' && _index > 0)
    1e78:	8d 30       	cpi	r24, 0x0D	; 13
    1e7a:	e1 f4       	brne	.+56     	; 0x1eb4 <ProcessInput+0xe8>
    1e7c:	80 91 b2 24 	lds	r24, 0x24B2	; 0x8024b2 <_index>
    1e80:	88 23       	and	r24, r24
    1e82:	c1 f0       	breq	.+48     	; 0x1eb4 <ProcessInput+0xe8>
			{
				_index = 0;
    1e84:	10 92 b2 24 	sts	0x24B2, r1	; 0x8024b2 <_index>
				ProcessExecuteCommand(_command);
    1e88:	87 e5       	ldi	r24, 0x57	; 87
    1e8a:	97 e2       	ldi	r25, 0x27	; 39
    1e8c:	c4 d9       	rcall	.-3192   	; 0x1216 <ProcessExecuteCommand>
				_cmdState = Waiting;
    1e8e:	10 92 b4 24 	sts	0x24B4, r1	; 0x8024b4 <_cmdState>
    1e92:	10 c0       	rjmp	.+32     	; 0x1eb4 <ProcessInput+0xe8>
			}
			
			break;
		case Query_Received:
			if (cUp == '\r' || cUp == ' ')
    1e94:	8d 30       	cpi	r24, 0x0D	; 13
    1e96:	11 f0       	breq	.+4      	; 0x1e9c <ProcessInput+0xd0>
    1e98:	80 32       	cpi	r24, 0x20	; 32
    1e9a:	61 f4       	brne	.+24     	; 0x1eb4 <ProcessInput+0xe8>
			{
				_index = 0;
    1e9c:	10 92 b2 24 	sts	0x24B2, r1	; 0x8024b2 <_index>
				ProcessQueryCommand(_command);
    1ea0:	87 e5       	ldi	r24, 0x57	; 87
    1ea2:	97 e2       	ldi	r25, 0x27	; 39
    1ea4:	69 db       	rcall	.-2350   	; 0x1578 <ProcessQueryCommand>
    1ea6:	06 c0       	rjmp	.+12     	; 0x1eb4 <ProcessInput+0xe8>
			}
			break;

		case Await_Params:
			(*_inputHandler)(c);
    1ea8:	e0 91 77 28 	lds	r30, 0x2877	; 0x802877 <_inputHandler>
    1eac:	f0 91 78 28 	lds	r31, 0x2878	; 0x802878 <_inputHandler+0x1>
    1eb0:	8c 2f       	mov	r24, r28
    1eb2:	19 95       	eicall
			break;
	}
	
	
}
    1eb4:	cf 91       	pop	r28
    1eb6:	08 95       	ret

00001eb8 <BufferString>:

void DrawLine(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint8_t invert)
{
		//printf("DrawLine %d, %d, %d, %d\r\n", x1, y1, x2, y2);
	BufferLine(x1, y1, x2, y2, invert, _currentBuff);
}
    1eb8:	2f 92       	push	r2
    1eba:	3f 92       	push	r3
    1ebc:	4f 92       	push	r4
    1ebe:	5f 92       	push	r5
    1ec0:	6f 92       	push	r6
    1ec2:	7f 92       	push	r7
    1ec4:	8f 92       	push	r8
    1ec6:	9f 92       	push	r9
    1ec8:	af 92       	push	r10
    1eca:	bf 92       	push	r11
    1ecc:	cf 92       	push	r12
    1ece:	df 92       	push	r13
    1ed0:	ef 92       	push	r14
    1ed2:	ff 92       	push	r15
    1ed4:	0f 93       	push	r16
    1ed6:	1f 93       	push	r17
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	2e 97       	sbiw	r28, 0x0e	; 14
    1ee2:	cd bf       	out	0x3d, r28	; 61
    1ee4:	de bf       	out	0x3e, r29	; 62
    1ee6:	f8 01       	movw	r30, r16
    1ee8:	11 e0       	ldi	r17, 0x01	; 1
    1eea:	21 11       	cpse	r18, r1
    1eec:	01 c0       	rjmp	.+2      	; 0x1ef0 <BufferString+0x38>
    1eee:	10 e0       	ldi	r17, 0x00	; 0
    1ef0:	11 95       	neg	r17
    1ef2:	40 33       	cpi	r20, 0x30	; 48
    1ef4:	08 f0       	brcs	.+2      	; 0x1ef8 <BufferString+0x40>
    1ef6:	4f e2       	ldi	r20, 0x2F	; 47
    1ef8:	24 2f       	mov	r18, r20
    1efa:	26 95       	lsr	r18
    1efc:	26 95       	lsr	r18
    1efe:	26 95       	lsr	r18
    1f00:	34 e5       	ldi	r19, 0x54	; 84
    1f02:	23 9f       	mul	r18, r19
    1f04:	70 01       	movw	r14, r0
    1f06:	11 24       	eor	r1, r1
    1f08:	ea 86       	std	Y+10, r14	; 0x0a
    1f0a:	fb 86       	std	Y+11, r15	; 0x0b
    1f0c:	64 35       	cpi	r22, 0x54	; 84
    1f0e:	08 f0       	brcs	.+2      	; 0x1f12 <BufferString+0x5a>
    1f10:	63 e5       	ldi	r22, 0x53	; 83
    1f12:	c6 2e       	mov	r12, r22
    1f14:	d1 2c       	mov	r13, r1
    1f16:	47 70       	andi	r20, 0x07	; 7
    1f18:	54 2e       	mov	r5, r20
    1f1a:	28 e0       	ldi	r18, 0x08	; 8
    1f1c:	24 1b       	sub	r18, r20
    1f1e:	2c 87       	std	Y+12, r18	; 0x0c
    1f20:	9c 01       	movw	r18, r24
    1f22:	2f 5f       	subi	r18, 0xFF	; 255
    1f24:	3f 4f       	sbci	r19, 0xFF	; 255
    1f26:	dc 01       	movw	r26, r24
    1f28:	6c 91       	ld	r22, X
    1f2a:	66 23       	and	r22, r22
    1f2c:	09 f4       	brne	.+2      	; 0x1f30 <BufferString+0x78>
    1f2e:	39 c1       	rjmp	.+626    	; 0x21a2 <BufferString+0x2ea>
    1f30:	cf 01       	movw	r24, r30
    1f32:	2c 83       	std	Y+4, r18	; 0x04
    1f34:	3d 83       	std	Y+5, r19	; 0x05
    1f36:	76 01       	movw	r14, r12
    1f38:	b8 e5       	ldi	r27, 0x58	; 88
    1f3a:	eb 0e       	add	r14, r27
    1f3c:	f1 1c       	adc	r15, r1
    1f3e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1f40:	fb 85       	ldd	r31, Y+11	; 0x0b
    1f42:	ee 0e       	add	r14, r30
    1f44:	ff 1e       	adc	r15, r31
    1f46:	e8 0e       	add	r14, r24
    1f48:	f9 1e       	adc	r15, r25
    1f4a:	5f 01       	movw	r10, r30
    1f4c:	ac 0c       	add	r10, r12
    1f4e:	bd 1c       	adc	r11, r13
    1f50:	9c 01       	movw	r18, r24
    1f52:	2a 0d       	add	r18, r10
    1f54:	3b 1d       	adc	r19, r11
    1f56:	2e 83       	std	Y+6, r18	; 0x06
    1f58:	3f 83       	std	Y+7, r19	; 0x07
    1f5a:	36 01       	movw	r6, r12
    1f5c:	34 e0       	ldi	r19, 0x04	; 4
    1f5e:	63 0e       	add	r6, r19
    1f60:	71 1c       	adc	r7, r1
    1f62:	46 01       	movw	r8, r12
    1f64:	43 e0       	ldi	r20, 0x03	; 3
    1f66:	84 0e       	add	r8, r20
    1f68:	91 1c       	adc	r9, r1
    1f6a:	96 01       	movw	r18, r12
    1f6c:	29 5a       	subi	r18, 0xA9	; 169
    1f6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f70:	2e 0f       	add	r18, r30
    1f72:	3f 1f       	adc	r19, r31
    1f74:	dc 01       	movw	r26, r24
    1f76:	a2 0f       	add	r26, r18
    1f78:	b3 1f       	adc	r27, r19
    1f7a:	aa 83       	std	Y+2, r26	; 0x02
    1f7c:	bb 83       	std	Y+3, r27	; 0x03
    1f7e:	56 01       	movw	r10, r12
    1f80:	b2 e0       	ldi	r27, 0x02	; 2
    1f82:	ab 0e       	add	r10, r27
    1f84:	b1 1c       	adc	r11, r1
    1f86:	16 01       	movw	r2, r12
    1f88:	ef ef       	ldi	r30, 0xFF	; 255
    1f8a:	2e 1a       	sub	r2, r30
    1f8c:	3e 0a       	sbc	r3, r30
    1f8e:	59 82       	std	Y+1, r5	; 0x01
    1f90:	46 2f       	mov	r20, r22
    1f92:	4e 80       	ldd	r4, Y+6	; 0x06
    1f94:	5f 80       	ldd	r5, Y+7	; 0x07
    1f96:	01 c0       	rjmp	.+2      	; 0x1f9a <BufferString+0xe2>
    1f98:	69 01       	movw	r12, r18
    1f9a:	84 2f       	mov	r24, r20
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	9c 01       	movw	r18, r24
    1fa0:	20 52       	subi	r18, 0x20	; 32
    1fa2:	31 09       	sbc	r19, r1
    1fa4:	c9 01       	movw	r24, r18
    1fa6:	88 0f       	add	r24, r24
    1fa8:	99 1f       	adc	r25, r25
    1faa:	88 0f       	add	r24, r24
    1fac:	99 1f       	adc	r25, r25
    1fae:	a9 01       	movw	r20, r18
    1fb0:	48 0f       	add	r20, r24
    1fb2:	59 1f       	adc	r21, r25
    1fb4:	4d 87       	std	Y+13, r20	; 0x0d
    1fb6:	5e 87       	std	Y+14, r21	; 0x0e
    1fb8:	ca 01       	movw	r24, r20
    1fba:	0e 94 43 31 	call	0x6286	; 0x6286 <nvm_eeprom_read_byte>
    1fbe:	81 27       	eor	r24, r17
    1fc0:	8e 83       	std	Y+6, r24	; 0x06
    1fc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc6:	01 96       	adiw	r24, 0x01	; 1
    1fc8:	0e 94 43 31 	call	0x6286	; 0x6286 <nvm_eeprom_read_byte>
    1fcc:	81 27       	eor	r24, r17
    1fce:	88 87       	std	Y+8, r24	; 0x08
    1fd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd4:	02 96       	adiw	r24, 0x02	; 2
    1fd6:	0e 94 43 31 	call	0x6286	; 0x6286 <nvm_eeprom_read_byte>
    1fda:	81 27       	eor	r24, r17
    1fdc:	89 87       	std	Y+9, r24	; 0x09
    1fde:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe2:	03 96       	adiw	r24, 0x03	; 3
    1fe4:	0e 94 43 31 	call	0x6286	; 0x6286 <nvm_eeprom_read_byte>
    1fe8:	08 2f       	mov	r16, r24
    1fea:	01 27       	eor	r16, r17
    1fec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff0:	04 96       	adiw	r24, 0x04	; 4
    1ff2:	0e 94 43 31 	call	0x6286	; 0x6286 <nvm_eeprom_read_byte>
    1ff6:	81 27       	eor	r24, r17
    1ff8:	54 e5       	ldi	r21, 0x54	; 84
    1ffa:	c5 16       	cp	r12, r21
    1ffc:	d1 04       	cpc	r13, r1
    1ffe:	50 f4       	brcc	.+20     	; 0x2014 <BufferString+0x15c>
    2000:	d2 01       	movw	r26, r4
    2002:	9c 91       	ld	r25, X
    2004:	2e 81       	ldd	r18, Y+6	; 0x06
    2006:	09 80       	ldd	r0, Y+1	; 0x01
    2008:	01 c0       	rjmp	.+2      	; 0x200c <BufferString+0x154>
    200a:	22 0f       	add	r18, r18
    200c:	0a 94       	dec	r0
    200e:	ea f7       	brpl	.-6      	; 0x200a <BufferString+0x152>
    2010:	92 2b       	or	r25, r18
    2012:	9c 93       	st	X, r25
    2014:	b4 e5       	ldi	r27, 0x54	; 84
    2016:	2b 16       	cp	r2, r27
    2018:	31 04       	cpc	r3, r1
    201a:	60 f4       	brcc	.+24     	; 0x2034 <BufferString+0x17c>
    201c:	f7 01       	movw	r30, r14
    201e:	e7 55       	subi	r30, 0x57	; 87
    2020:	f1 09       	sbc	r31, r1
    2022:	90 81       	ld	r25, Z
    2024:	28 85       	ldd	r18, Y+8	; 0x08
    2026:	09 80       	ldd	r0, Y+1	; 0x01
    2028:	01 c0       	rjmp	.+2      	; 0x202c <BufferString+0x174>
    202a:	22 0f       	add	r18, r18
    202c:	0a 94       	dec	r0
    202e:	ea f7       	brpl	.-6      	; 0x202a <BufferString+0x172>
    2030:	92 2b       	or	r25, r18
    2032:	90 83       	st	Z, r25
    2034:	e4 e5       	ldi	r30, 0x54	; 84
    2036:	ae 16       	cp	r10, r30
    2038:	b1 04       	cpc	r11, r1
    203a:	60 f4       	brcc	.+24     	; 0x2054 <BufferString+0x19c>
    203c:	f7 01       	movw	r30, r14
    203e:	e6 55       	subi	r30, 0x56	; 86
    2040:	f1 09       	sbc	r31, r1
    2042:	90 81       	ld	r25, Z
    2044:	29 85       	ldd	r18, Y+9	; 0x09
    2046:	09 80       	ldd	r0, Y+1	; 0x01
    2048:	01 c0       	rjmp	.+2      	; 0x204c <BufferString+0x194>
    204a:	22 0f       	add	r18, r18
    204c:	0a 94       	dec	r0
    204e:	ea f7       	brpl	.-6      	; 0x204a <BufferString+0x192>
    2050:	92 2b       	or	r25, r18
    2052:	90 83       	st	Z, r25
    2054:	f4 e5       	ldi	r31, 0x54	; 84
    2056:	8f 16       	cp	r8, r31
    2058:	91 04       	cpc	r9, r1
    205a:	60 f4       	brcc	.+24     	; 0x2074 <BufferString+0x1bc>
    205c:	f7 01       	movw	r30, r14
    205e:	e5 55       	subi	r30, 0x55	; 85
    2060:	f1 09       	sbc	r31, r1
    2062:	90 81       	ld	r25, Z
    2064:	20 2f       	mov	r18, r16
    2066:	09 80       	ldd	r0, Y+1	; 0x01
    2068:	01 c0       	rjmp	.+2      	; 0x206c <BufferString+0x1b4>
    206a:	22 0f       	add	r18, r18
    206c:	0a 94       	dec	r0
    206e:	ea f7       	brpl	.-6      	; 0x206a <BufferString+0x1b2>
    2070:	92 2b       	or	r25, r18
    2072:	90 83       	st	Z, r25
    2074:	24 e5       	ldi	r18, 0x54	; 84
    2076:	62 16       	cp	r6, r18
    2078:	71 04       	cpc	r7, r1
    207a:	60 f4       	brcc	.+24     	; 0x2094 <BufferString+0x1dc>
    207c:	f7 01       	movw	r30, r14
    207e:	e4 55       	subi	r30, 0x54	; 84
    2080:	f1 09       	sbc	r31, r1
    2082:	90 81       	ld	r25, Z
    2084:	28 2f       	mov	r18, r24
    2086:	09 80       	ldd	r0, Y+1	; 0x01
    2088:	01 c0       	rjmp	.+2      	; 0x208c <BufferString+0x1d4>
    208a:	22 0f       	add	r18, r18
    208c:	0a 94       	dec	r0
    208e:	ea f7       	brpl	.-6      	; 0x208a <BufferString+0x1d2>
    2090:	92 2b       	or	r25, r18
    2092:	90 83       	st	Z, r25
    2094:	96 01       	movw	r18, r12
    2096:	2b 5f       	subi	r18, 0xFB	; 251
    2098:	3f 4f       	sbci	r19, 0xFF	; 255
    209a:	49 81       	ldd	r20, Y+1	; 0x01
    209c:	44 23       	and	r20, r20
    209e:	09 f4       	brne	.+2      	; 0x20a2 <BufferString+0x1ea>
    20a0:	5f c0       	rjmp	.+190    	; 0x2160 <BufferString+0x2a8>
    20a2:	aa 85       	ldd	r26, Y+10	; 0x0a
    20a4:	bb 85       	ldd	r27, Y+11	; 0x0b
    20a6:	a1 35       	cpi	r26, 0x51	; 81
    20a8:	b1 40       	sbci	r27, 0x01	; 1
    20aa:	08 f0       	brcs	.+2      	; 0x20ae <BufferString+0x1f6>
    20ac:	59 c0       	rjmp	.+178    	; 0x2160 <BufferString+0x2a8>
    20ae:	f4 e5       	ldi	r31, 0x54	; 84
    20b0:	cf 16       	cp	r12, r31
    20b2:	d1 04       	cpc	r13, r1
    20b4:	78 f4       	brcc	.+30     	; 0x20d4 <BufferString+0x21c>
    20b6:	f2 01       	movw	r30, r4
    20b8:	ec 5a       	subi	r30, 0xAC	; 172
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	9e 81       	ldd	r25, Y+6	; 0x06
    20be:	49 2f       	mov	r20, r25
    20c0:	50 e0       	ldi	r21, 0x00	; 0
    20c2:	0c 84       	ldd	r0, Y+12	; 0x0c
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <BufferString+0x212>
    20c6:	55 95       	asr	r21
    20c8:	47 95       	ror	r20
    20ca:	0a 94       	dec	r0
    20cc:	e2 f7       	brpl	.-8      	; 0x20c6 <BufferString+0x20e>
    20ce:	90 81       	ld	r25, Z
    20d0:	49 2b       	or	r20, r25
    20d2:	40 83       	st	Z, r20
    20d4:	a4 e5       	ldi	r26, 0x54	; 84
    20d6:	2a 16       	cp	r2, r26
    20d8:	31 04       	cpc	r3, r1
    20da:	78 f4       	brcc	.+30     	; 0x20fa <BufferString+0x242>
    20dc:	f2 01       	movw	r30, r4
    20de:	eb 5a       	subi	r30, 0xAB	; 171
    20e0:	ff 4f       	sbci	r31, 0xFF	; 255
    20e2:	b8 85       	ldd	r27, Y+8	; 0x08
    20e4:	4b 2f       	mov	r20, r27
    20e6:	50 e0       	ldi	r21, 0x00	; 0
    20e8:	0c 84       	ldd	r0, Y+12	; 0x0c
    20ea:	02 c0       	rjmp	.+4      	; 0x20f0 <BufferString+0x238>
    20ec:	55 95       	asr	r21
    20ee:	47 95       	ror	r20
    20f0:	0a 94       	dec	r0
    20f2:	e2 f7       	brpl	.-8      	; 0x20ec <BufferString+0x234>
    20f4:	c0 80       	ld	r12, Z
    20f6:	4c 29       	or	r20, r12
    20f8:	40 83       	st	Z, r20
    20fa:	e4 e5       	ldi	r30, 0x54	; 84
    20fc:	ae 16       	cp	r10, r30
    20fe:	b1 04       	cpc	r11, r1
    2100:	78 f4       	brcc	.+30     	; 0x2120 <BufferString+0x268>
    2102:	f2 01       	movw	r30, r4
    2104:	ea 5a       	subi	r30, 0xAA	; 170
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	99 85       	ldd	r25, Y+9	; 0x09
    210a:	49 2f       	mov	r20, r25
    210c:	50 e0       	ldi	r21, 0x00	; 0
    210e:	0c 84       	ldd	r0, Y+12	; 0x0c
    2110:	02 c0       	rjmp	.+4      	; 0x2116 <BufferString+0x25e>
    2112:	55 95       	asr	r21
    2114:	47 95       	ror	r20
    2116:	0a 94       	dec	r0
    2118:	e2 f7       	brpl	.-8      	; 0x2112 <BufferString+0x25a>
    211a:	d0 80       	ld	r13, Z
    211c:	4d 29       	or	r20, r13
    211e:	40 83       	st	Z, r20
    2120:	a4 e5       	ldi	r26, 0x54	; 84
    2122:	8a 16       	cp	r8, r26
    2124:	91 04       	cpc	r9, r1
    2126:	68 f4       	brcc	.+26     	; 0x2142 <BufferString+0x28a>
    2128:	40 2f       	mov	r20, r16
    212a:	50 e0       	ldi	r21, 0x00	; 0
    212c:	0c 84       	ldd	r0, Y+12	; 0x0c
    212e:	02 c0       	rjmp	.+4      	; 0x2134 <BufferString+0x27c>
    2130:	55 95       	asr	r21
    2132:	47 95       	ror	r20
    2134:	0a 94       	dec	r0
    2136:	e2 f7       	brpl	.-8      	; 0x2130 <BufferString+0x278>
    2138:	ea 81       	ldd	r30, Y+2	; 0x02
    213a:	fb 81       	ldd	r31, Y+3	; 0x03
    213c:	00 81       	ld	r16, Z
    213e:	40 2b       	or	r20, r16
    2140:	40 83       	st	Z, r20
    2142:	f4 e5       	ldi	r31, 0x54	; 84
    2144:	6f 16       	cp	r6, r31
    2146:	71 04       	cpc	r7, r1
    2148:	58 f4       	brcc	.+22     	; 0x2160 <BufferString+0x2a8>
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	0c 84       	ldd	r0, Y+12	; 0x0c
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <BufferString+0x29c>
    2150:	95 95       	asr	r25
    2152:	87 95       	ror	r24
    2154:	0a 94       	dec	r0
    2156:	e2 f7       	brpl	.-8      	; 0x2150 <BufferString+0x298>
    2158:	d7 01       	movw	r26, r14
    215a:	9c 91       	ld	r25, X
    215c:	89 2b       	or	r24, r25
    215e:	8c 93       	st	X, r24
    2160:	24 35       	cpi	r18, 0x54	; 84
    2162:	31 05       	cpc	r19, r1
    2164:	f0 f4       	brcc	.+60     	; 0x21a2 <BufferString+0x2ea>
    2166:	ec 81       	ldd	r30, Y+4	; 0x04
    2168:	fd 81       	ldd	r31, Y+5	; 0x05
    216a:	41 91       	ld	r20, Z+
    216c:	ec 83       	std	Y+4, r30	; 0x04
    216e:	fd 83       	std	Y+5, r31	; 0x05
    2170:	f5 e0       	ldi	r31, 0x05	; 5
    2172:	ef 0e       	add	r14, r31
    2174:	f1 1c       	adc	r15, r1
    2176:	55 e0       	ldi	r21, 0x05	; 5
    2178:	45 0e       	add	r4, r21
    217a:	51 1c       	adc	r5, r1
    217c:	85 e0       	ldi	r24, 0x05	; 5
    217e:	68 0e       	add	r6, r24
    2180:	71 1c       	adc	r7, r1
    2182:	95 e0       	ldi	r25, 0x05	; 5
    2184:	89 0e       	add	r8, r25
    2186:	91 1c       	adc	r9, r1
    2188:	aa 81       	ldd	r26, Y+2	; 0x02
    218a:	bb 81       	ldd	r27, Y+3	; 0x03
    218c:	15 96       	adiw	r26, 0x05	; 5
    218e:	aa 83       	std	Y+2, r26	; 0x02
    2190:	bb 83       	std	Y+3, r27	; 0x03
    2192:	b5 e0       	ldi	r27, 0x05	; 5
    2194:	ab 0e       	add	r10, r27
    2196:	b1 1c       	adc	r11, r1
    2198:	e5 e0       	ldi	r30, 0x05	; 5
    219a:	2e 0e       	add	r2, r30
    219c:	31 1c       	adc	r3, r1
    219e:	41 11       	cpse	r20, r1
    21a0:	fb ce       	rjmp	.-522    	; 0x1f98 <BufferString+0xe0>
    21a2:	2e 96       	adiw	r28, 0x0e	; 14
    21a4:	cd bf       	out	0x3d, r28	; 61
    21a6:	de bf       	out	0x3e, r29	; 62
    21a8:	df 91       	pop	r29
    21aa:	cf 91       	pop	r28
    21ac:	1f 91       	pop	r17
    21ae:	0f 91       	pop	r16
    21b0:	ff 90       	pop	r15
    21b2:	ef 90       	pop	r14
    21b4:	df 90       	pop	r13
    21b6:	cf 90       	pop	r12
    21b8:	bf 90       	pop	r11
    21ba:	af 90       	pop	r10
    21bc:	9f 90       	pop	r9
    21be:	8f 90       	pop	r8
    21c0:	7f 90       	pop	r7
    21c2:	6f 90       	pop	r6
    21c4:	5f 90       	pop	r5
    21c6:	4f 90       	pop	r4
    21c8:	3f 90       	pop	r3
    21ca:	2f 90       	pop	r2
    21cc:	08 95       	ret

000021ce <BufferPixel>:
    21ce:	60 33       	cpi	r22, 0x30	; 48
    21d0:	08 f0       	brcs	.+2      	; 0x21d4 <BufferPixel+0x6>
    21d2:	6f e2       	ldi	r22, 0x2F	; 47
    21d4:	96 2f       	mov	r25, r22
    21d6:	96 95       	lsr	r25
    21d8:	96 95       	lsr	r25
    21da:	96 95       	lsr	r25
    21dc:	54 e5       	ldi	r21, 0x54	; 84
    21de:	95 9f       	mul	r25, r21
    21e0:	f0 01       	movw	r30, r0
    21e2:	11 24       	eor	r1, r1
    21e4:	98 2f       	mov	r25, r24
    21e6:	84 35       	cpi	r24, 0x54	; 84
    21e8:	08 f0       	brcs	.+2      	; 0x21ec <BufferPixel+0x1e>
    21ea:	93 e5       	ldi	r25, 0x53	; 83
    21ec:	df 01       	movw	r26, r30
    21ee:	a9 0f       	add	r26, r25
    21f0:	b1 1d       	adc	r27, r1
    21f2:	44 23       	and	r20, r20
    21f4:	79 f0       	breq	.+30     	; 0x2214 <BufferPixel+0x46>
    21f6:	f9 01       	movw	r30, r18
    21f8:	ea 0f       	add	r30, r26
    21fa:	fb 1f       	adc	r31, r27
    21fc:	67 70       	andi	r22, 0x07	; 7
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	02 c0       	rjmp	.+4      	; 0x2208 <BufferPixel+0x3a>
    2204:	88 0f       	add	r24, r24
    2206:	99 1f       	adc	r25, r25
    2208:	6a 95       	dec	r22
    220a:	e2 f7       	brpl	.-8      	; 0x2204 <BufferPixel+0x36>
    220c:	90 81       	ld	r25, Z
    220e:	89 27       	eor	r24, r25
    2210:	80 83       	st	Z, r24
    2212:	08 95       	ret
    2214:	f9 01       	movw	r30, r18
    2216:	ea 0f       	add	r30, r26
    2218:	fb 1f       	adc	r31, r27
    221a:	67 70       	andi	r22, 0x07	; 7
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	02 c0       	rjmp	.+4      	; 0x2226 <BufferPixel+0x58>
    2222:	88 0f       	add	r24, r24
    2224:	99 1f       	adc	r25, r25
    2226:	6a 95       	dec	r22
    2228:	e2 f7       	brpl	.-8      	; 0x2222 <BufferPixel+0x54>
    222a:	90 81       	ld	r25, Z
    222c:	89 2b       	or	r24, r25
    222e:	80 83       	st	Z, r24
    2230:	08 95       	ret

00002232 <BufferLine>:
    2232:	2f 92       	push	r2
    2234:	3f 92       	push	r3
    2236:	4f 92       	push	r4
    2238:	5f 92       	push	r5
    223a:	6f 92       	push	r6
    223c:	7f 92       	push	r7
    223e:	8f 92       	push	r8
    2240:	9f 92       	push	r9
    2242:	af 92       	push	r10
    2244:	bf 92       	push	r11
    2246:	cf 92       	push	r12
    2248:	df 92       	push	r13
    224a:	ef 92       	push	r14
    224c:	ff 92       	push	r15
    224e:	0f 93       	push	r16
    2250:	1f 93       	push	r17
    2252:	cf 93       	push	r28
    2254:	df 93       	push	r29
    2256:	cd b7       	in	r28, 0x3d	; 61
    2258:	de b7       	in	r29, 0x3e	; 62
    225a:	69 97       	sbiw	r28, 0x19	; 25
    225c:	cd bf       	out	0x3d, r28	; 61
    225e:	de bf       	out	0x3e, r29	; 62
    2260:	d8 2e       	mov	r13, r24
    2262:	16 2f       	mov	r17, r22
    2264:	92 2e       	mov	r9, r18
    2266:	17 01       	movw	r2, r14
    2268:	a4 2e       	mov	r10, r20
    226a:	b1 2c       	mov	r11, r1
    226c:	28 2f       	mov	r18, r24
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	29 8b       	std	Y+17, r18	; 0x11
    2272:	3a 8b       	std	Y+18, r19	; 0x12
    2274:	b5 01       	movw	r22, r10
    2276:	62 1b       	sub	r22, r18
    2278:	73 0b       	sbc	r23, r19
    227a:	07 2e       	mov	r0, r23
    227c:	00 0c       	add	r0, r0
    227e:	88 0b       	sbc	r24, r24
    2280:	99 0b       	sbc	r25, r25
    2282:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__floatsisf>
    2286:	69 83       	std	Y+1, r22	; 0x01
    2288:	7a 83       	std	Y+2, r23	; 0x02
    228a:	8b 83       	std	Y+3, r24	; 0x03
    228c:	9c 83       	std	Y+4, r25	; 0x04
    228e:	89 2d       	mov	r24, r9
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	8f 8b       	std	Y+23, r24	; 0x17
    2294:	98 8f       	std	Y+24, r25	; 0x18
    2296:	a1 2f       	mov	r26, r17
    2298:	b0 e0       	ldi	r27, 0x00	; 0
    229a:	ad 8b       	std	Y+21, r26	; 0x15
    229c:	be 8b       	std	Y+22, r27	; 0x16
    229e:	bc 01       	movw	r22, r24
    22a0:	6a 1b       	sub	r22, r26
    22a2:	7b 0b       	sbc	r23, r27
    22a4:	07 2e       	mov	r0, r23
    22a6:	00 0c       	add	r0, r0
    22a8:	88 0b       	sbc	r24, r24
    22aa:	99 0b       	sbc	r25, r25
    22ac:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__floatsisf>
    22b0:	6d 83       	std	Y+5, r22	; 0x05
    22b2:	7e 83       	std	Y+6, r23	; 0x06
    22b4:	8f 83       	std	Y+7, r24	; 0x07
    22b6:	98 87       	std	Y+8, r25	; 0x08
    22b8:	6d 2d       	mov	r22, r13
    22ba:	70 e0       	ldi	r23, 0x00	; 0
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	0e 94 66 32 	call	0x64cc	; 0x64cc <__floatunsisf>
    22c4:	6b 01       	movw	r12, r22
    22c6:	7c 01       	movw	r14, r24
    22c8:	b5 01       	movw	r22, r10
    22ca:	bb 0c       	add	r11, r11
    22cc:	88 0b       	sbc	r24, r24
    22ce:	99 0b       	sbc	r25, r25
    22d0:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__floatsisf>
    22d4:	69 87       	std	Y+9, r22	; 0x09
    22d6:	7a 87       	std	Y+10, r23	; 0x0a
    22d8:	8b 87       	std	Y+11, r24	; 0x0b
    22da:	9c 87       	std	Y+12, r25	; 0x0c
    22dc:	9b 01       	movw	r18, r22
    22de:	ac 01       	movw	r20, r24
    22e0:	c7 01       	movw	r24, r14
    22e2:	b6 01       	movw	r22, r12
    22e4:	0e 94 c9 31 	call	0x6392	; 0x6392 <__cmpsf2>
    22e8:	88 23       	and	r24, r24
    22ea:	0c f0       	brlt	.+2      	; 0x22ee <BufferLine+0xbc>
    22ec:	55 c0       	rjmp	.+170    	; 0x2398 <BufferLine+0x166>
    22ee:	ed 89       	ldd	r30, Y+21	; 0x15
    22f0:	fe 89       	ldd	r31, Y+22	; 0x16
    22f2:	2f 01       	movw	r4, r30
    22f4:	ff 0f       	add	r31, r31
    22f6:	66 08       	sbc	r6, r6
    22f8:	77 08       	sbc	r7, r7
    22fa:	89 89       	ldd	r24, Y+17	; 0x11
    22fc:	9a 89       	ldd	r25, Y+18	; 0x12
    22fe:	09 2e       	mov	r0, r25
    2300:	00 0c       	add	r0, r0
    2302:	aa 0b       	sbc	r26, r26
    2304:	bb 0b       	sbc	r27, r27
    2306:	8d 87       	std	Y+13, r24	; 0x0d
    2308:	9e 87       	std	Y+14, r25	; 0x0e
    230a:	af 87       	std	Y+15, r26	; 0x0f
    230c:	b8 8b       	std	Y+16, r27	; 0x10
    230e:	99 8e       	std	Y+25, r9	; 0x19
    2310:	c3 01       	movw	r24, r6
    2312:	b2 01       	movw	r22, r4
    2314:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__floatsisf>
    2318:	4b 01       	movw	r8, r22
    231a:	5c 01       	movw	r10, r24
    231c:	6d 85       	ldd	r22, Y+13	; 0x0d
    231e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2320:	8f 85       	ldd	r24, Y+15	; 0x0f
    2322:	98 89       	ldd	r25, Y+16	; 0x10
    2324:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__floatsisf>
    2328:	9b 01       	movw	r18, r22
    232a:	ac 01       	movw	r20, r24
    232c:	c7 01       	movw	r24, r14
    232e:	b6 01       	movw	r22, r12
    2330:	0e 94 64 31 	call	0x62c8	; 0x62c8 <__subsf3>
    2334:	29 81       	ldd	r18, Y+1	; 0x01
    2336:	3a 81       	ldd	r19, Y+2	; 0x02
    2338:	4b 81       	ldd	r20, Y+3	; 0x03
    233a:	5c 81       	ldd	r21, Y+4	; 0x04
    233c:	0e 94 cd 31 	call	0x639a	; 0x639a <__divsf3>
    2340:	2d 81       	ldd	r18, Y+5	; 0x05
    2342:	3e 81       	ldd	r19, Y+6	; 0x06
    2344:	4f 81       	ldd	r20, Y+7	; 0x07
    2346:	58 85       	ldd	r21, Y+8	; 0x08
    2348:	0e 94 18 33 	call	0x6630	; 0x6630 <__mulsf3>
    234c:	9b 01       	movw	r18, r22
    234e:	ac 01       	movw	r20, r24
    2350:	c5 01       	movw	r24, r10
    2352:	b4 01       	movw	r22, r8
    2354:	0e 94 65 31 	call	0x62ca	; 0x62ca <__addsf3>
    2358:	0e 94 3a 32 	call	0x6474	; 0x6474 <__fixunssfsi>
    235c:	b6 2e       	mov	r11, r22
    235e:	c7 01       	movw	r24, r14
    2360:	b6 01       	movw	r22, r12
    2362:	0e 94 3a 32 	call	0x6474	; 0x6474 <__fixunssfsi>
    2366:	86 2f       	mov	r24, r22
    2368:	91 01       	movw	r18, r2
    236a:	40 2f       	mov	r20, r16
    236c:	6b 2d       	mov	r22, r11
    236e:	2f df       	rcall	.-418    	; 0x21ce <BufferPixel>
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	40 e8       	ldi	r20, 0x80	; 128
    2376:	5f e3       	ldi	r21, 0x3F	; 63
    2378:	c7 01       	movw	r24, r14
    237a:	b6 01       	movw	r22, r12
    237c:	0e 94 65 31 	call	0x62ca	; 0x62ca <__addsf3>
    2380:	6b 01       	movw	r12, r22
    2382:	7c 01       	movw	r14, r24
    2384:	29 85       	ldd	r18, Y+9	; 0x09
    2386:	3a 85       	ldd	r19, Y+10	; 0x0a
    2388:	4b 85       	ldd	r20, Y+11	; 0x0b
    238a:	5c 85       	ldd	r21, Y+12	; 0x0c
    238c:	0e 94 c9 31 	call	0x6392	; 0x6392 <__cmpsf2>
    2390:	88 23       	and	r24, r24
    2392:	0c f4       	brge	.+2      	; 0x2396 <BufferLine+0x164>
    2394:	bd cf       	rjmp	.-134    	; 0x2310 <BufferLine+0xde>
    2396:	99 8c       	ldd	r9, Y+25	; 0x19
    2398:	19 15       	cp	r17, r9
    239a:	08 f0       	brcs	.+2      	; 0x239e <BufferLine+0x16c>
    239c:	72 c0       	rjmp	.+228    	; 0x2482 <BufferLine+0x250>
    239e:	61 2f       	mov	r22, r17
    23a0:	70 e0       	ldi	r23, 0x00	; 0
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	0e 94 66 32 	call	0x64cc	; 0x64cc <__floatunsisf>
    23aa:	6b 01       	movw	r12, r22
    23ac:	7c 01       	movw	r14, r24
    23ae:	af 89       	ldd	r26, Y+23	; 0x17
    23b0:	b8 8d       	ldd	r27, Y+24	; 0x18
    23b2:	bd 01       	movw	r22, r26
    23b4:	bb 0f       	add	r27, r27
    23b6:	88 0b       	sbc	r24, r24
    23b8:	99 0b       	sbc	r25, r25
    23ba:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__floatsisf>
    23be:	69 87       	std	Y+9, r22	; 0x09
    23c0:	7a 87       	std	Y+10, r23	; 0x0a
    23c2:	8b 87       	std	Y+11, r24	; 0x0b
    23c4:	9c 87       	std	Y+12, r25	; 0x0c
    23c6:	9b 01       	movw	r18, r22
    23c8:	ac 01       	movw	r20, r24
    23ca:	c7 01       	movw	r24, r14
    23cc:	b6 01       	movw	r22, r12
    23ce:	0e 94 c9 31 	call	0x6392	; 0x6392 <__cmpsf2>
    23d2:	88 23       	and	r24, r24
    23d4:	0c f0       	brlt	.+2      	; 0x23d8 <BufferLine+0x1a6>
    23d6:	55 c0       	rjmp	.+170    	; 0x2482 <BufferLine+0x250>
    23d8:	89 89       	ldd	r24, Y+17	; 0x11
    23da:	9a 89       	ldd	r25, Y+18	; 0x12
    23dc:	09 2e       	mov	r0, r25
    23de:	00 0c       	add	r0, r0
    23e0:	aa 0b       	sbc	r26, r26
    23e2:	bb 0b       	sbc	r27, r27
    23e4:	8d 87       	std	Y+13, r24	; 0x0d
    23e6:	9e 87       	std	Y+14, r25	; 0x0e
    23e8:	af 87       	std	Y+15, r26	; 0x0f
    23ea:	b8 8b       	std	Y+16, r27	; 0x10
    23ec:	ad 89       	ldd	r26, Y+21	; 0x15
    23ee:	be 89       	ldd	r27, Y+22	; 0x16
    23f0:	2d 01       	movw	r4, r26
    23f2:	bb 0f       	add	r27, r27
    23f4:	66 08       	sbc	r6, r6
    23f6:	77 08       	sbc	r7, r7
    23f8:	9f 8a       	std	Y+23, r9	; 0x17
    23fa:	c7 01       	movw	r24, r14
    23fc:	b6 01       	movw	r22, r12
    23fe:	0e 94 3a 32 	call	0x6474	; 0x6474 <__fixunssfsi>
    2402:	69 8f       	std	Y+25, r22	; 0x19
    2404:	6d 85       	ldd	r22, Y+13	; 0x0d
    2406:	7e 85       	ldd	r23, Y+14	; 0x0e
    2408:	8f 85       	ldd	r24, Y+15	; 0x0f
    240a:	98 89       	ldd	r25, Y+16	; 0x10
    240c:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__floatsisf>
    2410:	4b 01       	movw	r8, r22
    2412:	5c 01       	movw	r10, r24
    2414:	c3 01       	movw	r24, r6
    2416:	b2 01       	movw	r22, r4
    2418:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__floatsisf>
    241c:	9b 01       	movw	r18, r22
    241e:	ac 01       	movw	r20, r24
    2420:	c7 01       	movw	r24, r14
    2422:	b6 01       	movw	r22, r12
    2424:	0e 94 64 31 	call	0x62c8	; 0x62c8 <__subsf3>
    2428:	2d 81       	ldd	r18, Y+5	; 0x05
    242a:	3e 81       	ldd	r19, Y+6	; 0x06
    242c:	4f 81       	ldd	r20, Y+7	; 0x07
    242e:	58 85       	ldd	r21, Y+8	; 0x08
    2430:	0e 94 cd 31 	call	0x639a	; 0x639a <__divsf3>
    2434:	29 81       	ldd	r18, Y+1	; 0x01
    2436:	3a 81       	ldd	r19, Y+2	; 0x02
    2438:	4b 81       	ldd	r20, Y+3	; 0x03
    243a:	5c 81       	ldd	r21, Y+4	; 0x04
    243c:	0e 94 18 33 	call	0x6630	; 0x6630 <__mulsf3>
    2440:	9b 01       	movw	r18, r22
    2442:	ac 01       	movw	r20, r24
    2444:	c5 01       	movw	r24, r10
    2446:	b4 01       	movw	r22, r8
    2448:	0e 94 65 31 	call	0x62ca	; 0x62ca <__addsf3>
    244c:	0e 94 3a 32 	call	0x6474	; 0x6474 <__fixunssfsi>
    2450:	86 2f       	mov	r24, r22
    2452:	91 01       	movw	r18, r2
    2454:	40 2f       	mov	r20, r16
    2456:	69 8d       	ldd	r22, Y+25	; 0x19
    2458:	ba de       	rcall	.-652    	; 0x21ce <BufferPixel>
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	40 e8       	ldi	r20, 0x80	; 128
    2460:	5f e3       	ldi	r21, 0x3F	; 63
    2462:	c7 01       	movw	r24, r14
    2464:	b6 01       	movw	r22, r12
    2466:	0e 94 65 31 	call	0x62ca	; 0x62ca <__addsf3>
    246a:	6b 01       	movw	r12, r22
    246c:	7c 01       	movw	r14, r24
    246e:	29 85       	ldd	r18, Y+9	; 0x09
    2470:	3a 85       	ldd	r19, Y+10	; 0x0a
    2472:	4b 85       	ldd	r20, Y+11	; 0x0b
    2474:	5c 85       	ldd	r21, Y+12	; 0x0c
    2476:	0e 94 c9 31 	call	0x6392	; 0x6392 <__cmpsf2>
    247a:	88 23       	and	r24, r24
    247c:	0c f4       	brge	.+2      	; 0x2480 <BufferLine+0x24e>
    247e:	bd cf       	rjmp	.-134    	; 0x23fa <BufferLine+0x1c8>
    2480:	9f 88       	ldd	r9, Y+23	; 0x17
    2482:	91 16       	cp	r9, r17
    2484:	08 f0       	brcs	.+2      	; 0x2488 <BufferLine+0x256>
    2486:	61 c0       	rjmp	.+194    	; 0x254a <BufferLine+0x318>
    2488:	69 2d       	mov	r22, r9
    248a:	70 e0       	ldi	r23, 0x00	; 0
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	0e 94 66 32 	call	0x64cc	; 0x64cc <__floatunsisf>
    2494:	6b 01       	movw	r12, r22
    2496:	7c 01       	movw	r14, r24
    2498:	ed 89       	ldd	r30, Y+21	; 0x15
    249a:	fe 89       	ldd	r31, Y+22	; 0x16
    249c:	bf 01       	movw	r22, r30
    249e:	ff 0f       	add	r31, r31
    24a0:	88 0b       	sbc	r24, r24
    24a2:	99 0b       	sbc	r25, r25
    24a4:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__floatsisf>
    24a8:	4b 01       	movw	r8, r22
    24aa:	5c 01       	movw	r10, r24
    24ac:	9b 01       	movw	r18, r22
    24ae:	ac 01       	movw	r20, r24
    24b0:	c7 01       	movw	r24, r14
    24b2:	b6 01       	movw	r22, r12
    24b4:	0e 94 c9 31 	call	0x6392	; 0x6392 <__cmpsf2>
    24b8:	88 23       	and	r24, r24
    24ba:	0c f0       	brlt	.+2      	; 0x24be <BufferLine+0x28c>
    24bc:	46 c0       	rjmp	.+140    	; 0x254a <BufferLine+0x318>
    24be:	89 89       	ldd	r24, Y+17	; 0x11
    24c0:	9a 89       	ldd	r25, Y+18	; 0x12
    24c2:	09 2e       	mov	r0, r25
    24c4:	00 0c       	add	r0, r0
    24c6:	aa 0b       	sbc	r26, r26
    24c8:	bb 0b       	sbc	r27, r27
    24ca:	89 8b       	std	Y+17, r24	; 0x11
    24cc:	9a 8b       	std	Y+18, r25	; 0x12
    24ce:	ab 8b       	std	Y+19, r26	; 0x13
    24d0:	bc 8b       	std	Y+20, r27	; 0x14
    24d2:	c7 01       	movw	r24, r14
    24d4:	b6 01       	movw	r22, r12
    24d6:	0e 94 3a 32 	call	0x6474	; 0x6474 <__fixunssfsi>
    24da:	16 2f       	mov	r17, r22
    24dc:	69 89       	ldd	r22, Y+17	; 0x11
    24de:	7a 89       	ldd	r23, Y+18	; 0x12
    24e0:	8b 89       	ldd	r24, Y+19	; 0x13
    24e2:	9c 89       	ldd	r25, Y+20	; 0x14
    24e4:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__floatsisf>
    24e8:	2b 01       	movw	r4, r22
    24ea:	3c 01       	movw	r6, r24
    24ec:	a5 01       	movw	r20, r10
    24ee:	94 01       	movw	r18, r8
    24f0:	c7 01       	movw	r24, r14
    24f2:	b6 01       	movw	r22, r12
    24f4:	0e 94 64 31 	call	0x62c8	; 0x62c8 <__subsf3>
    24f8:	2d 81       	ldd	r18, Y+5	; 0x05
    24fa:	3e 81       	ldd	r19, Y+6	; 0x06
    24fc:	4f 81       	ldd	r20, Y+7	; 0x07
    24fe:	58 85       	ldd	r21, Y+8	; 0x08
    2500:	0e 94 cd 31 	call	0x639a	; 0x639a <__divsf3>
    2504:	29 81       	ldd	r18, Y+1	; 0x01
    2506:	3a 81       	ldd	r19, Y+2	; 0x02
    2508:	4b 81       	ldd	r20, Y+3	; 0x03
    250a:	5c 81       	ldd	r21, Y+4	; 0x04
    250c:	0e 94 18 33 	call	0x6630	; 0x6630 <__mulsf3>
    2510:	9b 01       	movw	r18, r22
    2512:	ac 01       	movw	r20, r24
    2514:	c3 01       	movw	r24, r6
    2516:	b2 01       	movw	r22, r4
    2518:	0e 94 65 31 	call	0x62ca	; 0x62ca <__addsf3>
    251c:	0e 94 3a 32 	call	0x6474	; 0x6474 <__fixunssfsi>
    2520:	86 2f       	mov	r24, r22
    2522:	91 01       	movw	r18, r2
    2524:	40 2f       	mov	r20, r16
    2526:	61 2f       	mov	r22, r17
    2528:	52 de       	rcall	.-860    	; 0x21ce <BufferPixel>
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	40 e8       	ldi	r20, 0x80	; 128
    2530:	5f e3       	ldi	r21, 0x3F	; 63
    2532:	c7 01       	movw	r24, r14
    2534:	b6 01       	movw	r22, r12
    2536:	0e 94 65 31 	call	0x62ca	; 0x62ca <__addsf3>
    253a:	6b 01       	movw	r12, r22
    253c:	7c 01       	movw	r14, r24
    253e:	a5 01       	movw	r20, r10
    2540:	94 01       	movw	r18, r8
    2542:	0e 94 c9 31 	call	0x6392	; 0x6392 <__cmpsf2>
    2546:	88 23       	and	r24, r24
    2548:	24 f2       	brlt	.-120    	; 0x24d2 <BufferLine+0x2a0>
    254a:	69 96       	adiw	r28, 0x19	; 25
    254c:	cd bf       	out	0x3d, r28	; 61
    254e:	de bf       	out	0x3e, r29	; 62
    2550:	df 91       	pop	r29
    2552:	cf 91       	pop	r28
    2554:	1f 91       	pop	r17
    2556:	0f 91       	pop	r16
    2558:	ff 90       	pop	r15
    255a:	ef 90       	pop	r14
    255c:	df 90       	pop	r13
    255e:	cf 90       	pop	r12
    2560:	bf 90       	pop	r11
    2562:	af 90       	pop	r10
    2564:	9f 90       	pop	r9
    2566:	8f 90       	pop	r8
    2568:	7f 90       	pop	r7
    256a:	6f 90       	pop	r6
    256c:	5f 90       	pop	r5
    256e:	4f 90       	pop	r4
    2570:	3f 90       	pop	r3
    2572:	2f 90       	pop	r2
    2574:	08 95       	ret

00002576 <BufferBitmap>:
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	fc 01       	movw	r30, r24
    257c:	e2 0f       	add	r30, r18
    257e:	f3 1f       	adc	r31, r19
    2580:	da 01       	movw	r26, r20
    2582:	a2 0f       	add	r26, r18
    2584:	b3 1f       	adc	r27, r19
    2586:	9c 01       	movw	r18, r24
    2588:	28 50       	subi	r18, 0x08	; 8
    258a:	3e 4f       	sbci	r19, 0xFE	; 254
    258c:	66 23       	and	r22, r22
    258e:	21 f0       	breq	.+8      	; 0x2598 <BufferBitmap+0x22>
    2590:	90 81       	ld	r25, Z
    2592:	90 95       	com	r25
    2594:	9c 93       	st	X, r25
    2596:	02 c0       	rjmp	.+4      	; 0x259c <BufferBitmap+0x26>
    2598:	80 81       	ld	r24, Z
    259a:	8c 93       	st	X, r24
    259c:	31 96       	adiw	r30, 0x01	; 1
    259e:	11 96       	adiw	r26, 0x01	; 1
    25a0:	e2 17       	cp	r30, r18
    25a2:	f3 07       	cpc	r31, r19
    25a4:	99 f7       	brne	.-26     	; 0x258c <BufferBitmap+0x16>
    25a6:	08 95       	ret

000025a8 <FlushScreenBuffer>:
    25a8:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <_currentBuff>
    25ac:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <_currentBuff+0x1>
    25b0:	28 e2       	ldi	r18, 0x28	; 40
    25b2:	8a 37       	cpi	r24, 0x7A	; 122
    25b4:	92 07       	cpc	r25, r18
    25b6:	39 f4       	brne	.+14     	; 0x25c6 <FlushScreenBuffer+0x1e>
    25b8:	22 e7       	ldi	r18, 0x72	; 114
    25ba:	3a e2       	ldi	r19, 0x2A	; 42
    25bc:	20 93 06 20 	sts	0x2006, r18	; 0x802006 <_currentBuff>
    25c0:	30 93 07 20 	sts	0x2007, r19	; 0x802007 <_currentBuff+0x1>
    25c4:	06 c0       	rjmp	.+12     	; 0x25d2 <FlushScreenBuffer+0x2a>
    25c6:	2a e7       	ldi	r18, 0x7A	; 122
    25c8:	38 e2       	ldi	r19, 0x28	; 40
    25ca:	20 93 06 20 	sts	0x2006, r18	; 0x802006 <_currentBuff>
    25ce:	30 93 07 20 	sts	0x2007, r19	; 0x802007 <_currentBuff+0x1>
    25d2:	e0 91 06 20 	lds	r30, 0x2006	; 0x802006 <_currentBuff>
    25d6:	f0 91 07 20 	lds	r31, 0x2007	; 0x802007 <_currentBuff+0x1>
    25da:	28 ef       	ldi	r18, 0xF8	; 248
    25dc:	31 e0       	ldi	r19, 0x01	; 1
    25de:	df 01       	movw	r26, r30
    25e0:	a9 01       	movw	r20, r18
    25e2:	1d 92       	st	X+, r1
    25e4:	41 50       	subi	r20, 0x01	; 1
    25e6:	50 40       	sbci	r21, 0x00	; 0
    25e8:	e1 f7       	brne	.-8      	; 0x25e2 <FlushScreenBuffer+0x3a>
    25ea:	e0 91 45 27 	lds	r30, 0x2745	; 0x802745 <screenout>
    25ee:	f0 91 46 27 	lds	r31, 0x2746	; 0x802746 <screenout+0x1>
    25f2:	19 95       	eicall
    25f4:	08 95       	ret

000025f6 <DrawString>:
		
void DrawString(uint8_t * str, uint8_t x, uint8_t y, uint8_t invert)
{
    25f6:	0f 93       	push	r16
    25f8:	1f 93       	push	r17
	BufferString(str, x, y, invert, _currentBuff);
    25fa:	00 91 06 20 	lds	r16, 0x2006	; 0x802006 <_currentBuff>
    25fe:	10 91 07 20 	lds	r17, 0x2007	; 0x802007 <_currentBuff+0x1>
    2602:	5a dc       	rcall	.-1868   	; 0x1eb8 <BufferString>
}
    2604:	1f 91       	pop	r17
    2606:	0f 91       	pop	r16
    2608:	08 95       	ret

0000260a <DrawPixel>:

void DrawPixel(uint8_t x, uint8_t y, uint8_t invert)
{
	BufferPixel(x, y, invert, _currentBuff);
    260a:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <_currentBuff>
    260e:	30 91 07 20 	lds	r19, 0x2007	; 0x802007 <_currentBuff+0x1>
    2612:	dd cd       	rjmp	.-1094   	; 0x21ce <BufferPixel>
    2614:	08 95       	ret

00002616 <DrawBitmap>:
}

void DrawBitmap(uint8_t * bitmap, uint8_t invert)
{
	BufferBitmap(bitmap, invert, _currentBuff);	
    2616:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <_currentBuff>
    261a:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <_currentBuff+0x1>
    261e:	ab cf       	rjmp	.-170    	; 0x2576 <BufferBitmap>
    2620:	08 95       	ret

00002622 <WriteCommand>:

void WriteCommand(uint8_t command)
{
	

	CONTROL_PORT.OUTCLR = DC_PIN;
    2622:	94 e0       	ldi	r25, 0x04	; 4
    2624:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	SPIUSART.DATA = command;
    2628:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	
	while(!(SPIUSART.STATUS & USART_DREIF_bm));
    262c:	e0 ea       	ldi	r30, 0xA0	; 160
    262e:	f8 e0       	ldi	r31, 0x08	; 8
    2630:	81 81       	ldd	r24, Z+1	; 0x01
    2632:	85 ff       	sbrs	r24, 5
    2634:	fd cf       	rjmp	.-6      	; 0x2630 <WriteCommand+0xe>

}
    2636:	08 95       	ret

00002638 <DrawScreen>:

void DrawScreen(uint8_t * buffer)
{
	CONTROL_PORT.OUTSET = DC_PIN;
    2638:	24 e0       	ldi	r18, 0x04	; 4
    263a:	20 93 65 06 	sts	0x0665, r18	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>

	DMA.CH0.SRCADDR0 = (uint16_t)buffer & 0xFF;
    263e:	e0 e0       	ldi	r30, 0x00	; 0
    2640:	f1 e0       	ldi	r31, 0x01	; 1
    2642:	80 8f       	std	Z+24, r24	; 0x18
	DMA.CH0.SRCADDR1 = (uint16_t)buffer >>8;
    2644:	91 8f       	std	Z+25, r25	; 0x19
	DMA.CH0.SRCADDR2 = 0;
    2646:	12 8e       	std	Z+26, r1	; 0x1a
	
	DMA.CH0.CTRLA |= DMA_ENABLE_bm | DMA_CH_TRFREQ_bm;	
    2648:	80 89       	ldd	r24, Z+16	; 0x10
    264a:	80 69       	ori	r24, 0x90	; 144
    264c:	80 8b       	std	Z+16, r24	; 0x10
    264e:	08 95       	ret

00002650 <InitializeSPI>:
}

void InitializeSPI()
{
	SPIUSART.BAUDCTRLA = 0;
    2650:	e0 ea       	ldi	r30, 0xA0	; 160
    2652:	f8 e0       	ldi	r31, 0x08	; 8
    2654:	16 82       	std	Z+6, r1	; 0x06
	SPIUSART.BAUDCTRLB = 0;
    2656:	17 82       	std	Z+7, r1	; 0x07
	
	SPIUSART_PORT.DIRSET |= PIN1_bm | PIN3_bm; // output SPI
    2658:	a0 e4       	ldi	r26, 0x40	; 64
    265a:	b6 e0       	ldi	r27, 0x06	; 6
    265c:	11 96       	adiw	r26, 0x01	; 1
    265e:	8c 91       	ld	r24, X
    2660:	11 97       	sbiw	r26, 0x01	; 1
    2662:	8a 60       	ori	r24, 0x0A	; 10
    2664:	11 96       	adiw	r26, 0x01	; 1
    2666:	8c 93       	st	X, r24
	
	SPIUSART.CTRLC = USART_CMODE_MSPI_gc;
    2668:	80 ec       	ldi	r24, 0xC0	; 192
    266a:	85 83       	std	Z+5, r24	; 0x05
	SPIUSART.CTRLB = USART_TXEN_bm;// | USART_CLK2X_bm;
    266c:	98 e0       	ldi	r25, 0x08	; 8
    266e:	94 83       	std	Z+4, r25	; 0x04
	
	SPIUSART.BAUDCTRLA = 200; //~2mHz
    2670:	98 ec       	ldi	r25, 0xC8	; 200
    2672:	96 83       	std	Z+6, r25	; 0x06
	SPIUSART.BAUDCTRLB = 0xC0;
    2674:	87 83       	std	Z+7, r24	; 0x07
    2676:	08 95       	ret

00002678 <InitializeControl>:
}

void InitializeControl()
{
	CONTROL_PORT.PIN0CTRL = PORT_OPC_PULLDOWN_gc;
    2678:	e0 e6       	ldi	r30, 0x60	; 96
    267a:	f6 e0       	ldi	r31, 0x06	; 6
    267c:	80 e1       	ldi	r24, 0x10	; 16
    267e:	80 8b       	std	Z+16, r24	; 0x10
	CONTROL_PORT.DIRSET = DC_PIN | EC_PIN | RST_PIN;
    2680:	87 e0       	ldi	r24, 0x07	; 7
    2682:	81 83       	std	Z+1, r24	; 0x01
	CONTROL_PORT.OUTSET = RST_PIN;
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	85 83       	std	Z+5, r24	; 0x05
	CONTROL_PORT.OUTCLR = EC_PIN;
    2688:	82 e0       	ldi	r24, 0x02	; 2
    268a:	86 83       	std	Z+6, r24	; 0x06
    268c:	08 95       	ret

0000268e <InitializeDMA>:

}

void InitializeDMA()
{
	DMA.CTRL = 0;
    268e:	e0 e0       	ldi	r30, 0x00	; 0
    2690:	f1 e0       	ldi	r31, 0x01	; 1
    2692:	10 82       	st	Z, r1
	DMA.CTRL = DMA_RESET_bm;
    2694:	80 e4       	ldi	r24, 0x40	; 64
    2696:	80 83       	st	Z, r24
	while ((DMA.CTRL & DMA_RESET_bm) != 0);
    2698:	80 81       	ld	r24, Z
    269a:	86 fd       	sbrc	r24, 6
    269c:	fd cf       	rjmp	.-6      	; 0x2698 <InitializeDMA+0xa>
	
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_NONE_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTDIR_FIXED_gc;
    269e:	e0 e0       	ldi	r30, 0x00	; 0
    26a0:	f1 e0       	ldi	r31, 0x01	; 1
    26a2:	80 e1       	ldi	r24, 0x10	; 16
    26a4:	82 8b       	std	Z+18, r24	; 0x12
	DMA.CH0.TRIGSRC = DMA_TRIG;
    26a6:	8c e4       	ldi	r24, 0x4C	; 76
    26a8:	83 8b       	std	Z+19, r24	; 0x13
	DMA.CH0.TRFCNT = SCREEN_BYTE_COUNT;
    26aa:	88 ef       	ldi	r24, 0xF8	; 248
    26ac:	91 e0       	ldi	r25, 0x01	; 1
    26ae:	84 8b       	std	Z+20, r24	; 0x14
    26b0:	95 8b       	std	Z+21, r25	; 0x15
	DMA.CH0.DESTADDR0 = (uint16_t)&SPIUSART.DATA & 0xFF;
    26b2:	80 ea       	ldi	r24, 0xA0	; 160
    26b4:	84 8f       	std	Z+28, r24	; 0x1c
	DMA.CH0.DESTADDR1 = (uint16_t)&SPIUSART.DATA >>8;
    26b6:	88 e0       	ldi	r24, 0x08	; 8
    26b8:	85 8f       	std	Z+29, r24	; 0x1d
	DMA.CH0.DESTADDR2 = 0;
    26ba:	16 8e       	std	Z+30, r1	; 0x1e
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm;
    26bc:	84 e0       	ldi	r24, 0x04	; 4
    26be:	80 8b       	std	Z+16, r24	; 0x10
	DMA.CH0.CTRLB = DMA_CH_TRNINTLVL_OFF_gc;
    26c0:	11 8a       	std	Z+17, r1	; 0x11
	DMA.CTRL = DMA_ENABLE_bm | DMA_DBUFMODE0_bm | DMA_PRIMODE0_bm;
    26c2:	85 e8       	ldi	r24, 0x85	; 133
    26c4:	80 83       	st	Z, r24
    26c6:	08 95       	ret

000026c8 <ResetLCD>:
	
}

void ResetLCD()
{
	CONTROL_PORT.OUTCLR = RST_PIN;
    26c8:	e0 e6       	ldi	r30, 0x60	; 96
    26ca:	f6 e0       	ldi	r31, 0x06	; 6
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	86 83       	std	Z+6, r24	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    26d0:	9a e6       	ldi	r25, 0x6A	; 106
    26d2:	9a 95       	dec	r25
    26d4:	f1 f7       	brne	.-4      	; 0x26d2 <ResetLCD+0xa>
    26d6:	00 c0       	rjmp	.+0      	; 0x26d8 <ResetLCD+0x10>
	_delay_us(10);
	CONTROL_PORT.OUTSET = RST_PIN;
    26d8:	85 83       	std	Z+5, r24	; 0x05
    26da:	8a e6       	ldi	r24, 0x6A	; 106
    26dc:	8a 95       	dec	r24
    26de:	f1 f7       	brne	.-4      	; 0x26dc <ResetLCD+0x14>
    26e0:	00 c0       	rjmp	.+0      	; 0x26e2 <ResetLCD+0x1a>
    26e2:	08 95       	ret

000026e4 <InitializeScreen>:
	//_delay_ms(1000);
}

void InitializeScreen()
{
	ResetLCD();
    26e4:	f1 df       	rcall	.-30     	; 0x26c8 <ResetLCD>

	WriteCommand(LCD_CMD_FUNC | LCD_CMD_FUNC_EXT_CMDS);
    26e6:	81 e2       	ldi	r24, 0x21	; 33
    26e8:	9c df       	rcall	.-200    	; 0x2622 <WriteCommand>
	WriteCommand(LCD_CMD_CONTRAST + 0x38);
    26ea:	88 eb       	ldi	r24, 0xB8	; 184
    26ec:	9a df       	rcall	.-204    	; 0x2622 <WriteCommand>
	WriteCommand(LCD_CMD_TEMP_00);
    26ee:	84 e0       	ldi	r24, 0x04	; 4
    26f0:	98 df       	rcall	.-208    	; 0x2622 <WriteCommand>
	WriteCommand(LCD_CMD_BIAS_4);
    26f2:	84 e1       	ldi	r24, 0x14	; 20
    26f4:	96 df       	rcall	.-212    	; 0x2622 <WriteCommand>
	WriteCommand(LCD_CMD_FUNC | LCD_CMD_FUNC_REG_CMDS | LCD_CMD_FUNC_H_MODE | LCD_CMD_FUNC_ACT);
    26f6:	80 e2       	ldi	r24, 0x20	; 32
    26f8:	94 df       	rcall	.-216    	; 0x2622 <WriteCommand>
	WriteCommand(LCD_CMD_MODE_NORMAL);
    26fa:	8c e0       	ldi	r24, 0x0C	; 12
    26fc:	92 df       	rcall	.-220    	; 0x2622 <WriteCommand>
	WriteCommand(LCD_CMD_SET_X_0);
    26fe:	80 e8       	ldi	r24, 0x80	; 128
    2700:	90 df       	rcall	.-224    	; 0x2622 <WriteCommand>
	WriteCommand(LCD_CMD_SET_Y_0);
    2702:	80 e4       	ldi	r24, 0x40	; 64
    2704:	8e df       	rcall	.-228    	; 0x2622 <WriteCommand>
    2706:	8a e6       	ldi	r24, 0x6A	; 106
    2708:	8a 95       	dec	r24
    270a:	f1 f7       	brne	.-4      	; 0x2708 <InitializeScreen+0x24>
    270c:	00 c0       	rjmp	.+0      	; 0x270e <InitializeScreen+0x2a>
    270e:	08 95       	ret

00002710 <InitializeLCD>:
	
}

void InitializeLCD()
{
	InitializeControl();
    2710:	b3 df       	rcall	.-154    	; 0x2678 <InitializeControl>
	InitializeSPI();
    2712:	9e df       	rcall	.-196    	; 0x2650 <InitializeSPI>
	InitializeDMA();
    2714:	bc df       	rcall	.-136    	; 0x268e <InitializeDMA>
	InitializeScreen();
    2716:	e6 cf       	rjmp	.-52     	; 0x26e4 <InitializeScreen>
    2718:	08 95       	ret

0000271a <uart_putchar>:
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
static bool my_flag_autorize_cdc_transfert = false;

void uart_putchar(uint8_t c, FILE * stream)
{
	udi_cdc_putc(c);
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <udi_cdc_putc>
    2720:	08 95       	ret

00002722 <my_callback_cdc_enable>:
}

bool my_callback_cdc_enable(void)
{
	my_flag_autorize_cdc_transfert = true;
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	80 93 b5 24 	sts	0x24B5, r24	; 0x8024b5 <my_flag_autorize_cdc_transfert>
	return true;
}
    2728:	08 95       	ret

0000272a <my_callback_cdc_disable>:
void my_callback_cdc_disable(void)
{
	my_flag_autorize_cdc_transfert = false;
    272a:	10 92 b5 24 	sts	0x24B5, r1	; 0x8024b5 <my_flag_autorize_cdc_transfert>
    272e:	08 95       	ret

00002730 <my_callback_rx_notify>:
}

void my_callback_rx_notify(uint8_t port)
{
	_sendChar = udi_cdc_getc();
    2730:	0e 94 33 24 	call	0x4866	; 0x4866 <udi_cdc_getc>
    2734:	80 93 b6 24 	sts	0x24B6, r24	; 0x8024b6 <_sendChar>
    2738:	08 95       	ret

0000273a <my_callback_tx_empty_notify>:
}

void my_callback_tx_empty_notify(uint8_t port)
{
    273a:	08 95       	ret

0000273c <__vector_14>:
	
	
}

ISR(TCC0_OVF_vect)
{
    273c:	1f 92       	push	r1
    273e:	0f 92       	push	r0
    2740:	0f b6       	in	r0, 0x3f	; 63
    2742:	0f 92       	push	r0
    2744:	11 24       	eor	r1, r1
    2746:	08 b6       	in	r0, 0x38	; 56
    2748:	0f 92       	push	r0
    274a:	18 be       	out	0x38, r1	; 56
    274c:	09 b6       	in	r0, 0x39	; 57
    274e:	0f 92       	push	r0
    2750:	19 be       	out	0x39, r1	; 57
    2752:	0b b6       	in	r0, 0x3b	; 59
    2754:	0f 92       	push	r0
    2756:	1b be       	out	0x3b, r1	; 59
    2758:	2f 93       	push	r18
    275a:	3f 93       	push	r19
    275c:	4f 93       	push	r20
    275e:	5f 93       	push	r21
    2760:	6f 93       	push	r22
    2762:	7f 93       	push	r23
    2764:	8f 93       	push	r24
    2766:	9f 93       	push	r25
    2768:	af 93       	push	r26
    276a:	bf 93       	push	r27
    276c:	ef 93       	push	r30
    276e:	ff 93       	push	r31
	
	if (_splashTimerOn)
    2770:	80 91 d0 24 	lds	r24, 0x24D0	; 0x8024d0 <_splashTimerOn>
    2774:	88 23       	and	r24, r24
    2776:	49 f0       	breq	.+18     	; 0x278a <__vector_14+0x4e>
		_splashDelay++;
    2778:	80 91 cc 24 	lds	r24, 0x24CC	; 0x8024cc <_splashDelay>
    277c:	90 91 cd 24 	lds	r25, 0x24CD	; 0x8024cd <_splashDelay+0x1>
    2780:	01 96       	adiw	r24, 0x01	; 1
    2782:	80 93 cc 24 	sts	0x24CC, r24	; 0x8024cc <_splashDelay>
    2786:	90 93 cd 24 	sts	0x24CD, r25	; 0x8024cd <_splashDelay+0x1>
		
	if (_versionTimerOn)
    278a:	80 91 cf 24 	lds	r24, 0x24CF	; 0x8024cf <_versionTimerOn>
    278e:	88 23       	and	r24, r24
    2790:	49 f0       	breq	.+18     	; 0x27a4 <__vector_14+0x68>
		_versionDelay++;
    2792:	80 91 ca 24 	lds	r24, 0x24CA	; 0x8024ca <_versionDelay>
    2796:	90 91 cb 24 	lds	r25, 0x24CB	; 0x8024cb <_versionDelay+0x1>
    279a:	01 96       	adiw	r24, 0x01	; 1
    279c:	80 93 ca 24 	sts	0x24CA, r24	; 0x8024ca <_versionDelay>
    27a0:	90 93 cb 24 	sts	0x24CB, r25	; 0x8024cb <_versionDelay+0x1>
	
	if (_updateTimerOn)
    27a4:	80 91 ce 24 	lds	r24, 0x24CE	; 0x8024ce <_updateTimerOn>
    27a8:	88 23       	and	r24, r24
    27aa:	b1 f0       	breq	.+44     	; 0x27d8 <__vector_14+0x9c>
	{
		_updateCounter++;
    27ac:	80 91 c9 24 	lds	r24, 0x24C9	; 0x8024c9 <_updateCounter>
    27b0:	8f 5f       	subi	r24, 0xFF	; 255
    27b2:	80 93 c9 24 	sts	0x24C9, r24	; 0x8024c9 <_updateCounter>
		
		if (OvenMode == ReflowMode && OvenState != OvenStopped)
    27b6:	80 91 df 24 	lds	r24, 0x24DF	; 0x8024df <OvenMode>
    27ba:	81 30       	cpi	r24, 0x01	; 1
    27bc:	69 f4       	brne	.+26     	; 0x27d8 <__vector_14+0x9c>
    27be:	80 91 e1 24 	lds	r24, 0x24E1	; 0x8024e1 <OvenState>
    27c2:	88 23       	and	r24, r24
    27c4:	49 f0       	breq	.+18     	; 0x27d8 <__vector_14+0x9c>
			_secondTimer++;
    27c6:	80 91 bd 24 	lds	r24, 0x24BD	; 0x8024bd <_secondTimer>
    27ca:	90 91 be 24 	lds	r25, 0x24BE	; 0x8024be <_secondTimer+0x1>
    27ce:	01 96       	adiw	r24, 0x01	; 1
    27d0:	80 93 bd 24 	sts	0x24BD, r24	; 0x8024bd <_secondTimer>
    27d4:	90 93 be 24 	sts	0x24BE, r25	; 0x8024be <_secondTimer+0x1>
	}
	
	if (BackLightOn)
    27d8:	80 91 de 24 	lds	r24, 0x24DE	; 0x8024de <BackLightOn>
    27dc:	88 23       	and	r24, r24
    27de:	b1 f0       	breq	.+44     	; 0x280c <__vector_14+0xd0>
	{
		_blTimer++;
    27e0:	80 91 bb 24 	lds	r24, 0x24BB	; 0x8024bb <_blTimer>
    27e4:	90 91 bc 24 	lds	r25, 0x24BC	; 0x8024bc <_blTimer+0x1>
    27e8:	01 96       	adiw	r24, 0x01	; 1
    27ea:	80 93 bb 24 	sts	0x24BB, r24	; 0x8024bb <_blTimer>
    27ee:	90 93 bc 24 	sts	0x24BC, r25	; 0x8024bc <_blTimer+0x1>
		
		if (_blTimer >= SECOND_MS)
    27f2:	80 91 bb 24 	lds	r24, 0x24BB	; 0x8024bb <_blTimer>
    27f6:	90 91 bc 24 	lds	r25, 0x24BC	; 0x8024bc <_blTimer+0x1>
    27fa:	88 3e       	cpi	r24, 0xE8	; 232
    27fc:	93 40       	sbci	r25, 0x03	; 3
    27fe:	50 f0       	brcs	.+20     	; 0x2814 <__vector_14+0xd8>
		{
			_blTimer = 0;
    2800:	10 92 bb 24 	sts	0x24BB, r1	; 0x8024bb <_blTimer>
    2804:	10 92 bc 24 	sts	0x24BC, r1	; 0x8024bc <_blTimer+0x1>
			BackLightTimerCheck();
    2808:	98 d7       	rcall	.+3888   	; 0x373a <BackLightTimerCheck>
    280a:	04 c0       	rjmp	.+8      	; 0x2814 <__vector_14+0xd8>
		}
	}
	else
	{
		_blTimer = 0;
    280c:	10 92 bb 24 	sts	0x24BB, r1	; 0x8024bb <_blTimer>
    2810:	10 92 bc 24 	sts	0x24BC, r1	; 0x8024bc <_blTimer+0x1>
	}
	
	if (BuzzerOn)
    2814:	80 91 dd 24 	lds	r24, 0x24DD	; 0x8024dd <BuzzerOn>
    2818:	88 23       	and	r24, r24
    281a:	b1 f0       	breq	.+44     	; 0x2848 <__vector_14+0x10c>
	{
		_buzzerTimer++;
    281c:	80 91 b9 24 	lds	r24, 0x24B9	; 0x8024b9 <_buzzerTimer>
    2820:	90 91 ba 24 	lds	r25, 0x24BA	; 0x8024ba <_buzzerTimer+0x1>
    2824:	01 96       	adiw	r24, 0x01	; 1
    2826:	80 93 b9 24 	sts	0x24B9, r24	; 0x8024b9 <_buzzerTimer>
    282a:	90 93 ba 24 	sts	0x24BA, r25	; 0x8024ba <_buzzerTimer+0x1>
		
		if (_buzzerTimer >= BuzzerOnTime)
    282e:	20 91 b9 24 	lds	r18, 0x24B9	; 0x8024b9 <_buzzerTimer>
    2832:	30 91 ba 24 	lds	r19, 0x24BA	; 0x8024ba <_buzzerTimer+0x1>
    2836:	80 91 17 20 	lds	r24, 0x2017	; 0x802017 <BuzzerOnTime>
    283a:	90 91 18 20 	lds	r25, 0x2018	; 0x802018 <BuzzerOnTime+0x1>
    283e:	28 17       	cp	r18, r24
    2840:	39 07       	cpc	r19, r25
    2842:	30 f0       	brcs	.+12     	; 0x2850 <__vector_14+0x114>
			SilenceBuzzer();
    2844:	ab d7       	rcall	.+3926   	; 0x379c <SilenceBuzzer>
    2846:	04 c0       	rjmp	.+8      	; 0x2850 <__vector_14+0x114>
	}
	else
	{
		_buzzerTimer = 0;
    2848:	10 92 b9 24 	sts	0x24B9, r1	; 0x8024b9 <_buzzerTimer>
    284c:	10 92 ba 24 	sts	0x24BA, r1	; 0x8024ba <_buzzerTimer+0x1>
	}
	
	if (UP_BUTTON)
    2850:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    2854:	80 ff       	sbrs	r24, 0
    2856:	06 c0       	rjmp	.+12     	; 0x2864 <__vector_14+0x128>
	{
		_button0Counter++;
    2858:	80 91 c8 24 	lds	r24, 0x24C8	; 0x8024c8 <_button0Counter>
    285c:	8f 5f       	subi	r24, 0xFF	; 255
    285e:	80 93 c8 24 	sts	0x24C8, r24	; 0x8024c8 <_button0Counter>
    2862:	04 c0       	rjmp	.+8      	; 0x286c <__vector_14+0x130>
	}
	else
	{
		_button0Counter = 0;
    2864:	10 92 c8 24 	sts	0x24C8, r1	; 0x8024c8 <_button0Counter>
		_button0Repeat = 0;
    2868:	10 92 c3 24 	sts	0x24C3, r1	; 0x8024c3 <_button0Repeat>
	}
	
	if (DOWN_BUTTON)
    286c:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    2870:	81 ff       	sbrs	r24, 1
    2872:	06 c0       	rjmp	.+12     	; 0x2880 <__vector_14+0x144>
	{
		_button1Counter++;
    2874:	80 91 c7 24 	lds	r24, 0x24C7	; 0x8024c7 <_button1Counter>
    2878:	8f 5f       	subi	r24, 0xFF	; 255
    287a:	80 93 c7 24 	sts	0x24C7, r24	; 0x8024c7 <_button1Counter>
    287e:	04 c0       	rjmp	.+8      	; 0x2888 <__vector_14+0x14c>
	}
	else
	{
		_button1Counter = 0;
    2880:	10 92 c7 24 	sts	0x24C7, r1	; 0x8024c7 <_button1Counter>
		_button1Repeat = 0;
    2884:	10 92 c2 24 	sts	0x24C2, r1	; 0x8024c2 <_button1Repeat>
	}
		
	if (SELECT_BUTTON)
    2888:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    288c:	82 ff       	sbrs	r24, 2
    288e:	06 c0       	rjmp	.+12     	; 0x289c <__vector_14+0x160>
	{
		_button2Counter++;
    2890:	80 91 c6 24 	lds	r24, 0x24C6	; 0x8024c6 <_button2Counter>
    2894:	8f 5f       	subi	r24, 0xFF	; 255
    2896:	80 93 c6 24 	sts	0x24C6, r24	; 0x8024c6 <_button2Counter>
    289a:	04 c0       	rjmp	.+8      	; 0x28a4 <__vector_14+0x168>
	}
	else
	{
		_button2Counter = 0;
    289c:	10 92 c6 24 	sts	0x24C6, r1	; 0x8024c6 <_button2Counter>
		_button2Repeat = 0;
    28a0:	10 92 c1 24 	sts	0x24C1, r1	; 0x8024c1 <_button2Repeat>
	}
	
	if (START_BUTTON)
    28a4:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    28a8:	83 ff       	sbrs	r24, 3
    28aa:	06 c0       	rjmp	.+12     	; 0x28b8 <__vector_14+0x17c>
	{
		_button3Counter++;
    28ac:	80 91 c5 24 	lds	r24, 0x24C5	; 0x8024c5 <_button3Counter>
    28b0:	8f 5f       	subi	r24, 0xFF	; 255
    28b2:	80 93 c5 24 	sts	0x24C5, r24	; 0x8024c5 <_button3Counter>
    28b6:	04 c0       	rjmp	.+8      	; 0x28c0 <__vector_14+0x184>
	}
	else
	{
		_button3Counter = 0;
    28b8:	10 92 c5 24 	sts	0x24C5, r1	; 0x8024c5 <_button3Counter>
		_button3Repeat = 0;
    28bc:	10 92 c0 24 	sts	0x24C0, r1	; 0x8024c0 <_button3Repeat>
	}
	
	if (BL_BUTTON)
    28c0:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    28c4:	84 ff       	sbrs	r24, 4
    28c6:	06 c0       	rjmp	.+12     	; 0x28d4 <__vector_14+0x198>
	{
		_button4Counter++;
    28c8:	80 91 c4 24 	lds	r24, 0x24C4	; 0x8024c4 <_button4Counter>
    28cc:	8f 5f       	subi	r24, 0xFF	; 255
    28ce:	80 93 c4 24 	sts	0x24C4, r24	; 0x8024c4 <_button4Counter>
    28d2:	04 c0       	rjmp	.+8      	; 0x28dc <__vector_14+0x1a0>
	}
	else
	{
		_button4Counter = 0;
    28d4:	10 92 c4 24 	sts	0x24C4, r1	; 0x8024c4 <_button4Counter>
		_button4Repeat = 0;
    28d8:	10 92 bf 24 	sts	0x24BF, r1	; 0x8024bf <_button4Repeat>
	}		
			
	if (FlashBlueOn)
    28dc:	80 91 dc 24 	lds	r24, 0x24DC	; 0x8024dc <FlashBlueOn>
    28e0:	88 23       	and	r24, r24
    28e2:	c1 f0       	breq	.+48     	; 0x2914 <__vector_14+0x1d8>
	{
		
		_flashTimer++;
    28e4:	80 91 b7 24 	lds	r24, 0x24B7	; 0x8024b7 <_flashTimer>
    28e8:	90 91 b8 24 	lds	r25, 0x24B8	; 0x8024b8 <_flashTimer+0x1>
    28ec:	01 96       	adiw	r24, 0x01	; 1
    28ee:	80 93 b7 24 	sts	0x24B7, r24	; 0x8024b7 <_flashTimer>
    28f2:	90 93 b8 24 	sts	0x24B8, r25	; 0x8024b8 <_flashTimer+0x1>
		
		if (_flashTimer >= RUNNING_FLASH_TIME)
    28f6:	80 91 b7 24 	lds	r24, 0x24B7	; 0x8024b7 <_flashTimer>
    28fa:	90 91 b8 24 	lds	r25, 0x24B8	; 0x8024b8 <_flashTimer+0x1>
    28fe:	8a 3f       	cpi	r24, 0xFA	; 250
    2900:	91 05       	cpc	r25, r1
    2902:	60 f0       	brcs	.+24     	; 0x291c <__vector_14+0x1e0>
		{
			BLED_TOGGLE;	
    2904:	84 e0       	ldi	r24, 0x04	; 4
    2906:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <__TEXT_REGION_LENGTH__+0x700627>
			_flashTimer = 0;
    290a:	10 92 b7 24 	sts	0x24B7, r1	; 0x8024b7 <_flashTimer>
    290e:	10 92 b8 24 	sts	0x24B8, r1	; 0x8024b8 <_flashTimer+0x1>
    2912:	04 c0       	rjmp	.+8      	; 0x291c <__vector_14+0x1e0>
		}
			
	}
	else
	{
		_flashTimer = 0;
    2914:	10 92 b7 24 	sts	0x24B7, r1	; 0x8024b7 <_flashTimer>
    2918:	10 92 b8 24 	sts	0x24B8, r1	; 0x8024b8 <_flashTimer+0x1>
	}
	
}
    291c:	ff 91       	pop	r31
    291e:	ef 91       	pop	r30
    2920:	bf 91       	pop	r27
    2922:	af 91       	pop	r26
    2924:	9f 91       	pop	r25
    2926:	8f 91       	pop	r24
    2928:	7f 91       	pop	r23
    292a:	6f 91       	pop	r22
    292c:	5f 91       	pop	r21
    292e:	4f 91       	pop	r20
    2930:	3f 91       	pop	r19
    2932:	2f 91       	pop	r18
    2934:	0f 90       	pop	r0
    2936:	0b be       	out	0x3b, r0	; 59
    2938:	0f 90       	pop	r0
    293a:	09 be       	out	0x39, r0	; 57
    293c:	0f 90       	pop	r0
    293e:	08 be       	out	0x38, r0	; 56
    2940:	0f 90       	pop	r0
    2942:	0f be       	out	0x3f, r0	; 63
    2944:	0f 90       	pop	r0
    2946:	1f 90       	pop	r1
    2948:	18 95       	reti

0000294a <init_timer>:


void init_timer()
{	
	sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    294a:	61 e0       	ldi	r22, 0x01	; 1
    294c:	83 e0       	ldi	r24, 0x03	; 3
    294e:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <sysclk_enable_module>
	
	TCC0.PER = 511;                 // Period register
    2952:	e0 e0       	ldi	r30, 0x00	; 0
    2954:	f8 e0       	ldi	r31, 0x08	; 8
    2956:	8f ef       	ldi	r24, 0xFF	; 255
    2958:	91 e0       	ldi	r25, 0x01	; 1
    295a:	86 a3       	std	Z+38, r24	; 0x26
    295c:	97 a3       	std	Z+39, r25	; 0x27
		
	TCC0.INTCTRLA = TC_TC0_OVFINTLVL_LO_gc; // Overflow, LOW Priority
    295e:	81 e0       	ldi	r24, 0x01	; 1
    2960:	86 83       	std	Z+6, r24	; 0x06
	
	TCC0.INTCTRLB = 0;              // Compare
    2962:	17 82       	std	Z+7, r1	; 0x07
	TCC0.INTFLAGS = 0;              // Overflow Flag in bit 0
    2964:	14 86       	std	Z+12, r1	; 0x0c
	
	TCC0.CTRLA =  TC_TC0_CLKSEL_DIV64_gc; // PortC T/C 0, Source = Clock, Div by 8
    2966:	85 e0       	ldi	r24, 0x05	; 5
    2968:	80 83       	st	Z, r24
	TCC0.CTRLB = 0;                 // Normal Mode, Update on Top
    296a:	11 82       	std	Z+1, r1	; 0x01
	TCC0.CTRLC = 0;                 // Waveform
    296c:	12 82       	std	Z+2, r1	; 0x02
	TCC0.CTRLD = 0;                 // Event System
    296e:	13 82       	std	Z+3, r1	; 0x03
	TCC0.CTRLE = 0;                 // 8-Bit Mode
    2970:	14 82       	std	Z+4, r1	; 0x04
    2972:	08 95       	ret

00002974 <initIO>:

}

void initIO()
{
    2974:	cf 93       	push	r28
    2976:	df 93       	push	r29
	INIT_OUT;
    2978:	e0 e2       	ldi	r30, 0x20	; 32
    297a:	f6 e0       	ldi	r31, 0x06	; 6
    297c:	80 81       	ld	r24, Z
    297e:	8f 60       	ori	r24, 0x0F	; 15
    2980:	80 83       	st	Z, r24
    2982:	a0 e0       	ldi	r26, 0x00	; 0
    2984:	b6 e0       	ldi	r27, 0x06	; 6
    2986:	8c 91       	ld	r24, X
    2988:	80 6e       	ori	r24, 0xE0	; 224
    298a:	8c 93       	st	X, r24
    298c:	c0 e8       	ldi	r28, 0x80	; 128
    298e:	d6 e0       	ldi	r29, 0x06	; 6
    2990:	88 81       	ld	r24, Y
    2992:	88 60       	ori	r24, 0x08	; 8
    2994:	88 83       	st	Y, r24
    2996:	80 e1       	ldi	r24, 0x10	; 16
    2998:	80 93 10 06 	sts	0x0610, r24	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
    299c:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
    29a0:	80 93 12 06 	sts	0x0612, r24	; 0x800612 <__TEXT_REGION_LENGTH__+0x700612>
    29a4:	80 93 13 06 	sts	0x0613, r24	; 0x800613 <__TEXT_REGION_LENGTH__+0x700613>
    29a8:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <__TEXT_REGION_LENGTH__+0x700614>

	RLED_OFF;
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	85 83       	std	Z+5, r24	; 0x05
	GLED_OFF;
    29b0:	82 e0       	ldi	r24, 0x02	; 2
    29b2:	85 83       	std	Z+5, r24	; 0x05
	BLED_ON; //On indicates power
    29b4:	84 e0       	ldi	r24, 0x04	; 4
    29b6:	86 83       	std	Z+6, r24	; 0x06
	BL_OFF;
    29b8:	88 e0       	ldi	r24, 0x08	; 8
    29ba:	86 83       	std	Z+6, r24	; 0x06
	
	HTOP_OFF;
    29bc:	90 e4       	ldi	r25, 0x40	; 64
    29be:	16 96       	adiw	r26, 0x06	; 6
    29c0:	9c 93       	st	X, r25
    29c2:	16 97       	sbiw	r26, 0x06	; 6
	HBOTTOM_OFF;
    29c4:	90 e8       	ldi	r25, 0x80	; 128
    29c6:	16 96       	adiw	r26, 0x06	; 6
    29c8:	9c 93       	st	X, r25
    29ca:	16 97       	sbiw	r26, 0x06	; 6
	BUZZER_OFF;
    29cc:	8e 83       	std	Y+6, r24	; 0x06
	FAN_OFF;	
    29ce:	80 e2       	ldi	r24, 0x20	; 32
    29d0:	16 96       	adiw	r26, 0x06	; 6
    29d2:	8c 93       	st	X, r24
}
    29d4:	df 91       	pop	r29
    29d6:	cf 91       	pop	r28
    29d8:	08 95       	ret

000029da <TESTLOADFLASH>:


	

void TESTLOADFLASH()
{
    29da:	5f 92       	push	r5
    29dc:	6f 92       	push	r6
    29de:	7f 92       	push	r7
    29e0:	8f 92       	push	r8
    29e2:	9f 92       	push	r9
    29e4:	af 92       	push	r10
    29e6:	bf 92       	push	r11
    29e8:	cf 92       	push	r12
    29ea:	df 92       	push	r13
    29ec:	ef 92       	push	r14
    29ee:	ff 92       	push	r15
    29f0:	0f 93       	push	r16
    29f2:	1f 93       	push	r17
    29f4:	cf 93       	push	r28
    29f6:	df 93       	push	r29
    29f8:	cd b7       	in	r28, 0x3d	; 61
    29fa:	de b7       	in	r29, 0x3e	; 62
    29fc:	d2 50       	subi	r29, 0x02	; 2
    29fe:	cd bf       	out	0x3d, r28	; 61
    2a00:	de bf       	out	0x3e, r29	; 62
	uint8_t TESTProfile[FLASH_PAGE_SIZE] = { 'T', 'E', 'S', 'T', 'P', 'R', 'O', 'F', 'I', 'L', 'E', 0, 50, 130, 10, 130, 1, 0, 0, 0 };
    2a02:	a1 2c       	mov	r10, r1
    2a04:	bb 24       	eor	r11, r11
    2a06:	b3 94       	inc	r11
    2a08:	ce 01       	movw	r24, r28
    2a0a:	01 96       	adiw	r24, 0x01	; 1
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	f5 01       	movw	r30, r10
    2a10:	1d 92       	st	X+, r1
    2a12:	31 97       	sbiw	r30, 0x01	; 1
    2a14:	e9 f7       	brne	.-6      	; 0x2a10 <TESTLOADFLASH+0x36>
    2a16:	24 e5       	ldi	r18, 0x54	; 84
    2a18:	29 83       	std	Y+1, r18	; 0x01
    2a1a:	0f 2e       	mov	r0, r31
    2a1c:	f5 e4       	ldi	r31, 0x45	; 69
    2a1e:	ff 2e       	mov	r15, r31
    2a20:	f0 2d       	mov	r31, r0
    2a22:	fa 82       	std	Y+2, r15	; 0x02
    2a24:	33 e5       	ldi	r19, 0x53	; 83
    2a26:	3b 83       	std	Y+3, r19	; 0x03
    2a28:	2c 83       	std	Y+4, r18	; 0x04
    2a2a:	0f 2e       	mov	r0, r31
    2a2c:	f0 e5       	ldi	r31, 0x50	; 80
    2a2e:	5f 2e       	mov	r5, r31
    2a30:	f0 2d       	mov	r31, r0
    2a32:	5d 82       	std	Y+5, r5	; 0x05
    2a34:	0f 2e       	mov	r0, r31
    2a36:	f2 e5       	ldi	r31, 0x52	; 82
    2a38:	6f 2e       	mov	r6, r31
    2a3a:	f0 2d       	mov	r31, r0
    2a3c:	6e 82       	std	Y+6, r6	; 0x06
    2a3e:	0f 2e       	mov	r0, r31
    2a40:	ff e4       	ldi	r31, 0x4F	; 79
    2a42:	7f 2e       	mov	r7, r31
    2a44:	f0 2d       	mov	r31, r0
    2a46:	7f 82       	std	Y+7, r7	; 0x07
    2a48:	0f 2e       	mov	r0, r31
    2a4a:	f6 e4       	ldi	r31, 0x46	; 70
    2a4c:	8f 2e       	mov	r8, r31
    2a4e:	f0 2d       	mov	r31, r0
    2a50:	88 86       	std	Y+8, r8	; 0x08
    2a52:	0f 2e       	mov	r0, r31
    2a54:	f9 e4       	ldi	r31, 0x49	; 73
    2a56:	9f 2e       	mov	r9, r31
    2a58:	f0 2d       	mov	r31, r0
    2a5a:	99 86       	std	Y+9, r9	; 0x09
    2a5c:	0f 2e       	mov	r0, r31
    2a5e:	fc e4       	ldi	r31, 0x4C	; 76
    2a60:	cf 2e       	mov	r12, r31
    2a62:	f0 2d       	mov	r31, r0
    2a64:	ca 86       	std	Y+10, r12	; 0x0a
    2a66:	fb 86       	std	Y+11, r15	; 0x0b
    2a68:	02 e3       	ldi	r16, 0x32	; 50
    2a6a:	0d 87       	std	Y+13, r16	; 0x0d
    2a6c:	12 e8       	ldi	r17, 0x82	; 130
    2a6e:	1e 87       	std	Y+14, r17	; 0x0e
    2a70:	0f 2e       	mov	r0, r31
    2a72:	fa e0       	ldi	r31, 0x0A	; 10
    2a74:	df 2e       	mov	r13, r31
    2a76:	f0 2d       	mov	r31, r0
    2a78:	df 86       	std	Y+15, r13	; 0x0f
    2a7a:	18 8b       	std	Y+16, r17	; 0x10
    2a7c:	ee 24       	eor	r14, r14
    2a7e:	e3 94       	inc	r14
    2a80:	e9 8a       	std	Y+17, r14	; 0x11
		
	SP_LoadFlashPage(TESTProfile);
    2a82:	0f 94 04 00 	call	0x20008	; 0x20008 <SP_LoadFlashPage>
	EraseWriteAppTablePage(0);
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	0e 94 8a 21 	call	0x4314	; 0x4314 <EraseWriteAppTablePage>
	
	uint8_t TESTProfile2[FLASH_PAGE_SIZE] = { '#', '2', '_', '_', 'P', 'R', 'O', 'F', 'I', 'L', 'E', 0, 50, 130, 10, 130, 1, 0, 0, 0 };
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	ef 5f       	subi	r30, 0xFF	; 255
    2a90:	fe 4f       	sbci	r31, 0xFE	; 254
    2a92:	df 01       	movw	r26, r30
    2a94:	95 01       	movw	r18, r10
    2a96:	1d 92       	st	X+, r1
    2a98:	21 50       	subi	r18, 0x01	; 1
    2a9a:	30 40       	sbci	r19, 0x00	; 0
    2a9c:	e1 f7       	brne	.-8      	; 0x2a96 <TESTLOADFLASH+0xbc>
    2a9e:	83 e2       	ldi	r24, 0x23	; 35
    2aa0:	80 83       	st	Z, r24
    2aa2:	01 83       	std	Z+1, r16	; 0x01
    2aa4:	8f e5       	ldi	r24, 0x5F	; 95
    2aa6:	82 83       	std	Z+2, r24	; 0x02
    2aa8:	83 83       	std	Z+3, r24	; 0x03
    2aaa:	54 82       	std	Z+4, r5	; 0x04
    2aac:	65 82       	std	Z+5, r6	; 0x05
    2aae:	76 82       	std	Z+6, r7	; 0x06
    2ab0:	87 82       	std	Z+7, r8	; 0x07
    2ab2:	90 86       	std	Z+8, r9	; 0x08
    2ab4:	c1 86       	std	Z+9, r12	; 0x09
    2ab6:	f2 86       	std	Z+10, r15	; 0x0a
    2ab8:	04 87       	std	Z+12, r16	; 0x0c
    2aba:	15 87       	std	Z+13, r17	; 0x0d
    2abc:	d6 86       	std	Z+14, r13	; 0x0e
    2abe:	17 87       	std	Z+15, r17	; 0x0f
    2ac0:	e0 8a       	std	Z+16, r14	; 0x10
		
	SP_LoadFlashPage(TESTProfile2);
    2ac2:	cf 01       	movw	r24, r30
    2ac4:	0f 94 04 00 	call	0x20008	; 0x20008 <SP_LoadFlashPage>
	EraseWriteAppTablePage(1);		
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	0e 94 8a 21 	call	0x4314	; 0x4314 <EraseWriteAppTablePage>

	
}
    2ace:	de 5f       	subi	r29, 0xFE	; 254
    2ad0:	cd bf       	out	0x3d, r28	; 61
    2ad2:	de bf       	out	0x3e, r29	; 62
    2ad4:	df 91       	pop	r29
    2ad6:	cf 91       	pop	r28
    2ad8:	1f 91       	pop	r17
    2ada:	0f 91       	pop	r16
    2adc:	ff 90       	pop	r15
    2ade:	ef 90       	pop	r14
    2ae0:	df 90       	pop	r13
    2ae2:	cf 90       	pop	r12
    2ae4:	bf 90       	pop	r11
    2ae6:	af 90       	pop	r10
    2ae8:	9f 90       	pop	r9
    2aea:	8f 90       	pop	r8
    2aec:	7f 90       	pop	r7
    2aee:	6f 90       	pop	r6
    2af0:	5f 90       	pop	r5
    2af2:	08 95       	ret

00002af4 <main>:


int main(void)
{
    2af4:	cf 93       	push	r28
    2af6:	df 93       	push	r29
    2af8:	cd b7       	in	r28, 0x3d	; 61
    2afa:	de b7       	in	r29, 0x3e	; 62
    2afc:	c8 5f       	subi	r28, 0xF8	; 248
    2afe:	d1 40       	sbci	r29, 0x01	; 1
    2b00:	cd bf       	out	0x3d, r28	; 61
    2b02:	de bf       	out	0x3e, r29	; 62

	uint8_t interval = 0;
	uint8_t buff[SCREEN_BYTE_COUNT];
	initIO();
    2b04:	37 df       	rcall	.-402    	; 0x2974 <initIO>

	cli();
    2b06:	f8 94       	cli

	sysclk_init();
    2b08:	0e 94 a9 30 	call	0x6152	; 0x6152 <sysclk_init>

	InitializeLCD();
    2b0c:	01 de       	rcall	.-1022   	; 0x2710 <InitializeLCD>
	
	init_timer();
    2b0e:	1d df       	rcall	.-454    	; 0x294a <init_timer>
	udc_start();
    2b10:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <udc_start>

	
	stdout = &mystdout;
    2b14:	88 e0       	ldi	r24, 0x08	; 8
    2b16:	90 e2       	ldi	r25, 0x20	; 32
    2b18:	80 93 63 33 	sts	0x3363, r24	; 0x803363 <__iob+0x2>
    2b1c:	90 93 64 33 	sts	0x3364, r25	; 0x803364 <__iob+0x3>
	screenout = &DrawScreen;
    2b20:	8c e1       	ldi	r24, 0x1C	; 28
    2b22:	93 e1       	ldi	r25, 0x13	; 19
    2b24:	80 93 45 27 	sts	0x2745, r24	; 0x802745 <screenout>
    2b28:	90 93 46 27 	sts	0x2746, r25	; 0x802746 <screenout+0x1>
	
	irq_initialize_vectors();
    2b2c:	87 e0       	ldi	r24, 0x07	; 7
    2b2e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
    2b32:	ec ec       	ldi	r30, 0xCC	; 204
    2b34:	f1 e0       	ldi	r31, 0x01	; 1
    2b36:	80 81       	ld	r24, Z
    2b38:	88 60       	ori	r24, 0x08	; 8
    2b3a:	80 83       	st	Z, r24
	

	eeprom_enable_mapping();

	InitTempSensor();
    2b3c:	0e 94 a7 30 	call	0x614e	; 0x614e <InitTempSensor>

	sei();
    2b40:	78 94       	sei
	

	
	TESTLOADFLASH();
    2b42:	4b df       	rcall	.-362    	; 0x29da <TESTLOADFLASH>
	
	LoadSettings();
    2b44:	1f d3       	rcall	.+1598   	; 0x3184 <LoadSettings>
	InitOven();
    2b46:	94 d5       	rcall	.+2856   	; 0x3670 <InitOven>

	
	GetSplashScreen(buff);
    2b48:	ce 01       	movw	r24, r28
    2b4a:	01 96       	adiw	r24, 0x01	; 1
    2b4c:	02 d7       	rcall	.+3588   	; 0x3952 <GetSplashScreen>
	DrawBitmap(buff, true);
    2b4e:	61 e0       	ldi	r22, 0x01	; 1
    2b50:	ce 01       	movw	r24, r28
    2b52:	01 96       	adiw	r24, 0x01	; 1
    2b54:	60 dd       	rcall	.-1344   	; 0x2616 <DrawBitmap>
	FlushScreenBuffer();
    2b56:	28 dd       	rcall	.-1456   	; 0x25a8 <FlushScreenBuffer>
	_splashTimerOn = true;
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	80 93 d0 24 	sts	0x24D0, r24	; 0x8024d0 <_splashTimerOn>
	OvenState = OvenStopped;
    2b5e:	10 92 e1 24 	sts	0x24E1, r1	; 0x8024e1 <OvenState>
	OvenMode = ProfileMenuMode;
    2b62:	10 92 df 24 	sts	0x24DF, r1	; 0x8024df <OvenMode>
			_splashTimerOn = false;
			
			DrawString(OVEN_VERSION, 2, 14, false);
			DrawString(OVEN_DATE, 2, 24, false);
			
			printf("DIY Reflow Oven V1\r\nBoucher\r\n%s\r\n%s\r\nInitializing Oven...\r\n", OVEN_VERSION, OVEN_DATE);
    2b66:	04 e0       	ldi	r16, 0x04	; 4
    2b68:	14 e2       	ldi	r17, 0x24	; 36
			_sendChar = 0;
		}
		
		if (_splashDelay >= SPLASH_MS)
		{
			_versionTimerOn = true;
    2b6a:	ee 24       	eor	r14, r14
    2b6c:	e3 94       	inc	r14
		if (_button0Counter > BUTTONS_MS)
		{
			if (_button0Repeat == 0)
			{
				UpCommand();
				_button0Repeat = REPEAT_DELAY;
    2b6e:	0f 2e       	mov	r0, r31
    2b70:	f6 e0       	ldi	r31, 0x06	; 6
    2b72:	ff 2e       	mov	r15, r31
    2b74:	f0 2d       	mov	r31, r0
	


    while (1) 
    {
		if (_sendChar)
    2b76:	80 91 b6 24 	lds	r24, 0x24B6	; 0x8024b6 <_sendChar>
    2b7a:	88 23       	and	r24, r24
    2b7c:	29 f0       	breq	.+10     	; 0x2b88 <main+0x94>
		{
			ProcessInput(_sendChar);
    2b7e:	80 91 b6 24 	lds	r24, 0x24B6	; 0x8024b6 <_sendChar>
    2b82:	24 d9       	rcall	.-3512   	; 0x1dcc <ProcessInput>
			_sendChar = 0;
    2b84:	10 92 b6 24 	sts	0x24B6, r1	; 0x8024b6 <_sendChar>
		}
		
		if (_splashDelay >= SPLASH_MS)
    2b88:	80 91 cc 24 	lds	r24, 0x24CC	; 0x8024cc <_splashDelay>
    2b8c:	90 91 cd 24 	lds	r25, 0x24CD	; 0x8024cd <_splashDelay+0x1>
    2b90:	8c 3d       	cpi	r24, 0xDC	; 220
    2b92:	95 40       	sbci	r25, 0x05	; 5
    2b94:	38 f1       	brcs	.+78     	; 0x2be4 <main+0xf0>
		{
			_versionTimerOn = true;
    2b96:	e0 92 cf 24 	sts	0x24CF, r14	; 0x8024cf <_versionTimerOn>
			_splashTimerOn = false;
    2b9a:	10 92 d0 24 	sts	0x24D0, r1	; 0x8024d0 <_splashTimerOn>
			
			DrawString(OVEN_VERSION, 2, 14, false);
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	4e e0       	ldi	r20, 0x0E	; 14
    2ba2:	62 e0       	ldi	r22, 0x02	; 2
    2ba4:	8b ec       	ldi	r24, 0xCB	; 203
    2ba6:	93 e2       	ldi	r25, 0x23	; 35
    2ba8:	26 dd       	rcall	.-1460   	; 0x25f6 <DrawString>
			DrawString(OVEN_DATE, 2, 24, false);
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	48 e1       	ldi	r20, 0x18	; 24
    2bae:	62 e0       	ldi	r22, 0x02	; 2
    2bb0:	80 ec       	ldi	r24, 0xC0	; 192
    2bb2:	93 e2       	ldi	r25, 0x23	; 35
    2bb4:	20 dd       	rcall	.-1472   	; 0x25f6 <DrawString>
			
			printf("DIY Reflow Oven V1\r\nBoucher\r\n%s\r\n%s\r\nInitializing Oven...\r\n", OVEN_VERSION, OVEN_DATE);
    2bb6:	80 ec       	ldi	r24, 0xC0	; 192
    2bb8:	93 e2       	ldi	r25, 0x23	; 35
    2bba:	9f 93       	push	r25
    2bbc:	8f 93       	push	r24
    2bbe:	8b ec       	ldi	r24, 0xCB	; 203
    2bc0:	93 e2       	ldi	r25, 0x23	; 35
    2bc2:	9f 93       	push	r25
    2bc4:	8f 93       	push	r24
    2bc6:	1f 93       	push	r17
    2bc8:	0f 93       	push	r16
    2bca:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <printf>

			FlushScreenBuffer();
    2bce:	ec dc       	rcall	.-1576   	; 0x25a8 <FlushScreenBuffer>
			_splashDelay = 0;
    2bd0:	10 92 cc 24 	sts	0x24CC, r1	; 0x8024cc <_splashDelay>
    2bd4:	10 92 cd 24 	sts	0x24CD, r1	; 0x8024cd <_splashDelay+0x1>
    2bd8:	0f 90       	pop	r0
    2bda:	0f 90       	pop	r0
    2bdc:	0f 90       	pop	r0
    2bde:	0f 90       	pop	r0
    2be0:	0f 90       	pop	r0
    2be2:	0f 90       	pop	r0
		}
		
		if (_versionDelay >= VERSION_MS && _versionTimerOn)
    2be4:	80 91 ca 24 	lds	r24, 0x24CA	; 0x8024ca <_versionDelay>
    2be8:	90 91 cb 24 	lds	r25, 0x24CB	; 0x8024cb <_versionDelay+0x1>
    2bec:	8c 3d       	cpi	r24, 0xDC	; 220
    2bee:	95 40       	sbci	r25, 0x05	; 5
    2bf0:	70 f0       	brcs	.+28     	; 0x2c0e <main+0x11a>
    2bf2:	80 91 cf 24 	lds	r24, 0x24CF	; 0x8024cf <_versionTimerOn>
    2bf6:	88 23       	and	r24, r24
    2bf8:	51 f0       	breq	.+20     	; 0x2c0e <main+0x11a>
		{
			_versionTimerOn = false;
    2bfa:	10 92 cf 24 	sts	0x24CF, r1	; 0x8024cf <_versionTimerOn>
			_updateTimerOn = true;
    2bfe:	e0 92 ce 24 	sts	0x24CE, r14	; 0x8024ce <_updateTimerOn>
			LoadProfileNames();
    2c02:	37 d2       	rcall	.+1134   	; 0x3072 <LoadProfileNames>
			DrawMenu();
    2c04:	e5 d1       	rcall	.+970    	; 0x2fd0 <DrawMenu>
			printf("Ready\r\n");
    2c06:	80 e4       	ldi	r24, 0x40	; 64
    2c08:	94 e2       	ldi	r25, 0x24	; 36
    2c0a:	0e 94 89 35 	call	0x6b12	; 0x6b12 <puts>
		}		
		
		if (_updateCounter >= UPDATE_MS)
    2c0e:	80 91 c9 24 	lds	r24, 0x24C9	; 0x8024c9 <_updateCounter>
    2c12:	84 36       	cpi	r24, 0x64	; 100
    2c14:	60 f0       	brcs	.+24     	; 0x2c2e <main+0x13a>
		{
			_updateCounter = 0;
    2c16:	10 92 c9 24 	sts	0x24C9, r1	; 0x8024c9 <_updateCounter>
			
			if (OvenMode == ReflowMode)
    2c1a:	80 91 df 24 	lds	r24, 0x24DF	; 0x8024df <OvenMode>
    2c1e:	81 30       	cpi	r24, 0x01	; 1
    2c20:	09 f4       	brne	.+2      	; 0x2c24 <main+0x130>
				MeasureAndUpdate();
    2c22:	cc d5       	rcall	.+2968   	; 0x37bc <MeasureAndUpdate>
				
			if (OvenMode == TestMode)
    2c24:	80 91 df 24 	lds	r24, 0x24DF	; 0x8024df <OvenMode>
    2c28:	82 30       	cpi	r24, 0x02	; 2
    2c2a:	09 f4       	brne	.+2      	; 0x2c2e <main+0x13a>
				DrawTestScreen();
    2c2c:	b2 d6       	rcall	.+3428   	; 0x3992 <DrawTestScreen>

		}
		
		if (_secondTimer > SECOND_MS && OvenState != OvenStopped)
    2c2e:	80 91 bd 24 	lds	r24, 0x24BD	; 0x8024bd <_secondTimer>
    2c32:	90 91 be 24 	lds	r25, 0x24BE	; 0x8024be <_secondTimer+0x1>
    2c36:	89 3e       	cpi	r24, 0xE9	; 233
    2c38:	93 40       	sbci	r25, 0x03	; 3
    2c3a:	88 f0       	brcs	.+34     	; 0x2c5e <main+0x16a>
    2c3c:	80 91 e1 24 	lds	r24, 0x24E1	; 0x8024e1 <OvenState>
    2c40:	88 23       	and	r24, r24
    2c42:	69 f0       	breq	.+26     	; 0x2c5e <main+0x16a>
		{
			_secondTimer = 0;
    2c44:	10 92 bd 24 	sts	0x24BD, r1	; 0x8024bd <_secondTimer>
    2c48:	10 92 be 24 	sts	0x24BE, r1	; 0x8024be <_secondTimer+0x1>
			RunTime++;
    2c4c:	80 91 8f 2e 	lds	r24, 0x2E8F	; 0x802e8f <RunTime>
    2c50:	90 91 90 2e 	lds	r25, 0x2E90	; 0x802e90 <RunTime+0x1>
    2c54:	01 96       	adiw	r24, 0x01	; 1
    2c56:	80 93 8f 2e 	sts	0x2E8F, r24	; 0x802e8f <RunTime>
    2c5a:	90 93 90 2e 	sts	0x2E90, r25	; 0x802e90 <RunTime+0x1>
		}
	
		
		if (_button0Counter > BUTTONS_MS)
    2c5e:	80 91 c8 24 	lds	r24, 0x24C8	; 0x8024c8 <_button0Counter>
    2c62:	83 33       	cpi	r24, 0x33	; 51
    2c64:	70 f0       	brcs	.+28     	; 0x2c82 <main+0x18e>
		{
			if (_button0Repeat == 0)
    2c66:	80 91 c3 24 	lds	r24, 0x24C3	; 0x8024c3 <_button0Repeat>
    2c6a:	81 11       	cpse	r24, r1
    2c6c:	03 c0       	rjmp	.+6      	; 0x2c74 <main+0x180>
			{
				UpCommand();
    2c6e:	0a d5       	rcall	.+2580   	; 0x3684 <UpCommand>
				_button0Repeat = REPEAT_DELAY;
    2c70:	f0 92 c3 24 	sts	0x24C3, r15	; 0x8024c3 <_button0Repeat>
			}
			
			_button0Counter = 0;				
    2c74:	10 92 c8 24 	sts	0x24C8, r1	; 0x8024c8 <_button0Counter>
			_button0Repeat--;
    2c78:	80 91 c3 24 	lds	r24, 0x24C3	; 0x8024c3 <_button0Repeat>
    2c7c:	81 50       	subi	r24, 0x01	; 1
    2c7e:	80 93 c3 24 	sts	0x24C3, r24	; 0x8024c3 <_button0Repeat>
		}
			
		if (_button1Counter > BUTTONS_MS)
    2c82:	80 91 c7 24 	lds	r24, 0x24C7	; 0x8024c7 <_button1Counter>
    2c86:	83 33       	cpi	r24, 0x33	; 51
    2c88:	70 f0       	brcs	.+28     	; 0x2ca6 <main+0x1b2>
		{
			if (_button1Repeat == 0)
    2c8a:	80 91 c2 24 	lds	r24, 0x24C2	; 0x8024c2 <_button1Repeat>
    2c8e:	81 11       	cpse	r24, r1
    2c90:	03 c0       	rjmp	.+6      	; 0x2c98 <main+0x1a4>
			{
				DownCommand();
    2c92:	fe d4       	rcall	.+2556   	; 0x3690 <DownCommand>
				_button1Repeat = REPEAT_DELAY;
    2c94:	f0 92 c2 24 	sts	0x24C2, r15	; 0x8024c2 <_button1Repeat>
			}
			
			_button1Counter = 0;
    2c98:	10 92 c7 24 	sts	0x24C7, r1	; 0x8024c7 <_button1Counter>
			_button1Repeat--;
    2c9c:	80 91 c2 24 	lds	r24, 0x24C2	; 0x8024c2 <_button1Repeat>
    2ca0:	81 50       	subi	r24, 0x01	; 1
    2ca2:	80 93 c2 24 	sts	0x24C2, r24	; 0x8024c2 <_button1Repeat>
		}
		
		if (_button2Counter > BUTTONS_MS)
    2ca6:	80 91 c6 24 	lds	r24, 0x24C6	; 0x8024c6 <_button2Counter>
    2caa:	83 33       	cpi	r24, 0x33	; 51
    2cac:	70 f0       	brcs	.+28     	; 0x2cca <main+0x1d6>
		{
			if (_button2Repeat == 0)
    2cae:	80 91 c1 24 	lds	r24, 0x24C1	; 0x8024c1 <_button2Repeat>
    2cb2:	81 11       	cpse	r24, r1
    2cb4:	03 c0       	rjmp	.+6      	; 0x2cbc <main+0x1c8>
			{
				SetCommand();
    2cb6:	f2 d4       	rcall	.+2532   	; 0x369c <SetCommand>
				_button2Repeat = REPEAT_DELAY;
    2cb8:	f0 92 c1 24 	sts	0x24C1, r15	; 0x8024c1 <_button2Repeat>
			}
			
			_button2Counter = 0;				
    2cbc:	10 92 c6 24 	sts	0x24C6, r1	; 0x8024c6 <_button2Counter>
			_button2Repeat--;
    2cc0:	80 91 c1 24 	lds	r24, 0x24C1	; 0x8024c1 <_button2Repeat>
    2cc4:	81 50       	subi	r24, 0x01	; 1
    2cc6:	80 93 c1 24 	sts	0x24C1, r24	; 0x8024c1 <_button2Repeat>
		}
		
		if (_button3Counter > BUTTONS_MS)
    2cca:	80 91 c5 24 	lds	r24, 0x24C5	; 0x8024c5 <_button3Counter>
    2cce:	83 33       	cpi	r24, 0x33	; 51
    2cd0:	70 f0       	brcs	.+28     	; 0x2cee <main+0x1fa>
		{
			if (_button3Repeat == 0)
    2cd2:	80 91 c0 24 	lds	r24, 0x24C0	; 0x8024c0 <_button3Repeat>
    2cd6:	81 11       	cpse	r24, r1
    2cd8:	03 c0       	rjmp	.+6      	; 0x2ce0 <main+0x1ec>
			{
				StartCommand();
    2cda:	0e d5       	rcall	.+2588   	; 0x36f8 <StartCommand>
				_button3Repeat = REPEAT_DELAY;
    2cdc:	f0 92 c0 24 	sts	0x24C0, r15	; 0x8024c0 <_button3Repeat>
			}
				
			_button3Counter = 0;
    2ce0:	10 92 c5 24 	sts	0x24C5, r1	; 0x8024c5 <_button3Counter>
			_button3Repeat--;
    2ce4:	80 91 c0 24 	lds	r24, 0x24C0	; 0x8024c0 <_button3Repeat>
    2ce8:	81 50       	subi	r24, 0x01	; 1
    2cea:	80 93 c0 24 	sts	0x24C0, r24	; 0x8024c0 <_button3Repeat>
		}
			
		if (_button4Counter > BUTTONS_MS)
    2cee:	80 91 c4 24 	lds	r24, 0x24C4	; 0x8024c4 <_button4Counter>
    2cf2:	83 33       	cpi	r24, 0x33	; 51
    2cf4:	08 f4       	brcc	.+2      	; 0x2cf8 <main+0x204>
    2cf6:	3f cf       	rjmp	.-386    	; 0x2b76 <main+0x82>
		{
			

			if (_button4Repeat == 0)
    2cf8:	80 91 bf 24 	lds	r24, 0x24BF	; 0x8024bf <_button4Repeat>
    2cfc:	81 11       	cpse	r24, r1
    2cfe:	04 c0       	rjmp	.+8      	; 0x2d08 <main+0x214>
			{
				BackLightToggleCommand();
    2d00:	07 d5       	rcall	.+2574   	; 0x3710 <BackLightToggleCommand>
				_button4Repeat = REPEAT_DELAY * 4;
    2d02:	88 e1       	ldi	r24, 0x18	; 24
    2d04:	80 93 bf 24 	sts	0x24BF, r24	; 0x8024bf <_button4Repeat>
				
			}
			
			_button4Counter = 0;
    2d08:	10 92 c4 24 	sts	0x24C4, r1	; 0x8024c4 <_button4Counter>
			_button4Repeat--;
    2d0c:	80 91 bf 24 	lds	r24, 0x24BF	; 0x8024bf <_button4Repeat>
    2d10:	81 50       	subi	r24, 0x01	; 1
    2d12:	80 93 bf 24 	sts	0x24BF, r24	; 0x8024bf <_button4Repeat>
    2d16:	2f cf       	rjmp	.-418    	; 0x2b76 <main+0x82>

00002d18 <DrawUpArrow>:
*/

void DrawUpArrow()
{
	
	DrawPixel(40, 1, false);
    2d18:	40 e0       	ldi	r20, 0x00	; 0
    2d1a:	61 e0       	ldi	r22, 0x01	; 1
    2d1c:	88 e2       	ldi	r24, 0x28	; 40
    2d1e:	75 dc       	rcall	.-1814   	; 0x260a <DrawPixel>

	DrawPixel(39, 2, false);
    2d20:	40 e0       	ldi	r20, 0x00	; 0
    2d22:	62 e0       	ldi	r22, 0x02	; 2
    2d24:	87 e2       	ldi	r24, 0x27	; 39
    2d26:	71 dc       	rcall	.-1822   	; 0x260a <DrawPixel>
	DrawPixel(40, 2, false);
    2d28:	40 e0       	ldi	r20, 0x00	; 0
    2d2a:	62 e0       	ldi	r22, 0x02	; 2
    2d2c:	88 e2       	ldi	r24, 0x28	; 40
    2d2e:	6d dc       	rcall	.-1830   	; 0x260a <DrawPixel>
	DrawPixel(41, 2, false);
    2d30:	40 e0       	ldi	r20, 0x00	; 0
    2d32:	62 e0       	ldi	r22, 0x02	; 2
    2d34:	89 e2       	ldi	r24, 0x29	; 41
    2d36:	69 dc       	rcall	.-1838   	; 0x260a <DrawPixel>

	DrawPixel(38, 3, false);
    2d38:	40 e0       	ldi	r20, 0x00	; 0
    2d3a:	63 e0       	ldi	r22, 0x03	; 3
    2d3c:	86 e2       	ldi	r24, 0x26	; 38
    2d3e:	65 dc       	rcall	.-1846   	; 0x260a <DrawPixel>
	DrawPixel(39, 3, false);
    2d40:	40 e0       	ldi	r20, 0x00	; 0
    2d42:	63 e0       	ldi	r22, 0x03	; 3
    2d44:	87 e2       	ldi	r24, 0x27	; 39
    2d46:	61 dc       	rcall	.-1854   	; 0x260a <DrawPixel>
	DrawPixel(40, 3, false);
    2d48:	40 e0       	ldi	r20, 0x00	; 0
    2d4a:	63 e0       	ldi	r22, 0x03	; 3
    2d4c:	88 e2       	ldi	r24, 0x28	; 40
    2d4e:	5d dc       	rcall	.-1862   	; 0x260a <DrawPixel>
	DrawPixel(41, 3, false);
    2d50:	40 e0       	ldi	r20, 0x00	; 0
    2d52:	63 e0       	ldi	r22, 0x03	; 3
    2d54:	89 e2       	ldi	r24, 0x29	; 41
    2d56:	59 dc       	rcall	.-1870   	; 0x260a <DrawPixel>
	DrawPixel(42, 3, false);
    2d58:	40 e0       	ldi	r20, 0x00	; 0
    2d5a:	63 e0       	ldi	r22, 0x03	; 3
    2d5c:	8a e2       	ldi	r24, 0x2A	; 42
    2d5e:	55 dc       	rcall	.-1878   	; 0x260a <DrawPixel>

	DrawPixel(37, 4, false);
    2d60:	40 e0       	ldi	r20, 0x00	; 0
    2d62:	64 e0       	ldi	r22, 0x04	; 4
    2d64:	85 e2       	ldi	r24, 0x25	; 37
    2d66:	51 dc       	rcall	.-1886   	; 0x260a <DrawPixel>
	DrawPixel(38, 4, false);
    2d68:	40 e0       	ldi	r20, 0x00	; 0
    2d6a:	64 e0       	ldi	r22, 0x04	; 4
    2d6c:	86 e2       	ldi	r24, 0x26	; 38
    2d6e:	4d dc       	rcall	.-1894   	; 0x260a <DrawPixel>
	DrawPixel(39, 4, false);
    2d70:	40 e0       	ldi	r20, 0x00	; 0
    2d72:	64 e0       	ldi	r22, 0x04	; 4
    2d74:	87 e2       	ldi	r24, 0x27	; 39
    2d76:	49 dc       	rcall	.-1902   	; 0x260a <DrawPixel>
	DrawPixel(40, 4, false);
    2d78:	40 e0       	ldi	r20, 0x00	; 0
    2d7a:	64 e0       	ldi	r22, 0x04	; 4
    2d7c:	88 e2       	ldi	r24, 0x28	; 40
    2d7e:	45 dc       	rcall	.-1910   	; 0x260a <DrawPixel>
	DrawPixel(41, 4, false);
    2d80:	40 e0       	ldi	r20, 0x00	; 0
    2d82:	64 e0       	ldi	r22, 0x04	; 4
    2d84:	89 e2       	ldi	r24, 0x29	; 41
    2d86:	41 dc       	rcall	.-1918   	; 0x260a <DrawPixel>
	DrawPixel(42, 4, false);
    2d88:	40 e0       	ldi	r20, 0x00	; 0
    2d8a:	64 e0       	ldi	r22, 0x04	; 4
    2d8c:	8a e2       	ldi	r24, 0x2A	; 42
    2d8e:	3d dc       	rcall	.-1926   	; 0x260a <DrawPixel>
	DrawPixel(43, 4, false);
    2d90:	40 e0       	ldi	r20, 0x00	; 0
    2d92:	64 e0       	ldi	r22, 0x04	; 4
    2d94:	8b e2       	ldi	r24, 0x2B	; 43
    2d96:	39 dc       	rcall	.-1934   	; 0x260a <DrawPixel>
	
	DrawPixel(36, 5, false);
    2d98:	40 e0       	ldi	r20, 0x00	; 0
    2d9a:	65 e0       	ldi	r22, 0x05	; 5
    2d9c:	84 e2       	ldi	r24, 0x24	; 36
    2d9e:	35 dc       	rcall	.-1942   	; 0x260a <DrawPixel>
	DrawPixel(37, 5, false);
    2da0:	40 e0       	ldi	r20, 0x00	; 0
    2da2:	65 e0       	ldi	r22, 0x05	; 5
    2da4:	85 e2       	ldi	r24, 0x25	; 37
    2da6:	31 dc       	rcall	.-1950   	; 0x260a <DrawPixel>
	DrawPixel(38, 5, false);
    2da8:	40 e0       	ldi	r20, 0x00	; 0
    2daa:	65 e0       	ldi	r22, 0x05	; 5
    2dac:	86 e2       	ldi	r24, 0x26	; 38
    2dae:	2d dc       	rcall	.-1958   	; 0x260a <DrawPixel>
	DrawPixel(39, 5, false);
    2db0:	40 e0       	ldi	r20, 0x00	; 0
    2db2:	65 e0       	ldi	r22, 0x05	; 5
    2db4:	87 e2       	ldi	r24, 0x27	; 39
    2db6:	29 dc       	rcall	.-1966   	; 0x260a <DrawPixel>
	DrawPixel(40, 5, false);
    2db8:	40 e0       	ldi	r20, 0x00	; 0
    2dba:	65 e0       	ldi	r22, 0x05	; 5
    2dbc:	88 e2       	ldi	r24, 0x28	; 40
    2dbe:	25 dc       	rcall	.-1974   	; 0x260a <DrawPixel>
	DrawPixel(41, 5, false);
    2dc0:	40 e0       	ldi	r20, 0x00	; 0
    2dc2:	65 e0       	ldi	r22, 0x05	; 5
    2dc4:	89 e2       	ldi	r24, 0x29	; 41
    2dc6:	21 dc       	rcall	.-1982   	; 0x260a <DrawPixel>
	DrawPixel(42, 5, false);	
    2dc8:	40 e0       	ldi	r20, 0x00	; 0
    2dca:	65 e0       	ldi	r22, 0x05	; 5
    2dcc:	8a e2       	ldi	r24, 0x2A	; 42
    2dce:	1d dc       	rcall	.-1990   	; 0x260a <DrawPixel>
	DrawPixel(43, 5, false);
    2dd0:	40 e0       	ldi	r20, 0x00	; 0
    2dd2:	65 e0       	ldi	r22, 0x05	; 5
    2dd4:	8b e2       	ldi	r24, 0x2B	; 43
    2dd6:	19 dc       	rcall	.-1998   	; 0x260a <DrawPixel>
	DrawPixel(44, 5, false);	
    2dd8:	40 e0       	ldi	r20, 0x00	; 0
    2dda:	65 e0       	ldi	r22, 0x05	; 5
    2ddc:	8c e2       	ldi	r24, 0x2C	; 44
    2dde:	15 cc       	rjmp	.-2006   	; 0x260a <DrawPixel>
    2de0:	08 95       	ret

00002de2 <DrawDownArrow>:
}

void DrawDownArrow()
{
	
	DrawPixel(36, 42, false);
    2de2:	40 e0       	ldi	r20, 0x00	; 0
    2de4:	6a e2       	ldi	r22, 0x2A	; 42
    2de6:	84 e2       	ldi	r24, 0x24	; 36
    2de8:	10 dc       	rcall	.-2016   	; 0x260a <DrawPixel>
	DrawPixel(37, 42, false);
    2dea:	40 e0       	ldi	r20, 0x00	; 0
    2dec:	6a e2       	ldi	r22, 0x2A	; 42
    2dee:	85 e2       	ldi	r24, 0x25	; 37
    2df0:	0c dc       	rcall	.-2024   	; 0x260a <DrawPixel>
	DrawPixel(38, 42, false);
    2df2:	40 e0       	ldi	r20, 0x00	; 0
    2df4:	6a e2       	ldi	r22, 0x2A	; 42
    2df6:	86 e2       	ldi	r24, 0x26	; 38
    2df8:	08 dc       	rcall	.-2032   	; 0x260a <DrawPixel>
	DrawPixel(39, 42, false);
    2dfa:	40 e0       	ldi	r20, 0x00	; 0
    2dfc:	6a e2       	ldi	r22, 0x2A	; 42
    2dfe:	87 e2       	ldi	r24, 0x27	; 39
    2e00:	04 dc       	rcall	.-2040   	; 0x260a <DrawPixel>
	DrawPixel(40, 42, false);
    2e02:	40 e0       	ldi	r20, 0x00	; 0
    2e04:	6a e2       	ldi	r22, 0x2A	; 42
    2e06:	88 e2       	ldi	r24, 0x28	; 40
    2e08:	00 dc       	rcall	.-2048   	; 0x260a <DrawPixel>
	DrawPixel(41, 42, false);
    2e0a:	40 e0       	ldi	r20, 0x00	; 0
    2e0c:	6a e2       	ldi	r22, 0x2A	; 42
    2e0e:	89 e2       	ldi	r24, 0x29	; 41
    2e10:	fc db       	rcall	.-2056   	; 0x260a <DrawPixel>
	DrawPixel(42, 42, false);
    2e12:	40 e0       	ldi	r20, 0x00	; 0
    2e14:	6a e2       	ldi	r22, 0x2A	; 42
    2e16:	8a e2       	ldi	r24, 0x2A	; 42
    2e18:	f8 db       	rcall	.-2064   	; 0x260a <DrawPixel>
	DrawPixel(43, 42, false);
    2e1a:	40 e0       	ldi	r20, 0x00	; 0
    2e1c:	6a e2       	ldi	r22, 0x2A	; 42
    2e1e:	8b e2       	ldi	r24, 0x2B	; 43
    2e20:	f4 db       	rcall	.-2072   	; 0x260a <DrawPixel>
	DrawPixel(44, 42, false);	
    2e22:	40 e0       	ldi	r20, 0x00	; 0
    2e24:	6a e2       	ldi	r22, 0x2A	; 42
    2e26:	8c e2       	ldi	r24, 0x2C	; 44
    2e28:	f0 db       	rcall	.-2080   	; 0x260a <DrawPixel>
	
	DrawPixel(37, 43, false);
    2e2a:	40 e0       	ldi	r20, 0x00	; 0
    2e2c:	6b e2       	ldi	r22, 0x2B	; 43
    2e2e:	85 e2       	ldi	r24, 0x25	; 37
    2e30:	ec db       	rcall	.-2088   	; 0x260a <DrawPixel>
	DrawPixel(38, 43, false);
    2e32:	40 e0       	ldi	r20, 0x00	; 0
    2e34:	6b e2       	ldi	r22, 0x2B	; 43
    2e36:	86 e2       	ldi	r24, 0x26	; 38
    2e38:	e8 db       	rcall	.-2096   	; 0x260a <DrawPixel>
	DrawPixel(39, 43, false);
    2e3a:	40 e0       	ldi	r20, 0x00	; 0
    2e3c:	6b e2       	ldi	r22, 0x2B	; 43
    2e3e:	87 e2       	ldi	r24, 0x27	; 39
    2e40:	e4 db       	rcall	.-2104   	; 0x260a <DrawPixel>
	DrawPixel(40, 43, false);
    2e42:	40 e0       	ldi	r20, 0x00	; 0
    2e44:	6b e2       	ldi	r22, 0x2B	; 43
    2e46:	88 e2       	ldi	r24, 0x28	; 40
    2e48:	e0 db       	rcall	.-2112   	; 0x260a <DrawPixel>
	DrawPixel(41, 43, false);
    2e4a:	40 e0       	ldi	r20, 0x00	; 0
    2e4c:	6b e2       	ldi	r22, 0x2B	; 43
    2e4e:	89 e2       	ldi	r24, 0x29	; 41
    2e50:	dc db       	rcall	.-2120   	; 0x260a <DrawPixel>
	DrawPixel(42, 43, false);
    2e52:	40 e0       	ldi	r20, 0x00	; 0
    2e54:	6b e2       	ldi	r22, 0x2B	; 43
    2e56:	8a e2       	ldi	r24, 0x2A	; 42
    2e58:	d8 db       	rcall	.-2128   	; 0x260a <DrawPixel>
	DrawPixel(43, 43, false);	
    2e5a:	40 e0       	ldi	r20, 0x00	; 0
    2e5c:	6b e2       	ldi	r22, 0x2B	; 43
    2e5e:	8b e2       	ldi	r24, 0x2B	; 43
    2e60:	d4 db       	rcall	.-2136   	; 0x260a <DrawPixel>
	
	DrawPixel(38, 44, false);
    2e62:	40 e0       	ldi	r20, 0x00	; 0
    2e64:	6c e2       	ldi	r22, 0x2C	; 44
    2e66:	86 e2       	ldi	r24, 0x26	; 38
    2e68:	d0 db       	rcall	.-2144   	; 0x260a <DrawPixel>
	DrawPixel(39, 44, false);
    2e6a:	40 e0       	ldi	r20, 0x00	; 0
    2e6c:	6c e2       	ldi	r22, 0x2C	; 44
    2e6e:	87 e2       	ldi	r24, 0x27	; 39
    2e70:	cc db       	rcall	.-2152   	; 0x260a <DrawPixel>
	DrawPixel(40, 44, false);
    2e72:	40 e0       	ldi	r20, 0x00	; 0
    2e74:	6c e2       	ldi	r22, 0x2C	; 44
    2e76:	88 e2       	ldi	r24, 0x28	; 40
    2e78:	c8 db       	rcall	.-2160   	; 0x260a <DrawPixel>
	DrawPixel(41, 44, false);
    2e7a:	40 e0       	ldi	r20, 0x00	; 0
    2e7c:	6c e2       	ldi	r22, 0x2C	; 44
    2e7e:	89 e2       	ldi	r24, 0x29	; 41
    2e80:	c4 db       	rcall	.-2168   	; 0x260a <DrawPixel>
	DrawPixel(42, 44, false);	
    2e82:	40 e0       	ldi	r20, 0x00	; 0
    2e84:	6c e2       	ldi	r22, 0x2C	; 44
    2e86:	8a e2       	ldi	r24, 0x2A	; 42
    2e88:	c0 db       	rcall	.-2176   	; 0x260a <DrawPixel>
	
	DrawPixel(39, 45, false);
    2e8a:	40 e0       	ldi	r20, 0x00	; 0
    2e8c:	6d e2       	ldi	r22, 0x2D	; 45
    2e8e:	87 e2       	ldi	r24, 0x27	; 39
    2e90:	bc db       	rcall	.-2184   	; 0x260a <DrawPixel>
	DrawPixel(40, 45, false);
    2e92:	40 e0       	ldi	r20, 0x00	; 0
    2e94:	6d e2       	ldi	r22, 0x2D	; 45
    2e96:	88 e2       	ldi	r24, 0x28	; 40
    2e98:	b8 db       	rcall	.-2192   	; 0x260a <DrawPixel>
	DrawPixel(41, 45, false);	
    2e9a:	40 e0       	ldi	r20, 0x00	; 0
    2e9c:	6d e2       	ldi	r22, 0x2D	; 45
    2e9e:	89 e2       	ldi	r24, 0x29	; 41
    2ea0:	b4 db       	rcall	.-2200   	; 0x260a <DrawPixel>
	
	DrawPixel(40, 46, false);	
    2ea2:	40 e0       	ldi	r20, 0x00	; 0
    2ea4:	6e e2       	ldi	r22, 0x2E	; 46
    2ea6:	88 e2       	ldi	r24, 0x28	; 40
    2ea8:	b0 cb       	rjmp	.-2208   	; 0x260a <DrawPixel>
    2eaa:	08 95       	ret

00002eac <DrawProfileMenu>:
}

void DrawProfileMenu()
{
    2eac:	0f 93       	push	r16
    2eae:	1f 93       	push	r17
    2eb0:	cf 93       	push	r28
    2eb2:	df 93       	push	r29
	//Will show a "window" of the current list based on the current index.
	uint8_t y;
	
	if (_windowIndex > 0)
    2eb4:	80 91 6a 2c 	lds	r24, 0x2C6A	; 0x802c6a <_windowIndex>
    2eb8:	81 11       	cpse	r24, r1
		DrawUpArrow();
    2eba:	2e df       	rcall	.-420    	; 0x2d18 <DrawUpArrow>
		
	if (_windowIndex < MAX_PROFILES - WINDOW_SIZE)
    2ebc:	80 91 6a 2c 	lds	r24, 0x2C6A	; 0x802c6a <_windowIndex>
    2ec0:	8c 30       	cpi	r24, 0x0C	; 12
    2ec2:	20 f5       	brcc	.+72     	; 0x2f0c <DrawProfileMenu+0x60>
		DrawDownArrow();
    2ec4:	8e df       	rcall	.-228    	; 0x2de2 <DrawDownArrow>
    2ec6:	22 c0       	rjmp	.+68     	; 0x2f0c <DrawProfileMenu+0x60>
				
	for (uint8_t i = 0; i < WINDOW_SIZE; i++)
	{
		y = 8 * (i + 1);
    2ec8:	ae 01       	movw	r20, r28
		
		DrawString(_names[i + _windowIndex], 0, y, SelectedIndex == i + _windowIndex);		
    2eca:	20 91 6a 2c 	lds	r18, 0x2C6A	; 0x802c6a <_windowIndex>
    2ece:	30 91 6a 2c 	lds	r19, 0x2C6A	; 0x802c6a <_windowIndex>
    2ed2:	80 91 d1 24 	lds	r24, 0x24D1	; 0x8024d1 <SelectedIndex>
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	be 01       	movw	r22, r28
    2eda:	62 0f       	add	r22, r18
    2edc:	71 1d       	adc	r23, r1
    2ede:	21 e0       	ldi	r18, 0x01	; 1
    2ee0:	86 17       	cp	r24, r22
    2ee2:	97 07       	cpc	r25, r23
    2ee4:	09 f0       	breq	.+2      	; 0x2ee8 <DrawProfileMenu+0x3c>
    2ee6:	20 e0       	ldi	r18, 0x00	; 0
    2ee8:	43 0f       	add	r20, r19
    2eea:	51 1d       	adc	r21, r1
    2eec:	04 9f       	mul	r16, r20
    2eee:	c0 01       	movw	r24, r0
    2ef0:	05 9f       	mul	r16, r21
    2ef2:	90 0d       	add	r25, r0
    2ef4:	11 24       	eor	r1, r1
    2ef6:	41 2f       	mov	r20, r17
    2ef8:	60 e0       	ldi	r22, 0x00	; 0
    2efa:	85 59       	subi	r24, 0x95	; 149
    2efc:	93 4d       	sbci	r25, 0xD3	; 211
    2efe:	7b db       	rcall	.-2314   	; 0x25f6 <DrawString>
    2f00:	21 96       	adiw	r28, 0x01	; 1
    2f02:	18 5f       	subi	r17, 0xF8	; 248
		DrawUpArrow();
		
	if (_windowIndex < MAX_PROFILES - WINDOW_SIZE)
		DrawDownArrow();
				
	for (uint8_t i = 0; i < WINDOW_SIZE; i++)
    2f04:	18 32       	cpi	r17, 0x28	; 40
    2f06:	01 f7       	brne	.-64     	; 0x2ec8 <DrawProfileMenu+0x1c>
		y = 8 * (i + 1);
		
		DrawString(_names[i + _windowIndex], 0, y, SelectedIndex == i + _windowIndex);		
	}
	
	FlushScreenBuffer();	
    2f08:	4f db       	rcall	.-2402   	; 0x25a8 <FlushScreenBuffer>
    2f0a:	05 c0       	rjmp	.+10     	; 0x2f16 <DrawProfileMenu+0x6a>
	
	DrawPixel(40, 46, false);	
}

void DrawProfileMenu()
{
    2f0c:	18 e0       	ldi	r17, 0x08	; 8
    2f0e:	c0 e0       	ldi	r28, 0x00	; 0
    2f10:	d0 e0       	ldi	r29, 0x00	; 0
				
	for (uint8_t i = 0; i < WINDOW_SIZE; i++)
	{
		y = 8 * (i + 1);
		
		DrawString(_names[i + _windowIndex], 0, y, SelectedIndex == i + _windowIndex);		
    2f12:	01 e1       	ldi	r16, 0x11	; 17
    2f14:	d9 cf       	rjmp	.-78     	; 0x2ec8 <DrawProfileMenu+0x1c>
	}
	
	FlushScreenBuffer();	
}
    2f16:	df 91       	pop	r29
    2f18:	cf 91       	pop	r28
    2f1a:	1f 91       	pop	r17
    2f1c:	0f 91       	pop	r16
    2f1e:	08 95       	ret

00002f20 <DrawRunningMenu>:

void DrawRunningMenu()
{
    2f20:	cf 93       	push	r28
    2f22:	df 93       	push	r29
    2f24:	cd b7       	in	r28, 0x3d	; 61
    2f26:	de b7       	in	r29, 0x3e	; 62
    2f28:	2d 97       	sbiw	r28, 0x0d	; 13
    2f2a:	cd bf       	out	0x3d, r28	; 61
    2f2c:	de bf       	out	0x3e, r29	; 62
	uint8_t name[13];
	uint16_t i = 0;
		
	for(; i < MAX_NAME_SIZE; i++)
	{
		name[i] = Profile[i];
    2f2e:	80 91 9b 2e 	lds	r24, 0x2E9B	; 0x802e9b <Profile>
    2f32:	89 83       	std	Y+1, r24	; 0x01
		
		if (name[i] == '\0')
    2f34:	88 23       	and	r24, r24
    2f36:	79 f0       	breq	.+30     	; 0x2f56 <DrawRunningMenu+0x36>
    2f38:	ac e9       	ldi	r26, 0x9C	; 156
    2f3a:	be e2       	ldi	r27, 0x2E	; 46
    2f3c:	fe 01       	movw	r30, r28
    2f3e:	32 96       	adiw	r30, 0x02	; 2
{

	uint8_t name[13];
	uint16_t i = 0;
		
	for(; i < MAX_NAME_SIZE; i++)
    2f40:	81 e0       	ldi	r24, 0x01	; 1
    2f42:	90 e0       	ldi	r25, 0x00	; 0
	{
		name[i] = Profile[i];
    2f44:	2d 91       	ld	r18, X+
    2f46:	21 93       	st	Z+, r18
		
		if (name[i] == '\0')
    2f48:	22 23       	and	r18, r18
    2f4a:	39 f0       	breq	.+14     	; 0x2f5a <DrawRunningMenu+0x3a>
{

	uint8_t name[13];
	uint16_t i = 0;
		
	for(; i < MAX_NAME_SIZE; i++)
    2f4c:	01 96       	adiw	r24, 0x01	; 1
    2f4e:	8c 30       	cpi	r24, 0x0C	; 12
    2f50:	91 05       	cpc	r25, r1
    2f52:	c1 f7       	brne	.-16     	; 0x2f44 <DrawRunningMenu+0x24>
    2f54:	02 c0       	rjmp	.+4      	; 0x2f5a <DrawRunningMenu+0x3a>

void DrawRunningMenu()
{

	uint8_t name[13];
	uint16_t i = 0;
    2f56:	80 e0       	ldi	r24, 0x00	; 0
    2f58:	90 e0       	ldi	r25, 0x00	; 0
		{
			break;
		}
	}
	
	name[12] = '\0';
    2f5a:	1d 86       	std	Y+13, r1	; 0x0d
		
	i /= 2; //split the number of characters
    2f5c:	96 95       	lsr	r25
    2f5e:	87 95       	ror	r24
	i *= 5; //multiply by the size of a character
    2f60:	9c 01       	movw	r18, r24
    2f62:	22 0f       	add	r18, r18
    2f64:	33 1f       	adc	r19, r19
    2f66:	22 0f       	add	r18, r18
    2f68:	33 1f       	adc	r19, r19
    2f6a:	82 0f       	add	r24, r18
    2f6c:	93 1f       	adc	r25, r19
	i = (SCREEN_WIDTH / 2) - i; //Get the center of the screen and move back by i (this will be our x)
    2f6e:	6a e2       	ldi	r22, 0x2A	; 42
    2f70:	70 e0       	ldi	r23, 0x00	; 0
    2f72:	68 1b       	sub	r22, r24
    2f74:	79 0b       	sbc	r23, r25
	
	DrawString(name, i, 0, true);
    2f76:	21 e0       	ldi	r18, 0x01	; 1
    2f78:	40 e0       	ldi	r20, 0x00	; 0
    2f7a:	ce 01       	movw	r24, r28
    2f7c:	01 96       	adiw	r24, 0x01	; 1
    2f7e:	3b db       	rcall	.-2442   	; 0x25f6 <DrawString>

	DrawString("Stop Reflow and\0", 4, 8, false);
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	48 e0       	ldi	r20, 0x08	; 8
    2f84:	64 e0       	ldi	r22, 0x04	; 4
    2f86:	86 ee       	ldi	r24, 0xE6	; 230
    2f88:	90 e2       	ldi	r25, 0x20	; 32
    2f8a:	35 db       	rcall	.-2454   	; 0x25f6 <DrawString>
	DrawString("Quit to Menu?\0", 9, 16, false);
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	40 e1       	ldi	r20, 0x10	; 16
    2f90:	69 e0       	ldi	r22, 0x09	; 9
    2f92:	87 ef       	ldi	r24, 0xF7	; 247
    2f94:	90 e2       	ldi	r25, 0x20	; 32
    2f96:	2f db       	rcall	.-2466   	; 0x25f6 <DrawString>
	DrawString(" Yes \0", 10, 24, SelectedIndex == 0);
    2f98:	21 e0       	ldi	r18, 0x01	; 1
    2f9a:	80 91 d1 24 	lds	r24, 0x24D1	; 0x8024d1 <SelectedIndex>
    2f9e:	81 11       	cpse	r24, r1
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	48 e1       	ldi	r20, 0x18	; 24
    2fa4:	6a e0       	ldi	r22, 0x0A	; 10
    2fa6:	86 e0       	ldi	r24, 0x06	; 6
    2fa8:	91 e2       	ldi	r25, 0x21	; 33
    2faa:	25 db       	rcall	.-2486   	; 0x25f6 <DrawString>
	DrawString(" No  \0", 10, 32, SelectedIndex == 1);
    2fac:	21 e0       	ldi	r18, 0x01	; 1
    2fae:	80 91 d1 24 	lds	r24, 0x24D1	; 0x8024d1 <SelectedIndex>
    2fb2:	81 30       	cpi	r24, 0x01	; 1
    2fb4:	09 f0       	breq	.+2      	; 0x2fb8 <DrawRunningMenu+0x98>
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	40 e2       	ldi	r20, 0x20	; 32
    2fba:	6a e0       	ldi	r22, 0x0A	; 10
    2fbc:	8d e0       	ldi	r24, 0x0D	; 13
    2fbe:	91 e2       	ldi	r25, 0x21	; 33
    2fc0:	1a db       	rcall	.-2508   	; 0x25f6 <DrawString>
	
	FlushScreenBuffer();	
    2fc2:	f2 da       	rcall	.-2588   	; 0x25a8 <FlushScreenBuffer>
	
}
    2fc4:	2d 96       	adiw	r28, 0x0d	; 13
    2fc6:	cd bf       	out	0x3d, r28	; 61
    2fc8:	de bf       	out	0x3e, r29	; 62
    2fca:	df 91       	pop	r29
    2fcc:	cf 91       	pop	r28
    2fce:	08 95       	ret

00002fd0 <DrawMenu>:

void DrawMenu()
{

	_windowIndex = 0;
    2fd0:	10 92 6a 2c 	sts	0x2C6A, r1	; 0x802c6a <_windowIndex>
	
	if (MenuMode == ProfileMenu)
    2fd4:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <MenuMode>
    2fd8:	81 30       	cpi	r24, 0x01	; 1
    2fda:	11 f4       	brne	.+4      	; 0x2fe0 <DrawMenu+0x10>
		DrawProfileMenu();
    2fdc:	67 cf       	rjmp	.-306    	; 0x2eac <DrawProfileMenu>
    2fde:	08 95       	ret
	else
		DrawRunningMenu();	
    2fe0:	9f cf       	rjmp	.-194    	; 0x2f20 <DrawRunningMenu>
    2fe2:	08 95       	ret

00002fe4 <MenuUp>:

}

void MenuUp()
{
	if (MenuMode == ProfileMenu)
    2fe4:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <MenuMode>
    2fe8:	81 30       	cpi	r24, 0x01	; 1
    2fea:	99 f4       	brne	.+38     	; 0x3012 <MenuUp+0x2e>
	{
		if (SelectedIndex == 0)
    2fec:	80 91 d1 24 	lds	r24, 0x24D1	; 0x8024d1 <SelectedIndex>
    2ff0:	88 23       	and	r24, r24
    2ff2:	d1 f0       	breq	.+52     	; 0x3028 <MenuUp+0x44>
			return;
		
		SelectedIndex--;
    2ff4:	81 50       	subi	r24, 0x01	; 1
    2ff6:	80 93 d1 24 	sts	0x24D1, r24	; 0x8024d1 <SelectedIndex>
		
		if (_windowIndex > 0 && SelectedIndex < MAX_PROFILES - 3)
    2ffa:	90 91 6a 2c 	lds	r25, 0x2C6A	; 0x802c6a <_windowIndex>
    2ffe:	99 23       	and	r25, r25
    3000:	39 f0       	breq	.+14     	; 0x3010 <MenuUp+0x2c>
    3002:	8d 30       	cpi	r24, 0x0D	; 13
    3004:	28 f4       	brcc	.+10     	; 0x3010 <MenuUp+0x2c>
			_windowIndex--;
    3006:	80 91 6a 2c 	lds	r24, 0x2C6A	; 0x802c6a <_windowIndex>
    300a:	81 50       	subi	r24, 0x01	; 1
    300c:	80 93 6a 2c 	sts	0x2C6A, r24	; 0x802c6a <_windowIndex>
			
		DrawProfileMenu();			
    3010:	4d df       	rcall	.-358    	; 0x2eac <DrawProfileMenu>
	}
	
	if (MenuMode == RunningMenu)
    3012:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <MenuMode>
    3016:	82 30       	cpi	r24, 0x02	; 2
    3018:	39 f4       	brne	.+14     	; 0x3028 <MenuUp+0x44>
	{
		
		if (SelectedIndex == 0)
    301a:	80 91 d1 24 	lds	r24, 0x24D1	; 0x8024d1 <SelectedIndex>
    301e:	88 23       	and	r24, r24
    3020:	19 f0       	breq	.+6      	; 0x3028 <MenuUp+0x44>
			return;
			
		SelectedIndex = 0;
    3022:	10 92 d1 24 	sts	0x24D1, r1	; 0x8024d1 <SelectedIndex>
		
		DrawRunningMenu();
    3026:	7c cf       	rjmp	.-264    	; 0x2f20 <DrawRunningMenu>
    3028:	08 95       	ret

0000302a <MenuDown>:
	}
}

void MenuDown()
{
	if (MenuMode == ProfileMenu)
    302a:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <MenuMode>
    302e:	81 30       	cpi	r24, 0x01	; 1
    3030:	99 f4       	brne	.+38     	; 0x3058 <MenuDown+0x2e>
	{	
		if (SelectedIndex == MAX_PROFILES - 1)
    3032:	80 91 d1 24 	lds	r24, 0x24D1	; 0x8024d1 <SelectedIndex>
    3036:	8f 30       	cpi	r24, 0x0F	; 15
    3038:	d9 f0       	breq	.+54     	; 0x3070 <MenuDown+0x46>
			return;
		
		SelectedIndex++;
    303a:	8f 5f       	subi	r24, 0xFF	; 255
    303c:	80 93 d1 24 	sts	0x24D1, r24	; 0x8024d1 <SelectedIndex>
		if (_windowIndex < MAX_PROFILES - WINDOW_SIZE && SelectedIndex > 2)
    3040:	90 91 6a 2c 	lds	r25, 0x2C6A	; 0x802c6a <_windowIndex>
    3044:	9c 30       	cpi	r25, 0x0C	; 12
    3046:	38 f4       	brcc	.+14     	; 0x3056 <MenuDown+0x2c>
    3048:	83 30       	cpi	r24, 0x03	; 3
    304a:	28 f0       	brcs	.+10     	; 0x3056 <MenuDown+0x2c>
			_windowIndex++;
    304c:	80 91 6a 2c 	lds	r24, 0x2C6A	; 0x802c6a <_windowIndex>
    3050:	8f 5f       	subi	r24, 0xFF	; 255
    3052:	80 93 6a 2c 	sts	0x2C6A, r24	; 0x802c6a <_windowIndex>
			
		DrawProfileMenu();
    3056:	2a df       	rcall	.-428    	; 0x2eac <DrawProfileMenu>
	}
	
	if (MenuMode == RunningMenu)
    3058:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <MenuMode>
    305c:	82 30       	cpi	r24, 0x02	; 2
    305e:	41 f4       	brne	.+16     	; 0x3070 <MenuDown+0x46>
	{
		
		if (SelectedIndex == 1)
    3060:	80 91 d1 24 	lds	r24, 0x24D1	; 0x8024d1 <SelectedIndex>
    3064:	81 30       	cpi	r24, 0x01	; 1
    3066:	21 f0       	breq	.+8      	; 0x3070 <MenuDown+0x46>
			return;
		
		SelectedIndex = 1;
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	80 93 d1 24 	sts	0x24D1, r24	; 0x8024d1 <SelectedIndex>
		
		DrawRunningMenu();		
    306e:	58 cf       	rjmp	.-336    	; 0x2f20 <DrawRunningMenu>
    3070:	08 95       	ret

00003072 <LoadProfileNames>:
	}	
}

void LoadProfileNames()
{
    3072:	7f 92       	push	r7
    3074:	8f 92       	push	r8
    3076:	9f 92       	push	r9
    3078:	af 92       	push	r10
    307a:	bf 92       	push	r11
    307c:	cf 92       	push	r12
    307e:	df 92       	push	r13
    3080:	ef 92       	push	r14
    3082:	ff 92       	push	r15
    3084:	0f 93       	push	r16
    3086:	1f 93       	push	r17
    3088:	cf 93       	push	r28
    308a:	df 93       	push	r29
    308c:	cd b7       	in	r28, 0x3d	; 61
    308e:	de b7       	in	r29, 0x3e	; 62
    3090:	c0 5c       	subi	r28, 0xC0	; 192
    3092:	d1 09       	sbc	r29, r1
    3094:	cd bf       	out	0x3d, r28	; 61
    3096:	de bf       	out	0x3e, r29	; 62
	uint8_t name[16];
	uint8_t num[4];
	uint8_t pnames[MAX_PROFILES * MAX_NAME_SIZE];

	SelectedIndex = 0;
    3098:	10 92 d1 24 	sts	0x24D1, r1	; 0x8024d1 <SelectedIndex>
	_windowIndex = 0;
    309c:	10 92 6a 2c 	sts	0x2C6A, r1	; 0x802c6a <_windowIndex>
	
	GetProfileNames(pnames);
    30a0:	ce 01       	movw	r24, r28
    30a2:	01 96       	adiw	r24, 0x01	; 1
    30a4:	eb d5       	rcall	.+3030   	; 0x3c7c <GetProfileNames>
    30a6:	0c e7       	ldi	r16, 0x7C	; 124
    30a8:	1c e2       	ldi	r17, 0x2C	; 44
    30aa:	ce 01       	movw	r24, r28
    30ac:	01 96       	adiw	r24, 0x01	; 1
    30ae:	6c 01       	movw	r12, r24
    30b0:	ee 24       	eor	r14, r14
    30b2:	e3 94       	inc	r14
    30b4:	f1 2c       	mov	r15, r1

	for(uint8_t i = 1; i < MAX_PROFILES; i++)
	{
		
		_names[i][0] = ' ';
    30b6:	68 94       	set
    30b8:	77 24       	eor	r7, r7
    30ba:	75 f8       	bld	r7, 5
		if (i < 10)
			itoa(i, _names[i] + 1, 10);
		else
			itoa(i, _names[i], 10);
						
		strcpy(_names[i] + 2, ".  \0");
    30bc:	0f 2e       	mov	r0, r31
    30be:	fe e2       	ldi	r31, 0x2E	; 46
    30c0:	8f 2e       	mov	r8, r31
    30c2:	f0 e2       	ldi	r31, 0x20	; 32
    30c4:	9f 2e       	mov	r9, r31
    30c6:	a9 2c       	mov	r10, r9
    30c8:	b1 2c       	mov	r11, r1
    30ca:	f0 2d       	mov	r31, r0
	GetProfileNames(pnames);

	for(uint8_t i = 1; i < MAX_PROFILES; i++)
	{
		
		_names[i][0] = ' ';
    30cc:	f8 01       	movw	r30, r16
    30ce:	70 82       	st	Z, r7
		
		if (i < 10)
    30d0:	f9 e0       	ldi	r31, 0x09	; 9
    30d2:	fe 15       	cp	r31, r14
    30d4:	40 f0       	brcs	.+16     	; 0x30e6 <LoadProfileNames+0x74>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    30d6:	4a e0       	ldi	r20, 0x0A	; 10
    30d8:	b8 01       	movw	r22, r16
    30da:	6f 5f       	subi	r22, 0xFF	; 255
    30dc:	7f 4f       	sbci	r23, 0xFF	; 255
    30de:	c7 01       	movw	r24, r14
    30e0:	0e 94 24 35 	call	0x6a48	; 0x6a48 <__itoa_ncheck>
    30e4:	05 c0       	rjmp	.+10     	; 0x30f0 <LoadProfileNames+0x7e>
    30e6:	4a e0       	ldi	r20, 0x0A	; 10
    30e8:	b8 01       	movw	r22, r16
    30ea:	c7 01       	movw	r24, r14
    30ec:	0e 94 24 35 	call	0x6a48	; 0x6a48 <__itoa_ncheck>
			itoa(i, _names[i] + 1, 10);
		else
			itoa(i, _names[i], 10);
						
		strcpy(_names[i] + 2, ".  \0");
    30f0:	f8 01       	movw	r30, r16
    30f2:	82 82       	std	Z+2, r8	; 0x02
    30f4:	93 82       	std	Z+3, r9	; 0x03
    30f6:	a4 82       	std	Z+4, r10	; 0x04
    30f8:	b5 82       	std	Z+5, r11	; 0x05
    30fa:	34 96       	adiw	r30, 0x04	; 4
    30fc:	98 01       	movw	r18, r16
    30fe:	20 5f       	subi	r18, 0xF0	; 240
    3100:	3f 4f       	sbci	r19, 0xFF	; 255
    3102:	d6 01       	movw	r26, r12


		for(uint8_t c = 0; c < MAX_NAME_SIZE; c++)
		{
			_names[i][c + 4] = pnames[((i - 1) * MAX_NAME_SIZE) + c];
    3104:	8d 91       	ld	r24, X+
    3106:	81 93       	st	Z+, r24
			itoa(i, _names[i], 10);
						
		strcpy(_names[i] + 2, ".  \0");


		for(uint8_t c = 0; c < MAX_NAME_SIZE; c++)
    3108:	e2 17       	cp	r30, r18
    310a:	f3 07       	cpc	r31, r19
    310c:	d9 f7       	brne	.-10     	; 0x3104 <LoadProfileNames+0x92>
    310e:	0f 5e       	subi	r16, 0xEF	; 239
    3110:	1f 4f       	sbci	r17, 0xFF	; 255
    3112:	fc e0       	ldi	r31, 0x0C	; 12
    3114:	cf 0e       	add	r12, r31
    3116:	d1 1c       	adc	r13, r1
    3118:	8f ef       	ldi	r24, 0xFF	; 255
    311a:	e8 1a       	sub	r14, r24
    311c:	f8 0a       	sbc	r15, r24
	SelectedIndex = 0;
	_windowIndex = 0;
	
	GetProfileNames(pnames);

	for(uint8_t i = 1; i < MAX_PROFILES; i++)
    311e:	90 e1       	ldi	r25, 0x10	; 16
    3120:	e9 16       	cp	r14, r25
    3122:	f1 04       	cpc	r15, r1
    3124:	99 f6       	brne	.-90     	; 0x30cc <LoadProfileNames+0x5a>
			_names[i][c + 4] = pnames[((i - 1) * MAX_NAME_SIZE) + c];
		}
				
	}
	
		_names[0][0] = ' ';
    3126:	eb e6       	ldi	r30, 0x6B	; 107
    3128:	fc e2       	ldi	r31, 0x2C	; 44
    312a:	80 e2       	ldi	r24, 0x20	; 32
    312c:	80 83       	st	Z, r24
		_names[0][1] = '0';
    312e:	90 e3       	ldi	r25, 0x30	; 48
    3130:	91 83       	std	Z+1, r25	; 0x01
		_names[0][2] = '.';
    3132:	9e e2       	ldi	r25, 0x2E	; 46
    3134:	92 83       	std	Z+2, r25	; 0x02
		_names[0][3] = ' ';
    3136:	83 83       	std	Z+3, r24	; 0x03
		_names[0][4] = 'D';
    3138:	84 e4       	ldi	r24, 0x44	; 68
    313a:	84 83       	std	Z+4, r24	; 0x04
		_names[0][5] = 'e';
    313c:	85 e6       	ldi	r24, 0x65	; 101
    313e:	85 83       	std	Z+5, r24	; 0x05
		_names[0][6] = 'f';
    3140:	86 e6       	ldi	r24, 0x66	; 102
    3142:	86 83       	std	Z+6, r24	; 0x06
		_names[0][7] = 'a';
    3144:	81 e6       	ldi	r24, 0x61	; 97
    3146:	87 83       	std	Z+7, r24	; 0x07
		_names[0][8] = 'u';
    3148:	85 e7       	ldi	r24, 0x75	; 117
    314a:	80 87       	std	Z+8, r24	; 0x08
		_names[0][9] = 'l';
    314c:	8c e6       	ldi	r24, 0x6C	; 108
    314e:	81 87       	std	Z+9, r24	; 0x09
		_names[0][10] = 't';
    3150:	84 e7       	ldi	r24, 0x74	; 116
    3152:	82 87       	std	Z+10, r24	; 0x0a
		_names[0][11] = '\0';
    3154:	13 86       	std	Z+11, r1	; 0x0b
		_names[0][12] = 0;
    3156:	14 86       	std	Z+12, r1	; 0x0c
		_names[0][13] = 0;
    3158:	15 86       	std	Z+13, r1	; 0x0d
		_names[0][14] = 0;
    315a:	16 86       	std	Z+14, r1	; 0x0e
		_names[0][15] = 0;	
    315c:	17 86       	std	Z+15, r1	; 0x0f
		_names[0][16] = 0;
    315e:	10 8a       	std	Z+16, r1	; 0x10

    3160:	c0 54       	subi	r28, 0x40	; 64
    3162:	df 4f       	sbci	r29, 0xFF	; 255
    3164:	cd bf       	out	0x3d, r28	; 61
    3166:	de bf       	out	0x3e, r29	; 62
    3168:	df 91       	pop	r29
    316a:	cf 91       	pop	r28
    316c:	1f 91       	pop	r17
    316e:	0f 91       	pop	r16
    3170:	ff 90       	pop	r15
    3172:	ef 90       	pop	r14
    3174:	df 90       	pop	r13
    3176:	cf 90       	pop	r12
    3178:	bf 90       	pop	r11
    317a:	af 90       	pop	r10
    317c:	9f 90       	pop	r9
    317e:	8f 90       	pop	r8
    3180:	7f 90       	pop	r7
    3182:	08 95       	ret

00003184 <LoadSettings>:
volatile uint8_t _flashProfile[PROFILE_BYTES];
volatile Bool _includeTopHeater = false;
volatile Bool _includeBottomHeater = false;

void LoadSettings()
{
    3184:	cf 93       	push	r28
    3186:	df 93       	push	r29
    3188:	cd b7       	in	r28, 0x3d	; 61
    318a:	de b7       	in	r29, 0x3e	; 62
    318c:	da 95       	dec	r29
    318e:	cd bf       	out	0x3d, r28	; 61
    3190:	de bf       	out	0x3e, r29	; 62
	uint8_t settings[FLASH_PAGE_SIZE];
	
	ReadFlashPage(settings, (MAX_PROFILES * PROFILE_SIZE) + 1); //byte 0 = temp mode, byte 1 = backlight on time, byte 2&3 = buzzer on time
    3192:	61 e1       	ldi	r22, 0x11	; 17
    3194:	ce 01       	movw	r24, r28
    3196:	01 96       	adiw	r24, 0x01	; 1
    3198:	0e 94 9b 21 	call	0x4336	; 0x4336 <ReadFlashPage>
		
	TempType = settings[0];
    319c:	89 81       	ldd	r24, Y+1	; 0x01
    319e:	80 93 e0 24 	sts	0x24E0, r24	; 0x8024e0 <TempType>
	BackLightOnTime = settings[1];
    31a2:	8a 81       	ldd	r24, Y+2	; 0x02
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	80 93 19 20 	sts	0x2019, r24	; 0x802019 <BackLightOnTime>
    31aa:	90 93 1a 20 	sts	0x201A, r25	; 0x80201a <BackLightOnTime+0x1>
	BuzzerOnTime = (uint16_t)settings[3] << 8 | (uint16_t)settings[2];	
    31ae:	8c 81       	ldd	r24, Y+4	; 0x04
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	98 2f       	mov	r25, r24
    31b4:	88 27       	eor	r24, r24
    31b6:	2b 81       	ldd	r18, Y+3	; 0x03
    31b8:	82 2b       	or	r24, r18
    31ba:	80 93 17 20 	sts	0x2017, r24	; 0x802017 <BuzzerOnTime>
    31be:	90 93 18 20 	sts	0x2018, r25	; 0x802018 <BuzzerOnTime+0x1>
}
    31c2:	d3 95       	inc	r29
    31c4:	cd bf       	out	0x3d, r28	; 61
    31c6:	de bf       	out	0x3e, r29	; 62
    31c8:	df 91       	pop	r29
    31ca:	cf 91       	pop	r28
    31cc:	08 95       	ret

000031ce <SaveSettings>:

void SaveSettings()
{
    31ce:	cf 93       	push	r28
    31d0:	df 93       	push	r29
    31d2:	cd b7       	in	r28, 0x3d	; 61
    31d4:	de b7       	in	r29, 0x3e	; 62
    31d6:	da 95       	dec	r29
    31d8:	cd bf       	out	0x3d, r28	; 61
    31da:	de bf       	out	0x3e, r29	; 62
	uint8_t settings[FLASH_PAGE_SIZE]; //byte 0 = temp mode, byte 1 = backlight on time, byte 2&3 = buzzer on time
	
	settings[0] = TempType;
    31dc:	80 91 e0 24 	lds	r24, 0x24E0	; 0x8024e0 <TempType>
    31e0:	89 83       	std	Y+1, r24	; 0x01
	settings[1] = BackLightOnTime;
    31e2:	80 91 19 20 	lds	r24, 0x2019	; 0x802019 <BackLightOnTime>
    31e6:	8a 83       	std	Y+2, r24	; 0x02
	settings[2] = BuzzerOnTime;
    31e8:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <BuzzerOnTime>
    31ec:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <BuzzerOnTime+0x1>
    31f0:	9b 83       	std	Y+3, r25	; 0x03
	settings[3] = BuzzerOnTime >> 8;
    31f2:	8c 83       	std	Y+4, r24	; 0x04
	
	SP_LoadFlashPage(settings);
    31f4:	ce 01       	movw	r24, r28
    31f6:	01 96       	adiw	r24, 0x01	; 1
    31f8:	0f 94 04 00 	call	0x20008	; 0x20008 <SP_LoadFlashPage>
	EraseWriteAppTablePage((MAX_PROFILES * PROFILE_SIZE) + 1);		
    31fc:	81 e1       	ldi	r24, 0x11	; 17
    31fe:	0e 94 8a 21 	call	0x4314	; 0x4314 <EraseWriteAppTablePage>
}
    3202:	d3 95       	inc	r29
    3204:	cd bf       	out	0x3d, r28	; 61
    3206:	de bf       	out	0x3e, r29	; 62
    3208:	df 91       	pop	r29
    320a:	cf 91       	pop	r28
    320c:	08 95       	ret

0000320e <SetControlOutputs>:

void SetControlOutputs()
{

	if (OvenState == OvenStopped)
    320e:	80 91 e1 24 	lds	r24, 0x24E1	; 0x8024e1 <OvenState>
    3212:	81 11       	cpse	r24, r1
    3214:	1f c0       	rjmp	.+62     	; 0x3254 <SetControlOutputs+0x46>
	{
		FlashBlueOn = false;
    3216:	10 92 dc 24 	sts	0x24DC, r1	; 0x8024dc <FlashBlueOn>
		RLED_OFF;
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
		FAN_OFF;
    3220:	e0 e0       	ldi	r30, 0x00	; 0
    3222:	f6 e0       	ldi	r31, 0x06	; 6
    3224:	80 e2       	ldi	r24, 0x20	; 32
    3226:	86 83       	std	Z+6, r24	; 0x06
		HTOP_OFF;
    3228:	80 e4       	ldi	r24, 0x40	; 64
    322a:	86 83       	std	Z+6, r24	; 0x06
		HBOTTOM_OFF;
    322c:	80 e8       	ldi	r24, 0x80	; 128
    322e:	86 83       	std	Z+6, r24	; 0x06
		
		if (ReflowIsFinished)
    3230:	80 91 da 24 	lds	r24, 0x24DA	; 0x8024da <ReflowIsFinished>
    3234:	88 23       	and	r24, r24
    3236:	39 f0       	breq	.+14     	; 0x3246 <SetControlOutputs+0x38>
		{
			GLED_ON;
    3238:	e0 e2       	ldi	r30, 0x20	; 32
    323a:	f6 e0       	ldi	r31, 0x06	; 6
    323c:	82 e0       	ldi	r24, 0x02	; 2
    323e:	86 83       	std	Z+6, r24	; 0x06
			BLED_OFF;
    3240:	84 e0       	ldi	r24, 0x04	; 4
    3242:	85 83       	std	Z+5, r24	; 0x05
    3244:	08 95       	ret
		}
		else
		{
			BLED_ON;
    3246:	e0 e2       	ldi	r30, 0x20	; 32
    3248:	f6 e0       	ldi	r31, 0x06	; 6
    324a:	84 e0       	ldi	r24, 0x04	; 4
    324c:	86 83       	std	Z+6, r24	; 0x06
			GLED_OFF;
    324e:	82 e0       	ldi	r24, 0x02	; 2
    3250:	85 83       	std	Z+5, r24	; 0x05
    3252:	08 95       	ret
		}
	}
	else
	{
		GLED_OFF;
    3254:	92 e0       	ldi	r25, 0x02	; 2
    3256:	90 93 25 06 	sts	0x0625, r25	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
		FAN_ON;
    325a:	90 e2       	ldi	r25, 0x20	; 32
    325c:	90 93 05 06 	sts	0x0605, r25	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
		
		FlashBlueOn = true;
    3260:	91 e0       	ldi	r25, 0x01	; 1
    3262:	90 93 dc 24 	sts	0x24DC, r25	; 0x8024dc <FlashBlueOn>
		
		if (OvenState == OvenHeating)
    3266:	82 30       	cpi	r24, 0x02	; 2
    3268:	91 f4       	brne	.+36     	; 0x328e <SetControlOutputs+0x80>
		{
			RLED_ON;
    326a:	81 e0       	ldi	r24, 0x01	; 1
    326c:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
			
			if (_includeTopHeater)
    3270:	80 91 d3 24 	lds	r24, 0x24D3	; 0x8024d3 <_includeTopHeater>
    3274:	88 23       	and	r24, r24
    3276:	19 f0       	breq	.+6      	; 0x327e <SetControlOutputs+0x70>
				HTOP_ON;
    3278:	80 e4       	ldi	r24, 0x40	; 64
    327a:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
				
			if (_includeBottomHeater)
    327e:	80 91 d2 24 	lds	r24, 0x24D2	; 0x8024d2 <_includeBottomHeater>
    3282:	88 23       	and	r24, r24
    3284:	89 f0       	breq	.+34     	; 0x32a8 <SetControlOutputs+0x9a>
				HBOTTOM_ON;
    3286:	80 e8       	ldi	r24, 0x80	; 128
    3288:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    328c:	08 95       	ret
		}
		else
		{
			_includeTopHeater = false;
    328e:	10 92 d3 24 	sts	0x24D3, r1	; 0x8024d3 <_includeTopHeater>
			_includeBottomHeater =  false;
    3292:	10 92 d2 24 	sts	0x24D2, r1	; 0x8024d2 <_includeBottomHeater>
			RLED_OFF;
    3296:	81 e0       	ldi	r24, 0x01	; 1
    3298:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
			HTOP_OFF;
    329c:	e0 e0       	ldi	r30, 0x00	; 0
    329e:	f6 e0       	ldi	r31, 0x06	; 6
    32a0:	80 e4       	ldi	r24, 0x40	; 64
    32a2:	86 83       	std	Z+6, r24	; 0x06
			HBOTTOM_OFF;
    32a4:	80 e8       	ldi	r24, 0x80	; 128
    32a6:	86 83       	std	Z+6, r24	; 0x06
    32a8:	08 95       	ret

000032aa <StopOven>:
}

void StopOven()
{
	//Turn heaters off.
	OvenState = OvenStopped;	
    32aa:	10 92 e1 24 	sts	0x24E1, r1	; 0x8024e1 <OvenState>
	SetControlOutputs();
    32ae:	af cf       	rjmp	.-162    	; 0x320e <SetControlOutputs>
    32b0:	08 95       	ret

000032b2 <StartOven>:
}

void StartOven()
{

	RunTime = 0;
    32b2:	10 92 8f 2e 	sts	0x2E8F, r1	; 0x802e8f <RunTime>
    32b6:	10 92 90 2e 	sts	0x2E90, r1	; 0x802e90 <RunTime+0x1>
	_raIndex = 0;
    32ba:	10 92 d4 24 	sts	0x24D4, r1	; 0x8024d4 <_raIndex>
	ReflowIsFinished = false;
    32be:	10 92 da 24 	sts	0x24DA, r1	; 0x8024da <ReflowIsFinished>
	MenuMode = NoMenu;
    32c2:	10 92 16 20 	sts	0x2016, r1	; 0x802016 <MenuMode>
	OvenMode = ReflowMode;
    32c6:	81 e0       	ldi	r24, 0x01	; 1
    32c8:	80 93 df 24 	sts	0x24DF, r24	; 0x8024df <OvenMode>
	OvenState = OvenRunning;
    32cc:	80 93 e1 24 	sts	0x24E1, r24	; 0x8024e1 <OvenState>
		
	InitReflowScreen();
    32d0:	ef d7       	rcall	.+4062   	; 0x42b0 <InitReflowScreen>
	SetControlOutputs();
    32d2:	9d cf       	rjmp	.-198    	; 0x320e <SetControlOutputs>
    32d4:	08 95       	ret

000032d6 <GetTargetTemp>:
}

uint16_t GetTargetTemp(uint16_t second)
{
    32d6:	cf 92       	push	r12
    32d8:	df 92       	push	r13
    32da:	ef 92       	push	r14
    32dc:	ff 92       	push	r15
    32de:	0f 93       	push	r16
    32e0:	1f 93       	push	r17
    32e2:	cf 93       	push	r28
    32e4:	df 93       	push	r29
    32e6:	bc 01       	movw	r22, r24
	uint16_t totalSeconds = 0;
	uint16_t segment = 0;
	
	if (second == _lastSecond)
    32e8:	80 91 d7 24 	lds	r24, 0x24D7	; 0x8024d7 <_lastSecond>
    32ec:	90 91 d8 24 	lds	r25, 0x24D8	; 0x8024d8 <_lastSecond+0x1>
    32f0:	68 17       	cp	r22, r24
    32f2:	79 07       	cpc	r23, r25
    32f4:	29 f4       	brne	.+10     	; 0x3300 <GetTargetTemp+0x2a>
		return _lastTemp;
    32f6:	80 91 d5 24 	lds	r24, 0x24D5	; 0x8024d5 <_lastTemp>
    32fa:	90 91 d6 24 	lds	r25, 0x24D6	; 0x8024d6 <_lastTemp+0x1>
    32fe:	6d c0       	rjmp	.+218    	; 0x33da <GetTargetTemp+0x104>
		
	_lastSecond = second;
    3300:	60 93 d7 24 	sts	0x24D7, r22	; 0x8024d7 <_lastSecond>
    3304:	70 93 d8 24 	sts	0x24D8, r23	; 0x8024d8 <_lastSecond+0x1>
	
	for(uint16_t i = 0; i < _totalSegments; i++)
    3308:	80 91 99 2e 	lds	r24, 0x2E99	; 0x802e99 <_totalSegments>
    330c:	90 91 9a 2e 	lds	r25, 0x2E9A	; 0x802e9a <_totalSegments+0x1>
    3310:	00 97       	sbiw	r24, 0x00	; 0
    3312:	09 f4       	brne	.+2      	; 0x3316 <GetTargetTemp+0x40>
    3314:	62 c0       	rjmp	.+196    	; 0x33da <GetTargetTemp+0x104>
	{
		if (second < _times[i])
    3316:	e0 91 95 2e 	lds	r30, 0x2E95	; 0x802e95 <_times>
    331a:	f0 91 96 2e 	lds	r31, 0x2E96	; 0x802e96 <_times+0x1>
    331e:	40 81       	ld	r20, Z
    3320:	51 81       	ldd	r21, Z+1	; 0x01
    3322:	64 17       	cp	r22, r20
    3324:	75 07       	cpc	r23, r21
    3326:	08 f0       	brcs	.+2      	; 0x332a <GetTargetTemp+0x54>
    3328:	4c c0       	rjmp	.+152    	; 0x33c2 <GetTargetTemp+0xec>
    332a:	0a c0       	rjmp	.+20     	; 0x3340 <GetTargetTemp+0x6a>
    332c:	8e 01       	movw	r16, r28
    332e:	00 0f       	add	r16, r16
    3330:	11 1f       	adc	r17, r17
    3332:	21 91       	ld	r18, Z+
    3334:	31 91       	ld	r19, Z+
    3336:	62 17       	cp	r22, r18
    3338:	73 07       	cpc	r23, r19
    333a:	08 f0       	brcs	.+2      	; 0x333e <GetTargetTemp+0x68>
    333c:	46 c0       	rjmp	.+140    	; 0x33ca <GetTargetTemp+0xf4>
    333e:	06 c0       	rjmp	.+12     	; 0x334c <GetTargetTemp+0x76>
    3340:	00 e0       	ldi	r16, 0x00	; 0
    3342:	10 e0       	ldi	r17, 0x00	; 0
	if (second == _lastSecond)
		return _lastTemp;
		
	_lastSecond = second;
	
	for(uint16_t i = 0; i < _totalSegments; i++)
    3344:	c0 e0       	ldi	r28, 0x00	; 0
    3346:	d0 e0       	ldi	r29, 0x00	; 0
	SetControlOutputs();
}

uint16_t GetTargetTemp(uint16_t second)
{
	uint16_t totalSeconds = 0;
    3348:	40 e0       	ldi	r20, 0x00	; 0
    334a:	50 e0       	ldi	r21, 0x00	; 0
	for(uint16_t i = 0; i < _totalSegments; i++)
	{
		if (second < _times[i])
		{
			//Double the temp because we store the temps in multiples of 2 in the profile. e.g. 90 = 180;
			_lastTemp = (((second - totalSeconds) * _rises[i]) + _temps[i]) * 2;				
    334c:	64 1b       	sub	r22, r20
    334e:	75 0b       	sbc	r23, r21
    3350:	80 e0       	ldi	r24, 0x00	; 0
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	0e 94 66 32 	call	0x64cc	; 0x64cc <__floatunsisf>
    3358:	cc 0f       	add	r28, r28
    335a:	dd 1f       	adc	r29, r29
    335c:	cc 0f       	add	r28, r28
    335e:	dd 1f       	adc	r29, r29
    3360:	20 91 9d 2f 	lds	r18, 0x2F9D	; 0x802f9d <_rises>
    3364:	30 91 9e 2f 	lds	r19, 0x2F9E	; 0x802f9e <_rises+0x1>
    3368:	c2 0f       	add	r28, r18
    336a:	d3 1f       	adc	r29, r19
    336c:	28 81       	ld	r18, Y
    336e:	39 81       	ldd	r19, Y+1	; 0x01
    3370:	4a 81       	ldd	r20, Y+2	; 0x02
    3372:	5b 81       	ldd	r21, Y+3	; 0x03
    3374:	0e 94 18 33 	call	0x6630	; 0x6630 <__mulsf3>
    3378:	6b 01       	movw	r12, r22
    337a:	7c 01       	movw	r14, r24
    337c:	80 91 9b 2f 	lds	r24, 0x2F9B	; 0x802f9b <_temps>
    3380:	90 91 9c 2f 	lds	r25, 0x2F9C	; 0x802f9c <_temps+0x1>
    3384:	fc 01       	movw	r30, r24
    3386:	e0 0f       	add	r30, r16
    3388:	f1 1f       	adc	r31, r17
    338a:	80 81       	ld	r24, Z
    338c:	91 81       	ldd	r25, Z+1	; 0x01
    338e:	bc 01       	movw	r22, r24
    3390:	80 e0       	ldi	r24, 0x00	; 0
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	0e 94 66 32 	call	0x64cc	; 0x64cc <__floatunsisf>
    3398:	9b 01       	movw	r18, r22
    339a:	ac 01       	movw	r20, r24
    339c:	c7 01       	movw	r24, r14
    339e:	b6 01       	movw	r22, r12
    33a0:	0e 94 65 31 	call	0x62ca	; 0x62ca <__addsf3>
    33a4:	9b 01       	movw	r18, r22
    33a6:	ac 01       	movw	r20, r24
    33a8:	0e 94 65 31 	call	0x62ca	; 0x62ca <__addsf3>
    33ac:	0e 94 3a 32 	call	0x6474	; 0x6474 <__fixunssfsi>
    33b0:	60 93 d5 24 	sts	0x24D5, r22	; 0x8024d5 <_lastTemp>
    33b4:	70 93 d6 24 	sts	0x24D6, r23	; 0x8024d6 <_lastTemp+0x1>
			return _lastTemp;
    33b8:	80 91 d5 24 	lds	r24, 0x24D5	; 0x8024d5 <_lastTemp>
    33bc:	90 91 d6 24 	lds	r25, 0x24D6	; 0x8024d6 <_lastTemp+0x1>
    33c0:	0c c0       	rjmp	.+24     	; 0x33da <GetTargetTemp+0x104>
    33c2:	32 96       	adiw	r30, 0x02	; 2
		
	_lastSecond = second;
	
	for(uint16_t i = 0; i < _totalSegments; i++)
	{
		if (second < _times[i])
    33c4:	c0 e0       	ldi	r28, 0x00	; 0
    33c6:	d0 e0       	ldi	r29, 0x00	; 0
    33c8:	01 c0       	rjmp	.+2      	; 0x33cc <GetTargetTemp+0xf6>
    33ca:	a9 01       	movw	r20, r18
	if (second == _lastSecond)
		return _lastTemp;
		
	_lastSecond = second;
	
	for(uint16_t i = 0; i < _totalSegments; i++)
    33cc:	21 96       	adiw	r28, 0x01	; 1
    33ce:	c8 17       	cp	r28, r24
    33d0:	d9 07       	cpc	r29, r25
    33d2:	09 f0       	breq	.+2      	; 0x33d6 <GetTargetTemp+0x100>
    33d4:	ab cf       	rjmp	.-170    	; 0x332c <GetTargetTemp+0x56>
		}
		totalSeconds = _times[i];
	}
	
	
	return 0;
    33d6:	80 e0       	ldi	r24, 0x00	; 0
    33d8:	90 e0       	ldi	r25, 0x00	; 0
}
    33da:	df 91       	pop	r29
    33dc:	cf 91       	pop	r28
    33de:	1f 91       	pop	r17
    33e0:	0f 91       	pop	r16
    33e2:	ff 90       	pop	r15
    33e4:	ef 90       	pop	r14
    33e6:	df 90       	pop	r13
    33e8:	cf 90       	pop	r12
    33ea:	08 95       	ret

000033ec <GetProfileTempRange>:
{
	uint16_t max = 0;
	
	for(uint16_t i = MAX_NAME_SIZE + 1; i < PROFILE_BYTES; i+=2 )
	{
		if (Profile[i - 1] == 0)
    33ec:	80 91 a7 2e 	lds	r24, 0x2EA7	; 0x802ea7 <Profile+0xc>
    33f0:	81 11       	cpse	r24, r1
    33f2:	18 c0       	rjmp	.+48     	; 0x3424 <GetProfileTempRange+0x38>
    33f4:	12 c0       	rjmp	.+36     	; 0x341a <GetProfileTempRange+0x2e>
    33f6:	df 01       	movw	r26, r30
    33f8:	11 97       	sbiw	r26, 0x01	; 1
    33fa:	9c 91       	ld	r25, X
    33fc:	99 23       	and	r25, r25
    33fe:	79 f0       	breq	.+30     	; 0x341e <GetProfileTempRange+0x32>
		break;
		
		if (Profile[i] * 2 > max)
    3400:	20 81       	ld	r18, Z
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	22 0f       	add	r18, r18
    3406:	33 1f       	adc	r19, r19
    3408:	42 17       	cp	r20, r18
    340a:	53 07       	cpc	r21, r19
    340c:	08 f4       	brcc	.+2      	; 0x3410 <GetProfileTempRange+0x24>
    340e:	a9 01       	movw	r20, r18
    3410:	32 96       	adiw	r30, 0x02	; 2

uint16_t GetProfileTempRange()
{
	uint16_t max = 0;
	
	for(uint16_t i = MAX_NAME_SIZE + 1; i < PROFILE_BYTES; i+=2 )
    3412:	e6 17       	cp	r30, r22
    3414:	f7 07       	cpc	r31, r23
    3416:	79 f7       	brne	.-34     	; 0x33f6 <GetProfileTempRange+0xa>
    3418:	02 c0       	rjmp	.+4      	; 0x341e <GetProfileTempRange+0x32>
	return 0;
}

uint16_t GetProfileTempRange()
{
	uint16_t max = 0;
    341a:	40 e0       	ldi	r20, 0x00	; 0
    341c:	50 e0       	ldi	r21, 0x00	; 0
		
		if (Profile[i] * 2 > max)
		max = Profile[i] * 2;
	}
	
	return max - 25;
    341e:	ca 01       	movw	r24, r20
    3420:	49 97       	sbiw	r24, 0x19	; 25
    3422:	08 95       	ret
	for(uint16_t i = MAX_NAME_SIZE + 1; i < PROFILE_BYTES; i+=2 )
	{
		if (Profile[i - 1] == 0)
		break;
		
		if (Profile[i] * 2 > max)
    3424:	40 91 a8 2e 	lds	r20, 0x2EA8	; 0x802ea8 <Profile+0xd>
    3428:	50 e0       	ldi	r21, 0x00	; 0
    342a:	44 0f       	add	r20, r20
    342c:	55 1f       	adc	r21, r21
    342e:	ea ea       	ldi	r30, 0xAA	; 170
    3430:	fe e2       	ldi	r31, 0x2E	; 46
    3432:	6c e9       	ldi	r22, 0x9C	; 156
    3434:	7f e2       	ldi	r23, 0x2F	; 47
    3436:	df cf       	rjmp	.-66     	; 0x33f6 <GetProfileTempRange+0xa>

00003438 <GetProfileTotalTime>:
{
	uint16_t total = 0;

	for(uint16_t i = MAX_NAME_SIZE; i < PROFILE_BYTES; i+=2 )
	{
		if (Profile[i] == 0)
    3438:	20 91 a7 2e 	lds	r18, 0x2EA7	; 0x802ea7 <Profile+0xc>
    343c:	21 11       	cpse	r18, r1
    343e:	0e c0       	rjmp	.+28     	; 0x345c <GetProfileTotalTime+0x24>
    3440:	0a c0       	rjmp	.+20     	; 0x3456 <GetProfileTotalTime+0x1e>
    3442:	90 81       	ld	r25, Z
    3444:	99 23       	and	r25, r25
    3446:	81 f0       	breq	.+32     	; 0x3468 <GetProfileTotalTime+0x30>
			break;
		
		total += Profile[i];
    3448:	29 0f       	add	r18, r25
    344a:	31 1d       	adc	r19, r1
    344c:	32 96       	adiw	r30, 0x02	; 2

uint16_t GetProfileTotalTime()
{
	uint16_t total = 0;

	for(uint16_t i = MAX_NAME_SIZE; i < PROFILE_BYTES; i+=2 )
    344e:	e4 17       	cp	r30, r20
    3450:	f5 07       	cpc	r31, r21
    3452:	b9 f7       	brne	.-18     	; 0x3442 <GetProfileTotalTime+0xa>
    3454:	09 c0       	rjmp	.+18     	; 0x3468 <GetProfileTotalTime+0x30>
	return max - 25;
}

uint16_t GetProfileTotalTime()
{
	uint16_t total = 0;
    3456:	20 e0       	ldi	r18, 0x00	; 0
    3458:	30 e0       	ldi	r19, 0x00	; 0
    345a:	06 c0       	rjmp	.+12     	; 0x3468 <GetProfileTotalTime+0x30>
	for(uint16_t i = MAX_NAME_SIZE; i < PROFILE_BYTES; i+=2 )
	{
		if (Profile[i] == 0)
			break;
		
		total += Profile[i];
    345c:	30 e0       	ldi	r19, 0x00	; 0
    345e:	e9 ea       	ldi	r30, 0xA9	; 169
    3460:	fe e2       	ldi	r31, 0x2E	; 46
    3462:	4b e9       	ldi	r20, 0x9B	; 155
    3464:	5f e2       	ldi	r21, 0x2F	; 47
    3466:	ed cf       	rjmp	.-38     	; 0x3442 <GetProfileTotalTime+0xa>
	}
	
	return total;
	
}
    3468:	c9 01       	movw	r24, r18
    346a:	08 95       	ret

0000346c <CalculateProfileMetrix>:

void CalculateProfileMetrix()
{
    346c:	3f 92       	push	r3
    346e:	4f 92       	push	r4
    3470:	5f 92       	push	r5
    3472:	6f 92       	push	r6
    3474:	7f 92       	push	r7
    3476:	8f 92       	push	r8
    3478:	9f 92       	push	r9
    347a:	af 92       	push	r10
    347c:	bf 92       	push	r11
    347e:	cf 92       	push	r12
    3480:	df 92       	push	r13
    3482:	ef 92       	push	r14
    3484:	ff 92       	push	r15
    3486:	0f 93       	push	r16
    3488:	1f 93       	push	r17
    348a:	cf 93       	push	r28
    348c:	df 93       	push	r29
	uint16_t totalTime = 0;
	uint16_t lastTemp = ROOMTEMPC;
	uint16_t timei2;
	uint16_t tempi2;
	
	_totalSegments = 0;
    348e:	10 92 99 2e 	sts	0x2E99, r1	; 0x802e99 <_totalSegments>
    3492:	10 92 9a 2e 	sts	0x2E9A, r1	; 0x802e9a <_totalSegments+0x1>
	
	while(Profile[MAX_NAME_SIZE + (_totalSegments * 2)] > 0 && _totalSegments * 2 < PROFILE_BYTES - MAX_NAME_SIZE)
    3496:	80 91 a7 2e 	lds	r24, 0x2EA7	; 0x802ea7 <Profile+0xc>
    349a:	88 23       	and	r24, r24
    349c:	79 f0       	breq	.+30     	; 0x34bc <CalculateProfileMetrix+0x50>
    349e:	e9 ea       	ldi	r30, 0xA9	; 169
    34a0:	fe e2       	ldi	r31, 0x2E	; 46
    34a2:	80 e0       	ldi	r24, 0x00	; 0
    34a4:	90 e0       	ldi	r25, 0x00	; 0
	{
		_totalSegments++;
    34a6:	01 96       	adiw	r24, 0x01	; 1
	uint16_t timei2;
	uint16_t tempi2;
	
	_totalSegments = 0;
	
	while(Profile[MAX_NAME_SIZE + (_totalSegments * 2)] > 0 && _totalSegments * 2 < PROFILE_BYTES - MAX_NAME_SIZE)
    34a8:	20 81       	ld	r18, Z
    34aa:	21 11       	cpse	r18, r1
    34ac:	05 c0       	rjmp	.+10     	; 0x34b8 <CalculateProfileMetrix+0x4c>
    34ae:	80 93 99 2e 	sts	0x2E99, r24	; 0x802e99 <_totalSegments>
    34b2:	90 93 9a 2e 	sts	0x2E9A, r25	; 0x802e9a <_totalSegments+0x1>
    34b6:	02 c0       	rjmp	.+4      	; 0x34bc <CalculateProfileMetrix+0x50>
    34b8:	32 96       	adiw	r30, 0x02	; 2
    34ba:	f5 cf       	rjmp	.-22     	; 0x34a6 <CalculateProfileMetrix+0x3a>
	{
		_totalSegments++;
	}
	
	free(_rises);
    34bc:	80 91 9d 2f 	lds	r24, 0x2F9D	; 0x802f9d <_rises>
    34c0:	90 91 9e 2f 	lds	r25, 0x2F9E	; 0x802f9e <_rises+0x1>
    34c4:	0e 94 56 34 	call	0x68ac	; 0x68ac <free>
	free(_times);
    34c8:	80 91 95 2e 	lds	r24, 0x2E95	; 0x802e95 <_times>
    34cc:	90 91 96 2e 	lds	r25, 0x2E96	; 0x802e96 <_times+0x1>
    34d0:	0e 94 56 34 	call	0x68ac	; 0x68ac <free>
	free(_temps);
    34d4:	80 91 9b 2f 	lds	r24, 0x2F9B	; 0x802f9b <_temps>
    34d8:	90 91 9c 2f 	lds	r25, 0x2F9C	; 0x802f9c <_temps+0x1>
    34dc:	0e 94 56 34 	call	0x68ac	; 0x68ac <free>
	
	_rises = (float *)calloc(sizeof(float), _totalSegments);
    34e0:	c0 91 99 2e 	lds	r28, 0x2E99	; 0x802e99 <_totalSegments>
    34e4:	d0 91 9a 2e 	lds	r29, 0x2E9A	; 0x802e9a <_totalSegments+0x1>
    34e8:	be 01       	movw	r22, r28
    34ea:	84 e0       	ldi	r24, 0x04	; 4
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	0e 94 a7 33 	call	0x674e	; 0x674e <calloc>
    34f2:	80 93 9d 2f 	sts	0x2F9D, r24	; 0x802f9d <_rises>
    34f6:	90 93 9e 2f 	sts	0x2F9E, r25	; 0x802f9e <_rises+0x1>
	_times = (uint16_t *)calloc(2, _totalSegments);
    34fa:	be 01       	movw	r22, r28
    34fc:	82 e0       	ldi	r24, 0x02	; 2
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	0e 94 a7 33 	call	0x674e	; 0x674e <calloc>
    3504:	8c 01       	movw	r16, r24
    3506:	80 93 95 2e 	sts	0x2E95, r24	; 0x802e95 <_times>
    350a:	90 93 96 2e 	sts	0x2E96, r25	; 0x802e96 <_times+0x1>
	_temps = (uint16_t *)calloc(2, _totalSegments);
    350e:	be 01       	movw	r22, r28
    3510:	82 e0       	ldi	r24, 0x02	; 2
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	0e 94 a7 33 	call	0x674e	; 0x674e <calloc>
    3518:	80 93 9b 2f 	sts	0x2F9B, r24	; 0x802f9b <_temps>
    351c:	90 93 9c 2f 	sts	0x2F9C, r25	; 0x802f9c <_temps+0x1>
	
	_times[0] = 0;
    3520:	f8 01       	movw	r30, r16
    3522:	10 82       	st	Z, r1
    3524:	11 82       	std	Z+1, r1	; 0x01
	_temps[0] = 0;
    3526:	fc 01       	movw	r30, r24
    3528:	10 82       	st	Z, r1
    352a:	11 82       	std	Z+1, r1	; 0x01
	for(uint16_t i = 0; i < _totalSegments; i++)
    352c:	80 91 99 2e 	lds	r24, 0x2E99	; 0x802e99 <_totalSegments>
    3530:	90 91 9a 2e 	lds	r25, 0x2E9A	; 0x802e9a <_totalSegments+0x1>
    3534:	89 2b       	or	r24, r25
    3536:	09 f4       	brne	.+2      	; 0x353a <CalculateProfileMetrix+0xce>
    3538:	66 c0       	rjmp	.+204    	; 0x3606 <CalculateProfileMetrix+0x19a>
    353a:	0f 2e       	mov	r0, r31
    353c:	f8 ea       	ldi	r31, 0xA8	; 168
    353e:	ef 2e       	mov	r14, r31
    3540:	fe e2       	ldi	r31, 0x2E	; 46
    3542:	ff 2e       	mov	r15, r31
    3544:	f0 2d       	mov	r31, r0
    3546:	00 e0       	ldi	r16, 0x00	; 0
    3548:	10 e0       	ldi	r17, 0x00	; 0
    354a:	a1 2c       	mov	r10, r1
    354c:	b1 2c       	mov	r11, r1
    354e:	c4 e1       	ldi	r28, 0x14	; 20
    3550:	d0 e0       	ldi	r29, 0x00	; 0
    3552:	c1 2c       	mov	r12, r1
    3554:	d1 2c       	mov	r13, r1
    3556:	f7 01       	movw	r30, r14
    3558:	31 97       	sbiw	r30, 0x01	; 1
	{
		timei2 = (i * 2) + MAX_NAME_SIZE;
		tempi2 = timei2 + 1;
		
		totalTime += Profile[timei2];
    355a:	30 80       	ld	r3, Z
    355c:	c3 0c       	add	r12, r3
    355e:	d1 1c       	adc	r13, r1
				
		// rise = temp/time
		_rises[i] = ((float)Profile[tempi2] - (float)lastTemp) / (float)Profile[timei2];
    3560:	c8 01       	movw	r24, r16
    3562:	88 0f       	add	r24, r24
    3564:	99 1f       	adc	r25, r25
    3566:	80 90 9d 2f 	lds	r8, 0x2F9D	; 0x802f9d <_rises>
    356a:	90 90 9e 2f 	lds	r9, 0x2F9E	; 0x802f9e <_rises+0x1>
    356e:	88 0e       	add	r8, r24
    3570:	99 1e       	adc	r9, r25
    3572:	f7 01       	movw	r30, r14
    3574:	60 81       	ld	r22, Z
    3576:	70 e0       	ldi	r23, 0x00	; 0
    3578:	80 e0       	ldi	r24, 0x00	; 0
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	0e 94 66 32 	call	0x64cc	; 0x64cc <__floatunsisf>
    3580:	2b 01       	movw	r4, r22
    3582:	3c 01       	movw	r6, r24
    3584:	be 01       	movw	r22, r28
    3586:	80 e0       	ldi	r24, 0x00	; 0
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	0e 94 66 32 	call	0x64cc	; 0x64cc <__floatunsisf>
    358e:	9b 01       	movw	r18, r22
    3590:	ac 01       	movw	r20, r24
    3592:	c3 01       	movw	r24, r6
    3594:	b2 01       	movw	r22, r4
    3596:	0e 94 64 31 	call	0x62c8	; 0x62c8 <__subsf3>
    359a:	2b 01       	movw	r4, r22
    359c:	3c 01       	movw	r6, r24
    359e:	63 2d       	mov	r22, r3
    35a0:	70 e0       	ldi	r23, 0x00	; 0
    35a2:	80 e0       	ldi	r24, 0x00	; 0
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	0e 94 66 32 	call	0x64cc	; 0x64cc <__floatunsisf>
    35aa:	9b 01       	movw	r18, r22
    35ac:	ac 01       	movw	r20, r24
    35ae:	c3 01       	movw	r24, r6
    35b0:	b2 01       	movw	r22, r4
    35b2:	0e 94 cd 31 	call	0x639a	; 0x639a <__divsf3>
    35b6:	f4 01       	movw	r30, r8
    35b8:	60 83       	st	Z, r22
    35ba:	71 83       	std	Z+1, r23	; 0x01
    35bc:	82 83       	std	Z+2, r24	; 0x02
    35be:	93 83       	std	Z+3, r25	; 0x03
		_times[i] = totalTime;
    35c0:	e0 91 95 2e 	lds	r30, 0x2E95	; 0x802e95 <_times>
    35c4:	f0 91 96 2e 	lds	r31, 0x2E96	; 0x802e96 <_times+0x1>
    35c8:	e0 0f       	add	r30, r16
    35ca:	f1 1f       	adc	r31, r17
    35cc:	c0 82       	st	Z, r12
    35ce:	d1 82       	std	Z+1, r13	; 0x01
		_temps[i] = lastTemp;
    35d0:	e0 91 9b 2f 	lds	r30, 0x2F9B	; 0x802f9b <_temps>
    35d4:	f0 91 9c 2f 	lds	r31, 0x2F9C	; 0x802f9c <_temps+0x1>
    35d8:	e0 0f       	add	r30, r16
    35da:	f1 1f       	adc	r31, r17
    35dc:	c0 83       	st	Z, r28
    35de:	d1 83       	std	Z+1, r29	; 0x01
		
		lastTemp = Profile[tempi2];
    35e0:	f7 01       	movw	r30, r14
    35e2:	c0 81       	ld	r28, Z
    35e4:	d0 e0       	ldi	r29, 0x00	; 0
	_times = (uint16_t *)calloc(2, _totalSegments);
	_temps = (uint16_t *)calloc(2, _totalSegments);
	
	_times[0] = 0;
	_temps[0] = 0;
	for(uint16_t i = 0; i < _totalSegments; i++)
    35e6:	ff ef       	ldi	r31, 0xFF	; 255
    35e8:	af 1a       	sub	r10, r31
    35ea:	bf 0a       	sbc	r11, r31
    35ec:	0e 5f       	subi	r16, 0xFE	; 254
    35ee:	1f 4f       	sbci	r17, 0xFF	; 255
    35f0:	82 e0       	ldi	r24, 0x02	; 2
    35f2:	e8 0e       	add	r14, r24
    35f4:	f1 1c       	adc	r15, r1
    35f6:	80 91 99 2e 	lds	r24, 0x2E99	; 0x802e99 <_totalSegments>
    35fa:	90 91 9a 2e 	lds	r25, 0x2E9A	; 0x802e9a <_totalSegments+0x1>
    35fe:	a8 16       	cp	r10, r24
    3600:	b9 06       	cpc	r11, r25
    3602:	08 f4       	brcc	.+2      	; 0x3606 <CalculateProfileMetrix+0x19a>
    3604:	a8 cf       	rjmp	.-176    	; 0x3556 <CalculateProfileMetrix+0xea>
		_temps[i] = lastTemp;
		
		lastTemp = Profile[tempi2];

	}
}
    3606:	df 91       	pop	r29
    3608:	cf 91       	pop	r28
    360a:	1f 91       	pop	r17
    360c:	0f 91       	pop	r16
    360e:	ff 90       	pop	r15
    3610:	ef 90       	pop	r14
    3612:	df 90       	pop	r13
    3614:	cf 90       	pop	r12
    3616:	bf 90       	pop	r11
    3618:	af 90       	pop	r10
    361a:	9f 90       	pop	r9
    361c:	8f 90       	pop	r8
    361e:	7f 90       	pop	r7
    3620:	6f 90       	pop	r6
    3622:	5f 90       	pop	r5
    3624:	4f 90       	pop	r4
    3626:	3f 90       	pop	r3
    3628:	08 95       	ret

0000362a <SetProfile>:

void SetProfile(uint8_t index)
{
    362a:	80 31       	cpi	r24, 0x10	; 16
    362c:	08 f0       	brcs	.+2      	; 0x3630 <SetProfile+0x6>
    362e:	8f e0       	ldi	r24, 0x0F	; 15
	if (index >= MAX_PROFILES )
	{
		index = MAX_PROFILES - 1;
	}
	
	ProfileNumber = index;
    3630:	80 93 d9 24 	sts	0x24D9, r24	; 0x8024d9 <ProfileNumber>
	
	LoadProfile(index, Profile);
    3634:	6b e9       	ldi	r22, 0x9B	; 155
    3636:	7e e2       	ldi	r23, 0x2E	; 46
    3638:	d2 d2       	rcall	.+1444   	; 0x3bde <LoadProfile>
	
	_lastSecond = 0;
    363a:	10 92 d7 24 	sts	0x24D7, r1	; 0x8024d7 <_lastSecond>
    363e:	10 92 d8 24 	sts	0x24D8, r1	; 0x8024d8 <_lastSecond+0x1>
	_lastTemp = 0;
    3642:	10 92 d5 24 	sts	0x24D5, r1	; 0x8024d5 <_lastTemp>
    3646:	10 92 d6 24 	sts	0x24D6, r1	; 0x8024d6 <_lastTemp+0x1>
	_raIndex = 0;
    364a:	10 92 d4 24 	sts	0x24D4, r1	; 0x8024d4 <_raIndex>
	RunTime = 0;
    364e:	10 92 8f 2e 	sts	0x2E8F, r1	; 0x802e8f <RunTime>
    3652:	10 92 90 2e 	sts	0x2E90, r1	; 0x802e90 <RunTime+0x1>
	MaxTime = GetProfileTotalTime();
    3656:	f0 de       	rcall	.-544    	; 0x3438 <GetProfileTotalTime>
    3658:	80 93 91 2e 	sts	0x2E91, r24	; 0x802e91 <MaxTime>
    365c:	90 93 92 2e 	sts	0x2E92, r25	; 0x802e92 <MaxTime+0x1>
	TempRange = GetProfileTempRange();
    3660:	c5 de       	rcall	.-630    	; 0x33ec <GetProfileTempRange>
    3662:	80 93 97 2e 	sts	0x2E97, r24	; 0x802e97 <TempRange>
    3666:	90 93 98 2e 	sts	0x2E98, r25	; 0x802e98 <TempRange+0x1>
	InitReflowScreen();
    366a:	22 d6       	rcall	.+3140   	; 0x42b0 <InitReflowScreen>
	CalculateProfileMetrix();
    366c:	ff ce       	rjmp	.-514    	; 0x346c <CalculateProfileMetrix>
    366e:	08 95       	ret

00003670 <InitOven>:

}

void InitOven()
{
	OvenMode = ProfileMenuMode;
    3670:	10 92 df 24 	sts	0x24DF, r1	; 0x8024df <OvenMode>
	MenuMode = ProfileMenu;
    3674:	81 e0       	ldi	r24, 0x01	; 1
    3676:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <MenuMode>
	SelectedIndex = 0;
    367a:	10 92 d1 24 	sts	0x24D1, r1	; 0x8024d1 <SelectedIndex>
	SetProfile(SelectedIndex);
    367e:	80 e0       	ldi	r24, 0x00	; 0
    3680:	d4 cf       	rjmp	.-88     	; 0x362a <SetProfile>
    3682:	08 95       	ret

00003684 <UpCommand>:

}

void UpCommand()
{
	if (OvenMode != TestMode)
    3684:	80 91 df 24 	lds	r24, 0x24DF	; 0x8024df <OvenMode>
    3688:	82 30       	cpi	r24, 0x02	; 2
    368a:	09 f0       	breq	.+2      	; 0x368e <UpCommand+0xa>
		MenuUp();	
    368c:	ab cc       	rjmp	.-1706   	; 0x2fe4 <MenuUp>
    368e:	08 95       	ret

00003690 <DownCommand>:
		
}

void DownCommand()
{
	if (OvenMode != TestMode)	
    3690:	80 91 df 24 	lds	r24, 0x24DF	; 0x8024df <OvenMode>
    3694:	82 30       	cpi	r24, 0x02	; 2
    3696:	09 f0       	breq	.+2      	; 0x369a <DownCommand+0xa>
		MenuDown();
    3698:	c8 cc       	rjmp	.-1648   	; 0x302a <MenuDown>
    369a:	08 95       	ret

0000369c <SetCommand>:
}

void SetCommand()
{
	if (OvenMode == ReflowMode)
    369c:	80 91 df 24 	lds	r24, 0x24DF	; 0x8024df <OvenMode>
    36a0:	81 30       	cpi	r24, 0x01	; 1
    36a2:	f9 f4       	brne	.+62     	; 0x36e2 <SetCommand+0x46>
	{
		if (MenuMode == NoMenu)
    36a4:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <MenuMode>
    36a8:	81 11       	cpse	r24, r1
    36aa:	07 c0       	rjmp	.+14     	; 0x36ba <SetCommand+0x1e>
		{
			MenuMode = RunningMenu;
    36ac:	82 e0       	ldi	r24, 0x02	; 2
    36ae:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <MenuMode>
			SelectedIndex = 0;
    36b2:	10 92 d1 24 	sts	0x24D1, r1	; 0x8024d1 <SelectedIndex>
			DrawMenu();
    36b6:	8c cc       	rjmp	.-1768   	; 0x2fd0 <DrawMenu>
			return;
    36b8:	08 95       	ret
		}
		
		if (MenuMode == RunningMenu)
    36ba:	82 30       	cpi	r24, 0x02	; 2
    36bc:	e1 f4       	brne	.+56     	; 0x36f6 <SetCommand+0x5a>
		{
			if (SelectedIndex == 0) //Yes
    36be:	80 91 d1 24 	lds	r24, 0x24D1	; 0x8024d1 <SelectedIndex>
    36c2:	81 11       	cpse	r24, r1
    36c4:	0b c0       	rjmp	.+22     	; 0x36dc <SetCommand+0x40>
			{
				StopOven();				
    36c6:	f1 dd       	rcall	.-1054   	; 0x32aa <StopOven>
				MenuMode = ProfileMenu;
    36c8:	81 e0       	ldi	r24, 0x01	; 1
    36ca:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <MenuMode>
				OvenMode = ProfileMenuMode;
    36ce:	10 92 df 24 	sts	0x24DF, r1	; 0x8024df <OvenMode>
				SelectedIndex = 0;
    36d2:	10 92 d1 24 	sts	0x24D1, r1	; 0x8024d1 <SelectedIndex>
				SetControlOutputs();	
    36d6:	9b dd       	rcall	.-1226   	; 0x320e <SetControlOutputs>
				DrawMenu();
    36d8:	7b cc       	rjmp	.-1802   	; 0x2fd0 <DrawMenu>
    36da:	08 95       	ret
			}
			else
			{
				MenuMode = NoMenu;
    36dc:	10 92 16 20 	sts	0x2016, r1	; 0x802016 <MenuMode>
    36e0:	08 95       	ret
		}	
		
	}
	
	
	if (OvenMode == ProfileMenuMode)
    36e2:	81 11       	cpse	r24, r1
    36e4:	08 c0       	rjmp	.+16     	; 0x36f6 <SetCommand+0x5a>
	{
		MenuMode = NoMenu;
    36e6:	10 92 16 20 	sts	0x2016, r1	; 0x802016 <MenuMode>
		SetProfile(SelectedIndex);
    36ea:	80 91 d1 24 	lds	r24, 0x24D1	; 0x8024d1 <SelectedIndex>
    36ee:	9d df       	rcall	.-198    	; 0x362a <SetProfile>
		OvenMode = ReflowMode;
    36f0:	81 e0       	ldi	r24, 0x01	; 1
    36f2:	80 93 df 24 	sts	0x24DF, r24	; 0x8024df <OvenMode>
    36f6:	08 95       	ret

000036f8 <StartCommand>:
	}
}

void StartCommand()
{
	if (OvenMode != ReflowMode)
    36f8:	80 91 df 24 	lds	r24, 0x24DF	; 0x8024df <OvenMode>
    36fc:	81 30       	cpi	r24, 0x01	; 1
    36fe:	39 f4       	brne	.+14     	; 0x370e <StartCommand+0x16>
		return;
	
	if (OvenState == OvenStopped)
    3700:	80 91 e1 24 	lds	r24, 0x24E1	; 0x8024e1 <OvenState>
    3704:	81 11       	cpse	r24, r1
    3706:	02 c0       	rjmp	.+4      	; 0x370c <StartCommand+0x14>
		StartOven();
    3708:	d4 cd       	rjmp	.-1112   	; 0x32b2 <StartOven>
    370a:	08 95       	ret
	else 
		StopOven();
    370c:	ce cd       	rjmp	.-1124   	; 0x32aa <StopOven>
    370e:	08 95       	ret

00003710 <BackLightToggleCommand>:
}

void BackLightToggleCommand()
{
	if (BackLightOn)
    3710:	80 91 de 24 	lds	r24, 0x24DE	; 0x8024de <BackLightOn>
    3714:	88 23       	and	r24, r24
    3716:	31 f0       	breq	.+12     	; 0x3724 <BackLightToggleCommand+0x14>
	{
		BackLightOn = false;
    3718:	10 92 de 24 	sts	0x24DE, r1	; 0x8024de <BackLightOn>
		BL_OFF;
    371c:	88 e0       	ldi	r24, 0x08	; 8
    371e:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
    3722:	08 95       	ret
	}
	else
	{
		BackLightOn = true;
    3724:	81 e0       	ldi	r24, 0x01	; 1
    3726:	80 93 de 24 	sts	0x24DE, r24	; 0x8024de <BackLightOn>
		_backLightTimer = 0;
    372a:	10 92 93 2e 	sts	0x2E93, r1	; 0x802e93 <_backLightTimer>
    372e:	10 92 94 2e 	sts	0x2E94, r1	; 0x802e94 <_backLightTimer+0x1>
		BL_ON;
    3732:	88 e0       	ldi	r24, 0x08	; 8
    3734:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x700625>
    3738:	08 95       	ret

0000373a <BackLightTimerCheck>:
	
}

void BackLightTimerCheck()
{
	if (_backLightTimer >= BackLightOnTime && BackLightOnTime > 0)	
    373a:	80 91 19 20 	lds	r24, 0x2019	; 0x802019 <BackLightOnTime>
    373e:	90 91 1a 20 	lds	r25, 0x201A	; 0x80201a <BackLightOnTime+0x1>
    3742:	20 91 93 2e 	lds	r18, 0x2E93	; 0x802e93 <_backLightTimer>
    3746:	30 91 94 2e 	lds	r19, 0x2E94	; 0x802e94 <_backLightTimer+0x1>
    374a:	28 17       	cp	r18, r24
    374c:	39 07       	cpc	r19, r25
    374e:	58 f0       	brcs	.+22     	; 0x3766 <BackLightTimerCheck+0x2c>
    3750:	89 2b       	or	r24, r25
    3752:	49 f0       	breq	.+18     	; 0x3766 <BackLightTimerCheck+0x2c>
	{
		BackLightOn = false;
    3754:	10 92 de 24 	sts	0x24DE, r1	; 0x8024de <BackLightOn>
		_backLightTimer = 0;
    3758:	10 92 93 2e 	sts	0x2E93, r1	; 0x802e93 <_backLightTimer>
    375c:	10 92 94 2e 	sts	0x2E94, r1	; 0x802e94 <_backLightTimer+0x1>
		BL_OFF;
    3760:	88 e0       	ldi	r24, 0x08	; 8
    3762:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
	}
	
	if (BackLightOn)
    3766:	80 91 de 24 	lds	r24, 0x24DE	; 0x8024de <BackLightOn>
    376a:	88 23       	and	r24, r24
    376c:	49 f0       	breq	.+18     	; 0x3780 <BackLightTimerCheck+0x46>
	{
		_backLightTimer++;
    376e:	80 91 93 2e 	lds	r24, 0x2E93	; 0x802e93 <_backLightTimer>
    3772:	90 91 94 2e 	lds	r25, 0x2E94	; 0x802e94 <_backLightTimer+0x1>
    3776:	01 96       	adiw	r24, 0x01	; 1
    3778:	80 93 93 2e 	sts	0x2E93, r24	; 0x802e93 <_backLightTimer>
    377c:	90 93 94 2e 	sts	0x2E94, r25	; 0x802e94 <_backLightTimer+0x1>
    3780:	08 95       	ret

00003782 <SoundBuzzer>:
	}
}

void SoundBuzzer()
{
	if (BuzzerOnTime == 0)
    3782:	80 91 17 20 	lds	r24, 0x2017	; 0x802017 <BuzzerOnTime>
    3786:	90 91 18 20 	lds	r25, 0x2018	; 0x802018 <BuzzerOnTime+0x1>
    378a:	89 2b       	or	r24, r25
    378c:	31 f0       	breq	.+12     	; 0x379a <SoundBuzzer+0x18>
		return;
		
	BuzzerOn = true;
    378e:	81 e0       	ldi	r24, 0x01	; 1
    3790:	80 93 dd 24 	sts	0x24DD, r24	; 0x8024dd <BuzzerOn>
	BUZZER_ON;	
    3794:	88 e0       	ldi	r24, 0x08	; 8
    3796:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    379a:	08 95       	ret

0000379c <SilenceBuzzer>:
}

void SilenceBuzzer()
{
	BuzzerOn = false;
    379c:	10 92 dd 24 	sts	0x24DD, r1	; 0x8024dd <BuzzerOn>
	BUZZER_OFF;
    37a0:	88 e0       	ldi	r24, 0x08	; 8
    37a2:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    37a6:	08 95       	ret

000037a8 <ReflowFinished>:

	
void ReflowFinished()	
{

	if (ReflowIsFinished)
    37a8:	80 91 da 24 	lds	r24, 0x24DA	; 0x8024da <ReflowIsFinished>
    37ac:	81 11       	cpse	r24, r1
    37ae:	05 c0       	rjmp	.+10     	; 0x37ba <ReflowFinished+0x12>
		return;
	
	ReflowIsFinished = true;
    37b0:	81 e0       	ldi	r24, 0x01	; 1
    37b2:	80 93 da 24 	sts	0x24DA, r24	; 0x8024da <ReflowIsFinished>
	SetControlOutputs();
    37b6:	2b dd       	rcall	.-1450   	; 0x320e <SetControlOutputs>
	SoundBuzzer();
    37b8:	e4 cf       	rjmp	.-56     	; 0x3782 <SoundBuzzer>
    37ba:	08 95       	ret

000037bc <MeasureAndUpdate>:
}

void MeasureAndUpdate()
{
    37bc:	cf 93       	push	r28
    37be:	df 93       	push	r29
	uint16_t targetTemp = 0;
	uint16_t actualTemp = 0;

	_rollingAverage[_raIndex++] = GetTemp() >> 4;
    37c0:	c0 91 d4 24 	lds	r28, 0x24D4	; 0x8024d4 <_raIndex>
    37c4:	81 e0       	ldi	r24, 0x01	; 1
    37c6:	8c 0f       	add	r24, r28
    37c8:	80 93 d4 24 	sts	0x24D4, r24	; 0x8024d4 <_raIndex>
    37cc:	0e 94 8b 30 	call	0x6116	; 0x6116 <GetTemp>
    37d0:	ec 2f       	mov	r30, r28
    37d2:	f0 e0       	ldi	r31, 0x00	; 0
    37d4:	ee 0f       	add	r30, r30
    37d6:	ff 1f       	adc	r31, r31
    37d8:	e5 58       	subi	r30, 0x85	; 133
    37da:	f1 4d       	sbci	r31, 0xD1	; 209
    37dc:	92 95       	swap	r25
    37de:	82 95       	swap	r24
    37e0:	8f 70       	andi	r24, 0x0F	; 15
    37e2:	89 27       	eor	r24, r25
    37e4:	9f 70       	andi	r25, 0x0F	; 15
    37e6:	89 27       	eor	r24, r25
    37e8:	80 83       	st	Z, r24
    37ea:	91 83       	std	Z+1, r25	; 0x01
	
	if (_raIndex == ROLLING_AVG_SIZE)
    37ec:	80 91 d4 24 	lds	r24, 0x24D4	; 0x8024d4 <_raIndex>
    37f0:	8a 30       	cpi	r24, 0x0A	; 10
    37f2:	11 f4       	brne	.+4      	; 0x37f8 <MeasureAndUpdate+0x3c>
		_raIndex = 0;
    37f4:	10 92 d4 24 	sts	0x24D4, r1	; 0x8024d4 <_raIndex>
    37f8:	eb e7       	ldi	r30, 0x7B	; 123
    37fa:	fe e2       	ldi	r31, 0x2E	; 46
    37fc:	4f e8       	ldi	r20, 0x8F	; 143
    37fe:	5e e2       	ldi	r21, 0x2E	; 46
}

void MeasureAndUpdate()
{
	uint16_t targetTemp = 0;
	uint16_t actualTemp = 0;
    3800:	20 e0       	ldi	r18, 0x00	; 0
    3802:	30 e0       	ldi	r19, 0x00	; 0
	if (_raIndex == ROLLING_AVG_SIZE)
		_raIndex = 0;
	
	for (uint8_t i = 0; i < ROLLING_AVG_SIZE; i++)
	{
		actualTemp += _rollingAverage[i];		
    3804:	81 91       	ld	r24, Z+
    3806:	91 91       	ld	r25, Z+
    3808:	28 0f       	add	r18, r24
    380a:	39 1f       	adc	r19, r25
	_rollingAverage[_raIndex++] = GetTemp() >> 4;
	
	if (_raIndex == ROLLING_AVG_SIZE)
		_raIndex = 0;
	
	for (uint8_t i = 0; i < ROLLING_AVG_SIZE; i++)
    380c:	e4 17       	cp	r30, r20
    380e:	f5 07       	cpc	r31, r21
    3810:	c9 f7       	brne	.-14     	; 0x3804 <MeasureAndUpdate+0x48>
	{
		actualTemp += _rollingAverage[i];		
	}
	
	actualTemp /= ROLLING_AVG_SIZE;
    3812:	ad ec       	ldi	r26, 0xCD	; 205
    3814:	bc ec       	ldi	r27, 0xCC	; 204
    3816:	0e 94 98 33 	call	0x6730	; 0x6730 <__umulhisi3>
    381a:	ec 01       	movw	r28, r24
    381c:	d6 95       	lsr	r29
    381e:	c7 95       	ror	r28
    3820:	d6 95       	lsr	r29
    3822:	c7 95       	ror	r28
    3824:	d6 95       	lsr	r29
    3826:	c7 95       	ror	r28
		
	if (RunTime >= MaxTime && MaxTime > 0)
    3828:	80 91 8f 2e 	lds	r24, 0x2E8F	; 0x802e8f <RunTime>
    382c:	90 91 90 2e 	lds	r25, 0x2E90	; 0x802e90 <RunTime+0x1>
    3830:	20 91 91 2e 	lds	r18, 0x2E91	; 0x802e91 <MaxTime>
    3834:	30 91 92 2e 	lds	r19, 0x2E92	; 0x802e92 <MaxTime+0x1>
    3838:	82 17       	cp	r24, r18
    383a:	93 07       	cpc	r25, r19
    383c:	88 f0       	brcs	.+34     	; 0x3860 <MeasureAndUpdate+0xa4>
    383e:	23 2b       	or	r18, r19
    3840:	79 f0       	breq	.+30     	; 0x3860 <MeasureAndUpdate+0xa4>
	{	
		StopOven();
    3842:	33 dd       	rcall	.-1434   	; 0x32aa <StopOven>
		ReflowFinished();
    3844:	b1 df       	rcall	.-158    	; 0x37a8 <ReflowFinished>
		DrawUpdate(MaxTime, targetTemp, RunTime, actualTemp);
    3846:	40 91 8f 2e 	lds	r20, 0x2E8F	; 0x802e8f <RunTime>
    384a:	50 91 90 2e 	lds	r21, 0x2E90	; 0x802e90 <RunTime+0x1>
    384e:	9e 01       	movw	r18, r28
    3850:	60 e0       	ldi	r22, 0x00	; 0
    3852:	70 e0       	ldi	r23, 0x00	; 0
    3854:	80 91 91 2e 	lds	r24, 0x2E91	; 0x802e91 <MaxTime>
    3858:	90 91 92 2e 	lds	r25, 0x2E92	; 0x802e92 <MaxTime+0x1>
    385c:	e6 d3       	rcall	.+1996   	; 0x402a <DrawUpdate>
		return;		
    385e:	76 c0       	rjmp	.+236    	; 0x394c <MeasureAndUpdate+0x190>
	}

	targetTemp = GetTargetTemp(RunTime);
    3860:	3a dd       	rcall	.-1420   	; 0x32d6 <GetTargetTemp>
	
	//TOP
	if (actualTemp < targetTemp - HYST_LO_TOP_SIZE && OvenState != OvenStopped)
    3862:	9c 01       	movw	r18, r24
    3864:	21 50       	subi	r18, 0x01	; 1
    3866:	31 09       	sbc	r19, r1
    3868:	c2 17       	cp	r28, r18
    386a:	d3 07       	cpc	r29, r19
    386c:	40 f4       	brcc	.+16     	; 0x387e <MeasureAndUpdate+0xc2>
    386e:	20 91 e1 24 	lds	r18, 0x24E1	; 0x8024e1 <OvenState>
    3872:	22 23       	and	r18, r18
    3874:	09 f4       	brne	.+2      	; 0x3878 <MeasureAndUpdate+0xbc>
    3876:	4f c0       	rjmp	.+158    	; 0x3916 <MeasureAndUpdate+0x15a>
	{
		_includeTopHeater = true;
    3878:	21 e0       	ldi	r18, 0x01	; 1
    387a:	20 93 d3 24 	sts	0x24D3, r18	; 0x8024d3 <_includeTopHeater>
	}

	if (actualTemp > targetTemp + HYST_HI_TOP_SIZE && OvenState != OvenStopped)
    387e:	9c 01       	movw	r18, r24
    3880:	2e 5f       	subi	r18, 0xFE	; 254
    3882:	3f 4f       	sbci	r19, 0xFF	; 255
    3884:	2c 17       	cp	r18, r28
    3886:	3d 07       	cpc	r19, r29
    3888:	08 f0       	brcs	.+2      	; 0x388c <MeasureAndUpdate+0xd0>
    388a:	4c c0       	rjmp	.+152    	; 0x3924 <MeasureAndUpdate+0x168>
    388c:	40 91 e1 24 	lds	r20, 0x24E1	; 0x8024e1 <OvenState>
    3890:	44 23       	and	r20, r20
    3892:	81 f0       	breq	.+32     	; 0x38b4 <MeasureAndUpdate+0xf8>
	{
		_includeTopHeater = false;
    3894:	10 92 d3 24 	sts	0x24D3, r1	; 0x8024d3 <_includeTopHeater>
	}

	//BOTTOM	
	if (actualTemp < targetTemp - HYST_LO_BOTTOM_SIZE && OvenState != OvenStopped)
    3898:	c8 17       	cp	r28, r24
    389a:	d9 07       	cpc	r29, r25
    389c:	58 f4       	brcc	.+22     	; 0x38b4 <MeasureAndUpdate+0xf8>
    389e:	40 91 e1 24 	lds	r20, 0x24E1	; 0x8024e1 <OvenState>
    38a2:	44 23       	and	r20, r20
    38a4:	09 f4       	brne	.+2      	; 0x38a8 <MeasureAndUpdate+0xec>
    38a6:	4d c0       	rjmp	.+154    	; 0x3942 <MeasureAndUpdate+0x186>
	{
		_includeBottomHeater = true;
    38a8:	41 e0       	ldi	r20, 0x01	; 1
    38aa:	40 93 d2 24 	sts	0x24D2, r20	; 0x8024d2 <_includeBottomHeater>
	}

	if (actualTemp > targetTemp + HYST_HI_BOTTOM_SIZE && OvenState != OvenStopped)
    38ae:	2c 17       	cp	r18, r28
    38b0:	3d 07       	cpc	r19, r29
    38b2:	30 f4       	brcc	.+12     	; 0x38c0 <MeasureAndUpdate+0x104>
    38b4:	20 91 e1 24 	lds	r18, 0x24E1	; 0x8024e1 <OvenState>
    38b8:	22 23       	and	r18, r18
    38ba:	c9 f1       	breq	.+114    	; 0x392e <MeasureAndUpdate+0x172>
	{
		_includeBottomHeater = false;
    38bc:	10 92 d2 24 	sts	0x24D2, r1	; 0x8024d2 <_includeBottomHeater>
	}
	
	//STATE
	if ((_includeTopHeater || _includeBottomHeater) && OvenState != OvenStopped)
    38c0:	20 91 d3 24 	lds	r18, 0x24D3	; 0x8024d3 <_includeTopHeater>
    38c4:	21 11       	cpse	r18, r1
    38c6:	04 c0       	rjmp	.+8      	; 0x38d0 <MeasureAndUpdate+0x114>
    38c8:	20 91 d2 24 	lds	r18, 0x24D2	; 0x8024d2 <_includeBottomHeater>
    38cc:	22 23       	and	r18, r18
    38ce:	39 f0       	breq	.+14     	; 0x38de <MeasureAndUpdate+0x122>
    38d0:	20 91 e1 24 	lds	r18, 0x24E1	; 0x8024e1 <OvenState>
    38d4:	22 23       	and	r18, r18
    38d6:	19 f0       	breq	.+6      	; 0x38de <MeasureAndUpdate+0x122>
	{
		OvenState = OvenHeating;
    38d8:	22 e0       	ldi	r18, 0x02	; 2
    38da:	20 93 e1 24 	sts	0x24E1, r18	; 0x8024e1 <OvenState>
	}

	if ((!_includeTopHeater && !_includeBottomHeater) && OvenState != OvenStopped)
    38de:	20 91 d3 24 	lds	r18, 0x24D3	; 0x8024d3 <_includeTopHeater>
    38e2:	21 11       	cpse	r18, r1
    38e4:	0b c0       	rjmp	.+22     	; 0x38fc <MeasureAndUpdate+0x140>
    38e6:	20 91 d2 24 	lds	r18, 0x24D2	; 0x8024d2 <_includeBottomHeater>
    38ea:	21 11       	cpse	r18, r1
    38ec:	07 c0       	rjmp	.+14     	; 0x38fc <MeasureAndUpdate+0x140>
    38ee:	20 91 e1 24 	lds	r18, 0x24E1	; 0x8024e1 <OvenState>
    38f2:	22 23       	and	r18, r18
    38f4:	19 f0       	breq	.+6      	; 0x38fc <MeasureAndUpdate+0x140>
	{
		OvenState = OvenRunning;
    38f6:	21 e0       	ldi	r18, 0x01	; 1
    38f8:	20 93 e1 24 	sts	0x24E1, r18	; 0x8024e1 <OvenState>
	}
	
	DrawUpdate(MaxTime, targetTemp, RunTime, actualTemp);
    38fc:	40 91 8f 2e 	lds	r20, 0x2E8F	; 0x802e8f <RunTime>
    3900:	50 91 90 2e 	lds	r21, 0x2E90	; 0x802e90 <RunTime+0x1>
    3904:	9e 01       	movw	r18, r28
    3906:	bc 01       	movw	r22, r24
    3908:	80 91 91 2e 	lds	r24, 0x2E91	; 0x802e91 <MaxTime>
    390c:	90 91 92 2e 	lds	r25, 0x2E92	; 0x802e92 <MaxTime+0x1>
    3910:	8c d3       	rcall	.+1816   	; 0x402a <DrawUpdate>
		
	SetControlOutputs();
    3912:	7d dc       	rcall	.-1798   	; 0x320e <SetControlOutputs>
    3914:	1b c0       	rjmp	.+54     	; 0x394c <MeasureAndUpdate+0x190>
	if (actualTemp < targetTemp - HYST_LO_TOP_SIZE && OvenState != OvenStopped)
	{
		_includeTopHeater = true;
	}

	if (actualTemp > targetTemp + HYST_HI_TOP_SIZE && OvenState != OvenStopped)
    3916:	9c 01       	movw	r18, r24
    3918:	2e 5f       	subi	r18, 0xFE	; 254
    391a:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		_includeTopHeater = false;
	}

	//BOTTOM	
	if (actualTemp < targetTemp - HYST_LO_BOTTOM_SIZE && OvenState != OvenStopped)
    391c:	c8 17       	cp	r28, r24
    391e:	d9 07       	cpc	r29, r25
    3920:	78 f2       	brcs	.-98     	; 0x38c0 <MeasureAndUpdate+0x104>
    3922:	0a c0       	rjmp	.+20     	; 0x3938 <MeasureAndUpdate+0x17c>
    3924:	c8 17       	cp	r28, r24
    3926:	d9 07       	cpc	r29, r25
    3928:	08 f4       	brcc	.+2      	; 0x392c <MeasureAndUpdate+0x170>
    392a:	b9 cf       	rjmp	.-142    	; 0x389e <MeasureAndUpdate+0xe2>
    392c:	c9 cf       	rjmp	.-110    	; 0x38c0 <MeasureAndUpdate+0x104>
	{
		_includeBottomHeater = false;
	}
	
	//STATE
	if ((_includeTopHeater || _includeBottomHeater) && OvenState != OvenStopped)
    392e:	20 91 d3 24 	lds	r18, 0x24D3	; 0x8024d3 <_includeTopHeater>
    3932:	21 11       	cpse	r18, r1
    3934:	d4 cf       	rjmp	.-88     	; 0x38de <MeasureAndUpdate+0x122>
    3936:	c8 cf       	rjmp	.-112    	; 0x38c8 <MeasureAndUpdate+0x10c>
	if (actualTemp < targetTemp - HYST_LO_BOTTOM_SIZE && OvenState != OvenStopped)
	{
		_includeBottomHeater = true;
	}

	if (actualTemp > targetTemp + HYST_HI_BOTTOM_SIZE && OvenState != OvenStopped)
    3938:	2c 17       	cp	r18, r28
    393a:	3d 07       	cpc	r19, r29
    393c:	08 f0       	brcs	.+2      	; 0x3940 <MeasureAndUpdate+0x184>
    393e:	c0 cf       	rjmp	.-128    	; 0x38c0 <MeasureAndUpdate+0x104>
    3940:	f6 cf       	rjmp	.-20     	; 0x392e <MeasureAndUpdate+0x172>
	{
		_includeBottomHeater = false;
	}
	
	//STATE
	if ((_includeTopHeater || _includeBottomHeater) && OvenState != OvenStopped)
    3942:	20 91 d3 24 	lds	r18, 0x24D3	; 0x8024d3 <_includeTopHeater>
    3946:	21 11       	cpse	r18, r1
    3948:	ca cf       	rjmp	.-108    	; 0x38de <MeasureAndUpdate+0x122>
    394a:	be cf       	rjmp	.-132    	; 0x38c8 <MeasureAndUpdate+0x10c>
	}
	
	DrawUpdate(MaxTime, targetTemp, RunTime, actualTemp);
		
	SetControlOutputs();
}
    394c:	df 91       	pop	r29
    394e:	cf 91       	pop	r28
    3950:	08 95       	ret

00003952 <GetSplashScreen>:

void GetSplashScreen(uint8_t * buff)
{
    3952:	ef 92       	push	r14
    3954:	ff 92       	push	r15
    3956:	0f 93       	push	r16
    3958:	1f 93       	push	r17
    395a:	cf 93       	push	r28
    395c:	df 93       	push	r29
    395e:	7c 01       	movw	r14, r24
    3960:	28 e0       	ldi	r18, 0x08	; 8
    3962:	e2 1a       	sub	r14, r18
    3964:	2e ef       	ldi	r18, 0xFE	; 254
    3966:	f2 0a       	sbc	r15, r18
    3968:	ec 01       	movw	r28, r24
    396a:	00 e0       	ldi	r16, 0x00	; 0
    396c:	13 e0       	ldi	r17, 0x03	; 3
    396e:	08 1b       	sub	r16, r24
    3970:	19 0b       	sbc	r17, r25
	for(uint16_t i = 0; i < SCREEN_BYTE_COUNT; i++)
	{
		buff[i] = nvm_eeprom_read_byte(i + 0x300);
    3972:	c8 01       	movw	r24, r16
    3974:	8c 0f       	add	r24, r28
    3976:	9d 1f       	adc	r25, r29
    3978:	0e 94 43 31 	call	0x6286	; 0x6286 <nvm_eeprom_read_byte>
    397c:	89 93       	st	Y+, r24
	SetControlOutputs();
}

void GetSplashScreen(uint8_t * buff)
{
	for(uint16_t i = 0; i < SCREEN_BYTE_COUNT; i++)
    397e:	ce 15       	cp	r28, r14
    3980:	df 05       	cpc	r29, r15
    3982:	b9 f7       	brne	.-18     	; 0x3972 <GetSplashScreen+0x20>
	{
		buff[i] = nvm_eeprom_read_byte(i + 0x300);
	}
	
	return buff;
}
    3984:	df 91       	pop	r29
    3986:	cf 91       	pop	r28
    3988:	1f 91       	pop	r17
    398a:	0f 91       	pop	r16
    398c:	ff 90       	pop	r15
    398e:	ef 90       	pop	r14
    3990:	08 95       	ret

00003992 <DrawTestScreen>:
void DrawTestScreen()
{
    3992:	1f 93       	push	r17
    3994:	cf 93       	push	r28
    3996:	df 93       	push	r29
    3998:	00 d0       	rcall	.+0      	; 0x399a <DrawTestScreen+0x8>
    399a:	00 d0       	rcall	.+0      	; 0x399c <DrawTestScreen+0xa>
    399c:	cd b7       	in	r28, 0x3d	; 61
    399e:	de b7       	in	r29, 0x3e	; 62
	
	uint16_t actualTemp = GetTemp() >> 4;
    39a0:	0e 94 8b 30 	call	0x6116	; 0x6116 <GetTemp>
    39a4:	92 95       	swap	r25
    39a6:	82 95       	swap	r24
    39a8:	8f 70       	andi	r24, 0x0F	; 15
    39aa:	89 27       	eor	r24, r25
    39ac:	9f 70       	andi	r25, 0x0F	; 15
    39ae:	89 27       	eor	r24, r25
	uint8_t aTempOffset = 20;
	uint8_t aTempStr[5];
	uint8_t tempType  = 'c';
    39b0:	23 e6       	ldi	r18, 0x63	; 99
    39b2:	2e 83       	std	Y+6, r18	; 0x06
	
	if (TempType == F)
    39b4:	20 91 e0 24 	lds	r18, 0x24E0	; 0x8024e0 <TempType>
    39b8:	21 30       	cpi	r18, 0x01	; 1
    39ba:	b1 f4       	brne	.+44     	; 0x39e8 <DrawTestScreen+0x56>
	{
		actualTemp = ((float)actualTemp * 1.8) + 32;
    39bc:	bc 01       	movw	r22, r24
    39be:	80 e0       	ldi	r24, 0x00	; 0
    39c0:	90 e0       	ldi	r25, 0x00	; 0
    39c2:	0e 94 66 32 	call	0x64cc	; 0x64cc <__floatunsisf>
    39c6:	26 e6       	ldi	r18, 0x66	; 102
    39c8:	36 e6       	ldi	r19, 0x66	; 102
    39ca:	46 ee       	ldi	r20, 0xE6	; 230
    39cc:	5f e3       	ldi	r21, 0x3F	; 63
    39ce:	0e 94 18 33 	call	0x6630	; 0x6630 <__mulsf3>
    39d2:	20 e0       	ldi	r18, 0x00	; 0
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	40 e0       	ldi	r20, 0x00	; 0
    39d8:	52 e4       	ldi	r21, 0x42	; 66
    39da:	0e 94 65 31 	call	0x62ca	; 0x62ca <__addsf3>
    39de:	0e 94 3a 32 	call	0x6474	; 0x6474 <__fixunssfsi>
    39e2:	cb 01       	movw	r24, r22
		
		tempType = 'f';
    39e4:	26 e6       	ldi	r18, 0x66	; 102
    39e6:	2e 83       	std	Y+6, r18	; 0x06
	}

	if (actualTemp < 100)
    39e8:	84 36       	cpi	r24, 0x64	; 100
    39ea:	91 05       	cpc	r25, r1
    39ec:	10 f4       	brcc	.+4      	; 0x39f2 <DrawTestScreen+0x60>
		aTempOffset = 15;
    39ee:	1f e0       	ldi	r17, 0x0F	; 15
    39f0:	01 c0       	rjmp	.+2      	; 0x39f4 <DrawTestScreen+0x62>
}
void DrawTestScreen()
{
	
	uint16_t actualTemp = GetTemp() >> 4;
	uint8_t aTempOffset = 20;
    39f2:	14 e1       	ldi	r17, 0x14	; 20
    39f4:	4a e0       	ldi	r20, 0x0A	; 10
    39f6:	be 01       	movw	r22, r28
    39f8:	6f 5f       	subi	r22, 0xFF	; 255
    39fa:	7f 4f       	sbci	r23, 0xFF	; 255
    39fc:	0e 94 24 35 	call	0x6a48	; 0x6a48 <__itoa_ncheck>
	if (actualTemp < 100)
		aTempOffset = 15;
	
	itoa(actualTemp, aTempStr, 10);
	
	DrawString("TEST MODE", 0, 0, true);
    3a00:	21 e0       	ldi	r18, 0x01	; 1
    3a02:	40 e0       	ldi	r20, 0x00	; 0
    3a04:	60 e0       	ldi	r22, 0x00	; 0
    3a06:	8e e7       	ldi	r24, 0x7E	; 126
    3a08:	91 e2       	ldi	r25, 0x21	; 33
    3a0a:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
	DrawString(aTempStr, SCREEN_WIDTH - aTempOffset, 0, false);
    3a0e:	64 e5       	ldi	r22, 0x54	; 84
    3a10:	61 1b       	sub	r22, r17
    3a12:	20 e0       	ldi	r18, 0x00	; 0
    3a14:	40 e0       	ldi	r20, 0x00	; 0
    3a16:	ce 01       	movw	r24, r28
    3a18:	01 96       	adiw	r24, 0x01	; 1
    3a1a:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
	DrawString(&tempType, SCREEN_WIDTH - 5, 0, false);
    3a1e:	20 e0       	ldi	r18, 0x00	; 0
    3a20:	40 e0       	ldi	r20, 0x00	; 0
    3a22:	6f e4       	ldi	r22, 0x4F	; 79
    3a24:	ce 01       	movw	r24, r28
    3a26:	06 96       	adiw	r24, 0x06	; 6
    3a28:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
	
	DrawString("RLED ", 0, 8, false);
    3a2c:	20 e0       	ldi	r18, 0x00	; 0
    3a2e:	48 e0       	ldi	r20, 0x08	; 8
    3a30:	60 e0       	ldi	r22, 0x00	; 0
    3a32:	87 e4       	ldi	r24, 0x47	; 71
    3a34:	94 e2       	ldi	r25, 0x24	; 36
    3a36:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
	DrawString("GLED ", 0, 16, false);
    3a3a:	20 e0       	ldi	r18, 0x00	; 0
    3a3c:	40 e1       	ldi	r20, 0x10	; 16
    3a3e:	60 e0       	ldi	r22, 0x00	; 0
    3a40:	8d e4       	ldi	r24, 0x4D	; 77
    3a42:	94 e2       	ldi	r25, 0x24	; 36
    3a44:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
	DrawString("BLED ", 0, 24, false);
    3a48:	20 e0       	ldi	r18, 0x00	; 0
    3a4a:	48 e1       	ldi	r20, 0x18	; 24
    3a4c:	60 e0       	ldi	r22, 0x00	; 0
    3a4e:	83 e5       	ldi	r24, 0x53	; 83
    3a50:	94 e2       	ldi	r25, 0x24	; 36
    3a52:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
	DrawString("BkLt ", 0, 32, false);
    3a56:	20 e0       	ldi	r18, 0x00	; 0
    3a58:	40 e2       	ldi	r20, 0x20	; 32
    3a5a:	60 e0       	ldi	r22, 0x00	; 0
    3a5c:	89 e5       	ldi	r24, 0x59	; 89
    3a5e:	94 e2       	ldi	r25, 0x24	; 36
    3a60:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
	
	if (RLED_STATE == 0)
    3a64:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    3a68:	80 fd       	sbrc	r24, 0
    3a6a:	08 c0       	rjmp	.+16     	; 0x3a7c <DrawTestScreen+0xea>
	DrawString("ON", 25, 8, true);
    3a6c:	21 e0       	ldi	r18, 0x01	; 1
    3a6e:	48 e0       	ldi	r20, 0x08	; 8
    3a70:	69 e1       	ldi	r22, 0x19	; 25
    3a72:	81 ec       	ldi	r24, 0xC1	; 193
    3a74:	92 e2       	ldi	r25, 0x22	; 34
    3a76:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
    3a7a:	07 c0       	rjmp	.+14     	; 0x3a8a <DrawTestScreen+0xf8>
	else
	DrawString("OFF", 25, 8, false);
    3a7c:	20 e0       	ldi	r18, 0x00	; 0
    3a7e:	48 e0       	ldi	r20, 0x08	; 8
    3a80:	69 e1       	ldi	r22, 0x19	; 25
    3a82:	88 ec       	ldi	r24, 0xC8	; 200
    3a84:	92 e2       	ldi	r25, 0x22	; 34
    3a86:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
	
	if (GLED_STATE == 0)
    3a8a:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    3a8e:	81 fd       	sbrc	r24, 1
    3a90:	08 c0       	rjmp	.+16     	; 0x3aa2 <DrawTestScreen+0x110>
	DrawString("ON", 25, 16, true);
    3a92:	21 e0       	ldi	r18, 0x01	; 1
    3a94:	40 e1       	ldi	r20, 0x10	; 16
    3a96:	69 e1       	ldi	r22, 0x19	; 25
    3a98:	81 ec       	ldi	r24, 0xC1	; 193
    3a9a:	92 e2       	ldi	r25, 0x22	; 34
    3a9c:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
    3aa0:	07 c0       	rjmp	.+14     	; 0x3ab0 <DrawTestScreen+0x11e>
	else
	DrawString("OFF", 25, 16, false);
    3aa2:	20 e0       	ldi	r18, 0x00	; 0
    3aa4:	40 e1       	ldi	r20, 0x10	; 16
    3aa6:	69 e1       	ldi	r22, 0x19	; 25
    3aa8:	88 ec       	ldi	r24, 0xC8	; 200
    3aaa:	92 e2       	ldi	r25, 0x22	; 34
    3aac:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
	
	if (BLED_STATE == 0)
    3ab0:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    3ab4:	82 fd       	sbrc	r24, 2
    3ab6:	08 c0       	rjmp	.+16     	; 0x3ac8 <DrawTestScreen+0x136>
	DrawString("ON", 25, 24, true);
    3ab8:	21 e0       	ldi	r18, 0x01	; 1
    3aba:	48 e1       	ldi	r20, 0x18	; 24
    3abc:	69 e1       	ldi	r22, 0x19	; 25
    3abe:	81 ec       	ldi	r24, 0xC1	; 193
    3ac0:	92 e2       	ldi	r25, 0x22	; 34
    3ac2:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
    3ac6:	07 c0       	rjmp	.+14     	; 0x3ad6 <DrawTestScreen+0x144>
	else
	DrawString("OFF", 25, 24, false);
    3ac8:	20 e0       	ldi	r18, 0x00	; 0
    3aca:	48 e1       	ldi	r20, 0x18	; 24
    3acc:	69 e1       	ldi	r22, 0x19	; 25
    3ace:	88 ec       	ldi	r24, 0xC8	; 200
    3ad0:	92 e2       	ldi	r25, 0x22	; 34
    3ad2:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
	
	if (BL_STATE != 0)
    3ad6:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x700628>
    3ada:	83 ff       	sbrs	r24, 3
    3adc:	08 c0       	rjmp	.+16     	; 0x3aee <DrawTestScreen+0x15c>
	DrawString("ON", 25, 32, true);
    3ade:	21 e0       	ldi	r18, 0x01	; 1
    3ae0:	40 e2       	ldi	r20, 0x20	; 32
    3ae2:	69 e1       	ldi	r22, 0x19	; 25
    3ae4:	81 ec       	ldi	r24, 0xC1	; 193
    3ae6:	92 e2       	ldi	r25, 0x22	; 34
    3ae8:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
    3aec:	07 c0       	rjmp	.+14     	; 0x3afc <DrawTestScreen+0x16a>
	else
	DrawString("OFF", 25, 32, false);
    3aee:	20 e0       	ldi	r18, 0x00	; 0
    3af0:	40 e2       	ldi	r20, 0x20	; 32
    3af2:	69 e1       	ldi	r22, 0x19	; 25
    3af4:	88 ec       	ldi	r24, 0xC8	; 200
    3af6:	92 e2       	ldi	r25, 0x22	; 34
    3af8:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
	
	DrawString("TopH", 45, 8, false);
    3afc:	20 e0       	ldi	r18, 0x00	; 0
    3afe:	48 e0       	ldi	r20, 0x08	; 8
    3b00:	6d e2       	ldi	r22, 0x2D	; 45
    3b02:	8f e5       	ldi	r24, 0x5F	; 95
    3b04:	94 e2       	ldi	r25, 0x24	; 36
    3b06:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
	DrawString("BtmH", 45, 16, false);
    3b0a:	20 e0       	ldi	r18, 0x00	; 0
    3b0c:	40 e1       	ldi	r20, 0x10	; 16
    3b0e:	6d e2       	ldi	r22, 0x2D	; 45
    3b10:	84 e6       	ldi	r24, 0x64	; 100
    3b12:	94 e2       	ldi	r25, 0x24	; 36
    3b14:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
	DrawString(" Fan", 45, 24, false);
    3b18:	20 e0       	ldi	r18, 0x00	; 0
    3b1a:	48 e1       	ldi	r20, 0x18	; 24
    3b1c:	6d e2       	ldi	r22, 0x2D	; 45
    3b1e:	89 e6       	ldi	r24, 0x69	; 105
    3b20:	94 e2       	ldi	r25, 0x24	; 36
    3b22:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
	DrawString("Buzz", 45, 32, false);
    3b26:	20 e0       	ldi	r18, 0x00	; 0
    3b28:	40 e2       	ldi	r20, 0x20	; 32
    3b2a:	6d e2       	ldi	r22, 0x2D	; 45
    3b2c:	8e e6       	ldi	r24, 0x6E	; 110
    3b2e:	94 e2       	ldi	r25, 0x24	; 36
    3b30:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
	
	if (HTOP_STATE != 0)
    3b34:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    3b38:	86 ff       	sbrs	r24, 6
    3b3a:	08 c0       	rjmp	.+16     	; 0x3b4c <DrawTestScreen+0x1ba>
	DrawString("ON", 70, 8, true);
    3b3c:	21 e0       	ldi	r18, 0x01	; 1
    3b3e:	48 e0       	ldi	r20, 0x08	; 8
    3b40:	66 e4       	ldi	r22, 0x46	; 70
    3b42:	81 ec       	ldi	r24, 0xC1	; 193
    3b44:	92 e2       	ldi	r25, 0x22	; 34
    3b46:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
    3b4a:	07 c0       	rjmp	.+14     	; 0x3b5a <DrawTestScreen+0x1c8>
	else
	DrawString("OFF", 70, 8, false);
    3b4c:	20 e0       	ldi	r18, 0x00	; 0
    3b4e:	48 e0       	ldi	r20, 0x08	; 8
    3b50:	66 e4       	ldi	r22, 0x46	; 70
    3b52:	88 ec       	ldi	r24, 0xC8	; 200
    3b54:	92 e2       	ldi	r25, 0x22	; 34
    3b56:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
	
	if (HBOTTOM_STATE != 0)
    3b5a:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    3b5e:	88 23       	and	r24, r24
    3b60:	44 f4       	brge	.+16     	; 0x3b72 <DrawTestScreen+0x1e0>
	DrawString("ON", 70, 16, true);
    3b62:	21 e0       	ldi	r18, 0x01	; 1
    3b64:	40 e1       	ldi	r20, 0x10	; 16
    3b66:	66 e4       	ldi	r22, 0x46	; 70
    3b68:	81 ec       	ldi	r24, 0xC1	; 193
    3b6a:	92 e2       	ldi	r25, 0x22	; 34
    3b6c:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
    3b70:	07 c0       	rjmp	.+14     	; 0x3b80 <DrawTestScreen+0x1ee>
	else
	DrawString("OFF", 70, 16, false);
    3b72:	20 e0       	ldi	r18, 0x00	; 0
    3b74:	40 e1       	ldi	r20, 0x10	; 16
    3b76:	66 e4       	ldi	r22, 0x46	; 70
    3b78:	88 ec       	ldi	r24, 0xC8	; 200
    3b7a:	92 e2       	ldi	r25, 0x22	; 34
    3b7c:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
	
	if (FAN_STATE != 0)
    3b80:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    3b84:	85 ff       	sbrs	r24, 5
    3b86:	08 c0       	rjmp	.+16     	; 0x3b98 <DrawTestScreen+0x206>
	DrawString("ON", 70, 24, true);
    3b88:	21 e0       	ldi	r18, 0x01	; 1
    3b8a:	48 e1       	ldi	r20, 0x18	; 24
    3b8c:	66 e4       	ldi	r22, 0x46	; 70
    3b8e:	81 ec       	ldi	r24, 0xC1	; 193
    3b90:	92 e2       	ldi	r25, 0x22	; 34
    3b92:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
    3b96:	07 c0       	rjmp	.+14     	; 0x3ba6 <DrawTestScreen+0x214>
	else
	DrawString("OFF", 70, 24, false);
    3b98:	20 e0       	ldi	r18, 0x00	; 0
    3b9a:	48 e1       	ldi	r20, 0x18	; 24
    3b9c:	66 e4       	ldi	r22, 0x46	; 70
    3b9e:	88 ec       	ldi	r24, 0xC8	; 200
    3ba0:	92 e2       	ldi	r25, 0x22	; 34
    3ba2:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
	
	if (BUZZER_STATE != 0)
    3ba6:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    3baa:	83 ff       	sbrs	r24, 3
    3bac:	08 c0       	rjmp	.+16     	; 0x3bbe <DrawTestScreen+0x22c>
	DrawString("ON", 70, 32, true);
    3bae:	21 e0       	ldi	r18, 0x01	; 1
    3bb0:	40 e2       	ldi	r20, 0x20	; 32
    3bb2:	66 e4       	ldi	r22, 0x46	; 70
    3bb4:	81 ec       	ldi	r24, 0xC1	; 193
    3bb6:	92 e2       	ldi	r25, 0x22	; 34
    3bb8:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
    3bbc:	07 c0       	rjmp	.+14     	; 0x3bcc <DrawTestScreen+0x23a>
	else
	DrawString("OFF", 70, 32, false);
    3bbe:	20 e0       	ldi	r18, 0x00	; 0
    3bc0:	40 e2       	ldi	r20, 0x20	; 32
    3bc2:	66 e4       	ldi	r22, 0x46	; 70
    3bc4:	88 ec       	ldi	r24, 0xC8	; 200
    3bc6:	92 e2       	ldi	r25, 0x22	; 34
    3bc8:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
	
	FlushScreenBuffer();	
    3bcc:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <FlushScreenBuffer>
    3bd0:	26 96       	adiw	r28, 0x06	; 6
    3bd2:	cd bf       	out	0x3d, r28	; 61
    3bd4:	de bf       	out	0x3e, r29	; 62
    3bd6:	df 91       	pop	r29
    3bd8:	cf 91       	pop	r28
    3bda:	1f 91       	pop	r17
    3bdc:	08 95       	ret

00003bde <LoadProfile>:
#include "Oven.h"



void LoadProfile(uint8_t index, uint8_t * profile)
{
    3bde:	0f 93       	push	r16
    3be0:	1f 93       	push	r17
    3be2:	cf 93       	push	r28
    3be4:	df 93       	push	r29
    3be6:	cd b7       	in	r28, 0x3d	; 61
    3be8:	de b7       	in	r29, 0x3e	; 62
    3bea:	da 95       	dec	r29
    3bec:	cd bf       	out	0x3d, r28	; 61
    3bee:	de bf       	out	0x3e, r29	; 62
	uint8_t readBuffer[FLASH_PAGE_SIZE];

	memset(profile, 0, PROFILE_BYTES);
    3bf0:	20 e0       	ldi	r18, 0x00	; 0
    3bf2:	31 e0       	ldi	r19, 0x01	; 1
    3bf4:	fb 01       	movw	r30, r22
    3bf6:	a9 01       	movw	r20, r18
    3bf8:	11 92       	st	Z+, r1
    3bfa:	41 50       	subi	r20, 0x01	; 1
    3bfc:	50 40       	sbci	r21, 0x00	; 0
    3bfe:	e1 f7       	brne	.-8      	; 0x3bf8 <LoadProfile+0x1a>

	if (index == 0)
    3c00:	88 23       	and	r24, r24
    3c02:	61 f1       	breq	.+88     	; 0x3c5c <LoadProfile+0x7e>
    3c04:	0c c0       	rjmp	.+24     	; 0x3c1e <LoadProfile+0x40>
		for(uint16_t b = 0; b < FLASH_PAGE_SIZE; b++)
		{
			profile[b] = DefaultProfile[b];
			
			//Load the profile until a time of 0 is found
			if (b >= MAX_NAME_SIZE && b % 2 == 0 && profile[b] == 0)
    3c06:	20 fd       	sbrc	r18, 0
    3c08:	02 c0       	rjmp	.+4      	; 0x3c0e <LoadProfile+0x30>
    3c0a:	99 23       	and	r25, r25
    3c0c:	79 f1       	breq	.+94     	; 0x3c6c <LoadProfile+0x8e>

	memset(profile, 0, PROFILE_BYTES);

	if (index == 0)
	{
		for(uint16_t b = 0; b < FLASH_PAGE_SIZE; b++)
    3c0e:	2f 5f       	subi	r18, 0xFF	; 255
    3c10:	3f 4f       	sbci	r19, 0xFF	; 255
		{
			profile[b] = DefaultProfile[b];
    3c12:	9d 91       	ld	r25, X+
    3c14:	91 93       	st	Z+, r25
			
			//Load the profile until a time of 0 is found
			if (b >= MAX_NAME_SIZE && b % 2 == 0 && profile[b] == 0)
    3c16:	2c 30       	cpi	r18, 0x0C	; 12
    3c18:	31 05       	cpc	r19, r1
    3c1a:	a8 f7       	brcc	.-22     	; 0x3c06 <LoadProfile+0x28>
    3c1c:	f8 cf       	rjmp	.-16     	; 0x3c0e <LoadProfile+0x30>
    3c1e:	8b 01       	movw	r16, r22
		for(uint8_t i = 0; i < PROFILE_SIZE; i++)
		{
			//The math here for the page is set up so we actually start at page 0 for index 1.
			//We multiply by PROFILE_SIZE so that we can start at a profile page boundary (e.g. index = 2, profile size = 2, starting page would be = 2.)
			//We add the index to increment up the pages we need to fill.			
			ReadFlashPage(readBuffer, ((index - 1) * PROFILE_SIZE) + i);
    3c20:	6f ef       	ldi	r22, 0xFF	; 255
    3c22:	68 0f       	add	r22, r24
    3c24:	ce 01       	movw	r24, r28
    3c26:	01 96       	adiw	r24, 0x01	; 1
    3c28:	86 d3       	rcall	.+1804   	; 0x4336 <ReadFlashPage>
    3c2a:	fe 01       	movw	r30, r28
    3c2c:	31 96       	adiw	r30, 0x01	; 1
    3c2e:	d8 01       	movw	r26, r16
			for(uint16_t b = 0; b < FLASH_PAGE_SIZE; b++)
    3c30:	80 e0       	ldi	r24, 0x00	; 0
    3c32:	90 e0       	ldi	r25, 0x00	; 0
			{
				profile[(i * FLASH_PAGE_SIZE) + b] = readBuffer[b];
    3c34:	21 91       	ld	r18, Z+
    3c36:	2d 93       	st	X+, r18
				
				//Load the profile until a time of 0 is found
				if ((i * FLASH_PAGE_SIZE) + b >= MAX_NAME_SIZE && b % 2 == 0 && readBuffer[b] == 0)
    3c38:	8c 30       	cpi	r24, 0x0C	; 12
    3c3a:	91 05       	cpc	r25, r1
    3c3c:	48 f0       	brcs	.+18     	; 0x3c50 <LoadProfile+0x72>
    3c3e:	80 fd       	sbrc	r24, 0
    3c40:	07 c0       	rjmp	.+14     	; 0x3c50 <LoadProfile+0x72>
    3c42:	21 11       	cpse	r18, r1
    3c44:	05 c0       	rjmp	.+10     	; 0x3c50 <LoadProfile+0x72>
				{
					profile[(i * FLASH_PAGE_SIZE) + b + 1] = 0; //Set temp to 0 as well
    3c46:	f8 01       	movw	r30, r16
    3c48:	e8 0f       	add	r30, r24
    3c4a:	f9 1f       	adc	r31, r25
    3c4c:	11 82       	std	Z+1, r1	; 0x01
					return;
    3c4e:	0e c0       	rjmp	.+28     	; 0x3c6c <LoadProfile+0x8e>
		{
			//The math here for the page is set up so we actually start at page 0 for index 1.
			//We multiply by PROFILE_SIZE so that we can start at a profile page boundary (e.g. index = 2, profile size = 2, starting page would be = 2.)
			//We add the index to increment up the pages we need to fill.			
			ReadFlashPage(readBuffer, ((index - 1) * PROFILE_SIZE) + i);
			for(uint16_t b = 0; b < FLASH_PAGE_SIZE; b++)
    3c50:	01 96       	adiw	r24, 0x01	; 1
    3c52:	81 15       	cp	r24, r1
    3c54:	51 e0       	ldi	r21, 0x01	; 1
    3c56:	95 07       	cpc	r25, r21
    3c58:	69 f7       	brne	.-38     	; 0x3c34 <LoadProfile+0x56>
    3c5a:	08 c0       	rjmp	.+16     	; 0x3c6c <LoadProfile+0x8e>

	if (index == 0)
	{
		for(uint16_t b = 0; b < FLASH_PAGE_SIZE; b++)
		{
			profile[b] = DefaultProfile[b];
    3c5c:	fb 01       	movw	r30, r22
    3c5e:	84 e4       	ldi	r24, 0x44	; 68
    3c60:	81 93       	st	Z+, r24
    3c62:	a4 e7       	ldi	r26, 0x74	; 116
    3c64:	b4 e2       	ldi	r27, 0x24	; 36
    3c66:	20 e0       	ldi	r18, 0x00	; 0
    3c68:	30 e0       	ldi	r19, 0x00	; 0
    3c6a:	d1 cf       	rjmp	.-94     	; 0x3c0e <LoadProfile+0x30>
			}
		}
	}

	
}
    3c6c:	d3 95       	inc	r29
    3c6e:	cd bf       	out	0x3d, r28	; 61
    3c70:	de bf       	out	0x3e, r29	; 62
    3c72:	df 91       	pop	r29
    3c74:	cf 91       	pop	r28
    3c76:	1f 91       	pop	r17
    3c78:	0f 91       	pop	r16
    3c7a:	08 95       	ret

00003c7c <GetProfileNames>:

void GetProfileNames(uint8_t * names)
{
    3c7c:	bf 92       	push	r11
    3c7e:	cf 92       	push	r12
    3c80:	df 92       	push	r13
    3c82:	ef 92       	push	r14
    3c84:	ff 92       	push	r15
    3c86:	0f 93       	push	r16
    3c88:	1f 93       	push	r17
    3c8a:	cf 93       	push	r28
    3c8c:	df 93       	push	r29
    3c8e:	cd b7       	in	r28, 0x3d	; 61
    3c90:	de b7       	in	r29, 0x3e	; 62
    3c92:	da 95       	dec	r29
    3c94:	cd bf       	out	0x3d, r28	; 61
    3c96:	de bf       	out	0x3e, r29	; 62
    3c98:	6c 01       	movw	r12, r24
    3c9a:	e1 2c       	mov	r14, r1
    3c9c:	f1 2c       	mov	r15, r1
	uint8_t page[FLASH_PAGE_SIZE];

	//MAX_PROFILES - 1 because we actually fill one slot with the default profile
	for(uint8_t i = 0; i < MAX_PROFILES - 1; i++)
    3c9e:	b1 2c       	mov	r11, r1
    3ca0:	8e 01       	movw	r16, r28
    3ca2:	03 5f       	subi	r16, 0xF3	; 243
    3ca4:	1f 4f       	sbci	r17, 0xFF	; 255
	{	
		ReadFlashPage(page, (i * PROFILE_SIZE));	
    3ca6:	6b 2d       	mov	r22, r11
    3ca8:	ce 01       	movw	r24, r28
    3caa:	01 96       	adiw	r24, 0x01	; 1
    3cac:	44 d3       	rcall	.+1672   	; 0x4336 <ReadFlashPage>
    3cae:	fe 01       	movw	r30, r28
    3cb0:	31 96       	adiw	r30, 0x01	; 1
    3cb2:	d6 01       	movw	r26, r12
    3cb4:	ae 0d       	add	r26, r14
    3cb6:	bf 1d       	adc	r27, r15
		for(uint8_t c = 0; c < MAX_NAME_SIZE; c++)
		{
			if (page[c] == 255)
    3cb8:	91 91       	ld	r25, Z+
    3cba:	9f 3f       	cpi	r25, 0xFF	; 255
    3cbc:	11 f4       	brne	.+4      	; 0x3cc2 <GetProfileNames+0x46>
				names[(i * MAX_NAME_SIZE) + c] = 0;
    3cbe:	1c 92       	st	X, r1
    3cc0:	01 c0       	rjmp	.+2      	; 0x3cc4 <GetProfileNames+0x48>
			else
				names[(i * MAX_NAME_SIZE) + c] = page[c];
    3cc2:	9c 93       	st	X, r25
    3cc4:	11 96       	adiw	r26, 0x01	; 1

	//MAX_PROFILES - 1 because we actually fill one slot with the default profile
	for(uint8_t i = 0; i < MAX_PROFILES - 1; i++)
	{	
		ReadFlashPage(page, (i * PROFILE_SIZE));	
		for(uint8_t c = 0; c < MAX_NAME_SIZE; c++)
    3cc6:	e0 17       	cp	r30, r16
    3cc8:	f1 07       	cpc	r31, r17
    3cca:	b1 f7       	brne	.-20     	; 0x3cb8 <GetProfileNames+0x3c>
void GetProfileNames(uint8_t * names)
{
	uint8_t page[FLASH_PAGE_SIZE];

	//MAX_PROFILES - 1 because we actually fill one slot with the default profile
	for(uint8_t i = 0; i < MAX_PROFILES - 1; i++)
    3ccc:	b3 94       	inc	r11
    3cce:	8c e0       	ldi	r24, 0x0C	; 12
    3cd0:	e8 0e       	add	r14, r24
    3cd2:	f1 1c       	adc	r15, r1
    3cd4:	8f e0       	ldi	r24, 0x0F	; 15
    3cd6:	b8 12       	cpse	r11, r24
    3cd8:	e6 cf       	rjmp	.-52     	; 0x3ca6 <GetProfileNames+0x2a>
			else
				names[(i * MAX_NAME_SIZE) + c] = page[c];
		}
	}
	
}
    3cda:	d3 95       	inc	r29
    3cdc:	cd bf       	out	0x3d, r28	; 61
    3cde:	de bf       	out	0x3e, r29	; 62
    3ce0:	df 91       	pop	r29
    3ce2:	cf 91       	pop	r28
    3ce4:	1f 91       	pop	r17
    3ce6:	0f 91       	pop	r16
    3ce8:	ff 90       	pop	r15
    3cea:	ef 90       	pop	r14
    3cec:	df 90       	pop	r13
    3cee:	cf 90       	pop	r12
    3cf0:	bf 90       	pop	r11
    3cf2:	08 95       	ret

00003cf4 <SaveProfile>:

void SaveProfile(uint8_t index, uint8_t * profile)
{
    3cf4:	1f 93       	push	r17
    3cf6:	cf 93       	push	r28
    3cf8:	df 93       	push	r29
    3cfa:	cd b7       	in	r28, 0x3d	; 61
    3cfc:	de b7       	in	r29, 0x3e	; 62
    3cfe:	da 95       	dec	r29
    3d00:	cd bf       	out	0x3d, r28	; 61
    3d02:	de bf       	out	0x3e, r29	; 62

	uint8_t flashBytes[FLASH_PAGE_SIZE];
	
	if (index == 0 || index >= MAX_PROFILES)
    3d04:	1f ef       	ldi	r17, 0xFF	; 255
    3d06:	18 0f       	add	r17, r24
    3d08:	1f 30       	cpi	r17, 0x0F	; 15
    3d0a:	b8 f4       	brcc	.+46     	; 0x3d3a <SaveProfile+0x46>
		return;
		
	for(uint8_t i = 0; i < PROFILE_SIZE; i++)
	{		
		memset(flashBytes, 0, FLASH_PAGE_SIZE);
    3d0c:	de 01       	movw	r26, r28
    3d0e:	11 96       	adiw	r26, 0x01	; 1
    3d10:	20 e0       	ldi	r18, 0x00	; 0
    3d12:	31 e0       	ldi	r19, 0x01	; 1
    3d14:	fd 01       	movw	r30, r26
    3d16:	c9 01       	movw	r24, r18
    3d18:	11 92       	st	Z+, r1
    3d1a:	01 97       	sbiw	r24, 0x01	; 1
    3d1c:	e9 f7       	brne	.-6      	; 0x3d18 <SaveProfile+0x24>
    3d1e:	fb 01       	movw	r30, r22
    3d20:	9b 01       	movw	r18, r22
    3d22:	33 95       	inc	r19
		
		for(uint16_t b = 0; b < FLASH_PAGE_SIZE; b++)
		{
			flashBytes[b] = profile[(i * PROFILE_BYTES) + b];
    3d24:	91 91       	ld	r25, Z+
    3d26:	9d 93       	st	X+, r25
		
	for(uint8_t i = 0; i < PROFILE_SIZE; i++)
	{		
		memset(flashBytes, 0, FLASH_PAGE_SIZE);
		
		for(uint16_t b = 0; b < FLASH_PAGE_SIZE; b++)
    3d28:	e2 17       	cp	r30, r18
    3d2a:	f3 07       	cpc	r31, r19
    3d2c:	d9 f7       	brne	.-10     	; 0x3d24 <SaveProfile+0x30>
		{
			flashBytes[b] = profile[(i * PROFILE_BYTES) + b];
		}
		
		SP_LoadFlashPage(flashBytes);
    3d2e:	ce 01       	movw	r24, r28
    3d30:	01 96       	adiw	r24, 0x01	; 1
    3d32:	0f 94 04 00 	call	0x20008	; 0x20008 <SP_LoadFlashPage>
		//The math here for the page is set up so we actually start at page 0 for index 1. 
		//We multiply by PROFILE_SIZE so that we can start at a profile page boundary (e.g. index = 2, profile size = 2, starting page would be = 2.)
		//We add the index to increment up the pages we need to fill.
		EraseWriteAppTablePage(((index - 1) * PROFILE_SIZE) + i);		
    3d36:	81 2f       	mov	r24, r17
    3d38:	ed d2       	rcall	.+1498   	; 0x4314 <EraseWriteAppTablePage>
	}
    3d3a:	d3 95       	inc	r29
    3d3c:	cd bf       	out	0x3d, r28	; 61
    3d3e:	de bf       	out	0x3e, r29	; 62
    3d40:	df 91       	pop	r29
    3d42:	cf 91       	pop	r28
    3d44:	1f 91       	pop	r17
    3d46:	08 95       	ret

00003d48 <GenerateProfileGraph>:

uint8_t _buff[SCREEN_BYTE_COUNT];
uint8_t _tempType[2] = "c\0";

void GenerateProfileGraph()
{
    3d48:	2f 92       	push	r2
    3d4a:	3f 92       	push	r3
    3d4c:	4f 92       	push	r4
    3d4e:	5f 92       	push	r5
    3d50:	6f 92       	push	r6
    3d52:	7f 92       	push	r7
    3d54:	8f 92       	push	r8
    3d56:	9f 92       	push	r9
    3d58:	af 92       	push	r10
    3d5a:	bf 92       	push	r11
    3d5c:	cf 92       	push	r12
    3d5e:	df 92       	push	r13
    3d60:	ef 92       	push	r14
    3d62:	ff 92       	push	r15
    3d64:	0f 93       	push	r16
    3d66:	1f 93       	push	r17
    3d68:	cf 93       	push	r28
    3d6a:	df 93       	push	r29
    3d6c:	cd b7       	in	r28, 0x3d	; 61
    3d6e:	de b7       	in	r29, 0x3e	; 62
    3d70:	60 97       	sbiw	r28, 0x10	; 16
    3d72:	cd bf       	out	0x3d, r28	; 61
    3d74:	de bf       	out	0x3e, r29	; 62

    float startTime = 0;
    float startTemp = 0;
	
	memset(_buff, 0, SCREEN_BYTE_COUNT);
    3d76:	88 ef       	ldi	r24, 0xF8	; 248
    3d78:	91 e0       	ldi	r25, 0x01	; 1
    3d7a:	e7 ea       	ldi	r30, 0xA7	; 167
    3d7c:	f0 e3       	ldi	r31, 0x30	; 48
    3d7e:	df 01       	movw	r26, r30
    3d80:	9c 01       	movw	r18, r24
    3d82:	1d 92       	st	X+, r1
    3d84:	21 50       	subi	r18, 0x01	; 1
    3d86:	30 40       	sbci	r19, 0x00	; 0
    3d88:	e1 f7       	brne	.-8      	; 0x3d82 <GenerateProfileGraph+0x3a>
	
	//Start i at MAX_NAME_SIZE to skip the profile name and increment by 2 because each entry is two bytes.
    for(uint16_t i = MAX_NAME_SIZE; i < PROFILE_BYTES; i+=2) 
    {
		if (Profile[i] == 0)
    3d8a:	10 91 a7 2e 	lds	r17, 0x2EA7	; 0x802ea7 <Profile+0xc>
    3d8e:	11 23       	and	r17, r17
    3d90:	09 f4       	brne	.+2      	; 0x3d94 <GenerateProfileGraph+0x4c>
    3d92:	c9 c0       	rjmp	.+402    	; 0x3f26 <GenerateProfileGraph+0x1de>
    3d94:	0f 2e       	mov	r0, r31
    3d96:	f8 ea       	ldi	r31, 0xA8	; 168
    3d98:	2f 2e       	mov	r2, r31
    3d9a:	fe e2       	ldi	r31, 0x2E	; 46
    3d9c:	3f 2e       	mov	r3, r31
    3d9e:	f0 2d       	mov	r31, r0
    3da0:	0f 2e       	mov	r0, r31
    3da2:	f9 ea       	ldi	r31, 0xA9	; 169
    3da4:	cf 2e       	mov	r12, r31
    3da6:	fe e2       	ldi	r31, 0x2E	; 46
    3da8:	df 2e       	mov	r13, r31
    3daa:	f0 2d       	mov	r31, r0
    3dac:	1d 82       	std	Y+5, r1	; 0x05
    3dae:	1e 82       	std	Y+6, r1	; 0x06
    3db0:	1f 82       	std	Y+7, r1	; 0x07
    3db2:	18 86       	std	Y+8, r1	; 0x08
    3db4:	19 82       	std	Y+1, r1	; 0x01
    3db6:	1a 82       	std	Y+2, r1	; 0x02
    3db8:	1b 82       	std	Y+3, r1	; 0x03
    3dba:	1c 82       	std	Y+4, r1	; 0x04
    3dbc:	56 01       	movw	r10, r12
    3dbe:	0b c0       	rjmp	.+22     	; 0x3dd6 <GenerateProfileGraph+0x8e>
    3dc0:	d5 01       	movw	r26, r10
    3dc2:	1c 91       	ld	r17, X
    3dc4:	b2 e0       	ldi	r27, 0x02	; 2
    3dc6:	2b 0e       	add	r2, r27
    3dc8:	31 1c       	adc	r3, r1
    3dca:	e2 e0       	ldi	r30, 0x02	; 2
    3dcc:	ae 0e       	add	r10, r30
    3dce:	b1 1c       	adc	r11, r1
    3dd0:	11 23       	and	r17, r17
    3dd2:	09 f4       	brne	.+2      	; 0x3dd6 <GenerateProfileGraph+0x8e>
    3dd4:	a8 c0       	rjmp	.+336    	; 0x3f26 <GenerateProfileGraph+0x1de>
			return;
	
				
	    BufferLine((int)(startTime * _timeScale), H_S1 - (int)(startTemp * _tempScale),
	    (int)((float)(Profile[i] + startTime) * _timeScale), H_S1 - (int)((float)((Profile[i + 1] * 2) - ROOMTEMPC) * _tempScale),
    3dd6:	80 91 a3 30 	lds	r24, 0x30A3	; 0x8030a3 <_tempScale>
    3dda:	90 91 a4 30 	lds	r25, 0x30A4	; 0x8030a4 <_tempScale+0x1>
    3dde:	a0 91 a5 30 	lds	r26, 0x30A5	; 0x8030a5 <_tempScale+0x2>
    3de2:	b0 91 a6 30 	lds	r27, 0x30A6	; 0x8030a6 <_tempScale+0x3>
    3de6:	89 87       	std	Y+9, r24	; 0x09
    3de8:	9a 87       	std	Y+10, r25	; 0x0a
    3dea:	ab 87       	std	Y+11, r26	; 0x0b
    3dec:	bc 87       	std	Y+12, r27	; 0x0c
    3dee:	80 91 9f 30 	lds	r24, 0x309F	; 0x80309f <_timeScale>
    3df2:	90 91 a0 30 	lds	r25, 0x30A0	; 0x8030a0 <_timeScale+0x1>
    3df6:	a0 91 a1 30 	lds	r26, 0x30A1	; 0x8030a1 <_timeScale+0x2>
    3dfa:	b0 91 a2 30 	lds	r27, 0x30A2	; 0x8030a2 <_timeScale+0x3>
    3dfe:	8d 87       	std	Y+13, r24	; 0x0d
    3e00:	9e 87       	std	Y+14, r25	; 0x0e
    3e02:	af 87       	std	Y+15, r26	; 0x0f
    3e04:	b8 8b       	std	Y+16, r27	; 0x10
    {
		if (Profile[i] == 0)
			return;
	
				
	    BufferLine((int)(startTime * _timeScale), H_S1 - (int)(startTemp * _tempScale),
    3e06:	40 90 a3 30 	lds	r4, 0x30A3	; 0x8030a3 <_tempScale>
    3e0a:	50 90 a4 30 	lds	r5, 0x30A4	; 0x8030a4 <_tempScale+0x1>
    3e0e:	60 90 a5 30 	lds	r6, 0x30A5	; 0x8030a5 <_tempScale+0x2>
    3e12:	70 90 a6 30 	lds	r7, 0x30A6	; 0x8030a6 <_tempScale+0x3>
    3e16:	c0 90 9f 30 	lds	r12, 0x309F	; 0x80309f <_timeScale>
    3e1a:	d0 90 a0 30 	lds	r13, 0x30A0	; 0x8030a0 <_timeScale+0x1>
    3e1e:	e0 90 a1 30 	lds	r14, 0x30A1	; 0x8030a1 <_timeScale+0x2>
    3e22:	f0 90 a2 30 	lds	r15, 0x30A2	; 0x8030a2 <_timeScale+0x3>
	    (int)((float)(Profile[i] + startTime) * _timeScale), H_S1 - (int)((float)((Profile[i + 1] * 2) - ROOMTEMPC) * _tempScale),
    3e26:	d1 01       	movw	r26, r2
    3e28:	6c 91       	ld	r22, X
    3e2a:	70 e0       	ldi	r23, 0x00	; 0
    3e2c:	6a 50       	subi	r22, 0x0A	; 10
    3e2e:	71 09       	sbc	r23, r1
    3e30:	66 0f       	add	r22, r22
    3e32:	77 1f       	adc	r23, r23
    3e34:	07 2e       	mov	r0, r23
    3e36:	00 0c       	add	r0, r0
    3e38:	88 0b       	sbc	r24, r24
    3e3a:	99 0b       	sbc	r25, r25
    3e3c:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__floatsisf>
    3e40:	29 85       	ldd	r18, Y+9	; 0x09
    3e42:	3a 85       	ldd	r19, Y+10	; 0x0a
    3e44:	4b 85       	ldd	r20, Y+11	; 0x0b
    3e46:	5c 85       	ldd	r21, Y+12	; 0x0c
    3e48:	0e 94 18 33 	call	0x6630	; 0x6630 <__mulsf3>
    3e4c:	0e 94 35 32 	call	0x646a	; 0x646a <__fixsfsi>
    {
		if (Profile[i] == 0)
			return;
	
				
	    BufferLine((int)(startTime * _timeScale), H_S1 - (int)(startTemp * _tempScale),
    3e50:	0f 2e       	mov	r0, r31
    3e52:	ff e2       	ldi	r31, 0x2F	; 47
    3e54:	8f 2e       	mov	r8, r31
    3e56:	f0 2d       	mov	r31, r0
    3e58:	86 1a       	sub	r8, r22
	    (int)((float)(Profile[i] + startTime) * _timeScale), H_S1 - (int)((float)((Profile[i + 1] * 2) - ROOMTEMPC) * _tempScale),
    3e5a:	61 2f       	mov	r22, r17
    3e5c:	70 e0       	ldi	r23, 0x00	; 0
    3e5e:	80 e0       	ldi	r24, 0x00	; 0
    3e60:	90 e0       	ldi	r25, 0x00	; 0
    3e62:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__floatsisf>
    3e66:	29 81       	ldd	r18, Y+1	; 0x01
    3e68:	3a 81       	ldd	r19, Y+2	; 0x02
    3e6a:	4b 81       	ldd	r20, Y+3	; 0x03
    3e6c:	5c 81       	ldd	r21, Y+4	; 0x04
    3e6e:	0e 94 65 31 	call	0x62ca	; 0x62ca <__addsf3>
    3e72:	2d 85       	ldd	r18, Y+13	; 0x0d
    3e74:	3e 85       	ldd	r19, Y+14	; 0x0e
    3e76:	4f 85       	ldd	r20, Y+15	; 0x0f
    3e78:	58 89       	ldd	r21, Y+16	; 0x10
    3e7a:	0e 94 18 33 	call	0x6630	; 0x6630 <__mulsf3>
    3e7e:	0e 94 35 32 	call	0x646a	; 0x646a <__fixsfsi>
    3e82:	16 2f       	mov	r17, r22
    {
		if (Profile[i] == 0)
			return;
	
				
	    BufferLine((int)(startTime * _timeScale), H_S1 - (int)(startTemp * _tempScale),
    3e84:	a3 01       	movw	r20, r6
    3e86:	92 01       	movw	r18, r4
    3e88:	6d 81       	ldd	r22, Y+5	; 0x05
    3e8a:	7e 81       	ldd	r23, Y+6	; 0x06
    3e8c:	8f 81       	ldd	r24, Y+7	; 0x07
    3e8e:	98 85       	ldd	r25, Y+8	; 0x08
    3e90:	0e 94 18 33 	call	0x6630	; 0x6630 <__mulsf3>
    3e94:	0e 94 35 32 	call	0x646a	; 0x646a <__fixsfsi>
    3e98:	0f 2e       	mov	r0, r31
    3e9a:	ff e2       	ldi	r31, 0x2F	; 47
    3e9c:	9f 2e       	mov	r9, r31
    3e9e:	f0 2d       	mov	r31, r0
    3ea0:	96 1a       	sub	r9, r22
    3ea2:	a7 01       	movw	r20, r14
    3ea4:	96 01       	movw	r18, r12
    3ea6:	69 81       	ldd	r22, Y+1	; 0x01
    3ea8:	7a 81       	ldd	r23, Y+2	; 0x02
    3eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    3eac:	9c 81       	ldd	r25, Y+4	; 0x04
    3eae:	0e 94 18 33 	call	0x6630	; 0x6630 <__mulsf3>
    3eb2:	0e 94 35 32 	call	0x646a	; 0x646a <__fixsfsi>
    3eb6:	86 2f       	mov	r24, r22
    3eb8:	0f 2e       	mov	r0, r31
    3eba:	f7 ea       	ldi	r31, 0xA7	; 167
    3ebc:	ef 2e       	mov	r14, r31
    3ebe:	f0 e3       	ldi	r31, 0x30	; 48
    3ec0:	ff 2e       	mov	r15, r31
    3ec2:	f0 2d       	mov	r31, r0
    3ec4:	00 e0       	ldi	r16, 0x00	; 0
    3ec6:	28 2d       	mov	r18, r8
    3ec8:	41 2f       	mov	r20, r17
    3eca:	69 2d       	mov	r22, r9
    3ecc:	0e 94 19 11 	call	0x2232	; 0x2232 <BufferLine>
    3ed0:	f1 01       	movw	r30, r2
    3ed2:	31 97       	sbiw	r30, 0x01	; 1
	    (int)((float)(Profile[i] + startTime) * _timeScale), H_S1 - (int)((float)((Profile[i + 1] * 2) - ROOMTEMPC) * _tempScale),
		false, _buff);

	    startTime += Profile[i];
    3ed4:	60 81       	ld	r22, Z
    3ed6:	70 e0       	ldi	r23, 0x00	; 0
    3ed8:	80 e0       	ldi	r24, 0x00	; 0
    3eda:	90 e0       	ldi	r25, 0x00	; 0
    3edc:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__floatsisf>
    3ee0:	9b 01       	movw	r18, r22
    3ee2:	ac 01       	movw	r20, r24
    3ee4:	69 81       	ldd	r22, Y+1	; 0x01
    3ee6:	7a 81       	ldd	r23, Y+2	; 0x02
    3ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    3eea:	9c 81       	ldd	r25, Y+4	; 0x04
    3eec:	0e 94 65 31 	call	0x62ca	; 0x62ca <__addsf3>
    3ef0:	69 83       	std	Y+1, r22	; 0x01
    3ef2:	7a 83       	std	Y+2, r23	; 0x02
    3ef4:	8b 83       	std	Y+3, r24	; 0x03
    3ef6:	9c 83       	std	Y+4, r25	; 0x04
	    startTemp = (Profile[i + 1] * 2) - ROOMTEMPC;
    3ef8:	f1 01       	movw	r30, r2
    3efa:	60 81       	ld	r22, Z
    3efc:	70 e0       	ldi	r23, 0x00	; 0
    3efe:	6a 50       	subi	r22, 0x0A	; 10
    3f00:	71 09       	sbc	r23, r1
    3f02:	66 0f       	add	r22, r22
    3f04:	77 1f       	adc	r23, r23
    3f06:	07 2e       	mov	r0, r23
    3f08:	00 0c       	add	r0, r0
    3f0a:	88 0b       	sbc	r24, r24
    3f0c:	99 0b       	sbc	r25, r25
    3f0e:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__floatsisf>
    3f12:	6d 83       	std	Y+5, r22	; 0x05
    3f14:	7e 83       	std	Y+6, r23	; 0x06
    3f16:	8f 83       	std	Y+7, r24	; 0x07
    3f18:	98 87       	std	Y+8, r25	; 0x08
    float startTemp = 0;
	
	memset(_buff, 0, SCREEN_BYTE_COUNT);
	
	//Start i at MAX_NAME_SIZE to skip the profile name and increment by 2 because each entry is two bytes.
    for(uint16_t i = MAX_NAME_SIZE; i < PROFILE_BYTES; i+=2) 
    3f1a:	fa e9       	ldi	r31, 0x9A	; 154
    3f1c:	2f 16       	cp	r2, r31
    3f1e:	ff e2       	ldi	r31, 0x2F	; 47
    3f20:	3f 06       	cpc	r3, r31
    3f22:	09 f0       	breq	.+2      	; 0x3f26 <GenerateProfileGraph+0x1de>
    3f24:	4d cf       	rjmp	.-358    	; 0x3dc0 <GenerateProfileGraph+0x78>

	    startTime += Profile[i];
	    startTemp = (Profile[i + 1] * 2) - ROOMTEMPC;
    }
	
}
    3f26:	60 96       	adiw	r28, 0x10	; 16
    3f28:	cd bf       	out	0x3d, r28	; 61
    3f2a:	de bf       	out	0x3e, r29	; 62
    3f2c:	df 91       	pop	r29
    3f2e:	cf 91       	pop	r28
    3f30:	1f 91       	pop	r17
    3f32:	0f 91       	pop	r16
    3f34:	ff 90       	pop	r15
    3f36:	ef 90       	pop	r14
    3f38:	df 90       	pop	r13
    3f3a:	cf 90       	pop	r12
    3f3c:	bf 90       	pop	r11
    3f3e:	af 90       	pop	r10
    3f40:	9f 90       	pop	r9
    3f42:	8f 90       	pop	r8
    3f44:	7f 90       	pop	r7
    3f46:	6f 90       	pop	r6
    3f48:	5f 90       	pop	r5
    3f4a:	4f 90       	pop	r4
    3f4c:	3f 90       	pop	r3
    3f4e:	2f 90       	pop	r2
    3f50:	08 95       	ret

00003f52 <DrawTime>:

void DrawTime(uint16_t seconds, uint8_t x, uint8_t y)
{
    3f52:	cf 92       	push	r12
    3f54:	df 92       	push	r13
    3f56:	ef 92       	push	r14
    3f58:	ff 92       	push	r15
    3f5a:	0f 93       	push	r16
    3f5c:	1f 93       	push	r17
    3f5e:	cf 93       	push	r28
    3f60:	df 93       	push	r29
    3f62:	cd b7       	in	r28, 0x3d	; 61
    3f64:	de b7       	in	r29, 0x3e	; 62
    3f66:	2e 97       	sbiw	r28, 0x0e	; 14
    3f68:	cd bf       	out	0x3d, r28	; 61
    3f6a:	de bf       	out	0x3e, r29	; 62
    3f6c:	8c 01       	movw	r16, r24
    3f6e:	d6 2e       	mov	r13, r22
    3f70:	c4 2e       	mov	r12, r20
	uint8_t mins = seconds / 60;
    3f72:	9c 01       	movw	r18, r24
    3f74:	a9 e8       	ldi	r26, 0x89	; 137
    3f76:	b8 e8       	ldi	r27, 0x88	; 136
    3f78:	0e 94 98 33 	call	0x6730	; 0x6730 <__umulhisi3>
    3f7c:	7c 01       	movw	r14, r24
    3f7e:	f6 94       	lsr	r15
    3f80:	e7 94       	ror	r14
    3f82:	f6 94       	lsr	r15
    3f84:	e7 94       	ror	r14
    3f86:	f6 94       	lsr	r15
    3f88:	e7 94       	ror	r14
    3f8a:	f6 94       	lsr	r15
    3f8c:	e7 94       	ror	r14
    3f8e:	f6 94       	lsr	r15
    3f90:	e7 94       	ror	r14
	uint8_t secs = seconds % 60;
    3f92:	2c e3       	ldi	r18, 0x3C	; 60
    3f94:	2e 9d       	mul	r18, r14
    3f96:	c0 01       	movw	r24, r0
    3f98:	2f 9d       	mul	r18, r15
    3f9a:	90 0d       	add	r25, r0
    3f9c:	11 24       	eor	r1, r1
    3f9e:	08 1b       	sub	r16, r24
    3fa0:	19 0b       	sbc	r17, r25
    3fa2:	10 2f       	mov	r17, r16
	uint8_t minStr[4];
	uint8_t secStr[4];
	uint8_t timeStr[6]  = "00:00\0";
    3fa4:	86 e0       	ldi	r24, 0x06	; 6
    3fa6:	ec e8       	ldi	r30, 0x8C	; 140
    3fa8:	f4 e2       	ldi	r31, 0x24	; 36
    3faa:	de 01       	movw	r26, r28
    3fac:	19 96       	adiw	r26, 0x09	; 9
    3fae:	01 90       	ld	r0, Z+
    3fb0:	0d 92       	st	X+, r0
    3fb2:	8a 95       	dec	r24
    3fb4:	e1 f7       	brne	.-8      	; 0x3fae <DrawTime+0x5c>
    3fb6:	4a e0       	ldi	r20, 0x0A	; 10
    3fb8:	be 01       	movw	r22, r28
    3fba:	6f 5f       	subi	r22, 0xFF	; 255
    3fbc:	7f 4f       	sbci	r23, 0xFF	; 255
    3fbe:	8e 2d       	mov	r24, r14
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	0e 94 24 35 	call	0x6a48	; 0x6a48 <__itoa_ncheck>
    3fc6:	4a e0       	ldi	r20, 0x0A	; 10
    3fc8:	be 01       	movw	r22, r28
    3fca:	6b 5f       	subi	r22, 0xFB	; 251
    3fcc:	7f 4f       	sbci	r23, 0xFF	; 255
    3fce:	80 2f       	mov	r24, r16
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	0e 94 24 35 	call	0x6a48	; 0x6a48 <__itoa_ncheck>


	itoa(mins, minStr, 10);
	itoa(secs, secStr, 10);
	
	if (mins < 10)
    3fd6:	89 e0       	ldi	r24, 0x09	; 9
    3fd8:	8e 15       	cp	r24, r14
    3fda:	28 f0       	brcs	.+10     	; 0x3fe6 <DrawTime+0x94>
	{
		timeStr[0] = '0';
    3fdc:	80 e3       	ldi	r24, 0x30	; 48
    3fde:	89 87       	std	Y+9, r24	; 0x09
		timeStr[1] = minStr[0];
    3fe0:	89 81       	ldd	r24, Y+1	; 0x01
    3fe2:	8a 87       	std	Y+10, r24	; 0x0a
    3fe4:	04 c0       	rjmp	.+8      	; 0x3fee <DrawTime+0x9c>
	}
	else
	{
		timeStr[0] = minStr[0];
    3fe6:	89 81       	ldd	r24, Y+1	; 0x01
    3fe8:	89 87       	std	Y+9, r24	; 0x09
		timeStr[1] = minStr[1];
    3fea:	8a 81       	ldd	r24, Y+2	; 0x02
    3fec:	8a 87       	std	Y+10, r24	; 0x0a
	}
	
	if (secs < 10)
    3fee:	1a 30       	cpi	r17, 0x0A	; 10
    3ff0:	28 f4       	brcc	.+10     	; 0x3ffc <DrawTime+0xaa>
	{
		timeStr[3] = '0';
    3ff2:	80 e3       	ldi	r24, 0x30	; 48
    3ff4:	8c 87       	std	Y+12, r24	; 0x0c
		timeStr[4] = secStr[0];
    3ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ff8:	8d 87       	std	Y+13, r24	; 0x0d
    3ffa:	04 c0       	rjmp	.+8      	; 0x4004 <__stack+0x5>
	}
	else
	{
		timeStr[3] = secStr[0];
    3ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ffe:	8c 87       	std	Y+12, r24	; 0x0c
		timeStr[4] = secStr[1];
    4000:	8e 81       	ldd	r24, Y+6	; 0x06
    4002:	8d 87       	std	Y+13, r24	; 0x0d
	}

	DrawString(timeStr, x, y, false);
    4004:	20 e0       	ldi	r18, 0x00	; 0
    4006:	4c 2d       	mov	r20, r12
    4008:	6d 2d       	mov	r22, r13
    400a:	ce 01       	movw	r24, r28
    400c:	09 96       	adiw	r24, 0x09	; 9
    400e:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
}
    4012:	2e 96       	adiw	r28, 0x0e	; 14
    4014:	cd bf       	out	0x3d, r28	; 61
    4016:	de bf       	out	0x3e, r29	; 62
    4018:	df 91       	pop	r29
    401a:	cf 91       	pop	r28
    401c:	1f 91       	pop	r17
    401e:	0f 91       	pop	r16
    4020:	ff 90       	pop	r15
    4022:	ef 90       	pop	r14
    4024:	df 90       	pop	r13
    4026:	cf 90       	pop	r12
    4028:	08 95       	ret

0000402a <DrawUpdate>:

void DrawUpdate(uint16_t targetTime, uint16_t targetTemp, uint16_t actualTime, uint16_t actualTemp)
{
    402a:	2f 92       	push	r2
    402c:	3f 92       	push	r3
    402e:	4f 92       	push	r4
    4030:	5f 92       	push	r5
    4032:	6f 92       	push	r6
    4034:	7f 92       	push	r7
    4036:	8f 92       	push	r8
    4038:	9f 92       	push	r9
    403a:	af 92       	push	r10
    403c:	bf 92       	push	r11
    403e:	cf 92       	push	r12
    4040:	df 92       	push	r13
    4042:	ef 92       	push	r14
    4044:	ff 92       	push	r15
    4046:	0f 93       	push	r16
    4048:	1f 93       	push	r17
    404a:	cf 93       	push	r28
    404c:	df 93       	push	r29
    404e:	cd b7       	in	r28, 0x3d	; 61
    4050:	de b7       	in	r29, 0x3e	; 62
    4052:	60 97       	sbiw	r28, 0x10	; 16
    4054:	cd bf       	out	0x3d, r28	; 61
    4056:	de bf       	out	0x3e, r29	; 62
    4058:	6c 01       	movw	r12, r24
    405a:	1b 01       	movw	r2, r22
    405c:	7a 01       	movw	r14, r20
    405e:	89 01       	movw	r16, r18
	uint16_t remTime = targetTime - actualTime;
	uint8_t tTempOffset = 20;
	uint8_t aTempOffset = 20;
	
	
	if (actualTemp < ROOMTEMPC)
    4060:	24 31       	cpi	r18, 0x14	; 20
    4062:	31 05       	cpc	r19, r1
    4064:	10 f4       	brcc	.+4      	; 0x406a <DrawUpdate+0x40>
		actualTemp = ROOMTEMPC;
    4066:	04 e1       	ldi	r16, 0x14	; 20
    4068:	10 e0       	ldi	r17, 0x00	; 0
	
	if (targetTime < actualTime)
    406a:	ce 14       	cp	r12, r14
    406c:	df 04       	cpc	r13, r15
    406e:	30 f0       	brcs	.+12     	; 0x407c <DrawUpdate+0x52>
void DrawUpdate(uint16_t targetTime, uint16_t targetTemp, uint16_t actualTime, uint16_t actualTemp)
{
	uint16_t aTemp; //should alwasy be C
	uint8_t tTempStr[5];
	uint8_t aTempStr[5];
	uint16_t remTime = targetTime - actualTime;
    4070:	c6 01       	movw	r24, r12
    4072:	8e 19       	sub	r24, r14
    4074:	9f 09       	sbc	r25, r15
    4076:	8d 87       	std	Y+13, r24	; 0x0d
    4078:	9e 87       	std	Y+14, r25	; 0x0e
    407a:	02 c0       	rjmp	.+4      	; 0x4080 <DrawUpdate+0x56>
	
	if (actualTemp < ROOMTEMPC)
		actualTemp = ROOMTEMPC;
	
	if (targetTime < actualTime)
		remTime = 0;
    407c:	1d 86       	std	Y+13, r1	; 0x0d
    407e:	1e 86       	std	Y+14, r1	; 0x0e

	aTemp = actualTemp;
	
	_tempType[0] = 'c';		
    4080:	83 e6       	ldi	r24, 0x63	; 99
    4082:	80 93 1b 20 	sts	0x201B, r24	; 0x80201b <_tempType>
	
	if (TempType == F)
    4086:	80 91 e0 24 	lds	r24, 0x24E0	; 0x8024e0 <TempType>
    408a:	81 30       	cpi	r24, 0x01	; 1
    408c:	69 f5       	brne	.+90     	; 0x40e8 <DrawUpdate+0xbe>
	{
		targetTemp = ((float)targetTemp * 1.8) + 32;
    408e:	b1 01       	movw	r22, r2
    4090:	80 e0       	ldi	r24, 0x00	; 0
    4092:	90 e0       	ldi	r25, 0x00	; 0
    4094:	0e 94 66 32 	call	0x64cc	; 0x64cc <__floatunsisf>
    4098:	26 e6       	ldi	r18, 0x66	; 102
    409a:	36 e6       	ldi	r19, 0x66	; 102
    409c:	46 ee       	ldi	r20, 0xE6	; 230
    409e:	5f e3       	ldi	r21, 0x3F	; 63
    40a0:	0e 94 18 33 	call	0x6630	; 0x6630 <__mulsf3>
    40a4:	20 e0       	ldi	r18, 0x00	; 0
    40a6:	30 e0       	ldi	r19, 0x00	; 0
    40a8:	40 e0       	ldi	r20, 0x00	; 0
    40aa:	52 e4       	ldi	r21, 0x42	; 66
    40ac:	0e 94 65 31 	call	0x62ca	; 0x62ca <__addsf3>
    40b0:	0e 94 3a 32 	call	0x6474	; 0x6474 <__fixunssfsi>
    40b4:	1b 01       	movw	r2, r22
		actualTemp = ((float)actualTemp * 1.8) + 32;
    40b6:	b8 01       	movw	r22, r16
    40b8:	80 e0       	ldi	r24, 0x00	; 0
    40ba:	90 e0       	ldi	r25, 0x00	; 0
    40bc:	0e 94 66 32 	call	0x64cc	; 0x64cc <__floatunsisf>
    40c0:	26 e6       	ldi	r18, 0x66	; 102
    40c2:	36 e6       	ldi	r19, 0x66	; 102
    40c4:	46 ee       	ldi	r20, 0xE6	; 230
    40c6:	5f e3       	ldi	r21, 0x3F	; 63
    40c8:	0e 94 18 33 	call	0x6630	; 0x6630 <__mulsf3>
    40cc:	20 e0       	ldi	r18, 0x00	; 0
    40ce:	30 e0       	ldi	r19, 0x00	; 0
    40d0:	40 e0       	ldi	r20, 0x00	; 0
    40d2:	52 e4       	ldi	r21, 0x42	; 66
    40d4:	0e 94 65 31 	call	0x62ca	; 0x62ca <__addsf3>
    40d8:	0e 94 3a 32 	call	0x6474	; 0x6474 <__fixunssfsi>
    40dc:	6b 87       	std	Y+11, r22	; 0x0b
    40de:	7c 87       	std	Y+12, r23	; 0x0c
	
		_tempType[0] = 'f';		
    40e0:	86 e6       	ldi	r24, 0x66	; 102
    40e2:	80 93 1b 20 	sts	0x201B, r24	; 0x80201b <_tempType>
    40e6:	02 c0       	rjmp	.+4      	; 0x40ec <DrawUpdate+0xc2>
    40e8:	0b 87       	std	Y+11, r16	; 0x0b
    40ea:	1c 87       	std	Y+12, r17	; 0x0c
	}

	if (targetTemp < 100)
    40ec:	94 e6       	ldi	r25, 0x64	; 100
    40ee:	29 16       	cp	r2, r25
    40f0:	31 04       	cpc	r3, r1
    40f2:	18 f4       	brcc	.+6      	; 0x40fa <DrawUpdate+0xd0>
		tTempOffset = 15;
    40f4:	8f e0       	ldi	r24, 0x0F	; 15
    40f6:	8f 87       	std	Y+15, r24	; 0x0f
    40f8:	02 c0       	rjmp	.+4      	; 0x40fe <DrawUpdate+0xd4>
{
	uint16_t aTemp; //should alwasy be C
	uint8_t tTempStr[5];
	uint8_t aTempStr[5];
	uint16_t remTime = targetTime - actualTime;
	uint8_t tTempOffset = 20;
    40fa:	94 e1       	ldi	r25, 0x14	; 20
    40fc:	9f 87       	std	Y+15, r25	; 0x0f
	}

	if (targetTemp < 100)
		tTempOffset = 15;
		
	if (actualTemp < 100)
    40fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    4100:	9c 85       	ldd	r25, Y+12	; 0x0c
    4102:	84 36       	cpi	r24, 0x64	; 100
    4104:	91 05       	cpc	r25, r1
    4106:	18 f4       	brcc	.+6      	; 0x410e <DrawUpdate+0xe4>
		aTempOffset = 15;
    4108:	9f e0       	ldi	r25, 0x0F	; 15
    410a:	98 8b       	std	Y+16, r25	; 0x10
    410c:	02 c0       	rjmp	.+4      	; 0x4112 <DrawUpdate+0xe8>
	uint16_t aTemp; //should alwasy be C
	uint8_t tTempStr[5];
	uint8_t aTempStr[5];
	uint16_t remTime = targetTime - actualTime;
	uint8_t tTempOffset = 20;
	uint8_t aTempOffset = 20;
    410e:	84 e1       	ldi	r24, 0x14	; 20
    4110:	88 8b       	std	Y+16, r24	; 0x10
    4112:	4a e0       	ldi	r20, 0x0A	; 10
    4114:	be 01       	movw	r22, r28
    4116:	6f 5f       	subi	r22, 0xFF	; 255
    4118:	7f 4f       	sbci	r23, 0xFF	; 255
    411a:	c1 01       	movw	r24, r2
    411c:	0e 94 24 35 	call	0x6a48	; 0x6a48 <__itoa_ncheck>
    4120:	4a e0       	ldi	r20, 0x0A	; 10
    4122:	be 01       	movw	r22, r28
    4124:	6a 5f       	subi	r22, 0xFA	; 250
    4126:	7f 4f       	sbci	r23, 0xFF	; 255
    4128:	8b 85       	ldd	r24, Y+11	; 0x0b
    412a:	9c 85       	ldd	r25, Y+12	; 0x0c
    412c:	0e 94 24 35 	call	0x6a48	; 0x6a48 <__itoa_ncheck>
		aTempOffset = 15;

	itoa(targetTemp, tTempStr, 10);
	itoa(actualTemp, aTempStr, 10);
	
	BufferPixel(actualTime * _timeScale, H_S1 - ((aTemp  - ROOMTEMPC) * _tempScale) - VOFFSET, false, _buff);
    4130:	80 90 a3 30 	lds	r8, 0x30A3	; 0x8030a3 <_tempScale>
    4134:	90 90 a4 30 	lds	r9, 0x30A4	; 0x8030a4 <_tempScale+0x1>
    4138:	a0 90 a5 30 	lds	r10, 0x30A5	; 0x8030a5 <_tempScale+0x2>
    413c:	b0 90 a6 30 	lds	r11, 0x30A6	; 0x8030a6 <_tempScale+0x3>
    4140:	40 90 9f 30 	lds	r4, 0x309F	; 0x80309f <_timeScale>
    4144:	50 90 a0 30 	lds	r5, 0x30A0	; 0x8030a0 <_timeScale+0x1>
    4148:	60 90 a1 30 	lds	r6, 0x30A1	; 0x8030a1 <_timeScale+0x2>
    414c:	70 90 a2 30 	lds	r7, 0x30A2	; 0x8030a2 <_timeScale+0x3>
    4150:	b8 01       	movw	r22, r16
    4152:	64 51       	subi	r22, 0x14	; 20
    4154:	71 09       	sbc	r23, r1
    4156:	80 e0       	ldi	r24, 0x00	; 0
    4158:	90 e0       	ldi	r25, 0x00	; 0
    415a:	0e 94 66 32 	call	0x64cc	; 0x64cc <__floatunsisf>
    415e:	a5 01       	movw	r20, r10
    4160:	94 01       	movw	r18, r8
    4162:	0e 94 18 33 	call	0x6630	; 0x6630 <__mulsf3>
    4166:	9b 01       	movw	r18, r22
    4168:	ac 01       	movw	r20, r24
    416a:	60 e0       	ldi	r22, 0x00	; 0
    416c:	70 e0       	ldi	r23, 0x00	; 0
    416e:	8c e3       	ldi	r24, 0x3C	; 60
    4170:	92 e4       	ldi	r25, 0x42	; 66
    4172:	0e 94 64 31 	call	0x62c8	; 0x62c8 <__subsf3>
    4176:	20 e0       	ldi	r18, 0x00	; 0
    4178:	30 e0       	ldi	r19, 0x00	; 0
    417a:	40 e8       	ldi	r20, 0x80	; 128
    417c:	50 e4       	ldi	r21, 0x40	; 64
    417e:	0e 94 64 31 	call	0x62c8	; 0x62c8 <__subsf3>
    4182:	0e 94 3a 32 	call	0x6474	; 0x6474 <__fixunssfsi>
    4186:	16 2f       	mov	r17, r22
    4188:	b7 01       	movw	r22, r14
    418a:	80 e0       	ldi	r24, 0x00	; 0
    418c:	90 e0       	ldi	r25, 0x00	; 0
    418e:	0e 94 66 32 	call	0x64cc	; 0x64cc <__floatunsisf>
    4192:	a3 01       	movw	r20, r6
    4194:	92 01       	movw	r18, r4
    4196:	0e 94 18 33 	call	0x6630	; 0x6630 <__mulsf3>
    419a:	0e 94 3a 32 	call	0x6474	; 0x6474 <__fixunssfsi>
    419e:	86 2f       	mov	r24, r22
    41a0:	27 ea       	ldi	r18, 0xA7	; 167
    41a2:	30 e3       	ldi	r19, 0x30	; 48
    41a4:	40 e0       	ldi	r20, 0x00	; 0
    41a6:	61 2f       	mov	r22, r17
    41a8:	0e 94 e7 10 	call	0x21ce	; 0x21ce <BufferPixel>
	
	if (LoggingOn)
    41ac:	80 91 db 24 	lds	r24, 0x24DB	; 0x8024db <LoggingOn>
    41b0:	88 23       	and	r24, r24
    41b2:	91 f0       	breq	.+36     	; 0x41d8 <DrawUpdate+0x1ae>
		printf("%d,%d,%d,%d\r\n", targetTime, actualTime, targetTemp, actualTemp);
    41b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    41b6:	9f 93       	push	r25
    41b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    41ba:	8f 93       	push	r24
    41bc:	3f 92       	push	r3
    41be:	2f 92       	push	r2
    41c0:	ff 92       	push	r15
    41c2:	ef 92       	push	r14
    41c4:	df 92       	push	r13
    41c6:	cf 92       	push	r12
    41c8:	81 e5       	ldi	r24, 0x51	; 81
    41ca:	93 e2       	ldi	r25, 0x23	; 35
    41cc:	9f 93       	push	r25
    41ce:	8f 93       	push	r24
    41d0:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <printf>
    41d4:	cd bf       	out	0x3d, r28	; 61
    41d6:	de bf       	out	0x3e, r29	; 62
		
	//This is here so we still draw our captured temp to the buffer but don't overwrite the menu that is being drawn.
	if (MenuMode != NoMenu)	
    41d8:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <MenuMode>
    41dc:	81 11       	cpse	r24, r1
    41de:	52 c0       	rjmp	.+164    	; 0x4284 <DrawUpdate+0x25a>
		return;
	
	DrawBitmap(_buff, false);
    41e0:	60 e0       	ldi	r22, 0x00	; 0
    41e2:	87 ea       	ldi	r24, 0xA7	; 167
    41e4:	90 e3       	ldi	r25, 0x30	; 48
    41e6:	0e 94 0b 13 	call	0x2616	; 0x2616 <DrawBitmap>
	DrawTime(targetTime, 0, 0);
    41ea:	40 e0       	ldi	r20, 0x00	; 0
    41ec:	60 e0       	ldi	r22, 0x00	; 0
    41ee:	c6 01       	movw	r24, r12
    41f0:	b0 de       	rcall	.-672    	; 0x3f52 <DrawTime>
	DrawString(tTempStr, SCREEN_WIDTH - tTempOffset, 0, false);
    41f2:	14 e5       	ldi	r17, 0x54	; 84
    41f4:	61 2f       	mov	r22, r17
    41f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    41f8:	69 1b       	sub	r22, r25
    41fa:	20 e0       	ldi	r18, 0x00	; 0
    41fc:	40 e0       	ldi	r20, 0x00	; 0
    41fe:	ce 01       	movw	r24, r28
    4200:	01 96       	adiw	r24, 0x01	; 1
    4202:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
	DrawString(_tempType, SCREEN_WIDTH - 5, 0, false);
    4206:	20 e0       	ldi	r18, 0x00	; 0
    4208:	40 e0       	ldi	r20, 0x00	; 0
    420a:	6f e4       	ldi	r22, 0x4F	; 79
    420c:	8b e1       	ldi	r24, 0x1B	; 27
    420e:	90 e2       	ldi	r25, 0x20	; 32
    4210:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
	DrawTime(actualTime, 0, 8);
    4214:	48 e0       	ldi	r20, 0x08	; 8
    4216:	60 e0       	ldi	r22, 0x00	; 0
    4218:	c7 01       	movw	r24, r14
    421a:	9b de       	rcall	.-714    	; 0x3f52 <DrawTime>
	DrawString(aTempStr, SCREEN_WIDTH - aTempOffset, 8, false);
    421c:	61 2f       	mov	r22, r17
    421e:	88 89       	ldd	r24, Y+16	; 0x10
    4220:	68 1b       	sub	r22, r24
    4222:	20 e0       	ldi	r18, 0x00	; 0
    4224:	48 e0       	ldi	r20, 0x08	; 8
    4226:	ce 01       	movw	r24, r28
    4228:	06 96       	adiw	r24, 0x06	; 6
    422a:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
	DrawString(_tempType, SCREEN_WIDTH - 5, 8, false);
    422e:	20 e0       	ldi	r18, 0x00	; 0
    4230:	48 e0       	ldi	r20, 0x08	; 8
    4232:	6f e4       	ldi	r22, 0x4F	; 79
    4234:	8b e1       	ldi	r24, 0x1B	; 27
    4236:	90 e2       	ldi	r25, 0x20	; 32
    4238:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
	DrawTime(remTime, 30, 8);
    423c:	48 e0       	ldi	r20, 0x08	; 8
    423e:	6e e1       	ldi	r22, 0x1E	; 30
    4240:	8d 85       	ldd	r24, Y+13	; 0x0d
    4242:	9e 85       	ldd	r25, Y+14	; 0x0e
    4244:	86 de       	rcall	.-756    	; 0x3f52 <DrawTime>
	
	if (OvenState == OvenRunning)
    4246:	80 91 e1 24 	lds	r24, 0x24E1	; 0x8024e1 <OvenState>
    424a:	81 30       	cpi	r24, 0x01	; 1
    424c:	41 f4       	brne	.+16     	; 0x425e <DrawUpdate+0x234>
		DrawString(" run ", 30, 0, false);
    424e:	20 e0       	ldi	r18, 0x00	; 0
    4250:	40 e0       	ldi	r20, 0x00	; 0
    4252:	6e e1       	ldi	r22, 0x1E	; 30
    4254:	82 e9       	ldi	r24, 0x92	; 146
    4256:	94 e2       	ldi	r25, 0x24	; 36
    4258:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
    425c:	11 c0       	rjmp	.+34     	; 0x4280 <DrawUpdate+0x256>
	else if (OvenState == OvenHeating)
    425e:	82 30       	cpi	r24, 0x02	; 2
    4260:	41 f4       	brne	.+16     	; 0x4272 <DrawUpdate+0x248>
		DrawString(" heat ", 30, 0, true);
    4262:	21 e0       	ldi	r18, 0x01	; 1
    4264:	40 e0       	ldi	r20, 0x00	; 0
    4266:	6e e1       	ldi	r22, 0x1E	; 30
    4268:	88 e9       	ldi	r24, 0x98	; 152
    426a:	94 e2       	ldi	r25, 0x24	; 36
    426c:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
    4270:	07 c0       	rjmp	.+14     	; 0x4280 <DrawUpdate+0x256>
	else
		DrawString(" stop ", 30, 0, false);
    4272:	20 e0       	ldi	r18, 0x00	; 0
    4274:	40 e0       	ldi	r20, 0x00	; 0
    4276:	6e e1       	ldi	r22, 0x1E	; 30
    4278:	8f e9       	ldi	r24, 0x9F	; 159
    427a:	94 e2       	ldi	r25, 0x24	; 36
    427c:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <DrawString>
	
	
	FlushScreenBuffer();	
    4280:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <FlushScreenBuffer>
}
    4284:	60 96       	adiw	r28, 0x10	; 16
    4286:	cd bf       	out	0x3d, r28	; 61
    4288:	de bf       	out	0x3e, r29	; 62
    428a:	df 91       	pop	r29
    428c:	cf 91       	pop	r28
    428e:	1f 91       	pop	r17
    4290:	0f 91       	pop	r16
    4292:	ff 90       	pop	r15
    4294:	ef 90       	pop	r14
    4296:	df 90       	pop	r13
    4298:	cf 90       	pop	r12
    429a:	bf 90       	pop	r11
    429c:	af 90       	pop	r10
    429e:	9f 90       	pop	r9
    42a0:	8f 90       	pop	r8
    42a2:	7f 90       	pop	r7
    42a4:	6f 90       	pop	r6
    42a6:	5f 90       	pop	r5
    42a8:	4f 90       	pop	r4
    42aa:	3f 90       	pop	r3
    42ac:	2f 90       	pop	r2
    42ae:	08 95       	ret

000042b0 <InitReflowScreen>:

void InitReflowScreen()
{
	_timeScale = (float)MAXW / (float)MaxTime; //83 instead of 84 because the screen seems to have an issue drawing the last byte.
    42b0:	60 91 91 2e 	lds	r22, 0x2E91	; 0x802e91 <MaxTime>
    42b4:	70 91 92 2e 	lds	r23, 0x2E92	; 0x802e92 <MaxTime+0x1>
    42b8:	80 e0       	ldi	r24, 0x00	; 0
    42ba:	90 e0       	ldi	r25, 0x00	; 0
    42bc:	0e 94 66 32 	call	0x64cc	; 0x64cc <__floatunsisf>
    42c0:	9b 01       	movw	r18, r22
    42c2:	ac 01       	movw	r20, r24
    42c4:	60 e0       	ldi	r22, 0x00	; 0
    42c6:	70 e0       	ldi	r23, 0x00	; 0
    42c8:	86 ea       	ldi	r24, 0xA6	; 166
    42ca:	92 e4       	ldi	r25, 0x42	; 66
    42cc:	0e 94 cd 31 	call	0x639a	; 0x639a <__divsf3>
    42d0:	60 93 9f 30 	sts	0x309F, r22	; 0x80309f <_timeScale>
    42d4:	70 93 a0 30 	sts	0x30A0, r23	; 0x8030a0 <_timeScale+0x1>
    42d8:	80 93 a1 30 	sts	0x30A1, r24	; 0x8030a1 <_timeScale+0x2>
    42dc:	90 93 a2 30 	sts	0x30A2, r25	; 0x8030a2 <_timeScale+0x3>
	_tempScale = (float)MAXH / (float)TempRange;
    42e0:	60 91 97 2e 	lds	r22, 0x2E97	; 0x802e97 <TempRange>
    42e4:	70 91 98 2e 	lds	r23, 0x2E98	; 0x802e98 <TempRange+0x1>
    42e8:	80 e0       	ldi	r24, 0x00	; 0
    42ea:	90 e0       	ldi	r25, 0x00	; 0
    42ec:	0e 94 66 32 	call	0x64cc	; 0x64cc <__floatunsisf>
    42f0:	9b 01       	movw	r18, r22
    42f2:	ac 01       	movw	r20, r24
    42f4:	60 e0       	ldi	r22, 0x00	; 0
    42f6:	70 e0       	ldi	r23, 0x00	; 0
    42f8:	80 ec       	ldi	r24, 0xC0	; 192
    42fa:	91 e4       	ldi	r25, 0x41	; 65
    42fc:	0e 94 cd 31 	call	0x639a	; 0x639a <__divsf3>
    4300:	60 93 a3 30 	sts	0x30A3, r22	; 0x8030a3 <_tempScale>
    4304:	70 93 a4 30 	sts	0x30A4, r23	; 0x8030a4 <_tempScale+0x1>
    4308:	80 93 a5 30 	sts	0x30A5, r24	; 0x8030a5 <_tempScale+0x2>
    430c:	90 93 a6 30 	sts	0x30A6, r25	; 0x8030a6 <_tempScale+0x3>


	


	GenerateProfileGraph();
    4310:	1b cd       	rjmp	.-1482   	; 0x3d48 <GenerateProfileGraph>
    4312:	08 95       	ret

00004314 <EraseWriteAppTablePage>:
 *  \param pageAddress Page address to the page to erase/write.
 */
void EraseWriteAppTablePage(uint8_t pageAddress)
{
	/* Calculate actual start address of the page.*/
	uint16_t tableAddress = (pageAddress * FLASH_PAGE_SIZE);
    4314:	68 2f       	mov	r22, r24
    4316:	70 e0       	ldi	r23, 0x00	; 0
    4318:	76 2f       	mov	r23, r22
    431a:	66 27       	eor	r22, r22
	
	/* Perform page erase. */
	SP_EraseWriteApplicationPage(APPTABLE_SECTION_START + tableAddress);
    431c:	cb 01       	movw	r24, r22
    431e:	a0 e0       	ldi	r26, 0x00	; 0
    4320:	b0 e0       	ldi	r27, 0x00	; 0
    4322:	bc 01       	movw	r22, r24
    4324:	cd 01       	movw	r24, r26
    4326:	70 52       	subi	r23, 0x20	; 32
    4328:	8e 4f       	sbci	r24, 0xFE	; 254
    432a:	9f 4f       	sbci	r25, 0xFF	; 255
    432c:	0e 94 17 06 	call	0xc2e	; 0xc2e <SP_EraseWriteApplicationPage>

	/* Wait for NVM to finish. */
	SP_WaitForSPM();
    4330:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <SP_WaitForSPM>
    4334:	08 95       	ret

00004336 <ReadFlashPage>:
 *  \param pageAddress  Page address to read from. 
 */
void ReadFlashPage(const uint8_t * data, uint8_t pageAddress)
{
	/* Calculate actual start address of the page.*/
	uint16_t tableAddress = (pageAddress * FLASH_PAGE_SIZE);
    4336:	46 2f       	mov	r20, r22
    4338:	50 e0       	ldi	r21, 0x00	; 0
    433a:	54 2f       	mov	r21, r20
    433c:	44 27       	eor	r20, r20
	
	/* Read the flash page into the buffer. */
	SP_ReadFlashPage(data, (APPTABLE_SECTION_START + tableAddress));
    433e:	60 e0       	ldi	r22, 0x00	; 0
    4340:	70 e0       	ldi	r23, 0x00	; 0
    4342:	50 52       	subi	r21, 0x20	; 32
    4344:	6e 4f       	sbci	r22, 0xFE	; 254
    4346:	7f 4f       	sbci	r23, 0xFF	; 255
    4348:	0c 94 00 06 	jmp	0xc00	; 0xc00 <SP_ReadFlashPage>
    434c:	08 95       	ret

0000434e <udi_cdc_comm_disable>:
}

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
}
    434e:	80 91 f8 25 	lds	r24, 0x25F8	; 0x8025f8 <udi_cdc_nb_comm_enabled>
    4352:	81 50       	subi	r24, 0x01	; 1
    4354:	80 93 f8 25 	sts	0x25F8, r24	; 0x8025f8 <udi_cdc_nb_comm_enabled>
    4358:	08 95       	ret

0000435a <udi_cdc_data_setup>:
    435a:	80 e0       	ldi	r24, 0x00	; 0
    435c:	08 95       	ret

0000435e <udi_cdc_getsetting>:
    435e:	80 e0       	ldi	r24, 0x00	; 0
    4360:	08 95       	ret

00004362 <udi_cdc_comm_setup>:
    4362:	80 91 47 33 	lds	r24, 0x3347	; 0x803347 <udd_g_ctrlreq>
    4366:	88 23       	and	r24, r24
    4368:	cc f4       	brge	.+50     	; 0x439c <udi_cdc_comm_setup+0x3a>
    436a:	80 76       	andi	r24, 0x60	; 96
    436c:	80 32       	cpi	r24, 0x20	; 32
    436e:	b9 f5       	brne	.+110    	; 0x43de <udi_cdc_comm_setup+0x7c>
    4370:	80 91 48 33 	lds	r24, 0x3348	; 0x803348 <udd_g_ctrlreq+0x1>
    4374:	81 32       	cpi	r24, 0x21	; 33
    4376:	a9 f5       	brne	.+106    	; 0x43e2 <udi_cdc_comm_setup+0x80>
    4378:	80 91 4d 33 	lds	r24, 0x334D	; 0x80334d <udd_g_ctrlreq+0x6>
    437c:	90 91 4e 33 	lds	r25, 0x334E	; 0x80334e <udd_g_ctrlreq+0x7>
    4380:	07 97       	sbiw	r24, 0x07	; 7
    4382:	89 f5       	brne	.+98     	; 0x43e6 <udi_cdc_comm_setup+0x84>
    4384:	e7 e4       	ldi	r30, 0x47	; 71
    4386:	f3 e3       	ldi	r31, 0x33	; 51
    4388:	86 e0       	ldi	r24, 0x06	; 6
    438a:	96 e2       	ldi	r25, 0x26	; 38
    438c:	80 87       	std	Z+8, r24	; 0x08
    438e:	91 87       	std	Z+9, r25	; 0x09
    4390:	87 e0       	ldi	r24, 0x07	; 7
    4392:	90 e0       	ldi	r25, 0x00	; 0
    4394:	82 87       	std	Z+10, r24	; 0x0a
    4396:	93 87       	std	Z+11, r25	; 0x0b
    4398:	81 e0       	ldi	r24, 0x01	; 1
    439a:	08 95       	ret
    439c:	80 76       	andi	r24, 0x60	; 96
    439e:	80 32       	cpi	r24, 0x20	; 32
    43a0:	21 f5       	brne	.+72     	; 0x43ea <udi_cdc_comm_setup+0x88>
    43a2:	80 91 48 33 	lds	r24, 0x3348	; 0x803348 <udd_g_ctrlreq+0x1>
    43a6:	80 32       	cpi	r24, 0x20	; 32
    43a8:	21 f0       	breq	.+8      	; 0x43b2 <udi_cdc_comm_setup+0x50>
    43aa:	82 32       	cpi	r24, 0x22	; 34
    43ac:	01 f1       	breq	.+64     	; 0x43ee <udi_cdc_comm_setup+0x8c>
    43ae:	80 e0       	ldi	r24, 0x00	; 0
    43b0:	08 95       	ret
    43b2:	80 91 4d 33 	lds	r24, 0x334D	; 0x80334d <udd_g_ctrlreq+0x6>
    43b6:	90 91 4e 33 	lds	r25, 0x334E	; 0x80334e <udd_g_ctrlreq+0x7>
    43ba:	07 97       	sbiw	r24, 0x07	; 7
    43bc:	d1 f4       	brne	.+52     	; 0x43f2 <udi_cdc_comm_setup+0x90>
    43be:	e7 e4       	ldi	r30, 0x47	; 71
    43c0:	f3 e3       	ldi	r31, 0x33	; 51
    43c2:	8b ef       	ldi	r24, 0xFB	; 251
    43c4:	91 e2       	ldi	r25, 0x21	; 33
    43c6:	84 87       	std	Z+12, r24	; 0x0c
    43c8:	95 87       	std	Z+13, r25	; 0x0d
    43ca:	86 e0       	ldi	r24, 0x06	; 6
    43cc:	96 e2       	ldi	r25, 0x26	; 38
    43ce:	80 87       	std	Z+8, r24	; 0x08
    43d0:	91 87       	std	Z+9, r25	; 0x09
    43d2:	87 e0       	ldi	r24, 0x07	; 7
    43d4:	90 e0       	ldi	r25, 0x00	; 0
    43d6:	82 87       	std	Z+10, r24	; 0x0a
    43d8:	93 87       	std	Z+11, r25	; 0x0b
    43da:	81 e0       	ldi	r24, 0x01	; 1
    43dc:	08 95       	ret
    43de:	80 e0       	ldi	r24, 0x00	; 0
    43e0:	08 95       	ret
    43e2:	80 e0       	ldi	r24, 0x00	; 0
    43e4:	08 95       	ret
    43e6:	80 e0       	ldi	r24, 0x00	; 0
    43e8:	08 95       	ret
    43ea:	80 e0       	ldi	r24, 0x00	; 0
    43ec:	08 95       	ret
    43ee:	81 e0       	ldi	r24, 0x01	; 1
    43f0:	08 95       	ret
    43f2:	80 e0       	ldi	r24, 0x00	; 0
    43f4:	08 95       	ret

000043f6 <udi_cdc_line_coding_received>:
    43f6:	08 95       	ret

000043f8 <udi_cdc_comm_enable>:
    43f8:	10 92 f8 25 	sts	0x25F8, r1	; 0x8025f8 <udi_cdc_nb_comm_enabled>
    43fc:	10 92 04 26 	sts	0x2604, r1	; 0x802604 <udi_cdc_state>
    4400:	10 92 05 26 	sts	0x2605, r1	; 0x802605 <udi_cdc_state+0x1>
    4404:	ea ef       	ldi	r30, 0xFA	; 250
    4406:	f5 e2       	ldi	r31, 0x25	; 37
    4408:	81 ea       	ldi	r24, 0xA1	; 161
    440a:	80 83       	st	Z, r24
    440c:	80 e2       	ldi	r24, 0x20	; 32
    440e:	81 83       	std	Z+1, r24	; 0x01
    4410:	12 82       	std	Z+2, r1	; 0x02
    4412:	13 82       	std	Z+3, r1	; 0x03
    4414:	14 82       	std	Z+4, r1	; 0x04
    4416:	15 82       	std	Z+5, r1	; 0x05
    4418:	82 e0       	ldi	r24, 0x02	; 2
    441a:	90 e0       	ldi	r25, 0x00	; 0
    441c:	86 83       	std	Z+6, r24	; 0x06
    441e:	97 83       	std	Z+7, r25	; 0x07
    4420:	10 86       	std	Z+8, r1	; 0x08
    4422:	11 86       	std	Z+9, r1	; 0x09
    4424:	e6 e0       	ldi	r30, 0x06	; 6
    4426:	f6 e2       	ldi	r31, 0x26	; 38
    4428:	80 e0       	ldi	r24, 0x00	; 0
    442a:	92 ec       	ldi	r25, 0xC2	; 194
    442c:	a1 e0       	ldi	r26, 0x01	; 1
    442e:	b0 e0       	ldi	r27, 0x00	; 0
    4430:	80 83       	st	Z, r24
    4432:	91 83       	std	Z+1, r25	; 0x01
    4434:	a2 83       	std	Z+2, r26	; 0x02
    4436:	b3 83       	std	Z+3, r27	; 0x03
    4438:	14 82       	std	Z+4, r1	; 0x04
    443a:	15 82       	std	Z+5, r1	; 0x05
    443c:	88 e0       	ldi	r24, 0x08	; 8
    443e:	86 83       	std	Z+6, r24	; 0x06
    4440:	0e 94 91 13 	call	0x2722	; 0x2722 <my_callback_cdc_enable>
    4444:	88 23       	and	r24, r24
    4446:	29 f0       	breq	.+10     	; 0x4452 <udi_cdc_comm_enable+0x5a>
    4448:	90 91 f8 25 	lds	r25, 0x25F8	; 0x8025f8 <udi_cdc_nb_comm_enabled>
    444c:	9f 5f       	subi	r25, 0xFF	; 255
    444e:	90 93 f8 25 	sts	0x25F8, r25	; 0x8025f8 <udi_cdc_nb_comm_enabled>
    4452:	08 95       	ret

00004454 <udi_cdc_tx_send>:
    4454:	ff 92       	push	r15
    4456:	0f 93       	push	r16
    4458:	1f 93       	push	r17
    445a:	cf 93       	push	r28
    445c:	df 93       	push	r29
    445e:	1f 92       	push	r1
    4460:	cd b7       	in	r28, 0x3d	; 61
    4462:	de b7       	in	r29, 0x3e	; 62
    4464:	80 91 e5 24 	lds	r24, 0x24E5	; 0x8024e5 <udi_cdc_tx_trans_ongoing>
    4468:	81 11       	cpse	r24, r1
    446a:	9e c0       	rjmp	.+316    	; 0x45a8 <udi_cdc_tx_send+0x154>
    446c:	0e 94 54 2c 	call	0x58a8	; 0x58a8 <udd_is_high_speed>
    4470:	88 23       	and	r24, r24
    4472:	51 f0       	breq	.+20     	; 0x4488 <udi_cdc_tx_send+0x34>
    4474:	00 91 e6 24 	lds	r16, 0x24E6	; 0x8024e6 <udi_cdc_tx_sof_num>
    4478:	10 91 e7 24 	lds	r17, 0x24E7	; 0x8024e7 <udi_cdc_tx_sof_num+0x1>
    447c:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <udd_get_micro_frame_number>
    4480:	08 17       	cp	r16, r24
    4482:	19 07       	cpc	r17, r25
    4484:	59 f4       	brne	.+22     	; 0x449c <udi_cdc_tx_send+0x48>
    4486:	90 c0       	rjmp	.+288    	; 0x45a8 <udi_cdc_tx_send+0x154>
    4488:	00 91 e6 24 	lds	r16, 0x24E6	; 0x8024e6 <udi_cdc_tx_sof_num>
    448c:	10 91 e7 24 	lds	r17, 0x24E7	; 0x8024e7 <udi_cdc_tx_sof_num+0x1>
    4490:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <udd_get_frame_number>
    4494:	08 17       	cp	r16, r24
    4496:	19 07       	cpc	r17, r25
    4498:	09 f4       	brne	.+2      	; 0x449c <udi_cdc_tx_send+0x48>
    449a:	86 c0       	rjmp	.+268    	; 0x45a8 <udi_cdc_tx_send+0x154>
    449c:	8f b7       	in	r24, 0x3f	; 63
    449e:	89 83       	std	Y+1, r24	; 0x01
    44a0:	f8 94       	cli
    44a2:	19 81       	ldd	r17, Y+1	; 0x01
    44a4:	00 91 e8 24 	lds	r16, 0x24E8	; 0x8024e8 <udi_cdc_tx_buf_sel>
    44a8:	e0 2f       	mov	r30, r16
    44aa:	f0 e0       	ldi	r31, 0x00	; 0
    44ac:	ee 0f       	add	r30, r30
    44ae:	ff 1f       	adc	r31, r31
    44b0:	e7 51       	subi	r30, 0x17	; 23
    44b2:	fb 4d       	sbci	r31, 0xDB	; 219
    44b4:	80 81       	ld	r24, Z
    44b6:	91 81       	ldd	r25, Z+1	; 0x01
    44b8:	89 2b       	or	r24, r25
    44ba:	09 f5       	brne	.+66     	; 0x44fe <udi_cdc_tx_send+0xaa>
    44bc:	80 91 e2 24 	lds	r24, 0x24E2	; 0x8024e2 <sof_zlp_counter.4973>
    44c0:	90 91 e3 24 	lds	r25, 0x24E3	; 0x8024e3 <sof_zlp_counter.4973+0x1>
    44c4:	01 96       	adiw	r24, 0x01	; 1
    44c6:	80 93 e2 24 	sts	0x24E2, r24	; 0x8024e2 <sof_zlp_counter.4973>
    44ca:	90 93 e3 24 	sts	0x24E3, r25	; 0x8024e3 <sof_zlp_counter.4973+0x1>
    44ce:	0e 94 54 2c 	call	0x58a8	; 0x58a8 <udd_is_high_speed>
    44d2:	81 11       	cpse	r24, r1
    44d4:	07 c0       	rjmp	.+14     	; 0x44e4 <udi_cdc_tx_send+0x90>
    44d6:	80 91 e2 24 	lds	r24, 0x24E2	; 0x8024e2 <sof_zlp_counter.4973>
    44da:	90 91 e3 24 	lds	r25, 0x24E3	; 0x8024e3 <sof_zlp_counter.4973+0x1>
    44de:	84 36       	cpi	r24, 0x64	; 100
    44e0:	91 05       	cpc	r25, r1
    44e2:	58 f0       	brcs	.+22     	; 0x44fa <udi_cdc_tx_send+0xa6>
    44e4:	0e 94 54 2c 	call	0x58a8	; 0x58a8 <udd_is_high_speed>
    44e8:	88 23       	and	r24, r24
    44ea:	49 f0       	breq	.+18     	; 0x44fe <udi_cdc_tx_send+0xaa>
    44ec:	80 91 e2 24 	lds	r24, 0x24E2	; 0x8024e2 <sof_zlp_counter.4973>
    44f0:	90 91 e3 24 	lds	r25, 0x24E3	; 0x8024e3 <sof_zlp_counter.4973+0x1>
    44f4:	80 32       	cpi	r24, 0x20	; 32
    44f6:	93 40       	sbci	r25, 0x03	; 3
    44f8:	10 f4       	brcc	.+4      	; 0x44fe <udi_cdc_tx_send+0xaa>
    44fa:	1f bf       	out	0x3f, r17	; 63
    44fc:	55 c0       	rjmp	.+170    	; 0x45a8 <udi_cdc_tx_send+0x154>
    44fe:	10 92 e2 24 	sts	0x24E2, r1	; 0x8024e2 <sof_zlp_counter.4973>
    4502:	10 92 e3 24 	sts	0x24E3, r1	; 0x8024e3 <sof_zlp_counter.4973+0x1>
    4506:	80 91 e4 24 	lds	r24, 0x24E4	; 0x8024e4 <udi_cdc_tx_both_buf_to_send>
    450a:	81 11       	cpse	r24, r1
    450c:	06 c0       	rjmp	.+12     	; 0x451a <udi_cdc_tx_send+0xc6>
    450e:	81 e0       	ldi	r24, 0x01	; 1
    4510:	01 11       	cpse	r16, r1
    4512:	80 e0       	ldi	r24, 0x00	; 0
    4514:	80 93 e8 24 	sts	0x24E8, r24	; 0x8024e8 <udi_cdc_tx_buf_sel>
    4518:	04 c0       	rjmp	.+8      	; 0x4522 <udi_cdc_tx_send+0xce>
    451a:	81 e0       	ldi	r24, 0x01	; 1
    451c:	01 11       	cpse	r16, r1
    451e:	80 e0       	ldi	r24, 0x00	; 0
    4520:	08 2f       	mov	r16, r24
    4522:	81 e0       	ldi	r24, 0x01	; 1
    4524:	80 93 e5 24 	sts	0x24E5, r24	; 0x8024e5 <udi_cdc_tx_trans_ongoing>
    4528:	1f bf       	out	0x3f, r17	; 63
    452a:	10 e0       	ldi	r17, 0x00	; 0
    452c:	f8 01       	movw	r30, r16
    452e:	ee 0f       	add	r30, r30
    4530:	ff 1f       	adc	r31, r31
    4532:	e7 51       	subi	r30, 0x17	; 23
    4534:	fb 4d       	sbci	r31, 0xDB	; 219
    4536:	ff 24       	eor	r15, r15
    4538:	f3 94       	inc	r15
    453a:	80 81       	ld	r24, Z
    453c:	91 81       	ldd	r25, Z+1	; 0x01
    453e:	80 34       	cpi	r24, 0x40	; 64
    4540:	91 05       	cpc	r25, r1
    4542:	09 f4       	brne	.+2      	; 0x4546 <udi_cdc_tx_send+0xf2>
    4544:	f1 2c       	mov	r15, r1
    4546:	ff 20       	and	r15, r15
    4548:	91 f0       	breq	.+36     	; 0x456e <udi_cdc_tx_send+0x11a>
    454a:	0e 94 54 2c 	call	0x58a8	; 0x58a8 <udd_is_high_speed>
    454e:	88 23       	and	r24, r24
    4550:	39 f0       	breq	.+14     	; 0x4560 <udi_cdc_tx_send+0x10c>
    4552:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <udd_get_micro_frame_number>
    4556:	80 93 e6 24 	sts	0x24E6, r24	; 0x8024e6 <udi_cdc_tx_sof_num>
    455a:	90 93 e7 24 	sts	0x24E7, r25	; 0x8024e7 <udi_cdc_tx_sof_num+0x1>
    455e:	0b c0       	rjmp	.+22     	; 0x4576 <udi_cdc_tx_send+0x122>
    4560:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <udd_get_frame_number>
    4564:	80 93 e6 24 	sts	0x24E6, r24	; 0x8024e6 <udi_cdc_tx_sof_num>
    4568:	90 93 e7 24 	sts	0x24E7, r25	; 0x8024e7 <udi_cdc_tx_sof_num+0x1>
    456c:	04 c0       	rjmp	.+8      	; 0x4576 <udi_cdc_tx_send+0x122>
    456e:	10 92 e6 24 	sts	0x24E6, r1	; 0x8024e6 <udi_cdc_tx_sof_num>
    4572:	10 92 e7 24 	sts	0x24E7, r1	; 0x8024e7 <udi_cdc_tx_sof_num+0x1>
    4576:	f8 01       	movw	r30, r16
    4578:	ee 0f       	add	r30, r30
    457a:	ff 1f       	adc	r31, r31
    457c:	e7 51       	subi	r30, 0x17	; 23
    457e:	fb 4d       	sbci	r31, 0xDB	; 219
    4580:	20 81       	ld	r18, Z
    4582:	31 81       	ldd	r19, Z+1	; 0x01
    4584:	a8 01       	movw	r20, r16
    4586:	00 24       	eor	r0, r0
    4588:	56 95       	lsr	r21
    458a:	47 95       	ror	r20
    458c:	07 94       	ror	r0
    458e:	56 95       	lsr	r21
    4590:	47 95       	ror	r20
    4592:	07 94       	ror	r0
    4594:	54 2f       	mov	r21, r20
    4596:	40 2d       	mov	r20, r0
    4598:	42 51       	subi	r20, 0x12	; 18
    459a:	5b 4d       	sbci	r21, 0xDB	; 219
    459c:	0e ed       	ldi	r16, 0xDE	; 222
    459e:	12 e2       	ldi	r17, 0x22	; 34
    45a0:	6f 2d       	mov	r22, r15
    45a2:	81 e8       	ldi	r24, 0x81	; 129
    45a4:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <udd_ep_run>
    45a8:	0f 90       	pop	r0
    45aa:	df 91       	pop	r29
    45ac:	cf 91       	pop	r28
    45ae:	1f 91       	pop	r17
    45b0:	0f 91       	pop	r16
    45b2:	ff 90       	pop	r15
    45b4:	08 95       	ret

000045b6 <udi_cdc_data_sof_notify>:
    45b6:	80 e0       	ldi	r24, 0x00	; 0
    45b8:	4d cf       	rjmp	.-358    	; 0x4454 <udi_cdc_tx_send>
    45ba:	08 95       	ret

000045bc <udi_cdc_data_sent>:
    45bc:	81 11       	cpse	r24, r1
    45be:	1a c0       	rjmp	.+52     	; 0x45f4 <udi_cdc_data_sent+0x38>
    45c0:	20 91 e8 24 	lds	r18, 0x24E8	; 0x8024e8 <udi_cdc_tx_buf_sel>
    45c4:	81 e0       	ldi	r24, 0x01	; 1
    45c6:	90 e0       	ldi	r25, 0x00	; 0
    45c8:	22 23       	and	r18, r18
    45ca:	11 f0       	breq	.+4      	; 0x45d0 <udi_cdc_data_sent+0x14>
    45cc:	80 e0       	ldi	r24, 0x00	; 0
    45ce:	90 e0       	ldi	r25, 0x00	; 0
    45d0:	88 0f       	add	r24, r24
    45d2:	99 1f       	adc	r25, r25
    45d4:	fc 01       	movw	r30, r24
    45d6:	e7 51       	subi	r30, 0x17	; 23
    45d8:	fb 4d       	sbci	r31, 0xDB	; 219
    45da:	10 82       	st	Z, r1
    45dc:	11 82       	std	Z+1, r1	; 0x01
    45de:	10 92 e4 24 	sts	0x24E4, r1	; 0x8024e4 <udi_cdc_tx_both_buf_to_send>
    45e2:	10 92 e5 24 	sts	0x24E5, r1	; 0x8024e5 <udi_cdc_tx_trans_ongoing>
    45e6:	67 2b       	or	r22, r23
    45e8:	19 f0       	breq	.+6      	; 0x45f0 <udi_cdc_data_sent+0x34>
    45ea:	80 e0       	ldi	r24, 0x00	; 0
    45ec:	0e 94 9d 13 	call	0x273a	; 0x273a <my_callback_tx_empty_notify>
    45f0:	80 e0       	ldi	r24, 0x00	; 0
    45f2:	30 cf       	rjmp	.-416    	; 0x4454 <udi_cdc_tx_send>
    45f4:	08 95       	ret

000045f6 <udi_cdc_data_disable>:
    45f6:	80 91 f7 25 	lds	r24, 0x25F7	; 0x8025f7 <udi_cdc_nb_data_enabled>
    45fa:	81 50       	subi	r24, 0x01	; 1
    45fc:	80 93 f7 25 	sts	0x25F7, r24	; 0x8025f7 <udi_cdc_nb_data_enabled>
    4600:	80 91 f7 25 	lds	r24, 0x25F7	; 0x8025f7 <udi_cdc_nb_data_enabled>
    4604:	0e 94 95 13 	call	0x272a	; 0x272a <my_callback_cdc_disable>
    4608:	10 92 f6 25 	sts	0x25F6, r1	; 0x8025f6 <udi_cdc_data_running>
    460c:	08 95       	ret

0000460e <udi_cdc_multi_get_nb_received_data>:
    460e:	cf 93       	push	r28
    4610:	df 93       	push	r29
    4612:	1f 92       	push	r1
    4614:	cd b7       	in	r28, 0x3d	; 61
    4616:	de b7       	in	r29, 0x3e	; 62
    4618:	8f b7       	in	r24, 0x3f	; 63
    461a:	89 83       	std	Y+1, r24	; 0x01
    461c:	f8 94       	cli
    461e:	49 81       	ldd	r20, Y+1	; 0x01
    4620:	20 91 6f 25 	lds	r18, 0x256F	; 0x80256f <udi_cdc_rx_pos>
    4624:	30 91 70 25 	lds	r19, 0x2570	; 0x802570 <udi_cdc_rx_pos+0x1>
    4628:	e0 91 71 25 	lds	r30, 0x2571	; 0x802571 <udi_cdc_rx_buf_sel>
    462c:	f0 e0       	ldi	r31, 0x00	; 0
    462e:	ee 0f       	add	r30, r30
    4630:	ff 1f       	adc	r31, r31
    4632:	ee 58       	subi	r30, 0x8E	; 142
    4634:	fa 4d       	sbci	r31, 0xDA	; 218
    4636:	80 81       	ld	r24, Z
    4638:	91 81       	ldd	r25, Z+1	; 0x01
    463a:	4f bf       	out	0x3f, r20	; 63
    463c:	82 1b       	sub	r24, r18
    463e:	93 0b       	sbc	r25, r19
    4640:	0f 90       	pop	r0
    4642:	df 91       	pop	r29
    4644:	cf 91       	pop	r28
    4646:	08 95       	ret

00004648 <udi_cdc_multi_is_rx_ready>:
    4648:	e2 df       	rcall	.-60     	; 0x460e <udi_cdc_multi_get_nb_received_data>
    464a:	21 e0       	ldi	r18, 0x01	; 1
    464c:	89 2b       	or	r24, r25
    464e:	09 f4       	brne	.+2      	; 0x4652 <udi_cdc_multi_is_rx_ready+0xa>
    4650:	20 e0       	ldi	r18, 0x00	; 0
    4652:	82 2f       	mov	r24, r18
    4654:	08 95       	ret

00004656 <udi_cdc_rx_start>:
    4656:	0f 93       	push	r16
    4658:	1f 93       	push	r17
    465a:	cf 93       	push	r28
    465c:	df 93       	push	r29
    465e:	1f 92       	push	r1
    4660:	cd b7       	in	r28, 0x3d	; 61
    4662:	de b7       	in	r29, 0x3e	; 62
    4664:	8f b7       	in	r24, 0x3f	; 63
    4666:	89 83       	std	Y+1, r24	; 0x01
    4668:	f8 94       	cli
    466a:	99 81       	ldd	r25, Y+1	; 0x01
    466c:	20 91 71 25 	lds	r18, 0x2571	; 0x802571 <udi_cdc_rx_buf_sel>
    4670:	80 91 6e 25 	lds	r24, 0x256E	; 0x80256e <udi_cdc_rx_trans_ongoing>
    4674:	81 11       	cpse	r24, r1
    4676:	10 c0       	rjmp	.+32     	; 0x4698 <udi_cdc_rx_start+0x42>
    4678:	60 91 6f 25 	lds	r22, 0x256F	; 0x80256f <udi_cdc_rx_pos>
    467c:	70 91 70 25 	lds	r23, 0x2570	; 0x802570 <udi_cdc_rx_pos+0x1>
    4680:	02 2f       	mov	r16, r18
    4682:	10 e0       	ldi	r17, 0x00	; 0
    4684:	f8 01       	movw	r30, r16
    4686:	ee 0f       	add	r30, r30
    4688:	ff 1f       	adc	r31, r31
    468a:	ee 58       	subi	r30, 0x8E	; 142
    468c:	fa 4d       	sbci	r31, 0xDA	; 218
    468e:	40 81       	ld	r20, Z
    4690:	51 81       	ldd	r21, Z+1	; 0x01
    4692:	64 17       	cp	r22, r20
    4694:	75 07       	cpc	r23, r21
    4696:	18 f4       	brcc	.+6      	; 0x469e <udi_cdc_rx_start+0x48>
    4698:	9f bf       	out	0x3f, r25	; 63
    469a:	80 e0       	ldi	r24, 0x00	; 0
    469c:	28 c0       	rjmp	.+80     	; 0x46ee <udi_cdc_rx_start+0x98>
    469e:	10 92 6f 25 	sts	0x256F, r1	; 0x80256f <udi_cdc_rx_pos>
    46a2:	10 92 70 25 	sts	0x2570, r1	; 0x802570 <udi_cdc_rx_pos+0x1>
    46a6:	81 e0       	ldi	r24, 0x01	; 1
    46a8:	21 11       	cpse	r18, r1
    46aa:	80 e0       	ldi	r24, 0x00	; 0
    46ac:	80 93 71 25 	sts	0x2571, r24	; 0x802571 <udi_cdc_rx_buf_sel>
    46b0:	81 e0       	ldi	r24, 0x01	; 1
    46b2:	80 93 6e 25 	sts	0x256E, r24	; 0x80256e <udi_cdc_rx_trans_ongoing>
    46b6:	9f bf       	out	0x3f, r25	; 63
    46b8:	80 e0       	ldi	r24, 0x00	; 0
    46ba:	c6 df       	rcall	.-116    	; 0x4648 <udi_cdc_multi_is_rx_ready>
    46bc:	88 23       	and	r24, r24
    46be:	19 f0       	breq	.+6      	; 0x46c6 <udi_cdc_rx_start+0x70>
    46c0:	80 e0       	ldi	r24, 0x00	; 0
    46c2:	0e 94 98 13 	call	0x2730	; 0x2730 <my_callback_rx_notify>
    46c6:	a8 01       	movw	r20, r16
    46c8:	00 24       	eor	r0, r0
    46ca:	56 95       	lsr	r21
    46cc:	47 95       	ror	r20
    46ce:	07 94       	ror	r0
    46d0:	56 95       	lsr	r21
    46d2:	47 95       	ror	r20
    46d4:	07 94       	ror	r0
    46d6:	54 2f       	mov	r21, r20
    46d8:	40 2d       	mov	r20, r0
    46da:	4a 58       	subi	r20, 0x8A	; 138
    46dc:	5a 4d       	sbci	r21, 0xDA	; 218
    46de:	0f ea       	ldi	r16, 0xAF	; 175
    46e0:	13 e2       	ldi	r17, 0x23	; 35
    46e2:	20 e4       	ldi	r18, 0x40	; 64
    46e4:	30 e0       	ldi	r19, 0x00	; 0
    46e6:	61 e0       	ldi	r22, 0x01	; 1
    46e8:	82 e0       	ldi	r24, 0x02	; 2
    46ea:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <udd_ep_run>
    46ee:	0f 90       	pop	r0
    46f0:	df 91       	pop	r29
    46f2:	cf 91       	pop	r28
    46f4:	1f 91       	pop	r17
    46f6:	0f 91       	pop	r16
    46f8:	08 95       	ret

000046fa <udi_cdc_data_enable>:
    46fa:	10 92 f7 25 	sts	0x25F7, r1	; 0x8025f7 <udi_cdc_nb_data_enabled>
    46fe:	10 92 e5 24 	sts	0x24E5, r1	; 0x8024e5 <udi_cdc_tx_trans_ongoing>
    4702:	10 92 e4 24 	sts	0x24E4, r1	; 0x8024e4 <udi_cdc_tx_both_buf_to_send>
    4706:	10 92 e8 24 	sts	0x24E8, r1	; 0x8024e8 <udi_cdc_tx_buf_sel>
    470a:	e9 ee       	ldi	r30, 0xE9	; 233
    470c:	f4 e2       	ldi	r31, 0x24	; 36
    470e:	10 82       	st	Z, r1
    4710:	11 82       	std	Z+1, r1	; 0x01
    4712:	12 82       	std	Z+2, r1	; 0x02
    4714:	13 82       	std	Z+3, r1	; 0x03
    4716:	10 92 e6 24 	sts	0x24E6, r1	; 0x8024e6 <udi_cdc_tx_sof_num>
    471a:	10 92 e7 24 	sts	0x24E7, r1	; 0x8024e7 <udi_cdc_tx_sof_num+0x1>
    471e:	80 e0       	ldi	r24, 0x00	; 0
    4720:	99 de       	rcall	.-718    	; 0x4454 <udi_cdc_tx_send>
    4722:	10 92 6e 25 	sts	0x256E, r1	; 0x80256e <udi_cdc_rx_trans_ongoing>
    4726:	10 92 71 25 	sts	0x2571, r1	; 0x802571 <udi_cdc_rx_buf_sel>
    472a:	e2 e7       	ldi	r30, 0x72	; 114
    472c:	f5 e2       	ldi	r31, 0x25	; 37
    472e:	10 82       	st	Z, r1
    4730:	11 82       	std	Z+1, r1	; 0x01
    4732:	12 82       	std	Z+2, r1	; 0x02
    4734:	13 82       	std	Z+3, r1	; 0x03
    4736:	10 92 6f 25 	sts	0x256F, r1	; 0x80256f <udi_cdc_rx_pos>
    473a:	10 92 70 25 	sts	0x2570, r1	; 0x802570 <udi_cdc_rx_pos+0x1>
    473e:	80 e0       	ldi	r24, 0x00	; 0
    4740:	8a df       	rcall	.-236    	; 0x4656 <udi_cdc_rx_start>
    4742:	88 23       	and	r24, r24
    4744:	59 f0       	breq	.+22     	; 0x475c <udi_cdc_data_enable+0x62>
    4746:	90 91 f7 25 	lds	r25, 0x25F7	; 0x8025f7 <udi_cdc_nb_data_enabled>
    474a:	9f 5f       	subi	r25, 0xFF	; 255
    474c:	90 93 f7 25 	sts	0x25F7, r25	; 0x8025f7 <udi_cdc_nb_data_enabled>
    4750:	90 91 f7 25 	lds	r25, 0x25F7	; 0x8025f7 <udi_cdc_nb_data_enabled>
    4754:	91 30       	cpi	r25, 0x01	; 1
    4756:	11 f4       	brne	.+4      	; 0x475c <udi_cdc_data_enable+0x62>
    4758:	90 93 f6 25 	sts	0x25F6, r25	; 0x8025f6 <udi_cdc_data_running>
    475c:	08 95       	ret

0000475e <udi_cdc_data_received>:
    475e:	0f 93       	push	r16
    4760:	1f 93       	push	r17
    4762:	81 11       	cpse	r24, r1
    4764:	29 c0       	rjmp	.+82     	; 0x47b8 <udi_cdc_data_received+0x5a>
    4766:	80 91 71 25 	lds	r24, 0x2571	; 0x802571 <udi_cdc_rx_buf_sel>
    476a:	e1 e0       	ldi	r30, 0x01	; 1
    476c:	81 11       	cpse	r24, r1
    476e:	e0 e0       	ldi	r30, 0x00	; 0
    4770:	84 2f       	mov	r24, r20
    4772:	61 15       	cp	r22, r1
    4774:	71 05       	cpc	r23, r1
    4776:	a9 f4       	brne	.+42     	; 0x47a2 <udi_cdc_data_received+0x44>
    4778:	f0 e0       	ldi	r31, 0x00	; 0
    477a:	00 24       	eor	r0, r0
    477c:	f6 95       	lsr	r31
    477e:	e7 95       	ror	r30
    4780:	07 94       	ror	r0
    4782:	f6 95       	lsr	r31
    4784:	e7 95       	ror	r30
    4786:	07 94       	ror	r0
    4788:	fe 2f       	mov	r31, r30
    478a:	e0 2d       	mov	r30, r0
    478c:	af 01       	movw	r20, r30
    478e:	4a 58       	subi	r20, 0x8A	; 138
    4790:	5a 4d       	sbci	r21, 0xDA	; 218
    4792:	0f ea       	ldi	r16, 0xAF	; 175
    4794:	13 e2       	ldi	r17, 0x23	; 35
    4796:	20 e4       	ldi	r18, 0x40	; 64
    4798:	30 e0       	ldi	r19, 0x00	; 0
    479a:	61 e0       	ldi	r22, 0x01	; 1
    479c:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <udd_ep_run>
    47a0:	0b c0       	rjmp	.+22     	; 0x47b8 <udi_cdc_data_received+0x5a>
    47a2:	f0 e0       	ldi	r31, 0x00	; 0
    47a4:	ee 0f       	add	r30, r30
    47a6:	ff 1f       	adc	r31, r31
    47a8:	ee 58       	subi	r30, 0x8E	; 142
    47aa:	fa 4d       	sbci	r31, 0xDA	; 218
    47ac:	60 83       	st	Z, r22
    47ae:	71 83       	std	Z+1, r23	; 0x01
    47b0:	10 92 6e 25 	sts	0x256E, r1	; 0x80256e <udi_cdc_rx_trans_ongoing>
    47b4:	80 e0       	ldi	r24, 0x00	; 0
    47b6:	4f df       	rcall	.-354    	; 0x4656 <udi_cdc_rx_start>
    47b8:	1f 91       	pop	r17
    47ba:	0f 91       	pop	r16
    47bc:	08 95       	ret

000047be <udi_cdc_multi_getc>:
    47be:	ef 92       	push	r14
    47c0:	ff 92       	push	r15
    47c2:	1f 93       	push	r17
    47c4:	cf 93       	push	r28
    47c6:	df 93       	push	r29
    47c8:	1f 92       	push	r1
    47ca:	cd b7       	in	r28, 0x3d	; 61
    47cc:	de b7       	in	r29, 0x3e	; 62
    47ce:	11 e0       	ldi	r17, 0x01	; 1
    47d0:	80 91 0c 26 	lds	r24, 0x260C	; 0x80260c <udi_cdc_line_coding+0x6>
    47d4:	89 30       	cpi	r24, 0x09	; 9
    47d6:	09 f0       	breq	.+2      	; 0x47da <udi_cdc_multi_getc+0x1c>
    47d8:	10 e0       	ldi	r17, 0x00	; 0
    47da:	40 e0       	ldi	r20, 0x00	; 0
    47dc:	50 e0       	ldi	r21, 0x00	; 0
    47de:	8f b7       	in	r24, 0x3f	; 63
    47e0:	89 83       	std	Y+1, r24	; 0x01
    47e2:	f8 94       	cli
    47e4:	a9 81       	ldd	r26, Y+1	; 0x01
    47e6:	20 91 6f 25 	lds	r18, 0x256F	; 0x80256f <udi_cdc_rx_pos>
    47ea:	30 91 70 25 	lds	r19, 0x2570	; 0x802570 <udi_cdc_rx_pos+0x1>
    47ee:	80 91 71 25 	lds	r24, 0x2571	; 0x802571 <udi_cdc_rx_buf_sel>
    47f2:	90 e0       	ldi	r25, 0x00	; 0
    47f4:	fc 01       	movw	r30, r24
    47f6:	ee 0f       	add	r30, r30
    47f8:	ff 1f       	adc	r31, r31
    47fa:	ee 58       	subi	r30, 0x8E	; 142
    47fc:	fa 4d       	sbci	r31, 0xDA	; 218
    47fe:	60 81       	ld	r22, Z
    4800:	71 81       	ldd	r23, Z+1	; 0x01
    4802:	af bf       	out	0x3f, r26	; 63
    4804:	26 17       	cp	r18, r22
    4806:	37 07       	cpc	r19, r23
    4808:	30 f0       	brcs	.+12     	; 0x4816 <udi_cdc_multi_getc+0x58>
    480a:	80 91 f6 25 	lds	r24, 0x25F6	; 0x8025f6 <udi_cdc_data_running>
    480e:	81 11       	cpse	r24, r1
    4810:	e6 cf       	rjmp	.-52     	; 0x47de <udi_cdc_multi_getc+0x20>
    4812:	90 e0       	ldi	r25, 0x00	; 0
    4814:	21 c0       	rjmp	.+66     	; 0x4858 <udi_cdc_multi_getc+0x9a>
    4816:	fc 01       	movw	r30, r24
    4818:	00 24       	eor	r0, r0
    481a:	f6 95       	lsr	r31
    481c:	e7 95       	ror	r30
    481e:	07 94       	ror	r0
    4820:	f6 95       	lsr	r31
    4822:	e7 95       	ror	r30
    4824:	07 94       	ror	r0
    4826:	fe 2f       	mov	r31, r30
    4828:	e0 2d       	mov	r30, r0
    482a:	e2 0f       	add	r30, r18
    482c:	f3 1f       	adc	r31, r19
    482e:	ea 58       	subi	r30, 0x8A	; 138
    4830:	fa 4d       	sbci	r31, 0xDA	; 218
    4832:	80 81       	ld	r24, Z
    4834:	7a 01       	movw	r14, r20
    4836:	e8 2a       	or	r14, r24
    4838:	2f 5f       	subi	r18, 0xFF	; 255
    483a:	3f 4f       	sbci	r19, 0xFF	; 255
    483c:	20 93 6f 25 	sts	0x256F, r18	; 0x80256f <udi_cdc_rx_pos>
    4840:	30 93 70 25 	sts	0x2570, r19	; 0x802570 <udi_cdc_rx_pos+0x1>
    4844:	80 e0       	ldi	r24, 0x00	; 0
    4846:	07 df       	rcall	.-498    	; 0x4656 <udi_cdc_rx_start>
    4848:	11 23       	and	r17, r17
    484a:	21 f0       	breq	.+8      	; 0x4854 <udi_cdc_multi_getc+0x96>
    484c:	5e 2d       	mov	r21, r14
    484e:	44 27       	eor	r20, r20
    4850:	10 e0       	ldi	r17, 0x00	; 0
    4852:	c5 cf       	rjmp	.-118    	; 0x47de <udi_cdc_multi_getc+0x20>
    4854:	8e 2d       	mov	r24, r14
    4856:	9f 2d       	mov	r25, r15
    4858:	0f 90       	pop	r0
    485a:	df 91       	pop	r29
    485c:	cf 91       	pop	r28
    485e:	1f 91       	pop	r17
    4860:	ff 90       	pop	r15
    4862:	ef 90       	pop	r14
    4864:	08 95       	ret

00004866 <udi_cdc_getc>:
    4866:	80 e0       	ldi	r24, 0x00	; 0
    4868:	aa cf       	rjmp	.-172    	; 0x47be <udi_cdc_multi_getc>
    486a:	08 95       	ret

0000486c <udi_cdc_multi_get_free_tx_buffer>:
    486c:	cf 93       	push	r28
    486e:	df 93       	push	r29
    4870:	1f 92       	push	r1
    4872:	cd b7       	in	r28, 0x3d	; 61
    4874:	de b7       	in	r29, 0x3e	; 62
    4876:	8f b7       	in	r24, 0x3f	; 63
    4878:	89 83       	std	Y+1, r24	; 0x01
    487a:	f8 94       	cli
    487c:	99 81       	ldd	r25, Y+1	; 0x01
    487e:	80 91 e8 24 	lds	r24, 0x24E8	; 0x8024e8 <udi_cdc_tx_buf_sel>
    4882:	e8 2f       	mov	r30, r24
    4884:	f0 e0       	ldi	r31, 0x00	; 0
    4886:	ee 0f       	add	r30, r30
    4888:	ff 1f       	adc	r31, r31
    488a:	e7 51       	subi	r30, 0x17	; 23
    488c:	fb 4d       	sbci	r31, 0xDB	; 219
    488e:	20 81       	ld	r18, Z
    4890:	31 81       	ldd	r19, Z+1	; 0x01
    4892:	20 34       	cpi	r18, 0x40	; 64
    4894:	31 05       	cpc	r19, r1
    4896:	89 f4       	brne	.+34     	; 0x48ba <udi_cdc_multi_get_free_tx_buffer+0x4e>
    4898:	40 91 e5 24 	lds	r20, 0x24E5	; 0x8024e5 <udi_cdc_tx_trans_ongoing>
    489c:	41 11       	cpse	r20, r1
    489e:	0d c0       	rjmp	.+26     	; 0x48ba <udi_cdc_multi_get_free_tx_buffer+0x4e>
    48a0:	40 91 e4 24 	lds	r20, 0x24E4	; 0x8024e4 <udi_cdc_tx_both_buf_to_send>
    48a4:	41 11       	cpse	r20, r1
    48a6:	09 c0       	rjmp	.+18     	; 0x48ba <udi_cdc_multi_get_free_tx_buffer+0x4e>
    48a8:	21 e0       	ldi	r18, 0x01	; 1
    48aa:	20 93 e4 24 	sts	0x24E4, r18	; 0x8024e4 <udi_cdc_tx_both_buf_to_send>
    48ae:	81 11       	cpse	r24, r1
    48b0:	20 e0       	ldi	r18, 0x00	; 0
    48b2:	20 93 e8 24 	sts	0x24E8, r18	; 0x8024e8 <udi_cdc_tx_buf_sel>
    48b6:	20 e0       	ldi	r18, 0x00	; 0
    48b8:	30 e0       	ldi	r19, 0x00	; 0
    48ba:	9f bf       	out	0x3f, r25	; 63
    48bc:	80 e4       	ldi	r24, 0x40	; 64
    48be:	90 e0       	ldi	r25, 0x00	; 0
    48c0:	82 1b       	sub	r24, r18
    48c2:	93 0b       	sbc	r25, r19
    48c4:	0f 90       	pop	r0
    48c6:	df 91       	pop	r29
    48c8:	cf 91       	pop	r28
    48ca:	08 95       	ret

000048cc <udi_cdc_multi_is_tx_ready>:
    48cc:	cf df       	rcall	.-98     	; 0x486c <udi_cdc_multi_get_free_tx_buffer>
    48ce:	21 e0       	ldi	r18, 0x01	; 1
    48d0:	89 2b       	or	r24, r25
    48d2:	09 f4       	brne	.+2      	; 0x48d6 <udi_cdc_multi_is_tx_ready+0xa>
    48d4:	20 e0       	ldi	r18, 0x00	; 0
    48d6:	82 2f       	mov	r24, r18
    48d8:	08 95       	ret

000048da <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
    48da:	ff 92       	push	r15
    48dc:	0f 93       	push	r16
    48de:	1f 93       	push	r17
    48e0:	cf 93       	push	r28
    48e2:	df 93       	push	r29
    48e4:	1f 92       	push	r1
    48e6:	cd b7       	in	r28, 0x3d	; 61
    48e8:	de b7       	in	r29, 0x3e	; 62
    48ea:	f6 2e       	mov	r15, r22
    48ec:	17 2f       	mov	r17, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    48ee:	01 e0       	ldi	r16, 0x01	; 1
    48f0:	80 91 0c 26 	lds	r24, 0x260C	; 0x80260c <udi_cdc_line_coding+0x6>
    48f4:	89 30       	cpi	r24, 0x09	; 9
    48f6:	09 f0       	breq	.+2      	; 0x48fa <udi_cdc_multi_putc+0x20>
    48f8:	00 e0       	ldi	r16, 0x00	; 0

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
    48fa:	80 e0       	ldi	r24, 0x00	; 0
    48fc:	e7 df       	rcall	.-50     	; 0x48cc <udi_cdc_multi_is_tx_ready>
    48fe:	81 11       	cpse	r24, r1
    4900:	07 c0       	rjmp	.+14     	; 0x4910 <udi_cdc_multi_putc+0x36>
		if (!udi_cdc_data_running) {
    4902:	80 91 f6 25 	lds	r24, 0x25F6	; 0x8025f6 <udi_cdc_data_running>
    4906:	81 11       	cpse	r24, r1
    4908:	f8 cf       	rjmp	.-16     	; 0x48fa <udi_cdc_multi_putc+0x20>
			return false;
    490a:	80 e0       	ldi	r24, 0x00	; 0
    490c:	90 e0       	ldi	r25, 0x00	; 0
    490e:	2d c0       	rjmp	.+90     	; 0x496a <udi_cdc_multi_putc+0x90>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4910:	8f b7       	in	r24, 0x3f	; 63
    4912:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4914:	f8 94       	cli
	return flags;
    4916:	29 81       	ldd	r18, Y+1	; 0x01
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
    4918:	e0 91 e8 24 	lds	r30, 0x24E8	; 0x8024e8 <udi_cdc_tx_buf_sel>
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    491c:	f0 e0       	ldi	r31, 0x00	; 0
    491e:	df 01       	movw	r26, r30
    4920:	aa 0f       	add	r26, r26
    4922:	bb 1f       	adc	r27, r27
    4924:	a7 51       	subi	r26, 0x17	; 23
    4926:	bb 4d       	sbci	r27, 0xDB	; 219
    4928:	8d 91       	ld	r24, X+
    492a:	9c 91       	ld	r25, X
    492c:	11 97       	sbiw	r26, 0x01	; 1
    492e:	ac 01       	movw	r20, r24
    4930:	4f 5f       	subi	r20, 0xFF	; 255
    4932:	5f 4f       	sbci	r21, 0xFF	; 255
    4934:	4d 93       	st	X+, r20
    4936:	5c 93       	st	X, r21
    4938:	00 24       	eor	r0, r0
    493a:	f6 95       	lsr	r31
    493c:	e7 95       	ror	r30
    493e:	07 94       	ror	r0
    4940:	f6 95       	lsr	r31
    4942:	e7 95       	ror	r30
    4944:	07 94       	ror	r0
    4946:	fe 2f       	mov	r31, r30
    4948:	e0 2d       	mov	r30, r0
    494a:	8e 0f       	add	r24, r30
    494c:	9f 1f       	adc	r25, r31
    494e:	fc 01       	movw	r30, r24
    4950:	e2 51       	subi	r30, 0x12	; 18
    4952:	fb 4d       	sbci	r31, 0xDB	; 219
    4954:	f0 82       	st	Z, r15
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4956:	2f bf       	out	0x3f, r18	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
    4958:	00 23       	and	r16, r16
    495a:	29 f0       	breq	.+10     	; 0x4966 <udi_cdc_multi_putc+0x8c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
    495c:	f1 2e       	mov	r15, r17
    495e:	11 0f       	add	r17, r17
    4960:	11 0b       	sbc	r17, r17
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
    4962:	00 e0       	ldi	r16, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
    4964:	ca cf       	rjmp	.-108    	; 0x48fa <udi_cdc_multi_putc+0x20>
	}
	return true;
    4966:	81 e0       	ldi	r24, 0x01	; 1
    4968:	90 e0       	ldi	r25, 0x00	; 0
}
    496a:	0f 90       	pop	r0
    496c:	df 91       	pop	r29
    496e:	cf 91       	pop	r28
    4970:	1f 91       	pop	r17
    4972:	0f 91       	pop	r16
    4974:	ff 90       	pop	r15
    4976:	08 95       	ret

00004978 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
    4978:	bc 01       	movw	r22, r24
    497a:	80 e0       	ldi	r24, 0x00	; 0
    497c:	ae cf       	rjmp	.-164    	; 0x48da <udi_cdc_multi_putc>
}
    497e:	08 95       	ret

00004980 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    4980:	e0 91 12 26 	lds	r30, 0x2612	; 0x802612 <udc_ptr_conf>
    4984:	f0 91 13 26 	lds	r31, 0x2613	; 0x802613 <udc_ptr_conf+0x1>
    4988:	01 90       	ld	r0, Z+
    498a:	f0 81       	ld	r31, Z
    498c:	e0 2d       	mov	r30, r0
    498e:	22 81       	ldd	r18, Z+2	; 0x02
    4990:	33 81       	ldd	r19, Z+3	; 0x03
    4992:	2e 0f       	add	r18, r30
    4994:	3f 1f       	adc	r19, r31
    4996:	fc 01       	movw	r30, r24
    4998:	40 81       	ld	r20, Z
    499a:	e4 0f       	add	r30, r20
    499c:	f1 1d       	adc	r31, r1
    499e:	e2 17       	cp	r30, r18
    49a0:	f3 07       	cpc	r31, r19
    49a2:	b8 f4       	brcc	.+46     	; 0x49d2 <udc_next_desc_in_iface+0x52>
    49a4:	81 81       	ldd	r24, Z+1	; 0x01
    49a6:	84 30       	cpi	r24, 0x04	; 4
    49a8:	b9 f0       	breq	.+46     	; 0x49d8 <udc_next_desc_in_iface+0x58>
    49aa:	86 13       	cpse	r24, r22
    49ac:	09 c0       	rjmp	.+18     	; 0x49c0 <udc_next_desc_in_iface+0x40>
    49ae:	05 c0       	rjmp	.+10     	; 0x49ba <udc_next_desc_in_iface+0x3a>
    49b0:	81 81       	ldd	r24, Z+1	; 0x01
    49b2:	84 30       	cpi	r24, 0x04	; 4
    49b4:	a1 f0       	breq	.+40     	; 0x49de <udc_next_desc_in_iface+0x5e>
    49b6:	86 13       	cpse	r24, r22
    49b8:	03 c0       	rjmp	.+6      	; 0x49c0 <udc_next_desc_in_iface+0x40>
    49ba:	8e 2f       	mov	r24, r30
    49bc:	9f 2f       	mov	r25, r31
    49be:	08 95       	ret
    49c0:	80 81       	ld	r24, Z
    49c2:	e8 0f       	add	r30, r24
    49c4:	f1 1d       	adc	r31, r1
    49c6:	e2 17       	cp	r30, r18
    49c8:	f3 07       	cpc	r31, r19
    49ca:	90 f3       	brcs	.-28     	; 0x49b0 <udc_next_desc_in_iface+0x30>
    49cc:	80 e0       	ldi	r24, 0x00	; 0
    49ce:	90 e0       	ldi	r25, 0x00	; 0
    49d0:	08 95       	ret
    49d2:	80 e0       	ldi	r24, 0x00	; 0
    49d4:	90 e0       	ldi	r25, 0x00	; 0
    49d6:	08 95       	ret
    49d8:	80 e0       	ldi	r24, 0x00	; 0
    49da:	90 e0       	ldi	r25, 0x00	; 0
    49dc:	08 95       	ret
    49de:	80 e0       	ldi	r24, 0x00	; 0
    49e0:	90 e0       	ldi	r25, 0x00	; 0
    49e2:	08 95       	ret

000049e4 <udc_valid_address>:
    49e4:	80 91 49 33 	lds	r24, 0x3349	; 0x803349 <udd_g_ctrlreq+0x2>
    49e8:	8f 77       	andi	r24, 0x7F	; 127
    49ea:	60 c7       	rjmp	.+3776   	; 0x58ac <udd_set_address>
    49ec:	08 95       	ret

000049ee <udc_update_iface_desc>:
    49ee:	90 91 14 26 	lds	r25, 0x2614	; 0x802614 <udc_num_configuration>
    49f2:	99 23       	and	r25, r25
    49f4:	81 f1       	breq	.+96     	; 0x4a56 <udc_update_iface_desc+0x68>
    49f6:	e0 91 12 26 	lds	r30, 0x2612	; 0x802612 <udc_ptr_conf>
    49fa:	f0 91 13 26 	lds	r31, 0x2613	; 0x802613 <udc_ptr_conf+0x1>
    49fe:	01 90       	ld	r0, Z+
    4a00:	f0 81       	ld	r31, Z
    4a02:	e0 2d       	mov	r30, r0
    4a04:	94 81       	ldd	r25, Z+4	; 0x04
    4a06:	89 17       	cp	r24, r25
    4a08:	40 f5       	brcc	.+80     	; 0x4a5a <udc_update_iface_desc+0x6c>
    4a0a:	e0 93 10 26 	sts	0x2610, r30	; 0x802610 <udc_ptr_iface>
    4a0e:	f0 93 11 26 	sts	0x2611, r31	; 0x802611 <udc_ptr_iface+0x1>
    4a12:	22 81       	ldd	r18, Z+2	; 0x02
    4a14:	33 81       	ldd	r19, Z+3	; 0x03
    4a16:	2e 0f       	add	r18, r30
    4a18:	3f 1f       	adc	r19, r31
    4a1a:	e2 17       	cp	r30, r18
    4a1c:	f3 07       	cpc	r31, r19
    4a1e:	f8 f4       	brcc	.+62     	; 0x4a5e <udc_update_iface_desc+0x70>
    4a20:	91 81       	ldd	r25, Z+1	; 0x01
    4a22:	94 30       	cpi	r25, 0x04	; 4
    4a24:	61 f4       	brne	.+24     	; 0x4a3e <udc_update_iface_desc+0x50>
    4a26:	92 81       	ldd	r25, Z+2	; 0x02
    4a28:	98 13       	cpse	r25, r24
    4a2a:	09 c0       	rjmp	.+18     	; 0x4a3e <udc_update_iface_desc+0x50>
    4a2c:	93 81       	ldd	r25, Z+3	; 0x03
    4a2e:	96 13       	cpse	r25, r22
    4a30:	06 c0       	rjmp	.+12     	; 0x4a3e <udc_update_iface_desc+0x50>
    4a32:	e0 93 10 26 	sts	0x2610, r30	; 0x802610 <udc_ptr_iface>
    4a36:	f0 93 11 26 	sts	0x2611, r31	; 0x802611 <udc_ptr_iface+0x1>
    4a3a:	81 e0       	ldi	r24, 0x01	; 1
    4a3c:	08 95       	ret
    4a3e:	90 81       	ld	r25, Z
    4a40:	e9 0f       	add	r30, r25
    4a42:	f1 1d       	adc	r31, r1
    4a44:	e2 17       	cp	r30, r18
    4a46:	f3 07       	cpc	r31, r19
    4a48:	58 f3       	brcs	.-42     	; 0x4a20 <udc_update_iface_desc+0x32>
    4a4a:	e0 93 10 26 	sts	0x2610, r30	; 0x802610 <udc_ptr_iface>
    4a4e:	f0 93 11 26 	sts	0x2611, r31	; 0x802611 <udc_ptr_iface+0x1>
    4a52:	80 e0       	ldi	r24, 0x00	; 0
    4a54:	08 95       	ret
    4a56:	80 e0       	ldi	r24, 0x00	; 0
    4a58:	08 95       	ret
    4a5a:	80 e0       	ldi	r24, 0x00	; 0
    4a5c:	08 95       	ret
    4a5e:	80 e0       	ldi	r24, 0x00	; 0
    4a60:	08 95       	ret

00004a62 <udc_iface_disable>:
    4a62:	ef 92       	push	r14
    4a64:	ff 92       	push	r15
    4a66:	1f 93       	push	r17
    4a68:	cf 93       	push	r28
    4a6a:	df 93       	push	r29
    4a6c:	c8 2f       	mov	r28, r24
    4a6e:	60 e0       	ldi	r22, 0x00	; 0
    4a70:	be df       	rcall	.-132    	; 0x49ee <udc_update_iface_desc>
    4a72:	18 2f       	mov	r17, r24
    4a74:	88 23       	and	r24, r24
    4a76:	81 f1       	breq	.+96     	; 0x4ad8 <udc_iface_disable+0x76>
    4a78:	a0 91 12 26 	lds	r26, 0x2612	; 0x802612 <udc_ptr_conf>
    4a7c:	b0 91 13 26 	lds	r27, 0x2613	; 0x802613 <udc_ptr_conf+0x1>
    4a80:	ec 2f       	mov	r30, r28
    4a82:	f0 e0       	ldi	r31, 0x00	; 0
    4a84:	ee 0f       	add	r30, r30
    4a86:	ff 1f       	adc	r31, r31
    4a88:	12 96       	adiw	r26, 0x02	; 2
    4a8a:	8d 91       	ld	r24, X+
    4a8c:	9c 91       	ld	r25, X
    4a8e:	13 97       	sbiw	r26, 0x03	; 3
    4a90:	e8 0f       	add	r30, r24
    4a92:	f9 1f       	adc	r31, r25
    4a94:	e0 80       	ld	r14, Z
    4a96:	f1 80       	ldd	r15, Z+1	; 0x01
    4a98:	d7 01       	movw	r26, r14
    4a9a:	16 96       	adiw	r26, 0x06	; 6
    4a9c:	ed 91       	ld	r30, X+
    4a9e:	fc 91       	ld	r31, X
    4aa0:	17 97       	sbiw	r26, 0x07	; 7
    4aa2:	19 95       	eicall
    4aa4:	68 2f       	mov	r22, r24
    4aa6:	8c 2f       	mov	r24, r28
    4aa8:	a2 df       	rcall	.-188    	; 0x49ee <udc_update_iface_desc>
    4aaa:	18 2f       	mov	r17, r24
    4aac:	88 23       	and	r24, r24
    4aae:	a1 f0       	breq	.+40     	; 0x4ad8 <udc_iface_disable+0x76>
    4ab0:	c0 91 10 26 	lds	r28, 0x2610	; 0x802610 <udc_ptr_iface>
    4ab4:	d0 91 11 26 	lds	r29, 0x2611	; 0x802611 <udc_ptr_iface+0x1>
    4ab8:	65 e0       	ldi	r22, 0x05	; 5
    4aba:	ce 01       	movw	r24, r28
    4abc:	61 df       	rcall	.-318    	; 0x4980 <udc_next_desc_in_iface>
    4abe:	ec 01       	movw	r28, r24
    4ac0:	89 2b       	or	r24, r25
    4ac2:	21 f0       	breq	.+8      	; 0x4acc <udc_iface_disable+0x6a>
    4ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ac6:	0e 94 55 2e 	call	0x5caa	; 0x5caa <udd_ep_free>
    4aca:	f6 cf       	rjmp	.-20     	; 0x4ab8 <udc_iface_disable+0x56>
    4acc:	d7 01       	movw	r26, r14
    4ace:	12 96       	adiw	r26, 0x02	; 2
    4ad0:	ed 91       	ld	r30, X+
    4ad2:	fc 91       	ld	r31, X
    4ad4:	13 97       	sbiw	r26, 0x03	; 3
    4ad6:	19 95       	eicall
    4ad8:	81 2f       	mov	r24, r17
    4ada:	df 91       	pop	r29
    4adc:	cf 91       	pop	r28
    4ade:	1f 91       	pop	r17
    4ae0:	ff 90       	pop	r15
    4ae2:	ef 90       	pop	r14
    4ae4:	08 95       	ret

00004ae6 <udc_iface_enable>:
    4ae6:	1f 93       	push	r17
    4ae8:	cf 93       	push	r28
    4aea:	df 93       	push	r29
    4aec:	18 2f       	mov	r17, r24
    4aee:	7f df       	rcall	.-258    	; 0x49ee <udc_update_iface_desc>
    4af0:	88 23       	and	r24, r24
    4af2:	39 f1       	breq	.+78     	; 0x4b42 <udc_iface_enable+0x5c>
    4af4:	c0 91 10 26 	lds	r28, 0x2610	; 0x802610 <udc_ptr_iface>
    4af8:	d0 91 11 26 	lds	r29, 0x2611	; 0x802611 <udc_ptr_iface+0x1>
    4afc:	65 e0       	ldi	r22, 0x05	; 5
    4afe:	ce 01       	movw	r24, r28
    4b00:	3f df       	rcall	.-386    	; 0x4980 <udc_next_desc_in_iface>
    4b02:	ec 01       	movw	r28, r24
    4b04:	89 2b       	or	r24, r25
    4b06:	41 f0       	breq	.+16     	; 0x4b18 <udc_iface_enable+0x32>
    4b08:	4c 81       	ldd	r20, Y+4	; 0x04
    4b0a:	5d 81       	ldd	r21, Y+5	; 0x05
    4b0c:	6b 81       	ldd	r22, Y+3	; 0x03
    4b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b10:	e2 d6       	rcall	.+3524   	; 0x58d6 <udd_ep_alloc>
    4b12:	81 11       	cpse	r24, r1
    4b14:	f3 cf       	rjmp	.-26     	; 0x4afc <udc_iface_enable+0x16>
    4b16:	15 c0       	rjmp	.+42     	; 0x4b42 <udc_iface_enable+0x5c>
    4b18:	a0 91 12 26 	lds	r26, 0x2612	; 0x802612 <udc_ptr_conf>
    4b1c:	b0 91 13 26 	lds	r27, 0x2613	; 0x802613 <udc_ptr_conf+0x1>
    4b20:	e1 2f       	mov	r30, r17
    4b22:	f0 e0       	ldi	r31, 0x00	; 0
    4b24:	ee 0f       	add	r30, r30
    4b26:	ff 1f       	adc	r31, r31
    4b28:	12 96       	adiw	r26, 0x02	; 2
    4b2a:	8d 91       	ld	r24, X+
    4b2c:	9c 91       	ld	r25, X
    4b2e:	13 97       	sbiw	r26, 0x03	; 3
    4b30:	e8 0f       	add	r30, r24
    4b32:	f9 1f       	adc	r31, r25
    4b34:	01 90       	ld	r0, Z+
    4b36:	f0 81       	ld	r31, Z
    4b38:	e0 2d       	mov	r30, r0
    4b3a:	01 90       	ld	r0, Z+
    4b3c:	f0 81       	ld	r31, Z
    4b3e:	e0 2d       	mov	r30, r0
    4b40:	19 95       	eicall
    4b42:	df 91       	pop	r29
    4b44:	cf 91       	pop	r28
    4b46:	1f 91       	pop	r17
    4b48:	08 95       	ret

00004b4a <udc_start>:
    4b4a:	2c c6       	rjmp	.+3160   	; 0x57a4 <udd_enable>
    4b4c:	08 95       	ret

00004b4e <udc_reset>:
    4b4e:	cf 93       	push	r28
    4b50:	80 91 14 26 	lds	r24, 0x2614	; 0x802614 <udc_num_configuration>
    4b54:	88 23       	and	r24, r24
    4b56:	c1 f0       	breq	.+48     	; 0x4b88 <udc_reset+0x3a>
    4b58:	e0 91 12 26 	lds	r30, 0x2612	; 0x802612 <udc_ptr_conf>
    4b5c:	f0 91 13 26 	lds	r31, 0x2613	; 0x802613 <udc_ptr_conf+0x1>
    4b60:	01 90       	ld	r0, Z+
    4b62:	f0 81       	ld	r31, Z
    4b64:	e0 2d       	mov	r30, r0
    4b66:	84 81       	ldd	r24, Z+4	; 0x04
    4b68:	88 23       	and	r24, r24
    4b6a:	71 f0       	breq	.+28     	; 0x4b88 <udc_reset+0x3a>
    4b6c:	c0 e0       	ldi	r28, 0x00	; 0
    4b6e:	8c 2f       	mov	r24, r28
    4b70:	78 df       	rcall	.-272    	; 0x4a62 <udc_iface_disable>
    4b72:	cf 5f       	subi	r28, 0xFF	; 255
    4b74:	e0 91 12 26 	lds	r30, 0x2612	; 0x802612 <udc_ptr_conf>
    4b78:	f0 91 13 26 	lds	r31, 0x2613	; 0x802613 <udc_ptr_conf+0x1>
    4b7c:	01 90       	ld	r0, Z+
    4b7e:	f0 81       	ld	r31, Z
    4b80:	e0 2d       	mov	r30, r0
    4b82:	84 81       	ldd	r24, Z+4	; 0x04
    4b84:	c8 17       	cp	r28, r24
    4b86:	98 f3       	brcs	.-26     	; 0x4b6e <udc_reset+0x20>
    4b88:	10 92 14 26 	sts	0x2614, r1	; 0x802614 <udc_num_configuration>
    4b8c:	81 e0       	ldi	r24, 0x01	; 1
    4b8e:	90 e0       	ldi	r25, 0x00	; 0
    4b90:	80 93 18 26 	sts	0x2618, r24	; 0x802618 <udc_device_status>
    4b94:	90 93 19 26 	sts	0x2619, r25	; 0x802619 <udc_device_status+0x1>
    4b98:	cf 91       	pop	r28
    4b9a:	08 95       	ret

00004b9c <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    4b9c:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    4b9e:	80 91 14 26 	lds	r24, 0x2614	; 0x802614 <udc_num_configuration>
    4ba2:	88 23       	and	r24, r24
    4ba4:	49 f1       	breq	.+82     	; 0x4bf8 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4ba6:	a0 91 12 26 	lds	r26, 0x2612	; 0x802612 <udc_ptr_conf>
    4baa:	b0 91 13 26 	lds	r27, 0x2613	; 0x802613 <udc_ptr_conf+0x1>
    4bae:	ed 91       	ld	r30, X+
    4bb0:	fc 91       	ld	r31, X
    4bb2:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    4bb4:	84 81       	ldd	r24, Z+4	; 0x04
    4bb6:	88 23       	and	r24, r24
    4bb8:	f9 f0       	breq	.+62     	; 0x4bf8 <udc_sof_notify+0x5c>
    4bba:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    4bbc:	ec 2f       	mov	r30, r28
    4bbe:	f0 e0       	ldi	r31, 0x00	; 0
    4bc0:	ee 0f       	add	r30, r30
    4bc2:	ff 1f       	adc	r31, r31
    4bc4:	12 96       	adiw	r26, 0x02	; 2
    4bc6:	8d 91       	ld	r24, X+
    4bc8:	9c 91       	ld	r25, X
    4bca:	13 97       	sbiw	r26, 0x03	; 3
    4bcc:	e8 0f       	add	r30, r24
    4bce:	f9 1f       	adc	r31, r25
    4bd0:	01 90       	ld	r0, Z+
    4bd2:	f0 81       	ld	r31, Z
    4bd4:	e0 2d       	mov	r30, r0
    4bd6:	00 84       	ldd	r0, Z+8	; 0x08
    4bd8:	f1 85       	ldd	r31, Z+9	; 0x09
    4bda:	e0 2d       	mov	r30, r0
    4bdc:	30 97       	sbiw	r30, 0x00	; 0
    4bde:	09 f0       	breq	.+2      	; 0x4be2 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    4be0:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    4be2:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4be4:	a0 91 12 26 	lds	r26, 0x2612	; 0x802612 <udc_ptr_conf>
    4be8:	b0 91 13 26 	lds	r27, 0x2613	; 0x802613 <udc_ptr_conf+0x1>
    4bec:	ed 91       	ld	r30, X+
    4bee:	fc 91       	ld	r31, X
    4bf0:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    4bf2:	84 81       	ldd	r24, Z+4	; 0x04
    4bf4:	c8 17       	cp	r28, r24
    4bf6:	10 f3       	brcs	.-60     	; 0x4bbc <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    4bf8:	cf 91       	pop	r28
    4bfa:	08 95       	ret

00004bfc <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    4bfc:	0f 93       	push	r16
    4bfe:	1f 93       	push	r17
    4c00:	cf 93       	push	r28
    4c02:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    4c04:	e7 e4       	ldi	r30, 0x47	; 71
    4c06:	f3 e3       	ldi	r31, 0x33	; 51
    4c08:	12 86       	std	Z+10, r1	; 0x0a
    4c0a:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    4c0c:	14 86       	std	Z+12, r1	; 0x0c
    4c0e:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    4c10:	16 86       	std	Z+14, r1	; 0x0e
    4c12:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    4c14:	80 81       	ld	r24, Z
    4c16:	88 23       	and	r24, r24
    4c18:	0c f0       	brlt	.+2      	; 0x4c1c <udc_process_setup+0x20>
    4c1a:	63 c2       	rjmp	.+1222   	; 0x50e2 <udc_process_setup+0x4e6>
		if (udd_g_ctrlreq.req.wLength == 0) {
    4c1c:	20 91 4d 33 	lds	r18, 0x334D	; 0x80334d <udd_g_ctrlreq+0x6>
    4c20:	30 91 4e 33 	lds	r19, 0x334E	; 0x80334e <udd_g_ctrlreq+0x7>
    4c24:	21 15       	cp	r18, r1
    4c26:	31 05       	cpc	r19, r1
    4c28:	09 f0       	breq	.+2      	; 0x4c2c <udc_process_setup+0x30>
    4c2a:	56 c2       	rjmp	.+1196   	; 0x50d8 <udc_process_setup+0x4dc>
    4c2c:	51 c2       	rjmp	.+1186   	; 0x50d0 <udc_process_setup+0x4d4>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    4c2e:	8f 71       	andi	r24, 0x1F	; 31
    4c30:	09 f0       	breq	.+2      	; 0x4c34 <udc_process_setup+0x38>
    4c32:	a7 c0       	rjmp	.+334    	; 0x4d82 <udc_process_setup+0x186>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    4c34:	90 91 48 33 	lds	r25, 0x3348	; 0x803348 <udd_g_ctrlreq+0x1>
    4c38:	96 30       	cpi	r25, 0x06	; 6
    4c3a:	79 f0       	breq	.+30     	; 0x4c5a <udc_process_setup+0x5e>
    4c3c:	98 30       	cpi	r25, 0x08	; 8
    4c3e:	09 f4       	brne	.+2      	; 0x4c42 <udc_process_setup+0x46>
    4c40:	96 c0       	rjmp	.+300    	; 0x4d6e <udc_process_setup+0x172>
    4c42:	91 11       	cpse	r25, r1
    4c44:	9e c0       	rjmp	.+316    	; 0x4d82 <udc_process_setup+0x186>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    4c46:	22 30       	cpi	r18, 0x02	; 2
    4c48:	31 05       	cpc	r19, r1
    4c4a:	09 f0       	breq	.+2      	; 0x4c4e <udc_process_setup+0x52>
    4c4c:	ca c1       	rjmp	.+916    	; 0x4fe2 <udc_process_setup+0x3e6>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    4c4e:	62 e0       	ldi	r22, 0x02	; 2
    4c50:	70 e0       	ldi	r23, 0x00	; 0
    4c52:	88 e1       	ldi	r24, 0x18	; 24
    4c54:	96 e2       	ldi	r25, 0x26	; 38
    4c56:	38 d6       	rcall	.+3184   	; 0x58c8 <udd_set_setup_payload>
    4c58:	4d c2       	rjmp	.+1178   	; 0x50f4 <udc_process_setup+0x4f8>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    4c5a:	80 91 49 33 	lds	r24, 0x3349	; 0x803349 <udd_g_ctrlreq+0x2>
    4c5e:	90 91 4a 33 	lds	r25, 0x334A	; 0x80334a <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    4c62:	29 2f       	mov	r18, r25
    4c64:	33 27       	eor	r19, r19
    4c66:	22 30       	cpi	r18, 0x02	; 2
    4c68:	31 05       	cpc	r19, r1
    4c6a:	a9 f0       	breq	.+42     	; 0x4c96 <udc_process_setup+0x9a>
    4c6c:	24 f4       	brge	.+8      	; 0x4c76 <udc_process_setup+0x7a>
    4c6e:	21 30       	cpi	r18, 0x01	; 1
    4c70:	31 05       	cpc	r19, r1
    4c72:	41 f0       	breq	.+16     	; 0x4c84 <udc_process_setup+0x88>
    4c74:	ad c1       	rjmp	.+858    	; 0x4fd0 <udc_process_setup+0x3d4>
    4c76:	23 30       	cpi	r18, 0x03	; 3
    4c78:	31 05       	cpc	r19, r1
    4c7a:	d9 f1       	breq	.+118    	; 0x4cf2 <udc_process_setup+0xf6>
    4c7c:	2f 30       	cpi	r18, 0x0F	; 15
    4c7e:	31 05       	cpc	r19, r1
    4c80:	51 f1       	breq	.+84     	; 0x4cd6 <udc_process_setup+0xda>
    4c82:	a6 c1       	rjmp	.+844    	; 0x4fd0 <udc_process_setup+0x3d4>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    4c84:	80 91 82 20 	lds	r24, 0x2082	; 0x802082 <udc_config>
    4c88:	90 91 83 20 	lds	r25, 0x2083	; 0x802083 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    4c8c:	dc 01       	movw	r26, r24
    4c8e:	6c 91       	ld	r22, X
    4c90:	70 e0       	ldi	r23, 0x00	; 0
    4c92:	1a d6       	rcall	.+3124   	; 0x58c8 <udd_set_setup_payload>
    4c94:	5d c0       	rjmp	.+186    	; 0x4d50 <udc_process_setup+0x154>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    4c96:	e0 91 82 20 	lds	r30, 0x2082	; 0x802082 <udc_config>
    4c9a:	f0 91 83 20 	lds	r31, 0x2083	; 0x802083 <udc_config+0x1>
    4c9e:	21 89       	ldd	r18, Z+17	; 0x11
    4ca0:	82 17       	cp	r24, r18
    4ca2:	08 f0       	brcs	.+2      	; 0x4ca6 <udc_process_setup+0xaa>
    4ca4:	9e c1       	rjmp	.+828    	; 0x4fe2 <udc_process_setup+0x3e6>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    4ca6:	99 27       	eor	r25, r25
    4ca8:	88 0f       	add	r24, r24
    4caa:	99 1f       	adc	r25, r25
    4cac:	88 0f       	add	r24, r24
    4cae:	99 1f       	adc	r25, r25
    4cb0:	e0 91 84 20 	lds	r30, 0x2084	; 0x802084 <udc_config+0x2>
    4cb4:	f0 91 85 20 	lds	r31, 0x2085	; 0x802085 <udc_config+0x3>
    4cb8:	e8 0f       	add	r30, r24
    4cba:	f9 1f       	adc	r31, r25
    4cbc:	80 81       	ld	r24, Z
    4cbe:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    4cc0:	fc 01       	movw	r30, r24
    4cc2:	62 81       	ldd	r22, Z+2	; 0x02
    4cc4:	73 81       	ldd	r23, Z+3	; 0x03
    4cc6:	00 d6       	rcall	.+3072   	; 0x58c8 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    4cc8:	e0 91 4f 33 	lds	r30, 0x334F	; 0x80334f <udd_g_ctrlreq+0x8>
    4ccc:	f0 91 50 33 	lds	r31, 0x3350	; 0x803350 <udd_g_ctrlreq+0x9>
    4cd0:	82 e0       	ldi	r24, 0x02	; 2
    4cd2:	81 83       	std	Z+1, r24	; 0x01
    4cd4:	3d c0       	rjmp	.+122    	; 0x4d50 <udc_process_setup+0x154>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    4cd6:	80 91 86 20 	lds	r24, 0x2086	; 0x802086 <udc_config+0x4>
    4cda:	90 91 87 20 	lds	r25, 0x2087	; 0x802087 <udc_config+0x5>
    4cde:	00 97       	sbiw	r24, 0x00	; 0
    4ce0:	09 f4       	brne	.+2      	; 0x4ce4 <udc_process_setup+0xe8>
    4ce2:	7f c1       	rjmp	.+766    	; 0x4fe2 <udc_process_setup+0x3e6>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    4ce4:	dc 01       	movw	r26, r24
    4ce6:	12 96       	adiw	r26, 0x02	; 2
    4ce8:	6d 91       	ld	r22, X+
    4cea:	7c 91       	ld	r23, X
    4cec:	13 97       	sbiw	r26, 0x03	; 3
    4cee:	ec d5       	rcall	.+3032   	; 0x58c8 <udd_set_setup_payload>
    4cf0:	2f c0       	rjmp	.+94     	; 0x4d50 <udc_process_setup+0x154>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    4cf2:	99 27       	eor	r25, r25
    4cf4:	81 30       	cpi	r24, 0x01	; 1
    4cf6:	91 05       	cpc	r25, r1
    4cf8:	91 f0       	breq	.+36     	; 0x4d1e <udc_process_setup+0x122>
    4cfa:	58 f0       	brcs	.+22     	; 0x4d12 <udc_process_setup+0x116>
    4cfc:	82 30       	cpi	r24, 0x02	; 2
    4cfe:	91 05       	cpc	r25, r1
    4d00:	09 f4       	brne	.+2      	; 0x4d04 <udc_process_setup+0x108>
    4d02:	f4 c1       	rjmp	.+1000   	; 0x50ec <udc_process_setup+0x4f0>
    4d04:	03 97       	sbiw	r24, 0x03	; 3
    4d06:	09 f0       	breq	.+2      	; 0x4d0a <udc_process_setup+0x10e>
    4d08:	6c c1       	rjmp	.+728    	; 0x4fe2 <udc_process_setup+0x3e6>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    4d0a:	27 e0       	ldi	r18, 0x07	; 7
		str = udc_get_string_serial_name();
    4d0c:	86 ea       	ldi	r24, 0xA6	; 166
    4d0e:	94 e2       	ldi	r25, 0x24	; 36
    4d10:	09 c0       	rjmp	.+18     	; 0x4d24 <udc_process_setup+0x128>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    4d12:	64 e0       	ldi	r22, 0x04	; 4
    4d14:	70 e0       	ldi	r23, 0x00	; 0
    4d16:	8e e7       	ldi	r24, 0x7E	; 126
    4d18:	90 e2       	ldi	r25, 0x20	; 32
    4d1a:	d6 d5       	rcall	.+2988   	; 0x58c8 <udd_set_setup_payload>
    4d1c:	19 c0       	rjmp	.+50     	; 0x4d50 <udc_process_setup+0x154>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    4d1e:	8b e6       	ldi	r24, 0x6B	; 107
    4d20:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    4d22:	22 e1       	ldi	r18, 0x12	; 18
    4d24:	38 2f       	mov	r19, r24
    4d26:	a4 e3       	ldi	r26, 0x34	; 52
    4d28:	b0 e2       	ldi	r27, 0x20	; 32
    4d2a:	e8 2f       	mov	r30, r24
    4d2c:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    4d2e:	81 91       	ld	r24, Z+
    4d30:	90 e0       	ldi	r25, 0x00	; 0
    4d32:	8d 93       	st	X+, r24
    4d34:	9d 93       	st	X+, r25
    4d36:	8e 2f       	mov	r24, r30
    4d38:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    4d3a:	82 17       	cp	r24, r18
    4d3c:	c0 f3       	brcs	.-16     	; 0x4d2e <udc_process_setup+0x132>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    4d3e:	62 2f       	mov	r22, r18
    4d40:	66 0f       	add	r22, r22
    4d42:	6e 5f       	subi	r22, 0xFE	; 254
    4d44:	60 93 32 20 	sts	0x2032, r22	; 0x802032 <udc_string_desc>
		udd_set_setup_payload(
    4d48:	70 e0       	ldi	r23, 0x00	; 0
    4d4a:	82 e3       	ldi	r24, 0x32	; 50
    4d4c:	90 e2       	ldi	r25, 0x20	; 32
    4d4e:	bc d5       	rcall	.+2936   	; 0x58c8 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    4d50:	e7 e4       	ldi	r30, 0x47	; 71
    4d52:	f3 e3       	ldi	r31, 0x33	; 51
    4d54:	86 81       	ldd	r24, Z+6	; 0x06
    4d56:	97 81       	ldd	r25, Z+7	; 0x07
    4d58:	22 85       	ldd	r18, Z+10	; 0x0a
    4d5a:	33 85       	ldd	r19, Z+11	; 0x0b
    4d5c:	82 17       	cp	r24, r18
    4d5e:	93 07       	cpc	r25, r19
    4d60:	08 f0       	brcs	.+2      	; 0x4d64 <udc_process_setup+0x168>
    4d62:	c8 c1       	rjmp	.+912    	; 0x50f4 <udc_process_setup+0x4f8>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    4d64:	80 93 51 33 	sts	0x3351, r24	; 0x803351 <udd_g_ctrlreq+0xa>
    4d68:	90 93 52 33 	sts	0x3352, r25	; 0x803352 <udd_g_ctrlreq+0xb>
    4d6c:	c3 c1       	rjmp	.+902    	; 0x50f4 <udc_process_setup+0x4f8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    4d6e:	21 30       	cpi	r18, 0x01	; 1
    4d70:	31 05       	cpc	r19, r1
    4d72:	09 f0       	breq	.+2      	; 0x4d76 <udc_process_setup+0x17a>
    4d74:	36 c1       	rjmp	.+620    	; 0x4fe2 <udc_process_setup+0x3e6>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    4d76:	61 e0       	ldi	r22, 0x01	; 1
    4d78:	70 e0       	ldi	r23, 0x00	; 0
    4d7a:	84 e1       	ldi	r24, 0x14	; 20
    4d7c:	96 e2       	ldi	r25, 0x26	; 38
    4d7e:	a4 d5       	rcall	.+2888   	; 0x58c8 <udd_set_setup_payload>
    4d80:	b9 c1       	rjmp	.+882    	; 0x50f4 <udc_process_setup+0x4f8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    4d82:	81 30       	cpi	r24, 0x01	; 1
    4d84:	e1 f5       	brne	.+120    	; 0x4dfe <udc_process_setup+0x202>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    4d86:	90 91 48 33 	lds	r25, 0x3348	; 0x803348 <udd_g_ctrlreq+0x1>
    4d8a:	9a 30       	cpi	r25, 0x0A	; 10
    4d8c:	c1 f5       	brne	.+112    	; 0x4dfe <udc_process_setup+0x202>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    4d8e:	21 30       	cpi	r18, 0x01	; 1
    4d90:	31 05       	cpc	r19, r1
    4d92:	09 f0       	breq	.+2      	; 0x4d96 <udc_process_setup+0x19a>
    4d94:	26 c1       	rjmp	.+588    	; 0x4fe2 <udc_process_setup+0x3e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    4d96:	80 91 14 26 	lds	r24, 0x2614	; 0x802614 <udc_num_configuration>
    4d9a:	88 23       	and	r24, r24
    4d9c:	09 f4       	brne	.+2      	; 0x4da0 <udc_process_setup+0x1a4>
    4d9e:	21 c1       	rjmp	.+578    	; 0x4fe2 <udc_process_setup+0x3e6>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4da0:	c0 91 4b 33 	lds	r28, 0x334B	; 0x80334b <udd_g_ctrlreq+0x4>
    4da4:	d0 91 4c 33 	lds	r29, 0x334C	; 0x80334c <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    4da8:	00 91 12 26 	lds	r16, 0x2612	; 0x802612 <udc_ptr_conf>
    4dac:	10 91 13 26 	lds	r17, 0x2613	; 0x802613 <udc_ptr_conf+0x1>
    4db0:	d8 01       	movw	r26, r16
    4db2:	ed 91       	ld	r30, X+
    4db4:	fc 91       	ld	r31, X
    4db6:	84 81       	ldd	r24, Z+4	; 0x04
    4db8:	c8 17       	cp	r28, r24
    4dba:	08 f0       	brcs	.+2      	; 0x4dbe <udc_process_setup+0x1c2>
    4dbc:	12 c1       	rjmp	.+548    	; 0x4fe2 <udc_process_setup+0x3e6>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    4dbe:	60 e0       	ldi	r22, 0x00	; 0
    4dc0:	8c 2f       	mov	r24, r28
    4dc2:	15 de       	rcall	.-982    	; 0x49ee <udc_update_iface_desc>
    4dc4:	88 23       	and	r24, r24
    4dc6:	09 f4       	brne	.+2      	; 0x4dca <udc_process_setup+0x1ce>
    4dc8:	0c c1       	rjmp	.+536    	; 0x4fe2 <udc_process_setup+0x3e6>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    4dca:	ce 01       	movw	r24, r28
    4dcc:	99 27       	eor	r25, r25
    4dce:	88 0f       	add	r24, r24
    4dd0:	99 1f       	adc	r25, r25
    4dd2:	d8 01       	movw	r26, r16
    4dd4:	12 96       	adiw	r26, 0x02	; 2
    4dd6:	ed 91       	ld	r30, X+
    4dd8:	fc 91       	ld	r31, X
    4dda:	13 97       	sbiw	r26, 0x03	; 3
    4ddc:	e8 0f       	add	r30, r24
    4dde:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    4de0:	01 90       	ld	r0, Z+
    4de2:	f0 81       	ld	r31, Z
    4de4:	e0 2d       	mov	r30, r0
    4de6:	86 81       	ldd	r24, Z+6	; 0x06
    4de8:	97 81       	ldd	r25, Z+7	; 0x07
    4dea:	fc 01       	movw	r30, r24
    4dec:	19 95       	eicall
    4dee:	80 93 16 26 	sts	0x2616, r24	; 0x802616 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    4df2:	61 e0       	ldi	r22, 0x01	; 1
    4df4:	70 e0       	ldi	r23, 0x00	; 0
    4df6:	86 e1       	ldi	r24, 0x16	; 22
    4df8:	96 e2       	ldi	r25, 0x26	; 38
    4dfa:	66 d5       	rcall	.+2764   	; 0x58c8 <udd_set_setup_payload>
    4dfc:	7b c1       	rjmp	.+758    	; 0x50f4 <udc_process_setup+0x4f8>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    4dfe:	82 30       	cpi	r24, 0x02	; 2
    4e00:	09 f0       	breq	.+2      	; 0x4e04 <udc_process_setup+0x208>
    4e02:	ef c0       	rjmp	.+478    	; 0x4fe2 <udc_process_setup+0x3e6>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    4e04:	80 91 48 33 	lds	r24, 0x3348	; 0x803348 <udd_g_ctrlreq+0x1>
    4e08:	81 11       	cpse	r24, r1
    4e0a:	e4 c0       	rjmp	.+456    	; 0x4fd4 <udc_process_setup+0x3d8>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    4e0c:	22 30       	cpi	r18, 0x02	; 2
    4e0e:	31 05       	cpc	r19, r1
    4e10:	09 f0       	breq	.+2      	; 0x4e14 <udc_process_setup+0x218>
    4e12:	e7 c0       	rjmp	.+462    	; 0x4fe2 <udc_process_setup+0x3e6>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    4e14:	80 91 4b 33 	lds	r24, 0x334B	; 0x80334b <udd_g_ctrlreq+0x4>
    4e18:	e6 d5       	rcall	.+3020   	; 0x59e6 <udd_ep_is_halted>
    4e1a:	90 e0       	ldi	r25, 0x00	; 0
    4e1c:	80 93 0e 26 	sts	0x260E, r24	; 0x80260e <udc_ep_status.4671>
    4e20:	90 93 0f 26 	sts	0x260F, r25	; 0x80260f <udc_ep_status.4671+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    4e24:	62 e0       	ldi	r22, 0x02	; 2
    4e26:	70 e0       	ldi	r23, 0x00	; 0
    4e28:	8e e0       	ldi	r24, 0x0E	; 14
    4e2a:	96 e2       	ldi	r25, 0x26	; 38
    4e2c:	4d d5       	rcall	.+2714   	; 0x58c8 <udd_set_setup_payload>
    4e2e:	62 c1       	rjmp	.+708    	; 0x50f4 <udc_process_setup+0x4f8>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    4e30:	8f 71       	andi	r24, 0x1F	; 31
    4e32:	09 f0       	breq	.+2      	; 0x4e36 <udc_process_setup+0x23a>
    4e34:	83 c0       	rjmp	.+262    	; 0x4f3c <udc_process_setup+0x340>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    4e36:	90 91 48 33 	lds	r25, 0x3348	; 0x803348 <udd_g_ctrlreq+0x1>
    4e3a:	93 30       	cpi	r25, 0x03	; 3
    4e3c:	09 f4       	brne	.+2      	; 0x4e40 <udc_process_setup+0x244>
    4e3e:	cc c0       	rjmp	.+408    	; 0x4fd8 <udc_process_setup+0x3dc>
    4e40:	18 f4       	brcc	.+6      	; 0x4e48 <udc_process_setup+0x24c>
    4e42:	91 30       	cpi	r25, 0x01	; 1
    4e44:	a1 f0       	breq	.+40     	; 0x4e6e <udc_process_setup+0x272>
    4e46:	7a c0       	rjmp	.+244    	; 0x4f3c <udc_process_setup+0x340>
    4e48:	95 30       	cpi	r25, 0x05	; 5
    4e4a:	19 f0       	breq	.+6      	; 0x4e52 <udc_process_setup+0x256>
    4e4c:	99 30       	cpi	r25, 0x09	; 9
    4e4e:	39 f1       	breq	.+78     	; 0x4e9e <udc_process_setup+0x2a2>
    4e50:	75 c0       	rjmp	.+234    	; 0x4f3c <udc_process_setup+0x340>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    4e52:	80 91 4d 33 	lds	r24, 0x334D	; 0x80334d <udd_g_ctrlreq+0x6>
    4e56:	90 91 4e 33 	lds	r25, 0x334E	; 0x80334e <udd_g_ctrlreq+0x7>
    4e5a:	89 2b       	or	r24, r25
    4e5c:	09 f0       	breq	.+2      	; 0x4e60 <udc_process_setup+0x264>
    4e5e:	c1 c0       	rjmp	.+386    	; 0x4fe2 <udc_process_setup+0x3e6>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    4e60:	82 ef       	ldi	r24, 0xF2	; 242
    4e62:	94 e2       	ldi	r25, 0x24	; 36
    4e64:	80 93 53 33 	sts	0x3353, r24	; 0x803353 <udd_g_ctrlreq+0xc>
    4e68:	90 93 54 33 	sts	0x3354, r25	; 0x803354 <udd_g_ctrlreq+0xd>
    4e6c:	43 c1       	rjmp	.+646    	; 0x50f4 <udc_process_setup+0x4f8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    4e6e:	80 91 4d 33 	lds	r24, 0x334D	; 0x80334d <udd_g_ctrlreq+0x6>
    4e72:	90 91 4e 33 	lds	r25, 0x334E	; 0x80334e <udd_g_ctrlreq+0x7>
    4e76:	89 2b       	or	r24, r25
    4e78:	09 f0       	breq	.+2      	; 0x4e7c <udc_process_setup+0x280>
    4e7a:	b3 c0       	rjmp	.+358    	; 0x4fe2 <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    4e7c:	80 91 49 33 	lds	r24, 0x3349	; 0x803349 <udd_g_ctrlreq+0x2>
    4e80:	90 91 4a 33 	lds	r25, 0x334A	; 0x80334a <udd_g_ctrlreq+0x3>
    4e84:	01 97       	sbiw	r24, 0x01	; 1
    4e86:	09 f0       	breq	.+2      	; 0x4e8a <udc_process_setup+0x28e>
    4e88:	ac c0       	rjmp	.+344    	; 0x4fe2 <udc_process_setup+0x3e6>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    4e8a:	80 91 18 26 	lds	r24, 0x2618	; 0x802618 <udc_device_status>
    4e8e:	90 91 19 26 	lds	r25, 0x2619	; 0x802619 <udc_device_status+0x1>
    4e92:	8d 7f       	andi	r24, 0xFD	; 253
    4e94:	80 93 18 26 	sts	0x2618, r24	; 0x802618 <udc_device_status>
    4e98:	90 93 19 26 	sts	0x2619, r25	; 0x802619 <udc_device_status+0x1>
    4e9c:	2b c1       	rjmp	.+598    	; 0x50f4 <udc_process_setup+0x4f8>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    4e9e:	80 91 4d 33 	lds	r24, 0x334D	; 0x80334d <udd_g_ctrlreq+0x6>
    4ea2:	90 91 4e 33 	lds	r25, 0x334E	; 0x80334e <udd_g_ctrlreq+0x7>
    4ea6:	89 2b       	or	r24, r25
    4ea8:	09 f0       	breq	.+2      	; 0x4eac <udc_process_setup+0x2b0>
    4eaa:	9b c0       	rjmp	.+310    	; 0x4fe2 <udc_process_setup+0x3e6>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    4eac:	02 d5       	rcall	.+2564   	; 0x58b2 <udd_getaddress>
    4eae:	88 23       	and	r24, r24
    4eb0:	09 f4       	brne	.+2      	; 0x4eb4 <udc_process_setup+0x2b8>
    4eb2:	97 c0       	rjmp	.+302    	; 0x4fe2 <udc_process_setup+0x3e6>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    4eb4:	20 91 49 33 	lds	r18, 0x3349	; 0x803349 <udd_g_ctrlreq+0x2>
    4eb8:	30 91 4a 33 	lds	r19, 0x334A	; 0x80334a <udd_g_ctrlreq+0x3>
    4ebc:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    4ebe:	e0 91 82 20 	lds	r30, 0x2082	; 0x802082 <udc_config>
    4ec2:	f0 91 83 20 	lds	r31, 0x2083	; 0x802083 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    4ec6:	81 89       	ldd	r24, Z+17	; 0x11
    4ec8:	90 e0       	ldi	r25, 0x00	; 0
    4eca:	82 17       	cp	r24, r18
    4ecc:	93 07       	cpc	r25, r19
    4ece:	08 f4       	brcc	.+2      	; 0x4ed2 <udc_process_setup+0x2d6>
    4ed0:	88 c0       	rjmp	.+272    	; 0x4fe2 <udc_process_setup+0x3e6>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    4ed2:	3d de       	rcall	.-902    	; 0x4b4e <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    4ed4:	80 91 49 33 	lds	r24, 0x3349	; 0x803349 <udd_g_ctrlreq+0x2>
    4ed8:	90 91 4a 33 	lds	r25, 0x334A	; 0x80334a <udd_g_ctrlreq+0x3>
    4edc:	80 93 14 26 	sts	0x2614, r24	; 0x802614 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    4ee0:	88 23       	and	r24, r24
    4ee2:	09 f4       	brne	.+2      	; 0x4ee6 <udc_process_setup+0x2ea>
    4ee4:	07 c1       	rjmp	.+526    	; 0x50f4 <udc_process_setup+0x4f8>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    4ee6:	99 27       	eor	r25, r25
    4ee8:	81 50       	subi	r24, 0x01	; 1
    4eea:	90 4c       	sbci	r25, 0xC0	; 192
    4eec:	88 0f       	add	r24, r24
    4eee:	99 1f       	adc	r25, r25
    4ef0:	88 0f       	add	r24, r24
    4ef2:	99 1f       	adc	r25, r25
    4ef4:	e0 91 84 20 	lds	r30, 0x2084	; 0x802084 <udc_config+0x2>
    4ef8:	f0 91 85 20 	lds	r31, 0x2085	; 0x802085 <udc_config+0x3>
    4efc:	e8 0f       	add	r30, r24
    4efe:	f9 1f       	adc	r31, r25
    4f00:	e0 93 12 26 	sts	0x2612, r30	; 0x802612 <udc_ptr_conf>
    4f04:	f0 93 13 26 	sts	0x2613, r31	; 0x802613 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4f08:	01 90       	ld	r0, Z+
    4f0a:	f0 81       	ld	r31, Z
    4f0c:	e0 2d       	mov	r30, r0
    4f0e:	84 81       	ldd	r24, Z+4	; 0x04
    4f10:	88 23       	and	r24, r24
    4f12:	09 f4       	brne	.+2      	; 0x4f16 <udc_process_setup+0x31a>
    4f14:	ef c0       	rjmp	.+478    	; 0x50f4 <udc_process_setup+0x4f8>
    4f16:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    4f18:	60 e0       	ldi	r22, 0x00	; 0
    4f1a:	8c 2f       	mov	r24, r28
    4f1c:	e4 dd       	rcall	.-1080   	; 0x4ae6 <udc_iface_enable>
    4f1e:	88 23       	and	r24, r24
    4f20:	09 f4       	brne	.+2      	; 0x4f24 <udc_process_setup+0x328>
    4f22:	5f c0       	rjmp	.+190    	; 0x4fe2 <udc_process_setup+0x3e6>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    4f24:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4f26:	e0 91 12 26 	lds	r30, 0x2612	; 0x802612 <udc_ptr_conf>
    4f2a:	f0 91 13 26 	lds	r31, 0x2613	; 0x802613 <udc_ptr_conf+0x1>
    4f2e:	01 90       	ld	r0, Z+
    4f30:	f0 81       	ld	r31, Z
    4f32:	e0 2d       	mov	r30, r0
    4f34:	84 81       	ldd	r24, Z+4	; 0x04
    4f36:	c8 17       	cp	r28, r24
    4f38:	78 f3       	brcs	.-34     	; 0x4f18 <udc_process_setup+0x31c>
    4f3a:	dc c0       	rjmp	.+440    	; 0x50f4 <udc_process_setup+0x4f8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    4f3c:	81 30       	cpi	r24, 0x01	; 1
    4f3e:	e1 f4       	brne	.+56     	; 0x4f78 <udc_process_setup+0x37c>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    4f40:	90 91 48 33 	lds	r25, 0x3348	; 0x803348 <udd_g_ctrlreq+0x1>
    4f44:	9b 30       	cpi	r25, 0x0B	; 11
    4f46:	c1 f4       	brne	.+48     	; 0x4f78 <udc_process_setup+0x37c>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    4f48:	80 91 4d 33 	lds	r24, 0x334D	; 0x80334d <udd_g_ctrlreq+0x6>
    4f4c:	90 91 4e 33 	lds	r25, 0x334E	; 0x80334e <udd_g_ctrlreq+0x7>
    4f50:	89 2b       	or	r24, r25
    4f52:	09 f0       	breq	.+2      	; 0x4f56 <udc_process_setup+0x35a>
    4f54:	46 c0       	rjmp	.+140    	; 0x4fe2 <udc_process_setup+0x3e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    4f56:	80 91 14 26 	lds	r24, 0x2614	; 0x802614 <udc_num_configuration>
    4f5a:	88 23       	and	r24, r24
    4f5c:	09 f4       	brne	.+2      	; 0x4f60 <udc_process_setup+0x364>
    4f5e:	41 c0       	rjmp	.+130    	; 0x4fe2 <udc_process_setup+0x3e6>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4f60:	e7 e4       	ldi	r30, 0x47	; 71
    4f62:	f3 e3       	ldi	r31, 0x33	; 51
    4f64:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    4f66:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    4f68:	8c 2f       	mov	r24, r28
    4f6a:	7b dd       	rcall	.-1290   	; 0x4a62 <udc_iface_disable>
    4f6c:	88 23       	and	r24, r24
    4f6e:	c9 f1       	breq	.+114    	; 0x4fe2 <udc_process_setup+0x3e6>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    4f70:	6d 2f       	mov	r22, r29
    4f72:	8c 2f       	mov	r24, r28
    4f74:	b8 dd       	rcall	.-1168   	; 0x4ae6 <udc_iface_enable>
    4f76:	33 c0       	rjmp	.+102    	; 0x4fde <udc_process_setup+0x3e2>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    4f78:	82 30       	cpi	r24, 0x02	; 2
    4f7a:	99 f5       	brne	.+102    	; 0x4fe2 <udc_process_setup+0x3e6>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    4f7c:	80 91 48 33 	lds	r24, 0x3348	; 0x803348 <udd_g_ctrlreq+0x1>
    4f80:	81 30       	cpi	r24, 0x01	; 1
    4f82:	19 f0       	breq	.+6      	; 0x4f8a <udc_process_setup+0x38e>
    4f84:	83 30       	cpi	r24, 0x03	; 3
    4f86:	89 f0       	breq	.+34     	; 0x4faa <udc_process_setup+0x3ae>
    4f88:	29 c0       	rjmp	.+82     	; 0x4fdc <udc_process_setup+0x3e0>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    4f8a:	80 91 4d 33 	lds	r24, 0x334D	; 0x80334d <udd_g_ctrlreq+0x6>
    4f8e:	90 91 4e 33 	lds	r25, 0x334E	; 0x80334e <udd_g_ctrlreq+0x7>
    4f92:	89 2b       	or	r24, r25
    4f94:	31 f5       	brne	.+76     	; 0x4fe2 <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    4f96:	80 91 49 33 	lds	r24, 0x3349	; 0x803349 <udd_g_ctrlreq+0x2>
    4f9a:	90 91 4a 33 	lds	r25, 0x334A	; 0x80334a <udd_g_ctrlreq+0x3>
    4f9e:	89 2b       	or	r24, r25
    4fa0:	01 f5       	brne	.+64     	; 0x4fe2 <udc_process_setup+0x3e6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    4fa2:	80 91 4b 33 	lds	r24, 0x334B	; 0x80334b <udd_g_ctrlreq+0x4>
    4fa6:	3a d5       	rcall	.+2676   	; 0x5a1c <udd_ep_clear_halt>
    4fa8:	1a c0       	rjmp	.+52     	; 0x4fde <udc_process_setup+0x3e2>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    4faa:	80 91 4d 33 	lds	r24, 0x334D	; 0x80334d <udd_g_ctrlreq+0x6>
    4fae:	90 91 4e 33 	lds	r25, 0x334E	; 0x80334e <udd_g_ctrlreq+0x7>
    4fb2:	89 2b       	or	r24, r25
    4fb4:	b1 f4       	brne	.+44     	; 0x4fe2 <udc_process_setup+0x3e6>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    4fb6:	80 91 49 33 	lds	r24, 0x3349	; 0x803349 <udd_g_ctrlreq+0x2>
    4fba:	90 91 4a 33 	lds	r25, 0x334A	; 0x80334a <udd_g_ctrlreq+0x3>
    4fbe:	89 2b       	or	r24, r25
    4fc0:	81 f4       	brne	.+32     	; 0x4fe2 <udc_process_setup+0x3e6>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    4fc2:	c7 e4       	ldi	r28, 0x47	; 71
    4fc4:	d3 e3       	ldi	r29, 0x33	; 51
    4fc6:	8c 81       	ldd	r24, Y+4	; 0x04
    4fc8:	27 d6       	rcall	.+3150   	; 0x5c18 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    4fca:	8c 81       	ldd	r24, Y+4	; 0x04
    4fcc:	8a d6       	rcall	.+3348   	; 0x5ce2 <udd_ep_set_halt>
    4fce:	07 c0       	rjmp	.+14     	; 0x4fde <udc_process_setup+0x3e2>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    4fd0:	80 e0       	ldi	r24, 0x00	; 0
    4fd2:	05 c0       	rjmp	.+10     	; 0x4fde <udc_process_setup+0x3e2>
				break;
			}
		}
#endif
	}
	return false;
    4fd4:	80 e0       	ldi	r24, 0x00	; 0
    4fd6:	03 c0       	rjmp	.+6      	; 0x4fde <udc_process_setup+0x3e2>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    4fd8:	80 e0       	ldi	r24, 0x00	; 0
    4fda:	01 c0       	rjmp	.+2      	; 0x4fde <udc_process_setup+0x3e2>
				break;
			}
		}
#endif
	}
	return false;
    4fdc:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    4fde:	81 11       	cpse	r24, r1
    4fe0:	8a c0       	rjmp	.+276    	; 0x50f6 <udc_process_setup+0x4fa>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    4fe2:	80 91 47 33 	lds	r24, 0x3347	; 0x803347 <udd_g_ctrlreq>
    4fe6:	8f 71       	andi	r24, 0x1F	; 31
    4fe8:	81 30       	cpi	r24, 0x01	; 1
    4fea:	71 f5       	brne	.+92     	; 0x5048 <udc_process_setup+0x44c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    4fec:	80 91 14 26 	lds	r24, 0x2614	; 0x802614 <udc_num_configuration>
    4ff0:	88 23       	and	r24, r24
    4ff2:	51 f1       	breq	.+84     	; 0x5048 <udc_process_setup+0x44c>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4ff4:	00 91 4b 33 	lds	r16, 0x334B	; 0x80334b <udd_g_ctrlreq+0x4>
    4ff8:	10 91 4c 33 	lds	r17, 0x334C	; 0x80334c <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    4ffc:	c0 91 12 26 	lds	r28, 0x2612	; 0x802612 <udc_ptr_conf>
    5000:	d0 91 13 26 	lds	r29, 0x2613	; 0x802613 <udc_ptr_conf+0x1>
    5004:	e8 81       	ld	r30, Y
    5006:	f9 81       	ldd	r31, Y+1	; 0x01
    5008:	84 81       	ldd	r24, Z+4	; 0x04
    500a:	08 17       	cp	r16, r24
    500c:	e8 f4       	brcc	.+58     	; 0x5048 <udc_process_setup+0x44c>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    500e:	60 e0       	ldi	r22, 0x00	; 0
    5010:	80 2f       	mov	r24, r16
    5012:	ed dc       	rcall	.-1574   	; 0x49ee <udc_update_iface_desc>
    5014:	88 23       	and	r24, r24
    5016:	c1 f0       	breq	.+48     	; 0x5048 <udc_process_setup+0x44c>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    5018:	f8 01       	movw	r30, r16
    501a:	ff 27       	eor	r31, r31
    501c:	cf 01       	movw	r24, r30
    501e:	88 0f       	add	r24, r24
    5020:	99 1f       	adc	r25, r25
    5022:	ea 81       	ldd	r30, Y+2	; 0x02
    5024:	fb 81       	ldd	r31, Y+3	; 0x03
    5026:	e8 0f       	add	r30, r24
    5028:	f9 1f       	adc	r31, r25
    502a:	c0 81       	ld	r28, Z
    502c:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    502e:	ee 81       	ldd	r30, Y+6	; 0x06
    5030:	ff 81       	ldd	r31, Y+7	; 0x07
    5032:	19 95       	eicall
    5034:	68 2f       	mov	r22, r24
    5036:	80 2f       	mov	r24, r16
    5038:	da dc       	rcall	.-1612   	; 0x49ee <udc_update_iface_desc>
    503a:	88 23       	and	r24, r24
    503c:	29 f0       	breq	.+10     	; 0x5048 <udc_process_setup+0x44c>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    503e:	ec 81       	ldd	r30, Y+4	; 0x04
    5040:	fd 81       	ldd	r31, Y+5	; 0x05
    5042:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    5044:	81 11       	cpse	r24, r1
    5046:	57 c0       	rjmp	.+174    	; 0x50f6 <udc_process_setup+0x4fa>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    5048:	80 91 47 33 	lds	r24, 0x3347	; 0x803347 <udd_g_ctrlreq>
    504c:	8f 71       	andi	r24, 0x1F	; 31
    504e:	82 30       	cpi	r24, 0x02	; 2
    5050:	09 f0       	breq	.+2      	; 0x5054 <udc_process_setup+0x458>
    5052:	40 c0       	rjmp	.+128    	; 0x50d4 <udc_process_setup+0x4d8>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    5054:	80 91 14 26 	lds	r24, 0x2614	; 0x802614 <udc_num_configuration>
    5058:	88 23       	and	r24, r24
    505a:	b1 f1       	breq	.+108    	; 0x50c8 <udc_process_setup+0x4cc>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    505c:	a0 91 12 26 	lds	r26, 0x2612	; 0x802612 <udc_ptr_conf>
    5060:	b0 91 13 26 	lds	r27, 0x2613	; 0x802613 <udc_ptr_conf+0x1>
    5064:	ed 91       	ld	r30, X+
    5066:	fc 91       	ld	r31, X
    5068:	11 97       	sbiw	r26, 0x01	; 1
    506a:	84 81       	ldd	r24, Z+4	; 0x04
    506c:	88 23       	and	r24, r24
    506e:	71 f1       	breq	.+92     	; 0x50cc <udc_process_setup+0x4d0>
    5070:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    5072:	ec 2f       	mov	r30, r28
    5074:	f0 e0       	ldi	r31, 0x00	; 0
    5076:	ee 0f       	add	r30, r30
    5078:	ff 1f       	adc	r31, r31
    507a:	12 96       	adiw	r26, 0x02	; 2
    507c:	8d 91       	ld	r24, X+
    507e:	9c 91       	ld	r25, X
    5080:	13 97       	sbiw	r26, 0x03	; 3
    5082:	e8 0f       	add	r30, r24
    5084:	f9 1f       	adc	r31, r25
    5086:	00 81       	ld	r16, Z
    5088:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    508a:	d8 01       	movw	r26, r16
    508c:	16 96       	adiw	r26, 0x06	; 6
    508e:	ed 91       	ld	r30, X+
    5090:	fc 91       	ld	r31, X
    5092:	17 97       	sbiw	r26, 0x07	; 7
    5094:	19 95       	eicall
    5096:	68 2f       	mov	r22, r24
    5098:	8c 2f       	mov	r24, r28
    509a:	a9 dc       	rcall	.-1710   	; 0x49ee <udc_update_iface_desc>
    509c:	88 23       	and	r24, r24
    509e:	59 f1       	breq	.+86     	; 0x50f6 <udc_process_setup+0x4fa>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    50a0:	d8 01       	movw	r26, r16
    50a2:	14 96       	adiw	r26, 0x04	; 4
    50a4:	ed 91       	ld	r30, X+
    50a6:	fc 91       	ld	r31, X
    50a8:	15 97       	sbiw	r26, 0x05	; 5
    50aa:	19 95       	eicall
    50ac:	81 11       	cpse	r24, r1
    50ae:	23 c0       	rjmp	.+70     	; 0x50f6 <udc_process_setup+0x4fa>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    50b0:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    50b2:	a0 91 12 26 	lds	r26, 0x2612	; 0x802612 <udc_ptr_conf>
    50b6:	b0 91 13 26 	lds	r27, 0x2613	; 0x802613 <udc_ptr_conf+0x1>
    50ba:	ed 91       	ld	r30, X+
    50bc:	fc 91       	ld	r31, X
    50be:	11 97       	sbiw	r26, 0x01	; 1
    50c0:	94 81       	ldd	r25, Z+4	; 0x04
    50c2:	c9 17       	cp	r28, r25
    50c4:	b0 f2       	brcs	.-84     	; 0x5072 <udc_process_setup+0x476>
    50c6:	17 c0       	rjmp	.+46     	; 0x50f6 <udc_process_setup+0x4fa>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    50c8:	80 e0       	ldi	r24, 0x00	; 0
    50ca:	15 c0       	rjmp	.+42     	; 0x50f6 <udc_process_setup+0x4fa>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    50cc:	80 e0       	ldi	r24, 0x00	; 0
    50ce:	13 c0       	rjmp	.+38     	; 0x50f6 <udc_process_setup+0x4fa>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    50d0:	80 e0       	ldi	r24, 0x00	; 0
    50d2:	11 c0       	rjmp	.+34     	; 0x50f6 <udc_process_setup+0x4fa>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    50d4:	80 e0       	ldi	r24, 0x00	; 0
    50d6:	0f c0       	rjmp	.+30     	; 0x50f6 <udc_process_setup+0x4fa>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    50d8:	98 2f       	mov	r25, r24
    50da:	90 76       	andi	r25, 0x60	; 96
    50dc:	09 f0       	breq	.+2      	; 0x50e0 <udc_process_setup+0x4e4>
    50de:	81 cf       	rjmp	.-254    	; 0x4fe2 <udc_process_setup+0x3e6>
    50e0:	a6 cd       	rjmp	.-1204   	; 0x4c2e <udc_process_setup+0x32>
    50e2:	98 2f       	mov	r25, r24
    50e4:	90 76       	andi	r25, 0x60	; 96
    50e6:	09 f0       	breq	.+2      	; 0x50ea <udc_process_setup+0x4ee>
    50e8:	7c cf       	rjmp	.-264    	; 0x4fe2 <udc_process_setup+0x3e6>
    50ea:	a2 ce       	rjmp	.-700    	; 0x4e30 <udc_process_setup+0x234>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    50ec:	22 e1       	ldi	r18, 0x12	; 18
		str = udc_string_product_name;
    50ee:	88 e5       	ldi	r24, 0x58	; 88
    50f0:	90 e2       	ldi	r25, 0x20	; 32
    50f2:	18 ce       	rjmp	.-976    	; 0x4d24 <udc_process_setup+0x128>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    50f4:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    50f6:	df 91       	pop	r29
    50f8:	cf 91       	pop	r28
    50fa:	1f 91       	pop	r17
    50fc:	0f 91       	pop	r16
    50fe:	08 95       	ret

00005100 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    5100:	cf 93       	push	r28
    5102:	df 93       	push	r29
    5104:	1f 92       	push	r1
    5106:	1f 92       	push	r1
    5108:	cd b7       	in	r28, 0x3d	; 61
    510a:	de b7       	in	r29, 0x3e	; 62
    510c:	81 11       	cpse	r24, r1
    510e:	26 c0       	rjmp	.+76     	; 0x515c <udd_sleep_mode+0x5c>
    5110:	90 91 44 27 	lds	r25, 0x2744	; 0x802744 <udd_b_idle>
    5114:	99 23       	and	r25, r25
    5116:	f9 f0       	breq	.+62     	; 0x5156 <udd_sleep_mode+0x56>
    5118:	90 91 58 33 	lds	r25, 0x3358	; 0x803358 <sleepmgr_locks+0x1>
    511c:	91 11       	cpse	r25, r1
    511e:	01 c0       	rjmp	.+2      	; 0x5122 <udd_sleep_mode+0x22>
    5120:	ff cf       	rjmp	.-2      	; 0x5120 <udd_sleep_mode+0x20>
    5122:	9f b7       	in	r25, 0x3f	; 63
    5124:	9a 83       	std	Y+2, r25	; 0x02
    5126:	f8 94       	cli
    5128:	2a 81       	ldd	r18, Y+2	; 0x02
    512a:	e7 e5       	ldi	r30, 0x57	; 87
    512c:	f3 e3       	ldi	r31, 0x33	; 51
    512e:	91 81       	ldd	r25, Z+1	; 0x01
    5130:	91 50       	subi	r25, 0x01	; 1
    5132:	91 83       	std	Z+1, r25	; 0x01
    5134:	2f bf       	out	0x3f, r18	; 63
    5136:	0f c0       	rjmp	.+30     	; 0x5156 <udd_sleep_mode+0x56>
    5138:	90 91 58 33 	lds	r25, 0x3358	; 0x803358 <sleepmgr_locks+0x1>
    513c:	9f 3f       	cpi	r25, 0xFF	; 255
    513e:	09 f4       	brne	.+2      	; 0x5142 <udd_sleep_mode+0x42>
    5140:	ff cf       	rjmp	.-2      	; 0x5140 <udd_sleep_mode+0x40>
    5142:	9f b7       	in	r25, 0x3f	; 63
    5144:	99 83       	std	Y+1, r25	; 0x01
    5146:	f8 94       	cli
    5148:	29 81       	ldd	r18, Y+1	; 0x01
    514a:	e7 e5       	ldi	r30, 0x57	; 87
    514c:	f3 e3       	ldi	r31, 0x33	; 51
    514e:	91 81       	ldd	r25, Z+1	; 0x01
    5150:	9f 5f       	subi	r25, 0xFF	; 255
    5152:	91 83       	std	Z+1, r25	; 0x01
    5154:	2f bf       	out	0x3f, r18	; 63
    5156:	80 93 44 27 	sts	0x2744, r24	; 0x802744 <udd_b_idle>
    515a:	05 c0       	rjmp	.+10     	; 0x5166 <udd_sleep_mode+0x66>
    515c:	90 91 44 27 	lds	r25, 0x2744	; 0x802744 <udd_b_idle>
    5160:	99 23       	and	r25, r25
    5162:	51 f3       	breq	.-44     	; 0x5138 <udd_sleep_mode+0x38>
    5164:	f8 cf       	rjmp	.-16     	; 0x5156 <udd_sleep_mode+0x56>
    5166:	0f 90       	pop	r0
    5168:	0f 90       	pop	r0
    516a:	df 91       	pop	r29
    516c:	cf 91       	pop	r28
    516e:	08 95       	ret

00005170 <udd_ctrl_init>:
    5170:	0f 93       	push	r16
    5172:	e8 ec       	ldi	r30, 0xC8	; 200
    5174:	f4 e0       	ldi	r31, 0x04	; 4
    5176:	80 81       	ld	r24, Z
    5178:	8f 7d       	andi	r24, 0xDF	; 223
    517a:	80 83       	st	Z, r24
    517c:	80 81       	ld	r24, Z
    517e:	8f 7d       	andi	r24, 0xDF	; 223
    5180:	80 83       	st	Z, r24
    5182:	e8 e1       	ldi	r30, 0x18	; 24
    5184:	f7 e2       	ldi	r31, 0x27	; 39
    5186:	02 e0       	ldi	r16, 0x02	; 2
    5188:	05 93       	las	Z, r16
    518a:	10 92 1a 27 	sts	0x271A, r1	; 0x80271a <udd_sram+0x16>
    518e:	10 92 1b 27 	sts	0x271B, r1	; 0x80271b <udd_sram+0x17>
    5192:	00 e2       	ldi	r16, 0x20	; 32
    5194:	06 93       	lac	Z, r16
    5196:	00 e4       	ldi	r16, 0x40	; 64
    5198:	06 93       	lac	Z, r16
    519a:	e0 e1       	ldi	r30, 0x10	; 16
    519c:	f7 e2       	ldi	r31, 0x27	; 39
    519e:	00 e4       	ldi	r16, 0x40	; 64
    51a0:	06 93       	lac	Z, r16
    51a2:	e7 e4       	ldi	r30, 0x47	; 71
    51a4:	f3 e3       	ldi	r31, 0x33	; 51
    51a6:	14 86       	std	Z+12, r1	; 0x0c
    51a8:	15 86       	std	Z+13, r1	; 0x0d
    51aa:	16 86       	std	Z+14, r1	; 0x0e
    51ac:	17 86       	std	Z+15, r1	; 0x0f
    51ae:	12 86       	std	Z+10, r1	; 0x0a
    51b0:	13 86       	std	Z+11, r1	; 0x0b
    51b2:	10 92 03 27 	sts	0x2703, r1	; 0x802703 <udd_ep_control_state>
    51b6:	0f 91       	pop	r16
    51b8:	08 95       	ret

000051ba <udd_ctrl_stall_data>:
    51ba:	0f 93       	push	r16
    51bc:	85 e0       	ldi	r24, 0x05	; 5
    51be:	80 93 03 27 	sts	0x2703, r24	; 0x802703 <udd_ep_control_state>
    51c2:	e9 e1       	ldi	r30, 0x19	; 25
    51c4:	f7 e2       	ldi	r31, 0x27	; 39
    51c6:	04 e0       	ldi	r16, 0x04	; 4
    51c8:	05 93       	las	Z, r16
    51ca:	e1 e1       	ldi	r30, 0x11	; 17
    51cc:	f7 e2       	ldi	r31, 0x27	; 39
    51ce:	04 e0       	ldi	r16, 0x04	; 4
    51d0:	05 93       	las	Z, r16
    51d2:	0f 91       	pop	r16
    51d4:	08 95       	ret

000051d6 <udd_ctrl_send_zlp_in>:
    51d6:	0f 93       	push	r16
    51d8:	83 e0       	ldi	r24, 0x03	; 3
    51da:	80 93 03 27 	sts	0x2703, r24	; 0x802703 <udd_ep_control_state>
    51de:	10 92 1a 27 	sts	0x271A, r1	; 0x80271a <udd_sram+0x16>
    51e2:	10 92 1b 27 	sts	0x271B, r1	; 0x80271b <udd_sram+0x17>
    51e6:	e8 e1       	ldi	r30, 0x18	; 24
    51e8:	f7 e2       	ldi	r31, 0x27	; 39
    51ea:	02 e0       	ldi	r16, 0x02	; 2
    51ec:	06 93       	lac	Z, r16
    51ee:	0f 91       	pop	r16
    51f0:	08 95       	ret

000051f2 <udd_ctrl_endofrequest>:
    51f2:	e0 91 53 33 	lds	r30, 0x3353	; 0x803353 <udd_g_ctrlreq+0xc>
    51f6:	f0 91 54 33 	lds	r31, 0x3354	; 0x803354 <udd_g_ctrlreq+0xd>
    51fa:	30 97       	sbiw	r30, 0x00	; 0
    51fc:	09 f0       	breq	.+2      	; 0x5200 <udd_ctrl_endofrequest+0xe>
    51fe:	19 95       	eicall
    5200:	08 95       	ret

00005202 <udd_ctrl_in_sent>:
    5202:	0f 93       	push	r16
    5204:	cf 93       	push	r28
    5206:	df 93       	push	r29
    5208:	80 91 03 27 	lds	r24, 0x2703	; 0x802703 <udd_ep_control_state>
    520c:	83 30       	cpi	r24, 0x03	; 3
    520e:	19 f4       	brne	.+6      	; 0x5216 <udd_ctrl_in_sent+0x14>
    5210:	f0 df       	rcall	.-32     	; 0x51f2 <udd_ctrl_endofrequest>
    5212:	ae df       	rcall	.-164    	; 0x5170 <udd_ctrl_init>
    5214:	5e c0       	rjmp	.+188    	; 0x52d2 <udd_ctrl_in_sent+0xd0>
    5216:	80 91 ff 26 	lds	r24, 0x26FF	; 0x8026ff <udd_ctrl_payload_nb_trans>
    521a:	90 91 00 27 	lds	r25, 0x2700	; 0x802700 <udd_ctrl_payload_nb_trans+0x1>
    521e:	c0 91 51 33 	lds	r28, 0x3351	; 0x803351 <udd_g_ctrlreq+0xa>
    5222:	d0 91 52 33 	lds	r29, 0x3352	; 0x803352 <udd_g_ctrlreq+0xb>
    5226:	c8 1b       	sub	r28, r24
    5228:	d9 0b       	sbc	r29, r25
    522a:	71 f5       	brne	.+92     	; 0x5288 <udd_ctrl_in_sent+0x86>
    522c:	20 91 01 27 	lds	r18, 0x2701	; 0x802701 <udd_ctrl_prev_payload_nb_trans>
    5230:	30 91 02 27 	lds	r19, 0x2702	; 0x802702 <udd_ctrl_prev_payload_nb_trans+0x1>
    5234:	82 0f       	add	r24, r18
    5236:	93 1f       	adc	r25, r19
    5238:	80 93 01 27 	sts	0x2701, r24	; 0x802701 <udd_ctrl_prev_payload_nb_trans>
    523c:	90 93 02 27 	sts	0x2702, r25	; 0x802702 <udd_ctrl_prev_payload_nb_trans+0x1>
    5240:	20 91 4d 33 	lds	r18, 0x334D	; 0x80334d <udd_g_ctrlreq+0x6>
    5244:	30 91 4e 33 	lds	r19, 0x334E	; 0x80334e <udd_g_ctrlreq+0x7>
    5248:	82 17       	cp	r24, r18
    524a:	93 07       	cpc	r25, r19
    524c:	21 f0       	breq	.+8      	; 0x5256 <udd_ctrl_in_sent+0x54>
    524e:	80 91 1a 26 	lds	r24, 0x261A	; 0x80261a <b_shortpacket.5383>
    5252:	88 23       	and	r24, r24
    5254:	41 f0       	breq	.+16     	; 0x5266 <udd_ctrl_in_sent+0x64>
    5256:	84 e0       	ldi	r24, 0x04	; 4
    5258:	80 93 03 27 	sts	0x2703, r24	; 0x802703 <udd_ep_control_state>
    525c:	e0 e1       	ldi	r30, 0x10	; 16
    525e:	f7 e2       	ldi	r31, 0x27	; 39
    5260:	02 e0       	ldi	r16, 0x02	; 2
    5262:	06 93       	lac	Z, r16
    5264:	36 c0       	rjmp	.+108    	; 0x52d2 <udd_ctrl_in_sent+0xd0>
    5266:	e0 91 55 33 	lds	r30, 0x3355	; 0x803355 <udd_g_ctrlreq+0xe>
    526a:	f0 91 56 33 	lds	r31, 0x3356	; 0x803356 <udd_g_ctrlreq+0xf>
    526e:	30 97       	sbiw	r30, 0x00	; 0
    5270:	99 f0       	breq	.+38     	; 0x5298 <udd_ctrl_in_sent+0x96>
    5272:	19 95       	eicall
    5274:	88 23       	and	r24, r24
    5276:	81 f0       	breq	.+32     	; 0x5298 <udd_ctrl_in_sent+0x96>
    5278:	10 92 ff 26 	sts	0x26FF, r1	; 0x8026ff <udd_ctrl_payload_nb_trans>
    527c:	10 92 00 27 	sts	0x2700, r1	; 0x802700 <udd_ctrl_payload_nb_trans+0x1>
    5280:	c0 91 51 33 	lds	r28, 0x3351	; 0x803351 <udd_g_ctrlreq+0xa>
    5284:	d0 91 52 33 	lds	r29, 0x3352	; 0x803352 <udd_g_ctrlreq+0xb>
    5288:	c0 34       	cpi	r28, 0x40	; 64
    528a:	d1 05       	cpc	r29, r1
    528c:	28 f0       	brcs	.+10     	; 0x5298 <udd_ctrl_in_sent+0x96>
    528e:	10 92 1a 26 	sts	0x261A, r1	; 0x80261a <b_shortpacket.5383>
    5292:	c0 e4       	ldi	r28, 0x40	; 64
    5294:	d0 e0       	ldi	r29, 0x00	; 0
    5296:	03 c0       	rjmp	.+6      	; 0x529e <udd_ctrl_in_sent+0x9c>
    5298:	81 e0       	ldi	r24, 0x01	; 1
    529a:	80 93 1a 26 	sts	0x261A, r24	; 0x80261a <b_shortpacket.5383>
    529e:	e4 e0       	ldi	r30, 0x04	; 4
    52a0:	f7 e2       	ldi	r31, 0x27	; 39
    52a2:	c6 8b       	std	Z+22, r28	; 0x16
    52a4:	d7 8b       	std	Z+23, r29	; 0x17
    52a6:	80 91 ff 26 	lds	r24, 0x26FF	; 0x8026ff <udd_ctrl_payload_nb_trans>
    52aa:	90 91 00 27 	lds	r25, 0x2700	; 0x802700 <udd_ctrl_payload_nb_trans+0x1>
    52ae:	20 91 4f 33 	lds	r18, 0x334F	; 0x80334f <udd_g_ctrlreq+0x8>
    52b2:	30 91 50 33 	lds	r19, 0x3350	; 0x803350 <udd_g_ctrlreq+0x9>
    52b6:	28 0f       	add	r18, r24
    52b8:	39 1f       	adc	r19, r25
    52ba:	20 8f       	std	Z+24, r18	; 0x18
    52bc:	31 8f       	std	Z+25, r19	; 0x19
    52be:	c8 0f       	add	r28, r24
    52c0:	d9 1f       	adc	r29, r25
    52c2:	c0 93 ff 26 	sts	0x26FF, r28	; 0x8026ff <udd_ctrl_payload_nb_trans>
    52c6:	d0 93 00 27 	sts	0x2700, r29	; 0x802700 <udd_ctrl_payload_nb_trans+0x1>
    52ca:	e8 e1       	ldi	r30, 0x18	; 24
    52cc:	f7 e2       	ldi	r31, 0x27	; 39
    52ce:	02 e0       	ldi	r16, 0x02	; 2
    52d0:	06 93       	lac	Z, r16
    52d2:	df 91       	pop	r29
    52d4:	cf 91       	pop	r28
    52d6:	0f 91       	pop	r16
    52d8:	08 95       	ret

000052da <udd_ep_get_size>:
    52da:	fc 01       	movw	r30, r24
    52dc:	81 81       	ldd	r24, Z+1	; 0x01
    52de:	e8 2f       	mov	r30, r24
    52e0:	e7 70       	andi	r30, 0x07	; 7
    52e2:	8e 2f       	mov	r24, r30
    52e4:	90 e0       	ldi	r25, 0x00	; 0
    52e6:	fc 01       	movw	r30, r24
    52e8:	31 97       	sbiw	r30, 0x01	; 1
    52ea:	e7 30       	cpi	r30, 0x07	; 7
    52ec:	f1 05       	cpc	r31, r1
    52ee:	d8 f4       	brcc	.+54     	; 0x5326 <udd_ep_get_size+0x4c>
    52f0:	88 27       	eor	r24, r24
    52f2:	e2 50       	subi	r30, 0x02	; 2
    52f4:	ff 4f       	sbci	r31, 0xFF	; 255
    52f6:	8f 4f       	sbci	r24, 0xFF	; 255
    52f8:	0c 94 8f 33 	jmp	0x671e	; 0x671e <__tablejump2__>
    52fc:	80 e1       	ldi	r24, 0x10	; 16
    52fe:	90 e0       	ldi	r25, 0x00	; 0
    5300:	08 95       	ret
    5302:	80 e2       	ldi	r24, 0x20	; 32
    5304:	90 e0       	ldi	r25, 0x00	; 0
    5306:	08 95       	ret
    5308:	80 e4       	ldi	r24, 0x40	; 64
    530a:	90 e0       	ldi	r25, 0x00	; 0
    530c:	08 95       	ret
    530e:	80 e8       	ldi	r24, 0x80	; 128
    5310:	90 e0       	ldi	r25, 0x00	; 0
    5312:	08 95       	ret
    5314:	80 e0       	ldi	r24, 0x00	; 0
    5316:	91 e0       	ldi	r25, 0x01	; 1
    5318:	08 95       	ret
    531a:	80 e0       	ldi	r24, 0x00	; 0
    531c:	92 e0       	ldi	r25, 0x02	; 2
    531e:	08 95       	ret
    5320:	8f ef       	ldi	r24, 0xFF	; 255
    5322:	93 e0       	ldi	r25, 0x03	; 3
    5324:	08 95       	ret
    5326:	88 e0       	ldi	r24, 0x08	; 8
    5328:	90 e0       	ldi	r25, 0x00	; 0
    532a:	08 95       	ret

0000532c <udd_ep_get_job>:
    532c:	28 2f       	mov	r18, r24
    532e:	2f 70       	andi	r18, 0x0F	; 15
    5330:	30 e0       	ldi	r19, 0x00	; 0
    5332:	22 0f       	add	r18, r18
    5334:	33 1f       	adc	r19, r19
    5336:	08 2e       	mov	r0, r24
    5338:	00 0c       	add	r0, r0
    533a:	99 0b       	sbc	r25, r25
    533c:	88 27       	eor	r24, r24
    533e:	99 0f       	add	r25, r25
    5340:	88 1f       	adc	r24, r24
    5342:	99 27       	eor	r25, r25
    5344:	82 0f       	add	r24, r18
    5346:	93 1f       	adc	r25, r19
    5348:	02 97       	sbiw	r24, 0x02	; 2
    534a:	9c 01       	movw	r18, r24
    534c:	22 0f       	add	r18, r18
    534e:	33 1f       	adc	r19, r19
    5350:	22 0f       	add	r18, r18
    5352:	33 1f       	adc	r19, r19
    5354:	22 0f       	add	r18, r18
    5356:	33 1f       	adc	r19, r19
    5358:	82 0f       	add	r24, r18
    535a:	93 1f       	adc	r25, r19
    535c:	85 56       	subi	r24, 0x65	; 101
    535e:	99 4d       	sbci	r25, 0xD9	; 217
    5360:	08 95       	ret

00005362 <udd_ctrl_interrupt_tc_setup>:
    5362:	0f 93       	push	r16
    5364:	cf 93       	push	r28
    5366:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    536a:	80 ff       	sbrs	r24, 0
    536c:	64 c0       	rjmp	.+200    	; 0x5436 <udd_ctrl_interrupt_tc_setup+0xd4>
    536e:	81 e0       	ldi	r24, 0x01	; 1
    5370:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    5374:	e0 e1       	ldi	r30, 0x10	; 16
    5376:	f7 e2       	ldi	r31, 0x27	; 39
    5378:	00 e8       	ldi	r16, 0x80	; 128
    537a:	06 93       	lac	Z, r16
    537c:	e8 e1       	ldi	r30, 0x18	; 24
    537e:	f7 e2       	ldi	r31, 0x27	; 39
    5380:	00 e8       	ldi	r16, 0x80	; 128
    5382:	06 93       	lac	Z, r16
    5384:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    5388:	e0 e1       	ldi	r30, 0x10	; 16
    538a:	f7 e2       	ldi	r31, 0x27	; 39
    538c:	00 e1       	ldi	r16, 0x10	; 16
    538e:	06 93       	lac	Z, r16
    5390:	80 91 03 27 	lds	r24, 0x2703	; 0x802703 <udd_ep_control_state>
    5394:	88 23       	and	r24, r24
    5396:	29 f0       	breq	.+10     	; 0x53a2 <udd_ctrl_interrupt_tc_setup+0x40>
    5398:	83 50       	subi	r24, 0x03	; 3
    539a:	82 30       	cpi	r24, 0x02	; 2
    539c:	08 f4       	brcc	.+2      	; 0x53a0 <udd_ctrl_interrupt_tc_setup+0x3e>
    539e:	29 df       	rcall	.-430    	; 0x51f2 <udd_ctrl_endofrequest>
    53a0:	e7 de       	rcall	.-562    	; 0x5170 <udd_ctrl_init>
    53a2:	80 91 12 27 	lds	r24, 0x2712	; 0x802712 <udd_sram+0xe>
    53a6:	90 91 13 27 	lds	r25, 0x2713	; 0x802713 <udd_sram+0xf>
    53aa:	08 97       	sbiw	r24, 0x08	; 8
    53ac:	09 f0       	breq	.+2      	; 0x53b0 <udd_ctrl_interrupt_tc_setup+0x4e>
    53ae:	45 c0       	rjmp	.+138    	; 0x543a <udd_ctrl_interrupt_tc_setup+0xd8>
    53b0:	88 e0       	ldi	r24, 0x08	; 8
    53b2:	ef eb       	ldi	r30, 0xBF	; 191
    53b4:	f6 e2       	ldi	r31, 0x26	; 38
    53b6:	a7 e4       	ldi	r26, 0x47	; 71
    53b8:	b3 e3       	ldi	r27, 0x33	; 51
    53ba:	01 90       	ld	r0, Z+
    53bc:	0d 92       	st	X+, r0
    53be:	8a 95       	dec	r24
    53c0:	e1 f7       	brne	.-8      	; 0x53ba <udd_ctrl_interrupt_tc_setup+0x58>
    53c2:	e8 ec       	ldi	r30, 0xC8	; 200
    53c4:	f4 e0       	ldi	r31, 0x04	; 4
    53c6:	80 81       	ld	r24, Z
    53c8:	80 62       	ori	r24, 0x20	; 32
    53ca:	80 83       	st	Z, r24
    53cc:	80 81       	ld	r24, Z
    53ce:	80 62       	ori	r24, 0x20	; 32
    53d0:	80 83       	st	Z, r24
    53d2:	14 dc       	rcall	.-2008   	; 0x4bfc <udc_process_setup>
    53d4:	c8 2f       	mov	r28, r24
    53d6:	81 11       	cpse	r24, r1
    53d8:	03 c0       	rjmp	.+6      	; 0x53e0 <udd_ctrl_interrupt_tc_setup+0x7e>
    53da:	ef de       	rcall	.-546    	; 0x51ba <udd_ctrl_stall_data>
    53dc:	c1 e0       	ldi	r28, 0x01	; 1
    53de:	2e c0       	rjmp	.+92     	; 0x543c <udd_ctrl_interrupt_tc_setup+0xda>
    53e0:	80 91 47 33 	lds	r24, 0x3347	; 0x803347 <udd_g_ctrlreq>
    53e4:	88 23       	and	r24, r24
    53e6:	6c f4       	brge	.+26     	; 0x5402 <udd_ctrl_interrupt_tc_setup+0xa0>
    53e8:	10 92 01 27 	sts	0x2701, r1	; 0x802701 <udd_ctrl_prev_payload_nb_trans>
    53ec:	10 92 02 27 	sts	0x2702, r1	; 0x802702 <udd_ctrl_prev_payload_nb_trans+0x1>
    53f0:	10 92 ff 26 	sts	0x26FF, r1	; 0x8026ff <udd_ctrl_payload_nb_trans>
    53f4:	10 92 00 27 	sts	0x2700, r1	; 0x802700 <udd_ctrl_payload_nb_trans+0x1>
    53f8:	82 e0       	ldi	r24, 0x02	; 2
    53fa:	80 93 03 27 	sts	0x2703, r24	; 0x802703 <udd_ep_control_state>
    53fe:	01 df       	rcall	.-510    	; 0x5202 <udd_ctrl_in_sent>
    5400:	1d c0       	rjmp	.+58     	; 0x543c <udd_ctrl_interrupt_tc_setup+0xda>
    5402:	80 91 4d 33 	lds	r24, 0x334D	; 0x80334d <udd_g_ctrlreq+0x6>
    5406:	90 91 4e 33 	lds	r25, 0x334E	; 0x80334e <udd_g_ctrlreq+0x7>
    540a:	89 2b       	or	r24, r25
    540c:	11 f4       	brne	.+4      	; 0x5412 <udd_ctrl_interrupt_tc_setup+0xb0>
    540e:	e3 de       	rcall	.-570    	; 0x51d6 <udd_ctrl_send_zlp_in>
    5410:	15 c0       	rjmp	.+42     	; 0x543c <udd_ctrl_interrupt_tc_setup+0xda>
    5412:	10 92 01 27 	sts	0x2701, r1	; 0x802701 <udd_ctrl_prev_payload_nb_trans>
    5416:	10 92 02 27 	sts	0x2702, r1	; 0x802702 <udd_ctrl_prev_payload_nb_trans+0x1>
    541a:	10 92 ff 26 	sts	0x26FF, r1	; 0x8026ff <udd_ctrl_payload_nb_trans>
    541e:	10 92 00 27 	sts	0x2700, r1	; 0x802700 <udd_ctrl_payload_nb_trans+0x1>
    5422:	81 e0       	ldi	r24, 0x01	; 1
    5424:	80 93 03 27 	sts	0x2703, r24	; 0x802703 <udd_ep_control_state>
    5428:	e0 e1       	ldi	r30, 0x10	; 16
    542a:	f7 e2       	ldi	r31, 0x27	; 39
    542c:	02 e0       	ldi	r16, 0x02	; 2
    542e:	06 93       	lac	Z, r16
    5430:	00 e2       	ldi	r16, 0x20	; 32
    5432:	06 93       	lac	Z, r16
    5434:	03 c0       	rjmp	.+6      	; 0x543c <udd_ctrl_interrupt_tc_setup+0xda>
    5436:	c0 e0       	ldi	r28, 0x00	; 0
    5438:	01 c0       	rjmp	.+2      	; 0x543c <udd_ctrl_interrupt_tc_setup+0xda>
    543a:	c1 e0       	ldi	r28, 0x01	; 1
    543c:	8c 2f       	mov	r24, r28
    543e:	cf 91       	pop	r28
    5440:	0f 91       	pop	r16
    5442:	08 95       	ret

00005444 <udd_ep_trans_complet>:
    5444:	8f 92       	push	r8
    5446:	9f 92       	push	r9
    5448:	af 92       	push	r10
    544a:	bf 92       	push	r11
    544c:	df 92       	push	r13
    544e:	ef 92       	push	r14
    5450:	ff 92       	push	r15
    5452:	0f 93       	push	r16
    5454:	1f 93       	push	r17
    5456:	cf 93       	push	r28
    5458:	df 93       	push	r29
    545a:	d8 2e       	mov	r13, r24
    545c:	67 df       	rcall	.-306    	; 0x532c <udd_ep_get_job>
    545e:	8c 01       	movw	r16, r24
    5460:	bd 2c       	mov	r11, r13
    5462:	bb 1c       	adc	r11, r11
    5464:	bb 24       	eor	r11, r11
    5466:	bb 1c       	adc	r11, r11
    5468:	cd 2d       	mov	r28, r13
    546a:	cf 70       	andi	r28, 0x0F	; 15
    546c:	d0 e0       	ldi	r29, 0x00	; 0
    546e:	cc 0f       	add	r28, r28
    5470:	dd 1f       	adc	r29, r29
    5472:	cb 0d       	add	r28, r11
    5474:	d1 1d       	adc	r29, r1
    5476:	ce 01       	movw	r24, r28
    5478:	88 0f       	add	r24, r24
    547a:	99 1f       	adc	r25, r25
    547c:	88 0f       	add	r24, r24
    547e:	99 1f       	adc	r25, r25
    5480:	88 0f       	add	r24, r24
    5482:	99 1f       	adc	r25, r25
    5484:	9c 01       	movw	r18, r24
    5486:	20 5f       	subi	r18, 0xF0	; 240
    5488:	38 4d       	sbci	r19, 0xD8	; 216
    548a:	79 01       	movw	r14, r18
    548c:	c9 01       	movw	r24, r18
    548e:	25 df       	rcall	.-438    	; 0x52da <udd_ep_get_size>
    5490:	4c 01       	movw	r8, r24
    5492:	bb 20       	and	r11, r11
    5494:	09 f4       	brne	.+2      	; 0x5498 <udd_ep_trans_complet+0x54>
    5496:	7b c0       	rjmp	.+246    	; 0x558e <udd_ep_trans_complet+0x14a>
    5498:	fe 01       	movw	r30, r28
    549a:	ee 0f       	add	r30, r30
    549c:	ff 1f       	adc	r31, r31
    549e:	ee 0f       	add	r30, r30
    54a0:	ff 1f       	adc	r31, r31
    54a2:	ee 0f       	add	r30, r30
    54a4:	ff 1f       	adc	r31, r31
    54a6:	ec 5f       	subi	r30, 0xFC	; 252
    54a8:	f8 4d       	sbci	r31, 0xD8	; 216
    54aa:	22 89       	ldd	r18, Z+18	; 0x12
    54ac:	33 89       	ldd	r19, Z+19	; 0x13
    54ae:	d8 01       	movw	r26, r16
    54b0:	15 96       	adiw	r26, 0x05	; 5
    54b2:	8d 91       	ld	r24, X+
    54b4:	9c 91       	ld	r25, X
    54b6:	16 97       	sbiw	r26, 0x06	; 6
    54b8:	82 0f       	add	r24, r18
    54ba:	93 1f       	adc	r25, r19
    54bc:	15 96       	adiw	r26, 0x05	; 5
    54be:	8d 93       	st	X+, r24
    54c0:	9c 93       	st	X, r25
    54c2:	16 97       	sbiw	r26, 0x06	; 6
    54c4:	13 96       	adiw	r26, 0x03	; 3
    54c6:	2d 91       	ld	r18, X+
    54c8:	3c 91       	ld	r19, X
    54ca:	14 97       	sbiw	r26, 0x04	; 4
    54cc:	82 17       	cp	r24, r18
    54ce:	93 07       	cpc	r25, r19
    54d0:	09 f4       	brne	.+2      	; 0x54d4 <udd_ep_trans_complet+0x90>
    54d2:	47 c0       	rjmp	.+142    	; 0x5562 <udd_ep_trans_complet+0x11e>
    54d4:	28 1b       	sub	r18, r24
    54d6:	39 0b       	sbc	r19, r25
    54d8:	21 15       	cp	r18, r1
    54da:	b4 e0       	ldi	r27, 0x04	; 4
    54dc:	3b 07       	cpc	r19, r27
    54de:	40 f0       	brcs	.+16     	; 0x54f0 <udd_ep_trans_complet+0xac>
    54e0:	2f ef       	ldi	r18, 0xFF	; 255
    54e2:	33 e0       	ldi	r19, 0x03	; 3
    54e4:	c9 01       	movw	r24, r18
    54e6:	b4 01       	movw	r22, r8
    54e8:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <__udivmodhi4>
    54ec:	28 1b       	sub	r18, r24
    54ee:	39 0b       	sbc	r19, r25
    54f0:	f8 01       	movw	r30, r16
    54f2:	80 81       	ld	r24, Z
    54f4:	81 ff       	sbrs	r24, 1
    54f6:	0a c0       	rjmp	.+20     	; 0x550c <udd_ep_trans_complet+0xc8>
    54f8:	c9 01       	movw	r24, r18
    54fa:	b4 01       	movw	r22, r8
    54fc:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <__udivmodhi4>
    5500:	41 e0       	ldi	r20, 0x01	; 1
    5502:	89 2b       	or	r24, r25
    5504:	09 f0       	breq	.+2      	; 0x5508 <udd_ep_trans_complet+0xc4>
    5506:	40 e0       	ldi	r20, 0x00	; 0
    5508:	84 2f       	mov	r24, r20
    550a:	01 c0       	rjmp	.+2      	; 0x550e <udd_ep_trans_complet+0xca>
    550c:	80 e0       	ldi	r24, 0x00	; 0
    550e:	d8 01       	movw	r26, r16
    5510:	9c 91       	ld	r25, X
    5512:	80 fb       	bst	r24, 0
    5514:	91 f9       	bld	r25, 1
    5516:	9c 93       	st	X, r25
    5518:	fe 01       	movw	r30, r28
    551a:	ee 0f       	add	r30, r30
    551c:	ff 1f       	adc	r31, r31
    551e:	ee 0f       	add	r30, r30
    5520:	ff 1f       	adc	r31, r31
    5522:	ee 0f       	add	r30, r30
    5524:	ff 1f       	adc	r31, r31
    5526:	ec 5f       	subi	r30, 0xFC	; 252
    5528:	f8 4d       	sbci	r31, 0xD8	; 216
    552a:	12 8a       	std	Z+18, r1	; 0x12
    552c:	13 8a       	std	Z+19, r1	; 0x13
    552e:	26 87       	std	Z+14, r18	; 0x0e
    5530:	37 87       	std	Z+15, r19	; 0x0f
    5532:	11 96       	adiw	r26, 0x01	; 1
    5534:	2d 91       	ld	r18, X+
    5536:	3c 91       	ld	r19, X
    5538:	12 97       	sbiw	r26, 0x02	; 2
    553a:	15 96       	adiw	r26, 0x05	; 5
    553c:	8d 91       	ld	r24, X+
    553e:	9c 91       	ld	r25, X
    5540:	16 97       	sbiw	r26, 0x06	; 6
    5542:	82 0f       	add	r24, r18
    5544:	93 1f       	adc	r25, r19
    5546:	cc 0f       	add	r28, r28
    5548:	dd 1f       	adc	r29, r29
    554a:	cc 0f       	add	r28, r28
    554c:	dd 1f       	adc	r29, r29
    554e:	cc 0f       	add	r28, r28
    5550:	dd 1f       	adc	r29, r29
    5552:	cc 5e       	subi	r28, 0xEC	; 236
    5554:	d8 4d       	sbci	r29, 0xD8	; 216
    5556:	88 83       	st	Y, r24
    5558:	99 83       	std	Y+1, r25	; 0x01
    555a:	f7 01       	movw	r30, r14
    555c:	02 e0       	ldi	r16, 0x02	; 2
    555e:	06 93       	lac	Z, r16
    5560:	e8 c0       	rjmp	.+464    	; 0x5732 <udd_ep_trans_complet+0x2ee>
    5562:	d8 01       	movw	r26, r16
    5564:	8c 91       	ld	r24, X
    5566:	81 ff       	sbrs	r24, 1
    5568:	d1 c0       	rjmp	.+418    	; 0x570c <udd_ep_trans_complet+0x2c8>
    556a:	8d 7f       	andi	r24, 0xFD	; 253
    556c:	8c 93       	st	X, r24
    556e:	cc 0f       	add	r28, r28
    5570:	dd 1f       	adc	r29, r29
    5572:	cc 0f       	add	r28, r28
    5574:	dd 1f       	adc	r29, r29
    5576:	cc 0f       	add	r28, r28
    5578:	dd 1f       	adc	r29, r29
    557a:	cc 5f       	subi	r28, 0xFC	; 252
    557c:	d8 4d       	sbci	r29, 0xD8	; 216
    557e:	1a 8a       	std	Y+18, r1	; 0x12
    5580:	1b 8a       	std	Y+19, r1	; 0x13
    5582:	1e 86       	std	Y+14, r1	; 0x0e
    5584:	1f 86       	std	Y+15, r1	; 0x0f
    5586:	f7 01       	movw	r30, r14
    5588:	02 e0       	ldi	r16, 0x02	; 2
    558a:	06 93       	lac	Z, r16
    558c:	d2 c0       	rjmp	.+420    	; 0x5732 <udd_ep_trans_complet+0x2ee>
    558e:	fe 01       	movw	r30, r28
    5590:	ee 0f       	add	r30, r30
    5592:	ff 1f       	adc	r31, r31
    5594:	ee 0f       	add	r30, r30
    5596:	ff 1f       	adc	r31, r31
    5598:	ee 0f       	add	r30, r30
    559a:	ff 1f       	adc	r31, r31
    559c:	ec 5f       	subi	r30, 0xFC	; 252
    559e:	f8 4d       	sbci	r31, 0xD8	; 216
    55a0:	a6 84       	ldd	r10, Z+14	; 0x0e
    55a2:	b7 84       	ldd	r11, Z+15	; 0x0f
    55a4:	d8 01       	movw	r26, r16
    55a6:	8c 91       	ld	r24, X
    55a8:	82 ff       	sbrs	r24, 2
    55aa:	1b c0       	rjmp	.+54     	; 0x55e2 <udd_ep_trans_complet+0x19e>
    55ac:	11 96       	adiw	r26, 0x01	; 1
    55ae:	ed 91       	ld	r30, X+
    55b0:	fc 91       	ld	r31, X
    55b2:	12 97       	sbiw	r26, 0x02	; 2
    55b4:	15 96       	adiw	r26, 0x05	; 5
    55b6:	2d 91       	ld	r18, X+
    55b8:	3c 91       	ld	r19, X
    55ba:	16 97       	sbiw	r26, 0x06	; 6
    55bc:	13 96       	adiw	r26, 0x03	; 3
    55be:	8d 91       	ld	r24, X+
    55c0:	9c 91       	ld	r25, X
    55c2:	14 97       	sbiw	r26, 0x04	; 4
    55c4:	b4 01       	movw	r22, r8
    55c6:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <__udivmodhi4>
    55ca:	b0 e4       	ldi	r27, 0x40	; 64
    55cc:	db 9e       	mul	r13, r27
    55ce:	b0 01       	movw	r22, r0
    55d0:	11 24       	eor	r1, r1
    55d2:	65 52       	subi	r22, 0x25	; 37
    55d4:	7a 4d       	sbci	r23, 0xDA	; 218
    55d6:	ac 01       	movw	r20, r24
    55d8:	cf 01       	movw	r24, r30
    55da:	82 0f       	add	r24, r18
    55dc:	93 1f       	adc	r25, r19
    55de:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <memcpy>
    55e2:	f8 01       	movw	r30, r16
    55e4:	25 81       	ldd	r18, Z+5	; 0x05
    55e6:	36 81       	ldd	r19, Z+6	; 0x06
    55e8:	2a 0d       	add	r18, r10
    55ea:	3b 1d       	adc	r19, r11
    55ec:	25 83       	std	Z+5, r18	; 0x05
    55ee:	36 83       	std	Z+6, r19	; 0x06
    55f0:	83 81       	ldd	r24, Z+3	; 0x03
    55f2:	94 81       	ldd	r25, Z+4	; 0x04
    55f4:	82 17       	cp	r24, r18
    55f6:	93 07       	cpc	r25, r19
    55f8:	68 f4       	brcc	.+26     	; 0x5614 <udd_ep_trans_complet+0x1d0>
    55fa:	85 83       	std	Z+5, r24	; 0x05
    55fc:	96 83       	std	Z+6, r25	; 0x06
    55fe:	cc 0f       	add	r28, r28
    5600:	dd 1f       	adc	r29, r29
    5602:	cc 0f       	add	r28, r28
    5604:	dd 1f       	adc	r29, r29
    5606:	cc 0f       	add	r28, r28
    5608:	dd 1f       	adc	r29, r29
    560a:	cc 5f       	subi	r28, 0xFC	; 252
    560c:	d8 4d       	sbci	r29, 0xD8	; 216
    560e:	8a 89       	ldd	r24, Y+18	; 0x12
    5610:	9b 89       	ldd	r25, Y+19	; 0x13
    5612:	7c c0       	rjmp	.+248    	; 0x570c <udd_ep_trans_complet+0x2c8>
    5614:	fe 01       	movw	r30, r28
    5616:	ee 0f       	add	r30, r30
    5618:	ff 1f       	adc	r31, r31
    561a:	ee 0f       	add	r30, r30
    561c:	ff 1f       	adc	r31, r31
    561e:	ee 0f       	add	r30, r30
    5620:	ff 1f       	adc	r31, r31
    5622:	ec 5f       	subi	r30, 0xFC	; 252
    5624:	f8 4d       	sbci	r31, 0xD8	; 216
    5626:	42 89       	ldd	r20, Z+18	; 0x12
    5628:	53 89       	ldd	r21, Z+19	; 0x13
    562a:	4a 15       	cp	r20, r10
    562c:	5b 05       	cpc	r21, r11
    562e:	09 f0       	breq	.+2      	; 0x5632 <udd_ep_trans_complet+0x1ee>
    5630:	6d c0       	rjmp	.+218    	; 0x570c <udd_ep_trans_complet+0x2c8>
    5632:	28 17       	cp	r18, r24
    5634:	39 07       	cpc	r19, r25
    5636:	09 f4       	brne	.+2      	; 0x563a <udd_ep_trans_complet+0x1f6>
    5638:	69 c0       	rjmp	.+210    	; 0x570c <udd_ep_trans_complet+0x2c8>
    563a:	ac 01       	movw	r20, r24
    563c:	42 1b       	sub	r20, r18
    563e:	53 0b       	sbc	r21, r19
    5640:	9a 01       	movw	r18, r20
    5642:	21 15       	cp	r18, r1
    5644:	54 e0       	ldi	r21, 0x04	; 4
    5646:	35 07       	cpc	r19, r21
    5648:	58 f0       	brcs	.+22     	; 0x5660 <udd_ep_trans_complet+0x21c>
    564a:	2f ef       	ldi	r18, 0xFF	; 255
    564c:	33 e0       	ldi	r19, 0x03	; 3
    564e:	c9 01       	movw	r24, r18
    5650:	b4 01       	movw	r22, r8
    5652:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <__udivmodhi4>
    5656:	d9 01       	movw	r26, r18
    5658:	a8 1b       	sub	r26, r24
    565a:	b9 0b       	sbc	r27, r25
    565c:	cd 01       	movw	r24, r26
    565e:	08 c0       	rjmp	.+16     	; 0x5670 <udd_ep_trans_complet+0x22c>
    5660:	c9 01       	movw	r24, r18
    5662:	b4 01       	movw	r22, r8
    5664:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <__udivmodhi4>
    5668:	f9 01       	movw	r30, r18
    566a:	e8 1b       	sub	r30, r24
    566c:	f9 0b       	sbc	r31, r25
    566e:	cf 01       	movw	r24, r30
    5670:	fe 01       	movw	r30, r28
    5672:	ee 0f       	add	r30, r30
    5674:	ff 1f       	adc	r31, r31
    5676:	ee 0f       	add	r30, r30
    5678:	ff 1f       	adc	r31, r31
    567a:	ee 0f       	add	r30, r30
    567c:	ff 1f       	adc	r31, r31
    567e:	ec 5f       	subi	r30, 0xFC	; 252
    5680:	f8 4d       	sbci	r31, 0xD8	; 216
    5682:	16 86       	std	Z+14, r1	; 0x0e
    5684:	17 86       	std	Z+15, r1	; 0x0f
    5686:	88 15       	cp	r24, r8
    5688:	99 05       	cpc	r25, r9
    568a:	00 f5       	brcc	.+64     	; 0x56cc <udd_ep_trans_complet+0x288>
    568c:	d8 01       	movw	r26, r16
    568e:	8c 91       	ld	r24, X
    5690:	84 60       	ori	r24, 0x04	; 4
    5692:	8c 93       	st	X, r24
    5694:	b0 e4       	ldi	r27, 0x40	; 64
    5696:	db 9e       	mul	r13, r27
    5698:	c0 01       	movw	r24, r0
    569a:	11 24       	eor	r1, r1
    569c:	85 52       	subi	r24, 0x25	; 37
    569e:	9a 4d       	sbci	r25, 0xDA	; 218
    56a0:	fe 01       	movw	r30, r28
    56a2:	ee 0f       	add	r30, r30
    56a4:	ff 1f       	adc	r31, r31
    56a6:	ee 0f       	add	r30, r30
    56a8:	ff 1f       	adc	r31, r31
    56aa:	ee 0f       	add	r30, r30
    56ac:	ff 1f       	adc	r31, r31
    56ae:	ec 5e       	subi	r30, 0xEC	; 236
    56b0:	f8 4d       	sbci	r31, 0xD8	; 216
    56b2:	80 83       	st	Z, r24
    56b4:	91 83       	std	Z+1, r25	; 0x01
    56b6:	cc 0f       	add	r28, r28
    56b8:	dd 1f       	adc	r29, r29
    56ba:	cc 0f       	add	r28, r28
    56bc:	dd 1f       	adc	r29, r29
    56be:	cc 0f       	add	r28, r28
    56c0:	dd 1f       	adc	r29, r29
    56c2:	cc 5f       	subi	r28, 0xFC	; 252
    56c4:	d8 4d       	sbci	r29, 0xD8	; 216
    56c6:	8a 8a       	std	Y+18, r8	; 0x12
    56c8:	9b 8a       	std	Y+19, r9	; 0x13
    56ca:	1c c0       	rjmp	.+56     	; 0x5704 <udd_ep_trans_complet+0x2c0>
    56cc:	f8 01       	movw	r30, r16
    56ce:	41 81       	ldd	r20, Z+1	; 0x01
    56d0:	52 81       	ldd	r21, Z+2	; 0x02
    56d2:	25 81       	ldd	r18, Z+5	; 0x05
    56d4:	36 81       	ldd	r19, Z+6	; 0x06
    56d6:	24 0f       	add	r18, r20
    56d8:	35 1f       	adc	r19, r21
    56da:	fe 01       	movw	r30, r28
    56dc:	ee 0f       	add	r30, r30
    56de:	ff 1f       	adc	r31, r31
    56e0:	ee 0f       	add	r30, r30
    56e2:	ff 1f       	adc	r31, r31
    56e4:	ee 0f       	add	r30, r30
    56e6:	ff 1f       	adc	r31, r31
    56e8:	ec 5e       	subi	r30, 0xEC	; 236
    56ea:	f8 4d       	sbci	r31, 0xD8	; 216
    56ec:	20 83       	st	Z, r18
    56ee:	31 83       	std	Z+1, r19	; 0x01
    56f0:	cc 0f       	add	r28, r28
    56f2:	dd 1f       	adc	r29, r29
    56f4:	cc 0f       	add	r28, r28
    56f6:	dd 1f       	adc	r29, r29
    56f8:	cc 0f       	add	r28, r28
    56fa:	dd 1f       	adc	r29, r29
    56fc:	cc 5f       	subi	r28, 0xFC	; 252
    56fe:	d8 4d       	sbci	r29, 0xD8	; 216
    5700:	8a 8b       	std	Y+18, r24	; 0x12
    5702:	9b 8b       	std	Y+19, r25	; 0x13
    5704:	f7 01       	movw	r30, r14
    5706:	02 e0       	ldi	r16, 0x02	; 2
    5708:	06 93       	lac	Z, r16
    570a:	13 c0       	rjmp	.+38     	; 0x5732 <udd_ep_trans_complet+0x2ee>
    570c:	d8 01       	movw	r26, r16
    570e:	8c 91       	ld	r24, X
    5710:	80 ff       	sbrs	r24, 0
    5712:	0f c0       	rjmp	.+30     	; 0x5732 <udd_ep_trans_complet+0x2ee>
    5714:	8e 7f       	andi	r24, 0xFE	; 254
    5716:	8c 93       	st	X, r24
    5718:	17 96       	adiw	r26, 0x07	; 7
    571a:	ed 91       	ld	r30, X+
    571c:	fc 91       	ld	r31, X
    571e:	18 97       	sbiw	r26, 0x08	; 8
    5720:	30 97       	sbiw	r30, 0x00	; 0
    5722:	39 f0       	breq	.+14     	; 0x5732 <udd_ep_trans_complet+0x2ee>
    5724:	15 96       	adiw	r26, 0x05	; 5
    5726:	6d 91       	ld	r22, X+
    5728:	7c 91       	ld	r23, X
    572a:	16 97       	sbiw	r26, 0x06	; 6
    572c:	4d 2d       	mov	r20, r13
    572e:	80 e0       	ldi	r24, 0x00	; 0
    5730:	19 95       	eicall
    5732:	df 91       	pop	r29
    5734:	cf 91       	pop	r28
    5736:	1f 91       	pop	r17
    5738:	0f 91       	pop	r16
    573a:	ff 90       	pop	r15
    573c:	ef 90       	pop	r14
    573e:	df 90       	pop	r13
    5740:	bf 90       	pop	r11
    5742:	af 90       	pop	r10
    5744:	9f 90       	pop	r9
    5746:	8f 90       	pop	r8
    5748:	08 95       	ret

0000574a <udd_attach>:
    574a:	1f 93       	push	r17
    574c:	cf 93       	push	r28
    574e:	df 93       	push	r29
    5750:	1f 92       	push	r1
    5752:	cd b7       	in	r28, 0x3d	; 61
    5754:	de b7       	in	r29, 0x3e	; 62
    5756:	8f b7       	in	r24, 0x3f	; 63
    5758:	89 83       	std	Y+1, r24	; 0x01
    575a:	f8 94       	cli
    575c:	19 81       	ldd	r17, Y+1	; 0x01
    575e:	81 e0       	ldi	r24, 0x01	; 1
    5760:	cf dc       	rcall	.-1634   	; 0x5100 <udd_sleep_mode>
    5762:	ea ec       	ldi	r30, 0xCA	; 202
    5764:	f4 e0       	ldi	r31, 0x04	; 4
    5766:	80 e4       	ldi	r24, 0x40	; 64
    5768:	80 83       	st	Z, r24
    576a:	80 e2       	ldi	r24, 0x20	; 32
    576c:	80 83       	st	Z, r24
    576e:	e1 ec       	ldi	r30, 0xC1	; 193
    5770:	f4 e0       	ldi	r31, 0x04	; 4
    5772:	80 81       	ld	r24, Z
    5774:	81 60       	ori	r24, 0x01	; 1
    5776:	80 83       	st	Z, r24
    5778:	a9 ec       	ldi	r26, 0xC9	; 201
    577a:	b4 e0       	ldi	r27, 0x04	; 4
    577c:	8c 91       	ld	r24, X
    577e:	82 60       	ori	r24, 0x02	; 2
    5780:	8c 93       	st	X, r24
    5782:	e8 ec       	ldi	r30, 0xC8	; 200
    5784:	f4 e0       	ldi	r31, 0x04	; 4
    5786:	80 81       	ld	r24, Z
    5788:	80 64       	ori	r24, 0x40	; 64
    578a:	80 83       	st	Z, r24
    578c:	8c 91       	ld	r24, X
    578e:	81 60       	ori	r24, 0x01	; 1
    5790:	8c 93       	st	X, r24
    5792:	80 81       	ld	r24, Z
    5794:	80 68       	ori	r24, 0x80	; 128
    5796:	80 83       	st	Z, r24
    5798:	1f bf       	out	0x3f, r17	; 63
    579a:	0f 90       	pop	r0
    579c:	df 91       	pop	r29
    579e:	cf 91       	pop	r28
    57a0:	1f 91       	pop	r17
    57a2:	08 95       	ret

000057a4 <udd_enable>:
    57a4:	0f 93       	push	r16
    57a6:	1f 93       	push	r17
    57a8:	cf 93       	push	r28
    57aa:	df 93       	push	r29
    57ac:	1f 92       	push	r1
    57ae:	1f 92       	push	r1
    57b0:	cd b7       	in	r28, 0x3d	; 61
    57b2:	de b7       	in	r29, 0x3e	; 62
    57b4:	00 e6       	ldi	r16, 0x60	; 96
    57b6:	10 e0       	ldi	r17, 0x00	; 0
    57b8:	f8 01       	movw	r30, r16
    57ba:	10 82       	st	Z, r1
    57bc:	80 e3       	ldi	r24, 0x30	; 48
    57be:	1e d5       	rcall	.+2620   	; 0x61fc <sysclk_enable_usb>
    57c0:	e0 ec       	ldi	r30, 0xC0	; 192
    57c2:	f4 e0       	ldi	r31, 0x04	; 4
    57c4:	80 81       	ld	r24, Z
    57c6:	80 64       	ori	r24, 0x40	; 64
    57c8:	80 83       	st	Z, r24
    57ca:	81 e0       	ldi	r24, 0x01	; 1
    57cc:	f8 01       	movw	r30, r16
    57ce:	80 83       	st	Z, r24
    57d0:	8f b7       	in	r24, 0x3f	; 63
    57d2:	8a 83       	std	Y+2, r24	; 0x02
    57d4:	f8 94       	cli
    57d6:	1a 81       	ldd	r17, Y+2	; 0x02
    57d8:	e4 e0       	ldi	r30, 0x04	; 4
    57da:	f7 e2       	ldi	r31, 0x27	; 39
    57dc:	15 86       	std	Z+13, r1	; 0x0d
    57de:	15 8a       	std	Z+21, r1	; 0x15
    57e0:	15 8e       	std	Z+29, r1	; 0x1d
    57e2:	15 a2       	std	Z+37, r1	; 0x25
    57e4:	15 a6       	std	Z+45, r1	; 0x2d
    57e6:	15 aa       	std	Z+53, r1	; 0x35
    57e8:	eb e9       	ldi	r30, 0x9B	; 155
    57ea:	f6 e2       	ldi	r31, 0x26	; 38
    57ec:	80 81       	ld	r24, Z
    57ee:	8e 7f       	andi	r24, 0xFE	; 254
    57f0:	80 83       	st	Z, r24
    57f2:	e4 ea       	ldi	r30, 0xA4	; 164
    57f4:	f6 e2       	ldi	r31, 0x26	; 38
    57f6:	80 81       	ld	r24, Z
    57f8:	8e 7f       	andi	r24, 0xFE	; 254
    57fa:	80 83       	st	Z, r24
    57fc:	ed ea       	ldi	r30, 0xAD	; 173
    57fe:	f6 e2       	ldi	r31, 0x26	; 38
    5800:	80 81       	ld	r24, Z
    5802:	8e 7f       	andi	r24, 0xFE	; 254
    5804:	80 83       	st	Z, r24
    5806:	e6 eb       	ldi	r30, 0xB6	; 182
    5808:	f6 e2       	ldi	r31, 0x26	; 38
    580a:	80 81       	ld	r24, Z
    580c:	8e 7f       	andi	r24, 0xFE	; 254
    580e:	80 83       	st	Z, r24
    5810:	6a e1       	ldi	r22, 0x1A	; 26
    5812:	70 e0       	ldi	r23, 0x00	; 0
    5814:	82 e0       	ldi	r24, 0x02	; 2
    5816:	48 d5       	rcall	.+2704   	; 0x62a8 <nvm_read_byte>
    5818:	8f 3f       	cpi	r24, 0xFF	; 255
    581a:	19 f0       	breq	.+6      	; 0x5822 <udd_enable+0x7e>
    581c:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    5820:	03 c0       	rjmp	.+6      	; 0x5828 <udd_enable+0x84>
    5822:	8f e1       	ldi	r24, 0x1F	; 31
    5824:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    5828:	6b e1       	ldi	r22, 0x1B	; 27
    582a:	70 e0       	ldi	r23, 0x00	; 0
    582c:	82 e0       	ldi	r24, 0x02	; 2
    582e:	3c d5       	rcall	.+2680   	; 0x62a8 <nvm_read_byte>
    5830:	8f 3f       	cpi	r24, 0xFF	; 255
    5832:	19 f0       	breq	.+6      	; 0x583a <udd_enable+0x96>
    5834:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    5838:	03 c0       	rjmp	.+6      	; 0x5840 <udd_enable+0x9c>
    583a:	8f e1       	ldi	r24, 0x1F	; 31
    583c:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    5840:	e0 ec       	ldi	r30, 0xC0	; 192
    5842:	f4 e0       	ldi	r31, 0x04	; 4
    5844:	80 81       	ld	r24, Z
    5846:	82 60       	ori	r24, 0x02	; 2
    5848:	80 83       	st	Z, r24
    584a:	80 81       	ld	r24, Z
    584c:	80 68       	ori	r24, 0x80	; 128
    584e:	80 83       	st	Z, r24
    5850:	80 81       	ld	r24, Z
    5852:	80 61       	ori	r24, 0x10	; 16
    5854:	80 83       	st	Z, r24
    5856:	80 e1       	ldi	r24, 0x10	; 16
    5858:	97 e2       	ldi	r25, 0x27	; 39
    585a:	86 83       	std	Z+6, r24	; 0x06
    585c:	97 83       	std	Z+7, r25	; 0x07
    585e:	80 81       	ld	r24, Z
    5860:	80 62       	ori	r24, 0x20	; 32
    5862:	80 83       	st	Z, r24
    5864:	8f ef       	ldi	r24, 0xFF	; 255
    5866:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    586a:	e8 ec       	ldi	r30, 0xC8	; 200
    586c:	f4 e0       	ldi	r31, 0x04	; 4
    586e:	80 81       	ld	r24, Z
    5870:	81 60       	ori	r24, 0x01	; 1
    5872:	80 83       	st	Z, r24
    5874:	10 92 44 27 	sts	0x2744, r1	; 0x802744 <udd_b_idle>
    5878:	80 91 5c 33 	lds	r24, 0x335C	; 0x80335c <sleepmgr_locks+0x5>
    587c:	8f 3f       	cpi	r24, 0xFF	; 255
    587e:	09 f4       	brne	.+2      	; 0x5882 <udd_enable+0xde>
    5880:	ff cf       	rjmp	.-2      	; 0x5880 <udd_enable+0xdc>
    5882:	8f b7       	in	r24, 0x3f	; 63
    5884:	89 83       	std	Y+1, r24	; 0x01
    5886:	f8 94       	cli
    5888:	99 81       	ldd	r25, Y+1	; 0x01
    588a:	e7 e5       	ldi	r30, 0x57	; 87
    588c:	f3 e3       	ldi	r31, 0x33	; 51
    588e:	85 81       	ldd	r24, Z+5	; 0x05
    5890:	8f 5f       	subi	r24, 0xFF	; 255
    5892:	85 83       	std	Z+5, r24	; 0x05
    5894:	9f bf       	out	0x3f, r25	; 63
    5896:	59 df       	rcall	.-334    	; 0x574a <udd_attach>
    5898:	1f bf       	out	0x3f, r17	; 63
    589a:	0f 90       	pop	r0
    589c:	0f 90       	pop	r0
    589e:	df 91       	pop	r29
    58a0:	cf 91       	pop	r28
    58a2:	1f 91       	pop	r17
    58a4:	0f 91       	pop	r16
    58a6:	08 95       	ret

000058a8 <udd_is_high_speed>:
    58a8:	80 e0       	ldi	r24, 0x00	; 0
    58aa:	08 95       	ret

000058ac <udd_set_address>:
    58ac:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    58b0:	08 95       	ret

000058b2 <udd_getaddress>:
    58b2:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    58b6:	08 95       	ret

000058b8 <udd_get_frame_number>:
    58b8:	80 91 40 27 	lds	r24, 0x2740	; 0x802740 <udd_sram+0x3c>
    58bc:	90 91 41 27 	lds	r25, 0x2741	; 0x802741 <udd_sram+0x3d>
    58c0:	08 95       	ret

000058c2 <udd_get_micro_frame_number>:
    58c2:	80 e0       	ldi	r24, 0x00	; 0
    58c4:	90 e0       	ldi	r25, 0x00	; 0
    58c6:	08 95       	ret

000058c8 <udd_set_setup_payload>:
    58c8:	e7 e4       	ldi	r30, 0x47	; 71
    58ca:	f3 e3       	ldi	r31, 0x33	; 51
    58cc:	80 87       	std	Z+8, r24	; 0x08
    58ce:	91 87       	std	Z+9, r25	; 0x09
    58d0:	62 87       	std	Z+10, r22	; 0x0a
    58d2:	73 87       	std	Z+11, r23	; 0x0b
    58d4:	08 95       	ret

000058d6 <udd_ep_alloc>:
    58d6:	28 2f       	mov	r18, r24
    58d8:	2f 70       	andi	r18, 0x0F	; 15
    58da:	30 e0       	ldi	r19, 0x00	; 0
    58dc:	22 0f       	add	r18, r18
    58de:	33 1f       	adc	r19, r19
    58e0:	08 2e       	mov	r0, r24
    58e2:	00 0c       	add	r0, r0
    58e4:	99 0b       	sbc	r25, r25
    58e6:	88 27       	eor	r24, r24
    58e8:	99 0f       	add	r25, r25
    58ea:	88 1f       	adc	r24, r24
    58ec:	99 27       	eor	r25, r25
    58ee:	82 0f       	add	r24, r18
    58f0:	93 1f       	adc	r25, r19
    58f2:	fc 01       	movw	r30, r24
    58f4:	ee 0f       	add	r30, r30
    58f6:	ff 1f       	adc	r31, r31
    58f8:	ee 0f       	add	r30, r30
    58fa:	ff 1f       	adc	r31, r31
    58fc:	ee 0f       	add	r30, r30
    58fe:	ff 1f       	adc	r31, r31
    5900:	ec 5f       	subi	r30, 0xFC	; 252
    5902:	f8 4d       	sbci	r31, 0xD8	; 216
    5904:	25 85       	ldd	r18, Z+13	; 0x0d
    5906:	20 7c       	andi	r18, 0xC0	; 192
    5908:	09 f0       	breq	.+2      	; 0x590c <udd_ep_alloc+0x36>
    590a:	69 c0       	rjmp	.+210    	; 0x59de <udd_ep_alloc+0x108>
    590c:	63 70       	andi	r22, 0x03	; 3
    590e:	61 30       	cpi	r22, 0x01	; 1
    5910:	11 f0       	breq	.+4      	; 0x5916 <udd_ep_alloc+0x40>
    5912:	18 f4       	brcc	.+6      	; 0x591a <udd_ep_alloc+0x44>
    5914:	04 c0       	rjmp	.+8      	; 0x591e <udd_ep_alloc+0x48>
    5916:	20 ec       	ldi	r18, 0xC0	; 192
    5918:	03 c0       	rjmp	.+6      	; 0x5920 <udd_ep_alloc+0x4a>
    591a:	20 e8       	ldi	r18, 0x80	; 128
    591c:	01 c0       	rjmp	.+2      	; 0x5920 <udd_ep_alloc+0x4a>
    591e:	20 e4       	ldi	r18, 0x40	; 64
    5920:	40 38       	cpi	r20, 0x80	; 128
    5922:	51 05       	cpc	r21, r1
    5924:	e9 f0       	breq	.+58     	; 0x5960 <udd_ep_alloc+0x8a>
    5926:	50 f4       	brcc	.+20     	; 0x593c <udd_ep_alloc+0x66>
    5928:	40 32       	cpi	r20, 0x20	; 32
    592a:	51 05       	cpc	r21, r1
    592c:	a9 f0       	breq	.+42     	; 0x5958 <udd_ep_alloc+0x82>
    592e:	40 34       	cpi	r20, 0x40	; 64
    5930:	51 05       	cpc	r21, r1
    5932:	a1 f0       	breq	.+40     	; 0x595c <udd_ep_alloc+0x86>
    5934:	40 31       	cpi	r20, 0x10	; 16
    5936:	51 05       	cpc	r21, r1
    5938:	d9 f4       	brne	.+54     	; 0x5970 <udd_ep_alloc+0x9a>
    593a:	0c c0       	rjmp	.+24     	; 0x5954 <udd_ep_alloc+0x7e>
    593c:	41 15       	cp	r20, r1
    593e:	32 e0       	ldi	r19, 0x02	; 2
    5940:	53 07       	cpc	r21, r19
    5942:	91 f0       	breq	.+36     	; 0x5968 <udd_ep_alloc+0x92>
    5944:	4f 3f       	cpi	r20, 0xFF	; 255
    5946:	33 e0       	ldi	r19, 0x03	; 3
    5948:	53 07       	cpc	r21, r19
    594a:	81 f0       	breq	.+32     	; 0x596c <udd_ep_alloc+0x96>
    594c:	41 15       	cp	r20, r1
    594e:	51 40       	sbci	r21, 0x01	; 1
    5950:	79 f4       	brne	.+30     	; 0x5970 <udd_ep_alloc+0x9a>
    5952:	08 c0       	rjmp	.+16     	; 0x5964 <udd_ep_alloc+0x8e>
    5954:	41 e0       	ldi	r20, 0x01	; 1
    5956:	0d c0       	rjmp	.+26     	; 0x5972 <udd_ep_alloc+0x9c>
    5958:	42 e0       	ldi	r20, 0x02	; 2
    595a:	0b c0       	rjmp	.+22     	; 0x5972 <udd_ep_alloc+0x9c>
    595c:	43 e0       	ldi	r20, 0x03	; 3
    595e:	09 c0       	rjmp	.+18     	; 0x5972 <udd_ep_alloc+0x9c>
    5960:	44 e0       	ldi	r20, 0x04	; 4
    5962:	07 c0       	rjmp	.+14     	; 0x5972 <udd_ep_alloc+0x9c>
    5964:	45 e0       	ldi	r20, 0x05	; 5
    5966:	05 c0       	rjmp	.+10     	; 0x5972 <udd_ep_alloc+0x9c>
    5968:	46 e0       	ldi	r20, 0x06	; 6
    596a:	03 c0       	rjmp	.+6      	; 0x5972 <udd_ep_alloc+0x9c>
    596c:	47 e0       	ldi	r20, 0x07	; 7
    596e:	01 c0       	rjmp	.+2      	; 0x5972 <udd_ep_alloc+0x9c>
    5970:	40 e0       	ldi	r20, 0x00	; 0
    5972:	fc 01       	movw	r30, r24
    5974:	ee 0f       	add	r30, r30
    5976:	ff 1f       	adc	r31, r31
    5978:	ee 0f       	add	r30, r30
    597a:	ff 1f       	adc	r31, r31
    597c:	ee 0f       	add	r30, r30
    597e:	ff 1f       	adc	r31, r31
    5980:	ec 5f       	subi	r30, 0xFC	; 252
    5982:	f8 4d       	sbci	r31, 0xD8	; 216
    5984:	15 86       	std	Z+13, r1	; 0x0d
    5986:	36 e0       	ldi	r19, 0x06	; 6
    5988:	34 87       	std	Z+12, r19	; 0x0c
    598a:	24 2b       	or	r18, r20
    598c:	25 87       	std	Z+13, r18	; 0x0d
    598e:	fc 01       	movw	r30, r24
    5990:	ee 0f       	add	r30, r30
    5992:	ff 1f       	adc	r31, r31
    5994:	ee 0f       	add	r30, r30
    5996:	ff 1f       	adc	r31, r31
    5998:	ee 0f       	add	r30, r30
    599a:	ff 1f       	adc	r31, r31
    599c:	ec 5f       	subi	r30, 0xFC	; 252
    599e:	f8 4d       	sbci	r31, 0xD8	; 216
    59a0:	25 85       	ldd	r18, Z+13	; 0x0d
    59a2:	20 7c       	andi	r18, 0xC0	; 192
    59a4:	20 3c       	cpi	r18, 0xC0	; 192
    59a6:	69 f4       	brne	.+26     	; 0x59c2 <udd_ep_alloc+0xec>
    59a8:	fc 01       	movw	r30, r24
    59aa:	ee 0f       	add	r30, r30
    59ac:	ff 1f       	adc	r31, r31
    59ae:	ee 0f       	add	r30, r30
    59b0:	ff 1f       	adc	r31, r31
    59b2:	ee 0f       	add	r30, r30
    59b4:	ff 1f       	adc	r31, r31
    59b6:	ec 5f       	subi	r30, 0xFC	; 252
    59b8:	f8 4d       	sbci	r31, 0xD8	; 216
    59ba:	25 85       	ldd	r18, Z+13	; 0x0d
    59bc:	27 70       	andi	r18, 0x07	; 7
    59be:	27 30       	cpi	r18, 0x07	; 7
    59c0:	81 f0       	breq	.+32     	; 0x59e2 <udd_ep_alloc+0x10c>
    59c2:	88 0f       	add	r24, r24
    59c4:	99 1f       	adc	r25, r25
    59c6:	88 0f       	add	r24, r24
    59c8:	99 1f       	adc	r25, r25
    59ca:	88 0f       	add	r24, r24
    59cc:	99 1f       	adc	r25, r25
    59ce:	fc 01       	movw	r30, r24
    59d0:	ec 5f       	subi	r30, 0xFC	; 252
    59d2:	f8 4d       	sbci	r31, 0xD8	; 216
    59d4:	85 85       	ldd	r24, Z+13	; 0x0d
    59d6:	80 62       	ori	r24, 0x20	; 32
    59d8:	85 87       	std	Z+13, r24	; 0x0d
    59da:	81 e0       	ldi	r24, 0x01	; 1
    59dc:	08 95       	ret
    59de:	80 e0       	ldi	r24, 0x00	; 0
    59e0:	08 95       	ret
    59e2:	81 e0       	ldi	r24, 0x01	; 1
    59e4:	08 95       	ret

000059e6 <udd_ep_is_halted>:
    59e6:	e8 2f       	mov	r30, r24
    59e8:	ef 70       	andi	r30, 0x0F	; 15
    59ea:	f0 e0       	ldi	r31, 0x00	; 0
    59ec:	ee 0f       	add	r30, r30
    59ee:	ff 1f       	adc	r31, r31
    59f0:	08 2e       	mov	r0, r24
    59f2:	00 0c       	add	r0, r0
    59f4:	99 0b       	sbc	r25, r25
    59f6:	88 27       	eor	r24, r24
    59f8:	99 0f       	add	r25, r25
    59fa:	88 1f       	adc	r24, r24
    59fc:	99 27       	eor	r25, r25
    59fe:	e8 0f       	add	r30, r24
    5a00:	f9 1f       	adc	r31, r25
    5a02:	ee 0f       	add	r30, r30
    5a04:	ff 1f       	adc	r31, r31
    5a06:	ee 0f       	add	r30, r30
    5a08:	ff 1f       	adc	r31, r31
    5a0a:	ee 0f       	add	r30, r30
    5a0c:	ff 1f       	adc	r31, r31
    5a0e:	ec 5f       	subi	r30, 0xFC	; 252
    5a10:	f8 4d       	sbci	r31, 0xD8	; 216
    5a12:	85 85       	ldd	r24, Z+13	; 0x0d
    5a14:	82 fb       	bst	r24, 2
    5a16:	88 27       	eor	r24, r24
    5a18:	80 f9       	bld	r24, 0
    5a1a:	08 95       	ret

00005a1c <udd_ep_clear_halt>:
    5a1c:	0f 93       	push	r16
    5a1e:	28 2f       	mov	r18, r24
    5a20:	2f 70       	andi	r18, 0x0F	; 15
    5a22:	30 e0       	ldi	r19, 0x00	; 0
    5a24:	a9 01       	movw	r20, r18
    5a26:	44 0f       	add	r20, r20
    5a28:	55 1f       	adc	r21, r21
    5a2a:	28 2f       	mov	r18, r24
    5a2c:	08 2e       	mov	r0, r24
    5a2e:	00 0c       	add	r0, r0
    5a30:	33 0b       	sbc	r19, r19
    5a32:	22 27       	eor	r18, r18
    5a34:	33 0f       	add	r19, r19
    5a36:	22 1f       	adc	r18, r18
    5a38:	33 27       	eor	r19, r19
    5a3a:	24 0f       	add	r18, r20
    5a3c:	35 1f       	adc	r19, r21
    5a3e:	a9 01       	movw	r20, r18
    5a40:	44 0f       	add	r20, r20
    5a42:	55 1f       	adc	r21, r21
    5a44:	44 0f       	add	r20, r20
    5a46:	55 1f       	adc	r21, r21
    5a48:	44 0f       	add	r20, r20
    5a4a:	55 1f       	adc	r21, r21
    5a4c:	fa 01       	movw	r30, r20
    5a4e:	e0 5f       	subi	r30, 0xF0	; 240
    5a50:	f8 4d       	sbci	r31, 0xD8	; 216
    5a52:	01 e0       	ldi	r16, 0x01	; 1
    5a54:	06 93       	lac	Z, r16
    5a56:	fa 01       	movw	r30, r20
    5a58:	ec 5f       	subi	r30, 0xFC	; 252
    5a5a:	f8 4d       	sbci	r31, 0xD8	; 216
    5a5c:	95 85       	ldd	r25, Z+13	; 0x0d
    5a5e:	92 ff       	sbrs	r25, 2
    5a60:	11 c0       	rjmp	.+34     	; 0x5a84 <udd_ep_clear_halt+0x68>
    5a62:	fa 01       	movw	r30, r20
    5a64:	ec 5f       	subi	r30, 0xFC	; 252
    5a66:	f8 4d       	sbci	r31, 0xD8	; 216
    5a68:	95 85       	ldd	r25, Z+13	; 0x0d
    5a6a:	9b 7f       	andi	r25, 0xFB	; 251
    5a6c:	95 87       	std	Z+13, r25	; 0x0d
    5a6e:	5e dc       	rcall	.-1860   	; 0x532c <udd_ep_get_job>
    5a70:	fc 01       	movw	r30, r24
    5a72:	80 81       	ld	r24, Z
    5a74:	80 ff       	sbrs	r24, 0
    5a76:	06 c0       	rjmp	.+12     	; 0x5a84 <udd_ep_clear_halt+0x68>
    5a78:	8e 7f       	andi	r24, 0xFE	; 254
    5a7a:	80 83       	st	Z, r24
    5a7c:	07 80       	ldd	r0, Z+7	; 0x07
    5a7e:	f0 85       	ldd	r31, Z+8	; 0x08
    5a80:	e0 2d       	mov	r30, r0
    5a82:	19 95       	eicall
    5a84:	81 e0       	ldi	r24, 0x01	; 1
    5a86:	0f 91       	pop	r16
    5a88:	08 95       	ret

00005a8a <udd_ep_run>:
    5a8a:	5f 92       	push	r5
    5a8c:	6f 92       	push	r6
    5a8e:	7f 92       	push	r7
    5a90:	8f 92       	push	r8
    5a92:	9f 92       	push	r9
    5a94:	af 92       	push	r10
    5a96:	bf 92       	push	r11
    5a98:	cf 92       	push	r12
    5a9a:	df 92       	push	r13
    5a9c:	ef 92       	push	r14
    5a9e:	ff 92       	push	r15
    5aa0:	0f 93       	push	r16
    5aa2:	1f 93       	push	r17
    5aa4:	cf 93       	push	r28
    5aa6:	df 93       	push	r29
    5aa8:	1f 92       	push	r1
    5aaa:	cd b7       	in	r28, 0x3d	; 61
    5aac:	de b7       	in	r29, 0x3e	; 62
    5aae:	78 2e       	mov	r7, r24
    5ab0:	66 2e       	mov	r6, r22
    5ab2:	4a 01       	movw	r8, r20
    5ab4:	59 01       	movw	r10, r18
    5ab6:	3a dc       	rcall	.-1932   	; 0x532c <udd_ep_get_job>
    5ab8:	6c 01       	movw	r12, r24
    5aba:	57 2c       	mov	r5, r7
    5abc:	55 1c       	adc	r5, r5
    5abe:	55 24       	eor	r5, r5
    5ac0:	55 1c       	adc	r5, r5
    5ac2:	87 2d       	mov	r24, r7
    5ac4:	8f 70       	andi	r24, 0x0F	; 15
    5ac6:	e8 2e       	mov	r14, r24
    5ac8:	f1 2c       	mov	r15, r1
    5aca:	ee 0c       	add	r14, r14
    5acc:	ff 1c       	adc	r15, r15
    5ace:	e5 0c       	add	r14, r5
    5ad0:	f1 1c       	adc	r15, r1
    5ad2:	f7 01       	movw	r30, r14
    5ad4:	ee 0f       	add	r30, r30
    5ad6:	ff 1f       	adc	r31, r31
    5ad8:	ee 0f       	add	r30, r30
    5ada:	ff 1f       	adc	r31, r31
    5adc:	ee 0f       	add	r30, r30
    5ade:	ff 1f       	adc	r31, r31
    5ae0:	ec 5f       	subi	r30, 0xFC	; 252
    5ae2:	f8 4d       	sbci	r31, 0xD8	; 216
    5ae4:	85 85       	ldd	r24, Z+13	; 0x0d
    5ae6:	80 7c       	andi	r24, 0xC0	; 192
    5ae8:	09 f4       	brne	.+2      	; 0x5aec <udd_ep_run+0x62>
    5aea:	81 c0       	rjmp	.+258    	; 0x5bee <udd_ep_run+0x164>
    5aec:	f7 01       	movw	r30, r14
    5aee:	ee 0f       	add	r30, r30
    5af0:	ff 1f       	adc	r31, r31
    5af2:	ee 0f       	add	r30, r30
    5af4:	ff 1f       	adc	r31, r31
    5af6:	ee 0f       	add	r30, r30
    5af8:	ff 1f       	adc	r31, r31
    5afa:	ec 5f       	subi	r30, 0xFC	; 252
    5afc:	f8 4d       	sbci	r31, 0xD8	; 216
    5afe:	85 85       	ldd	r24, Z+13	; 0x0d
    5b00:	80 7c       	andi	r24, 0xC0	; 192
    5b02:	80 3c       	cpi	r24, 0xC0	; 192
    5b04:	61 f0       	breq	.+24     	; 0x5b1e <udd_ep_run+0x94>
    5b06:	f7 01       	movw	r30, r14
    5b08:	ee 0f       	add	r30, r30
    5b0a:	ff 1f       	adc	r31, r31
    5b0c:	ee 0f       	add	r30, r30
    5b0e:	ff 1f       	adc	r31, r31
    5b10:	ee 0f       	add	r30, r30
    5b12:	ff 1f       	adc	r31, r31
    5b14:	ec 5f       	subi	r30, 0xFC	; 252
    5b16:	f8 4d       	sbci	r31, 0xD8	; 216
    5b18:	85 85       	ldd	r24, Z+13	; 0x0d
    5b1a:	82 fd       	sbrc	r24, 2
    5b1c:	6a c0       	rjmp	.+212    	; 0x5bf2 <udd_ep_run+0x168>
    5b1e:	8f b7       	in	r24, 0x3f	; 63
    5b20:	89 83       	std	Y+1, r24	; 0x01
    5b22:	f8 94       	cli
    5b24:	89 81       	ldd	r24, Y+1	; 0x01
    5b26:	f6 01       	movw	r30, r12
    5b28:	90 81       	ld	r25, Z
    5b2a:	90 ff       	sbrs	r25, 0
    5b2c:	03 c0       	rjmp	.+6      	; 0x5b34 <udd_ep_run+0xaa>
    5b2e:	8f bf       	out	0x3f, r24	; 63
    5b30:	51 2c       	mov	r5, r1
    5b32:	60 c0       	rjmp	.+192    	; 0x5bf4 <udd_ep_run+0x16a>
    5b34:	f6 01       	movw	r30, r12
    5b36:	90 81       	ld	r25, Z
    5b38:	91 60       	ori	r25, 0x01	; 1
    5b3a:	90 83       	st	Z, r25
    5b3c:	8f bf       	out	0x3f, r24	; 63
    5b3e:	81 82       	std	Z+1, r8	; 0x01
    5b40:	92 82       	std	Z+2, r9	; 0x02
    5b42:	a3 82       	std	Z+3, r10	; 0x03
    5b44:	b4 82       	std	Z+4, r11	; 0x04
    5b46:	15 82       	std	Z+5, r1	; 0x05
    5b48:	16 82       	std	Z+6, r1	; 0x06
    5b4a:	07 83       	std	Z+7, r16	; 0x07
    5b4c:	10 87       	std	Z+8, r17	; 0x08
    5b4e:	61 10       	cpse	r6, r1
    5b50:	06 c0       	rjmp	.+12     	; 0x5b5e <udd_ep_run+0xd4>
    5b52:	91 e0       	ldi	r25, 0x01	; 1
    5b54:	a1 14       	cp	r10, r1
    5b56:	b1 04       	cpc	r11, r1
    5b58:	19 f0       	breq	.+6      	; 0x5b60 <udd_ep_run+0xd6>
    5b5a:	90 e0       	ldi	r25, 0x00	; 0
    5b5c:	01 c0       	rjmp	.+2      	; 0x5b60 <udd_ep_run+0xd6>
    5b5e:	91 e0       	ldi	r25, 0x01	; 1
    5b60:	f6 01       	movw	r30, r12
    5b62:	80 81       	ld	r24, Z
    5b64:	90 fb       	bst	r25, 0
    5b66:	81 f9       	bld	r24, 1
    5b68:	8b 7f       	andi	r24, 0xFB	; 251
    5b6a:	80 83       	st	Z, r24
    5b6c:	55 20       	and	r5, r5
    5b6e:	61 f0       	breq	.+24     	; 0x5b88 <udd_ep_run+0xfe>
    5b70:	f7 01       	movw	r30, r14
    5b72:	ee 0f       	add	r30, r30
    5b74:	ff 1f       	adc	r31, r31
    5b76:	ee 0f       	add	r30, r30
    5b78:	ff 1f       	adc	r31, r31
    5b7a:	ee 0f       	add	r30, r30
    5b7c:	ff 1f       	adc	r31, r31
    5b7e:	ec 5f       	subi	r30, 0xFC	; 252
    5b80:	f8 4d       	sbci	r31, 0xD8	; 216
    5b82:	12 8a       	std	Z+18, r1	; 0x12
    5b84:	13 8a       	std	Z+19, r1	; 0x13
    5b86:	2e c0       	rjmp	.+92     	; 0x5be4 <udd_ep_run+0x15a>
    5b88:	f7 01       	movw	r30, r14
    5b8a:	ee 0f       	add	r30, r30
    5b8c:	ff 1f       	adc	r31, r31
    5b8e:	ee 0f       	add	r30, r30
    5b90:	ff 1f       	adc	r31, r31
    5b92:	ee 0f       	add	r30, r30
    5b94:	ff 1f       	adc	r31, r31
    5b96:	ec 5f       	subi	r30, 0xFC	; 252
    5b98:	f8 4d       	sbci	r31, 0xD8	; 216
    5b9a:	85 85       	ldd	r24, Z+13	; 0x0d
    5b9c:	80 7c       	andi	r24, 0xC0	; 192
    5b9e:	80 3c       	cpi	r24, 0xC0	; 192
    5ba0:	a1 f4       	brne	.+40     	; 0x5bca <udd_ep_run+0x140>
    5ba2:	c7 01       	movw	r24, r14
    5ba4:	88 0f       	add	r24, r24
    5ba6:	99 1f       	adc	r25, r25
    5ba8:	88 0f       	add	r24, r24
    5baa:	99 1f       	adc	r25, r25
    5bac:	88 0f       	add	r24, r24
    5bae:	99 1f       	adc	r25, r25
    5bb0:	80 5f       	subi	r24, 0xF0	; 240
    5bb2:	98 4d       	sbci	r25, 0xD8	; 216
    5bb4:	92 db       	rcall	.-2268   	; 0x52da <udd_ep_get_size>
    5bb6:	bc 01       	movw	r22, r24
    5bb8:	c5 01       	movw	r24, r10
    5bba:	9d d5       	rcall	.+2874   	; 0x66f6 <__udivmodhi4>
    5bbc:	89 2b       	or	r24, r25
    5bbe:	29 f0       	breq	.+10     	; 0x5bca <udd_ep_run+0x140>
    5bc0:	f6 01       	movw	r30, r12
    5bc2:	80 81       	ld	r24, Z
    5bc4:	8e 7f       	andi	r24, 0xFE	; 254
    5bc6:	80 83       	st	Z, r24
    5bc8:	15 c0       	rjmp	.+42     	; 0x5bf4 <udd_ep_run+0x16a>
    5bca:	f7 01       	movw	r30, r14
    5bcc:	ee 0f       	add	r30, r30
    5bce:	ff 1f       	adc	r31, r31
    5bd0:	ee 0f       	add	r30, r30
    5bd2:	ff 1f       	adc	r31, r31
    5bd4:	ee 0f       	add	r30, r30
    5bd6:	ff 1f       	adc	r31, r31
    5bd8:	ec 5f       	subi	r30, 0xFC	; 252
    5bda:	f8 4d       	sbci	r31, 0xD8	; 216
    5bdc:	16 86       	std	Z+14, r1	; 0x0e
    5bde:	17 86       	std	Z+15, r1	; 0x0f
    5be0:	12 8a       	std	Z+18, r1	; 0x12
    5be2:	13 8a       	std	Z+19, r1	; 0x13
    5be4:	87 2d       	mov	r24, r7
    5be6:	2e dc       	rcall	.-1956   	; 0x5444 <udd_ep_trans_complet>
    5be8:	55 24       	eor	r5, r5
    5bea:	53 94       	inc	r5
    5bec:	03 c0       	rjmp	.+6      	; 0x5bf4 <udd_ep_run+0x16a>
    5bee:	51 2c       	mov	r5, r1
    5bf0:	01 c0       	rjmp	.+2      	; 0x5bf4 <udd_ep_run+0x16a>
    5bf2:	51 2c       	mov	r5, r1
    5bf4:	85 2d       	mov	r24, r5
    5bf6:	0f 90       	pop	r0
    5bf8:	df 91       	pop	r29
    5bfa:	cf 91       	pop	r28
    5bfc:	1f 91       	pop	r17
    5bfe:	0f 91       	pop	r16
    5c00:	ff 90       	pop	r15
    5c02:	ef 90       	pop	r14
    5c04:	df 90       	pop	r13
    5c06:	cf 90       	pop	r12
    5c08:	bf 90       	pop	r11
    5c0a:	af 90       	pop	r10
    5c0c:	9f 90       	pop	r9
    5c0e:	8f 90       	pop	r8
    5c10:	7f 90       	pop	r7
    5c12:	6f 90       	pop	r6
    5c14:	5f 90       	pop	r5
    5c16:	08 95       	ret

00005c18 <udd_ep_abort>:
    5c18:	ff 92       	push	r15
    5c1a:	0f 93       	push	r16
    5c1c:	1f 93       	push	r17
    5c1e:	cf 93       	push	r28
    5c20:	df 93       	push	r29
    5c22:	18 2f       	mov	r17, r24
    5c24:	f8 2e       	mov	r15, r24
    5c26:	ff 1c       	adc	r15, r15
    5c28:	ff 24       	eor	r15, r15
    5c2a:	ff 1c       	adc	r15, r15
    5c2c:	c8 2f       	mov	r28, r24
    5c2e:	cf 70       	andi	r28, 0x0F	; 15
    5c30:	d0 e0       	ldi	r29, 0x00	; 0
    5c32:	cc 0f       	add	r28, r28
    5c34:	dd 1f       	adc	r29, r29
    5c36:	cf 0d       	add	r28, r15
    5c38:	d1 1d       	adc	r29, r1
    5c3a:	78 db       	rcall	.-2320   	; 0x532c <udd_ep_get_job>
    5c3c:	dc 01       	movw	r26, r24
    5c3e:	fe 01       	movw	r30, r28
    5c40:	ee 0f       	add	r30, r30
    5c42:	ff 1f       	adc	r31, r31
    5c44:	ee 0f       	add	r30, r30
    5c46:	ff 1f       	adc	r31, r31
    5c48:	ee 0f       	add	r30, r30
    5c4a:	ff 1f       	adc	r31, r31
    5c4c:	e0 5f       	subi	r30, 0xF0	; 240
    5c4e:	f8 4d       	sbci	r31, 0xD8	; 216
    5c50:	02 e0       	ldi	r16, 0x02	; 2
    5c52:	05 93       	las	Z, r16
    5c54:	8c 91       	ld	r24, X
    5c56:	80 ff       	sbrs	r24, 0
    5c58:	22 c0       	rjmp	.+68     	; 0x5c9e <udd_ep_abort+0x86>
    5c5a:	8e 7f       	andi	r24, 0xFE	; 254
    5c5c:	8c 93       	st	X, r24
    5c5e:	17 96       	adiw	r26, 0x07	; 7
    5c60:	ed 91       	ld	r30, X+
    5c62:	fc 91       	ld	r31, X
    5c64:	18 97       	sbiw	r26, 0x08	; 8
    5c66:	30 97       	sbiw	r30, 0x00	; 0
    5c68:	d1 f0       	breq	.+52     	; 0x5c9e <udd_ep_abort+0x86>
    5c6a:	ff 20       	and	r15, r15
    5c6c:	59 f0       	breq	.+22     	; 0x5c84 <udd_ep_abort+0x6c>
    5c6e:	cc 0f       	add	r28, r28
    5c70:	dd 1f       	adc	r29, r29
    5c72:	cc 0f       	add	r28, r28
    5c74:	dd 1f       	adc	r29, r29
    5c76:	cc 0f       	add	r28, r28
    5c78:	dd 1f       	adc	r29, r29
    5c7a:	cc 5f       	subi	r28, 0xFC	; 252
    5c7c:	d8 4d       	sbci	r29, 0xD8	; 216
    5c7e:	6a 89       	ldd	r22, Y+18	; 0x12
    5c80:	7b 89       	ldd	r23, Y+19	; 0x13
    5c82:	0a c0       	rjmp	.+20     	; 0x5c98 <udd_ep_abort+0x80>
    5c84:	cc 0f       	add	r28, r28
    5c86:	dd 1f       	adc	r29, r29
    5c88:	cc 0f       	add	r28, r28
    5c8a:	dd 1f       	adc	r29, r29
    5c8c:	cc 0f       	add	r28, r28
    5c8e:	dd 1f       	adc	r29, r29
    5c90:	cc 5f       	subi	r28, 0xFC	; 252
    5c92:	d8 4d       	sbci	r29, 0xD8	; 216
    5c94:	6e 85       	ldd	r22, Y+14	; 0x0e
    5c96:	7f 85       	ldd	r23, Y+15	; 0x0f
    5c98:	41 2f       	mov	r20, r17
    5c9a:	81 e0       	ldi	r24, 0x01	; 1
    5c9c:	19 95       	eicall
    5c9e:	df 91       	pop	r29
    5ca0:	cf 91       	pop	r28
    5ca2:	1f 91       	pop	r17
    5ca4:	0f 91       	pop	r16
    5ca6:	ff 90       	pop	r15
    5ca8:	08 95       	ret

00005caa <udd_ep_free>:
    5caa:	cf 93       	push	r28
    5cac:	c8 2f       	mov	r28, r24
    5cae:	b4 df       	rcall	.-152    	; 0x5c18 <udd_ep_abort>
    5cb0:	ec 2f       	mov	r30, r28
    5cb2:	ef 70       	andi	r30, 0x0F	; 15
    5cb4:	f0 e0       	ldi	r31, 0x00	; 0
    5cb6:	ee 0f       	add	r30, r30
    5cb8:	ff 1f       	adc	r31, r31
    5cba:	8c 2f       	mov	r24, r28
    5cbc:	cc 0f       	add	r28, r28
    5cbe:	99 0b       	sbc	r25, r25
    5cc0:	88 27       	eor	r24, r24
    5cc2:	99 0f       	add	r25, r25
    5cc4:	88 1f       	adc	r24, r24
    5cc6:	99 27       	eor	r25, r25
    5cc8:	e8 0f       	add	r30, r24
    5cca:	f9 1f       	adc	r31, r25
    5ccc:	ee 0f       	add	r30, r30
    5cce:	ff 1f       	adc	r31, r31
    5cd0:	ee 0f       	add	r30, r30
    5cd2:	ff 1f       	adc	r31, r31
    5cd4:	ee 0f       	add	r30, r30
    5cd6:	ff 1f       	adc	r31, r31
    5cd8:	ec 5f       	subi	r30, 0xFC	; 252
    5cda:	f8 4d       	sbci	r31, 0xD8	; 216
    5cdc:	15 86       	std	Z+13, r1	; 0x0d
    5cde:	cf 91       	pop	r28
    5ce0:	08 95       	ret

00005ce2 <udd_ep_set_halt>:
    5ce2:	e8 2f       	mov	r30, r24
    5ce4:	ef 70       	andi	r30, 0x0F	; 15
    5ce6:	f0 e0       	ldi	r31, 0x00	; 0
    5ce8:	ee 0f       	add	r30, r30
    5cea:	ff 1f       	adc	r31, r31
    5cec:	28 2f       	mov	r18, r24
    5cee:	08 2e       	mov	r0, r24
    5cf0:	00 0c       	add	r0, r0
    5cf2:	33 0b       	sbc	r19, r19
    5cf4:	22 27       	eor	r18, r18
    5cf6:	33 0f       	add	r19, r19
    5cf8:	22 1f       	adc	r18, r18
    5cfa:	33 27       	eor	r19, r19
    5cfc:	e2 0f       	add	r30, r18
    5cfe:	f3 1f       	adc	r31, r19
    5d00:	ee 0f       	add	r30, r30
    5d02:	ff 1f       	adc	r31, r31
    5d04:	ee 0f       	add	r30, r30
    5d06:	ff 1f       	adc	r31, r31
    5d08:	ee 0f       	add	r30, r30
    5d0a:	ff 1f       	adc	r31, r31
    5d0c:	ec 5f       	subi	r30, 0xFC	; 252
    5d0e:	f8 4d       	sbci	r31, 0xD8	; 216
    5d10:	95 85       	ldd	r25, Z+13	; 0x0d
    5d12:	94 60       	ori	r25, 0x04	; 4
    5d14:	95 87       	std	Z+13, r25	; 0x0d
    5d16:	80 df       	rcall	.-256    	; 0x5c18 <udd_ep_abort>
    5d18:	81 e0       	ldi	r24, 0x01	; 1
    5d1a:	08 95       	ret

00005d1c <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    5d1c:	1f 92       	push	r1
    5d1e:	0f 92       	push	r0
    5d20:	0f b6       	in	r0, 0x3f	; 63
    5d22:	0f 92       	push	r0
    5d24:	11 24       	eor	r1, r1
    5d26:	08 b6       	in	r0, 0x38	; 56
    5d28:	0f 92       	push	r0
    5d2a:	18 be       	out	0x38, r1	; 56
    5d2c:	09 b6       	in	r0, 0x39	; 57
    5d2e:	0f 92       	push	r0
    5d30:	19 be       	out	0x39, r1	; 57
    5d32:	0b b6       	in	r0, 0x3b	; 59
    5d34:	0f 92       	push	r0
    5d36:	1b be       	out	0x3b, r1	; 59
    5d38:	0f 93       	push	r16
    5d3a:	2f 93       	push	r18
    5d3c:	3f 93       	push	r19
    5d3e:	4f 93       	push	r20
    5d40:	5f 93       	push	r21
    5d42:	6f 93       	push	r22
    5d44:	7f 93       	push	r23
    5d46:	8f 93       	push	r24
    5d48:	9f 93       	push	r25
    5d4a:	af 93       	push	r26
    5d4c:	bf 93       	push	r27
    5d4e:	ef 93       	push	r30
    5d50:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    5d52:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    5d56:	88 23       	and	r24, r24
    5d58:	34 f4       	brge	.+12     	; 0x5d66 <__vector_125+0x4a>
		udd_ack_start_of_frame_event();
    5d5a:	80 e8       	ldi	r24, 0x80	; 128
    5d5c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    5d60:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    5d64:	86 c0       	rjmp	.+268    	; 0x5e72 <__vector_125+0x156>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    5d66:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    5d6a:	82 ff       	sbrs	r24, 2
    5d6c:	20 c0       	rjmp	.+64     	; 0x5dae <__vector_125+0x92>
		udd_ack_underflow_event();
    5d6e:	84 e0       	ldi	r24, 0x04	; 4
    5d70:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    5d74:	80 91 18 27 	lds	r24, 0x2718	; 0x802718 <udd_sram+0x14>
    5d78:	86 ff       	sbrs	r24, 6
    5d7a:	7b c0       	rjmp	.+246    	; 0x5e72 <__vector_125+0x156>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    5d7c:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    5d80:	81 fd       	sbrc	r24, 1
    5d82:	77 c0       	rjmp	.+238    	; 0x5e72 <__vector_125+0x156>
    5d84:	ee da       	rcall	.-2596   	; 0x5362 <udd_ctrl_interrupt_tc_setup>
    5d86:	81 11       	cpse	r24, r1
    5d88:	74 c0       	rjmp	.+232    	; 0x5e72 <__vector_125+0x156>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    5d8a:	80 91 03 27 	lds	r24, 0x2703	; 0x802703 <udd_ep_control_state>
    5d8e:	81 30       	cpi	r24, 0x01	; 1
    5d90:	11 f4       	brne	.+4      	; 0x5d96 <__vector_125+0x7a>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    5d92:	21 da       	rcall	.-3006   	; 0x51d6 <udd_ctrl_send_zlp_in>
    5d94:	6e c0       	rjmp	.+220    	; 0x5e72 <__vector_125+0x156>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    5d96:	84 30       	cpi	r24, 0x04	; 4
    5d98:	09 f0       	breq	.+2      	; 0x5d9c <__vector_125+0x80>
    5d9a:	6b c0       	rjmp	.+214    	; 0x5e72 <__vector_125+0x156>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    5d9c:	e9 e1       	ldi	r30, 0x19	; 25
    5d9e:	f7 e2       	ldi	r31, 0x27	; 39
    5da0:	04 e0       	ldi	r16, 0x04	; 4
    5da2:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    5da4:	e1 e1       	ldi	r30, 0x11	; 17
    5da6:	f7 e2       	ldi	r31, 0x27	; 39
    5da8:	04 e0       	ldi	r16, 0x04	; 4
    5daa:	05 93       	las	Z, r16
    5dac:	62 c0       	rjmp	.+196    	; 0x5e72 <__vector_125+0x156>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    5dae:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    5db2:	81 ff       	sbrs	r24, 1
    5db4:	59 c0       	rjmp	.+178    	; 0x5e68 <__vector_125+0x14c>
		udd_ack_overflow_event();
    5db6:	82 e0       	ldi	r24, 0x02	; 2
    5db8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    5dbc:	80 91 10 27 	lds	r24, 0x2710	; 0x802710 <udd_sram+0xc>
    5dc0:	86 ff       	sbrs	r24, 6
    5dc2:	57 c0       	rjmp	.+174    	; 0x5e72 <__vector_125+0x156>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    5dc4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    5dc8:	81 fd       	sbrc	r24, 1
    5dca:	53 c0       	rjmp	.+166    	; 0x5e72 <__vector_125+0x156>
    5dcc:	ca da       	rcall	.-2668   	; 0x5362 <udd_ctrl_interrupt_tc_setup>
    5dce:	81 11       	cpse	r24, r1
    5dd0:	50 c0       	rjmp	.+160    	; 0x5e72 <__vector_125+0x156>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    5dd2:	80 91 03 27 	lds	r24, 0x2703	; 0x802703 <udd_ep_control_state>
    5dd6:	82 30       	cpi	r24, 0x02	; 2
    5dd8:	41 f4       	brne	.+16     	; 0x5dea <__vector_125+0xce>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    5dda:	84 e0       	ldi	r24, 0x04	; 4
    5ddc:	80 93 03 27 	sts	0x2703, r24	; 0x802703 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    5de0:	e0 e1       	ldi	r30, 0x10	; 16
    5de2:	f7 e2       	ldi	r31, 0x27	; 39
    5de4:	02 e0       	ldi	r16, 0x02	; 2
    5de6:	06 93       	lac	Z, r16
    5de8:	44 c0       	rjmp	.+136    	; 0x5e72 <__vector_125+0x156>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    5dea:	83 30       	cpi	r24, 0x03	; 3
    5dec:	09 f0       	breq	.+2      	; 0x5df0 <__vector_125+0xd4>
    5dee:	41 c0       	rjmp	.+130    	; 0x5e72 <__vector_125+0x156>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    5df0:	e9 e1       	ldi	r30, 0x19	; 25
    5df2:	f7 e2       	ldi	r31, 0x27	; 39
    5df4:	04 e0       	ldi	r16, 0x04	; 4
    5df6:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    5df8:	e1 e1       	ldi	r30, 0x11	; 17
    5dfa:	f7 e2       	ldi	r31, 0x27	; 39
    5dfc:	04 e0       	ldi	r16, 0x04	; 4
    5dfe:	05 93       	las	Z, r16
    5e00:	38 c0       	rjmp	.+112    	; 0x5e72 <__vector_125+0x156>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    5e02:	80 e1       	ldi	r24, 0x10	; 16
    5e04:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    5e08:	81 e0       	ldi	r24, 0x01	; 1
    5e0a:	06 df       	rcall	.-500    	; 0x5c18 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    5e0c:	81 e8       	ldi	r24, 0x81	; 129
    5e0e:	04 df       	rcall	.-504    	; 0x5c18 <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    5e10:	82 e0       	ldi	r24, 0x02	; 2
    5e12:	02 df       	rcall	.-508    	; 0x5c18 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    5e14:	82 e8       	ldi	r24, 0x82	; 130
    5e16:	00 df       	rcall	.-512    	; 0x5c18 <udd_ep_abort>
		}
#endif
		udc_reset();
    5e18:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    5e1c:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    5e20:	e4 e0       	ldi	r30, 0x04	; 4
    5e22:	f7 e2       	ldi	r31, 0x27	; 39
    5e24:	15 86       	std	Z+13, r1	; 0x0d
	udd_endpoint_clear_status(ep_ctrl);
    5e26:	96 e0       	ldi	r25, 0x06	; 6
    5e28:	94 87       	std	Z+12, r25	; 0x0c
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    5e2a:	83 e4       	ldi	r24, 0x43	; 67
    5e2c:	85 87       	std	Z+13, r24	; 0x0d
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    5e2e:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    5e30:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    5e32:	85 8b       	std	Z+21, r24	; 0x15
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    5e34:	8f eb       	ldi	r24, 0xBF	; 191
    5e36:	96 e2       	ldi	r25, 0x26	; 38
    5e38:	80 8b       	std	Z+16, r24	; 0x10
    5e3a:	91 8b       	std	Z+17, r25	; 0x11
		// Reset endpoint control management
		udd_ctrl_init();
    5e3c:	99 d9       	rcall	.-3278   	; 0x5170 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    5e3e:	19 c0       	rjmp	.+50     	; 0x5e72 <__vector_125+0x156>
	}

	if (udd_is_suspend_event()) {
    5e40:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    5e44:	86 ff       	sbrs	r24, 6
    5e46:	06 c0       	rjmp	.+12     	; 0x5e54 <__vector_125+0x138>
		udd_ack_suspend_event();
    5e48:	80 e4       	ldi	r24, 0x40	; 64
    5e4a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    5e4e:	80 e0       	ldi	r24, 0x00	; 0
    5e50:	57 d9       	rcall	.-3410   	; 0x5100 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    5e52:	0f c0       	rjmp	.+30     	; 0x5e72 <__vector_125+0x156>
	}

	if (udd_is_resume_event()) {
    5e54:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    5e58:	85 ff       	sbrs	r24, 5
    5e5a:	0b c0       	rjmp	.+22     	; 0x5e72 <__vector_125+0x156>
		udd_ack_resume_event();
    5e5c:	80 e2       	ldi	r24, 0x20	; 32
    5e5e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    5e62:	81 e0       	ldi	r24, 0x01	; 1
    5e64:	4d d9       	rcall	.-3430   	; 0x5100 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    5e66:	05 c0       	rjmp	.+10     	; 0x5e72 <__vector_125+0x156>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    5e68:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    5e6c:	84 fd       	sbrc	r24, 4
    5e6e:	c9 cf       	rjmp	.-110    	; 0x5e02 <__vector_125+0xe6>
    5e70:	e7 cf       	rjmp	.-50     	; 0x5e40 <__vector_125+0x124>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    5e72:	ff 91       	pop	r31
    5e74:	ef 91       	pop	r30
    5e76:	bf 91       	pop	r27
    5e78:	af 91       	pop	r26
    5e7a:	9f 91       	pop	r25
    5e7c:	8f 91       	pop	r24
    5e7e:	7f 91       	pop	r23
    5e80:	6f 91       	pop	r22
    5e82:	5f 91       	pop	r21
    5e84:	4f 91       	pop	r20
    5e86:	3f 91       	pop	r19
    5e88:	2f 91       	pop	r18
    5e8a:	0f 91       	pop	r16
    5e8c:	0f 90       	pop	r0
    5e8e:	0b be       	out	0x3b, r0	; 59
    5e90:	0f 90       	pop	r0
    5e92:	09 be       	out	0x39, r0	; 57
    5e94:	0f 90       	pop	r0
    5e96:	08 be       	out	0x38, r0	; 56
    5e98:	0f 90       	pop	r0
    5e9a:	0f be       	out	0x3f, r0	; 63
    5e9c:	0f 90       	pop	r0
    5e9e:	1f 90       	pop	r1
    5ea0:	18 95       	reti

00005ea2 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    5ea2:	1f 92       	push	r1
    5ea4:	0f 92       	push	r0
    5ea6:	0f b6       	in	r0, 0x3f	; 63
    5ea8:	0f 92       	push	r0
    5eaa:	11 24       	eor	r1, r1
    5eac:	08 b6       	in	r0, 0x38	; 56
    5eae:	0f 92       	push	r0
    5eb0:	18 be       	out	0x38, r1	; 56
    5eb2:	09 b6       	in	r0, 0x39	; 57
    5eb4:	0f 92       	push	r0
    5eb6:	19 be       	out	0x39, r1	; 57
    5eb8:	0a b6       	in	r0, 0x3a	; 58
    5eba:	0f 92       	push	r0
    5ebc:	1a be       	out	0x3a, r1	; 58
    5ebe:	0b b6       	in	r0, 0x3b	; 59
    5ec0:	0f 92       	push	r0
    5ec2:	1b be       	out	0x3b, r1	; 59
    5ec4:	0f 93       	push	r16
    5ec6:	1f 93       	push	r17
    5ec8:	2f 93       	push	r18
    5eca:	3f 93       	push	r19
    5ecc:	4f 93       	push	r20
    5ece:	5f 93       	push	r21
    5ed0:	6f 93       	push	r22
    5ed2:	7f 93       	push	r23
    5ed4:	8f 93       	push	r24
    5ed6:	9f 93       	push	r25
    5ed8:	af 93       	push	r26
    5eda:	bf 93       	push	r27
    5edc:	cf 93       	push	r28
    5ede:	df 93       	push	r29
    5ee0:	ef 93       	push	r30
    5ee2:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    5ee4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    5ee8:	81 fd       	sbrc	r24, 1
    5eea:	03 c0       	rjmp	.+6      	; 0x5ef2 <__vector_126+0x50>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    5eec:	3a da       	rcall	.-2956   	; 0x5362 <udd_ctrl_interrupt_tc_setup>
    5eee:	81 11       	cpse	r24, r1
    5ef0:	c3 c0       	rjmp	.+390    	; 0x6078 <__vector_126+0x1d6>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    5ef2:	82 e0       	ldi	r24, 0x02	; 2
    5ef4:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    5ef8:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    5efc:	81 95       	neg	r24
    5efe:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    5f00:	e0 e1       	ldi	r30, 0x10	; 16
    5f02:	f7 e2       	ldi	r31, 0x27	; 39
    5f04:	e8 1b       	sub	r30, r24
    5f06:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    5f08:	20 81       	ld	r18, Z
    5f0a:	31 81       	ldd	r19, Z+1	; 0x01
    5f0c:	20 51       	subi	r18, 0x10	; 16
    5f0e:	37 42       	sbci	r19, 0x27	; 39
    5f10:	36 95       	lsr	r19
    5f12:	27 95       	ror	r18
    5f14:	36 95       	lsr	r19
    5f16:	27 95       	ror	r18
    5f18:	36 95       	lsr	r19
    5f1a:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    5f1c:	82 2f       	mov	r24, r18
    5f1e:	86 95       	lsr	r24
    5f20:	20 fd       	sbrc	r18, 0
    5f22:	02 c0       	rjmp	.+4      	; 0x5f28 <__vector_126+0x86>
    5f24:	90 e0       	ldi	r25, 0x00	; 0
    5f26:	01 c0       	rjmp	.+2      	; 0x5f2a <__vector_126+0x88>
    5f28:	90 e8       	ldi	r25, 0x80	; 128
    5f2a:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    5f2c:	e8 2f       	mov	r30, r24
    5f2e:	ef 70       	andi	r30, 0x0F	; 15
    5f30:	f0 e0       	ldi	r31, 0x00	; 0
    5f32:	ee 0f       	add	r30, r30
    5f34:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    5f36:	28 2f       	mov	r18, r24
    5f38:	08 2e       	mov	r0, r24
    5f3a:	00 0c       	add	r0, r0
    5f3c:	33 0b       	sbc	r19, r19
    5f3e:	22 27       	eor	r18, r18
    5f40:	33 0f       	add	r19, r19
    5f42:	22 1f       	adc	r18, r18
    5f44:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    5f46:	e2 0f       	add	r30, r18
    5f48:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    5f4a:	df 01       	movw	r26, r30
    5f4c:	aa 0f       	add	r26, r26
    5f4e:	bb 1f       	adc	r27, r27
    5f50:	aa 0f       	add	r26, r26
    5f52:	bb 1f       	adc	r27, r27
    5f54:	aa 0f       	add	r26, r26
    5f56:	bb 1f       	adc	r27, r27
    5f58:	ac 5f       	subi	r26, 0xFC	; 252
    5f5a:	b8 4d       	sbci	r27, 0xD8	; 216
    5f5c:	1c 96       	adiw	r26, 0x0c	; 12
    5f5e:	9c 91       	ld	r25, X
    5f60:	95 ff       	sbrs	r25, 5
    5f62:	8a c0       	rjmp	.+276    	; 0x6078 <__vector_126+0x1d6>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    5f64:	ee 0f       	add	r30, r30
    5f66:	ff 1f       	adc	r31, r31
    5f68:	ee 0f       	add	r30, r30
    5f6a:	ff 1f       	adc	r31, r31
    5f6c:	ee 0f       	add	r30, r30
    5f6e:	ff 1f       	adc	r31, r31
    5f70:	e0 5f       	subi	r30, 0xF0	; 240
    5f72:	f8 4d       	sbci	r31, 0xD8	; 216
    5f74:	00 e2       	ldi	r16, 0x20	; 32
    5f76:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    5f78:	81 11       	cpse	r24, r1
    5f7a:	79 c0       	rjmp	.+242    	; 0x606e <__vector_126+0x1cc>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    5f7c:	80 91 03 27 	lds	r24, 0x2703	; 0x802703 <udd_ep_control_state>
    5f80:	84 30       	cpi	r24, 0x04	; 4
    5f82:	19 f4       	brne	.+6      	; 0x5f8a <__vector_126+0xe8>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    5f84:	36 d9       	rcall	.-3476   	; 0x51f2 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    5f86:	f4 d8       	rcall	.-3608   	; 0x5170 <udd_ctrl_init>
    5f88:	77 c0       	rjmp	.+238    	; 0x6078 <__vector_126+0x1d6>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    5f8a:	00 91 12 27 	lds	r16, 0x2712	; 0x802712 <udd_sram+0xe>
    5f8e:	10 91 13 27 	lds	r17, 0x2713	; 0x802713 <udd_sram+0xf>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    5f92:	80 91 51 33 	lds	r24, 0x3351	; 0x803351 <udd_g_ctrlreq+0xa>
    5f96:	90 91 52 33 	lds	r25, 0x3352	; 0x803352 <udd_g_ctrlreq+0xb>
    5f9a:	c0 91 ff 26 	lds	r28, 0x26FF	; 0x8026ff <udd_ctrl_payload_nb_trans>
    5f9e:	d0 91 00 27 	lds	r29, 0x2700	; 0x802700 <udd_ctrl_payload_nb_trans+0x1>
    5fa2:	9e 01       	movw	r18, r28
    5fa4:	20 0f       	add	r18, r16
    5fa6:	31 1f       	adc	r19, r17
    5fa8:	82 17       	cp	r24, r18
    5faa:	93 07       	cpc	r25, r19
    5fac:	18 f4       	brcc	.+6      	; 0x5fb4 <__vector_126+0x112>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    5fae:	8c 01       	movw	r16, r24
    5fb0:	0c 1b       	sub	r16, r28
    5fb2:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    5fb4:	80 91 4f 33 	lds	r24, 0x334F	; 0x80334f <udd_g_ctrlreq+0x8>
    5fb8:	90 91 50 33 	lds	r25, 0x3350	; 0x803350 <udd_g_ctrlreq+0x9>
    5fbc:	a8 01       	movw	r20, r16
    5fbe:	6f eb       	ldi	r22, 0xBF	; 191
    5fc0:	76 e2       	ldi	r23, 0x26	; 38
    5fc2:	8c 0f       	add	r24, r28
    5fc4:	9d 1f       	adc	r25, r29
    5fc6:	27 d5       	rcall	.+2638   	; 0x6a16 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    5fc8:	c0 0f       	add	r28, r16
    5fca:	d1 1f       	adc	r29, r17
    5fcc:	c0 93 ff 26 	sts	0x26FF, r28	; 0x8026ff <udd_ctrl_payload_nb_trans>
    5fd0:	d0 93 00 27 	sts	0x2700, r29	; 0x802700 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    5fd4:	00 34       	cpi	r16, 0x40	; 64
    5fd6:	11 05       	cpc	r17, r1
    5fd8:	69 f4       	brne	.+26     	; 0x5ff4 <__vector_126+0x152>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    5fda:	80 91 01 27 	lds	r24, 0x2701	; 0x802701 <udd_ctrl_prev_payload_nb_trans>
    5fde:	90 91 02 27 	lds	r25, 0x2702	; 0x802702 <udd_ctrl_prev_payload_nb_trans+0x1>
    5fe2:	8c 0f       	add	r24, r28
    5fe4:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    5fe6:	20 91 4d 33 	lds	r18, 0x334D	; 0x80334d <udd_g_ctrlreq+0x6>
    5fea:	30 91 4e 33 	lds	r19, 0x334E	; 0x80334e <udd_g_ctrlreq+0x7>
    5fee:	82 17       	cp	r24, r18
    5ff0:	93 07       	cpc	r25, r19
    5ff2:	80 f0       	brcs	.+32     	; 0x6014 <__vector_126+0x172>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    5ff4:	e7 e4       	ldi	r30, 0x47	; 71
    5ff6:	f3 e3       	ldi	r31, 0x33	; 51
    5ff8:	c2 87       	std	Z+10, r28	; 0x0a
    5ffa:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    5ffc:	06 84       	ldd	r0, Z+14	; 0x0e
    5ffe:	f7 85       	ldd	r31, Z+15	; 0x0f
    6000:	e0 2d       	mov	r30, r0
    6002:	30 97       	sbiw	r30, 0x00	; 0
    6004:	29 f0       	breq	.+10     	; 0x6010 <__vector_126+0x16e>
			if (!udd_g_ctrlreq.over_under_run()) {
    6006:	19 95       	eicall
    6008:	81 11       	cpse	r24, r1
    600a:	02 c0       	rjmp	.+4      	; 0x6010 <__vector_126+0x16e>
				// Stall ZLP
				udd_ctrl_stall_data();
    600c:	d6 d8       	rcall	.-3668   	; 0x51ba <udd_ctrl_stall_data>
    600e:	34 c0       	rjmp	.+104    	; 0x6078 <__vector_126+0x1d6>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    6010:	e2 d8       	rcall	.-3644   	; 0x51d6 <udd_ctrl_send_zlp_in>
    6012:	32 c0       	rjmp	.+100    	; 0x6078 <__vector_126+0x1d6>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    6014:	80 91 51 33 	lds	r24, 0x3351	; 0x803351 <udd_g_ctrlreq+0xa>
    6018:	90 91 52 33 	lds	r25, 0x3352	; 0x803352 <udd_g_ctrlreq+0xb>
    601c:	c8 17       	cp	r28, r24
    601e:	d9 07       	cpc	r29, r25
    6020:	f9 f4       	brne	.+62     	; 0x6060 <__vector_126+0x1be>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    6022:	e0 91 55 33 	lds	r30, 0x3355	; 0x803355 <udd_g_ctrlreq+0xe>
    6026:	f0 91 56 33 	lds	r31, 0x3356	; 0x803356 <udd_g_ctrlreq+0xf>
    602a:	30 97       	sbiw	r30, 0x00	; 0
    602c:	11 f4       	brne	.+4      	; 0x6032 <__vector_126+0x190>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    602e:	c5 d8       	rcall	.-3702   	; 0x51ba <udd_ctrl_stall_data>
    6030:	23 c0       	rjmp	.+70     	; 0x6078 <__vector_126+0x1d6>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    6032:	19 95       	eicall
    6034:	81 11       	cpse	r24, r1
    6036:	02 c0       	rjmp	.+4      	; 0x603c <__vector_126+0x19a>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    6038:	c0 d8       	rcall	.-3712   	; 0x51ba <udd_ctrl_stall_data>
    603a:	1e c0       	rjmp	.+60     	; 0x6078 <__vector_126+0x1d6>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    603c:	20 91 01 27 	lds	r18, 0x2701	; 0x802701 <udd_ctrl_prev_payload_nb_trans>
    6040:	30 91 02 27 	lds	r19, 0x2702	; 0x802702 <udd_ctrl_prev_payload_nb_trans+0x1>
    6044:	80 91 ff 26 	lds	r24, 0x26FF	; 0x8026ff <udd_ctrl_payload_nb_trans>
    6048:	90 91 00 27 	lds	r25, 0x2700	; 0x802700 <udd_ctrl_payload_nb_trans+0x1>
    604c:	82 0f       	add	r24, r18
    604e:	93 1f       	adc	r25, r19
    6050:	80 93 01 27 	sts	0x2701, r24	; 0x802701 <udd_ctrl_prev_payload_nb_trans>
    6054:	90 93 02 27 	sts	0x2702, r25	; 0x802702 <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    6058:	10 92 ff 26 	sts	0x26FF, r1	; 0x8026ff <udd_ctrl_payload_nb_trans>
    605c:	10 92 00 27 	sts	0x2700, r1	; 0x802700 <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    6060:	e0 e1       	ldi	r30, 0x10	; 16
    6062:	f7 e2       	ldi	r31, 0x27	; 39
    6064:	02 e0       	ldi	r16, 0x02	; 2
    6066:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    6068:	00 e2       	ldi	r16, 0x20	; 32
    606a:	06 93       	lac	Z, r16
    606c:	05 c0       	rjmp	.+10     	; 0x6078 <__vector_126+0x1d6>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    606e:	80 38       	cpi	r24, 0x80	; 128
    6070:	11 f4       	brne	.+4      	; 0x6076 <__vector_126+0x1d4>
		udd_ctrl_in_sent();
    6072:	c7 d8       	rcall	.-3698   	; 0x5202 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    6074:	01 c0       	rjmp	.+2      	; 0x6078 <__vector_126+0x1d6>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    6076:	e6 d9       	rcall	.-3124   	; 0x5444 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    6078:	ff 91       	pop	r31
    607a:	ef 91       	pop	r30
    607c:	df 91       	pop	r29
    607e:	cf 91       	pop	r28
    6080:	bf 91       	pop	r27
    6082:	af 91       	pop	r26
    6084:	9f 91       	pop	r25
    6086:	8f 91       	pop	r24
    6088:	7f 91       	pop	r23
    608a:	6f 91       	pop	r22
    608c:	5f 91       	pop	r21
    608e:	4f 91       	pop	r20
    6090:	3f 91       	pop	r19
    6092:	2f 91       	pop	r18
    6094:	1f 91       	pop	r17
    6096:	0f 91       	pop	r16
    6098:	0f 90       	pop	r0
    609a:	0b be       	out	0x3b, r0	; 59
    609c:	0f 90       	pop	r0
    609e:	0a be       	out	0x3a, r0	; 58
    60a0:	0f 90       	pop	r0
    60a2:	09 be       	out	0x39, r0	; 57
    60a4:	0f 90       	pop	r0
    60a6:	08 be       	out	0x38, r0	; 56
    60a8:	0f 90       	pop	r0
    60aa:	0f be       	out	0x3f, r0	; 63
    60ac:	0f 90       	pop	r0
    60ae:	1f 90       	pop	r1
    60b0:	18 95       	reti

000060b2 <GetFullTemp>:
	uint8_t data0;
	uint8_t data1;
	uint8_t data2;
	uint8_t data3;

	SPI_IO_PORT.OUTCLR |= CS_PIN;
    60b2:	e0 e4       	ldi	r30, 0x40	; 64
    60b4:	f6 e0       	ldi	r31, 0x06	; 6
    60b6:	86 81       	ldd	r24, Z+6	; 0x06
    60b8:	80 61       	ori	r24, 0x10	; 16
    60ba:	86 83       	std	Z+6, r24	; 0x06
    60bc:	8a e6       	ldi	r24, 0x6A	; 106
    60be:	8a 95       	dec	r24
    60c0:	f1 f7       	brne	.-4      	; 0x60be <GetFullTemp+0xc>
    60c2:	00 c0       	rjmp	.+0      	; 0x60c4 <GetFullTemp+0x12>
	_delay_us(10);
	
	//while(!(SPI_PORT.STATUS & SPI_IF_bm));
	SPI_PORT.DATA = 0;
    60c4:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	
	while(!(SPI_PORT.STATUS & SPI_IF_bm));
    60c8:	e0 ec       	ldi	r30, 0xC0	; 192
    60ca:	f8 e0       	ldi	r31, 0x08	; 8
    60cc:	82 81       	ldd	r24, Z+2	; 0x02
    60ce:	88 23       	and	r24, r24
    60d0:	ec f7       	brge	.-6      	; 0x60cc <GetFullTemp+0x1a>
	data3 = SPI_PORT.DATA;
    60d2:	e0 ec       	ldi	r30, 0xC0	; 192
    60d4:	f8 e0       	ldi	r31, 0x08	; 8
    60d6:	83 81       	ldd	r24, Z+3	; 0x03
	SPI_PORT.DATA = 0;
    60d8:	13 82       	std	Z+3, r1	; 0x03
	
	while(!(SPI_PORT.STATUS & SPI_IF_bm));
    60da:	92 81       	ldd	r25, Z+2	; 0x02
    60dc:	99 23       	and	r25, r25
    60de:	ec f7       	brge	.-6      	; 0x60da <GetFullTemp+0x28>
	data2 = SPI_PORT.DATA;
    60e0:	e0 ec       	ldi	r30, 0xC0	; 192
    60e2:	f8 e0       	ldi	r31, 0x08	; 8
    60e4:	23 81       	ldd	r18, Z+3	; 0x03
	SPI_PORT.DATA = 0;
    60e6:	13 82       	std	Z+3, r1	; 0x03
	
	while(!(SPI_PORT.STATUS & SPI_IF_bm));
    60e8:	92 81       	ldd	r25, Z+2	; 0x02
    60ea:	99 23       	and	r25, r25
    60ec:	ec f7       	brge	.-6      	; 0x60e8 <GetFullTemp+0x36>
	data1 = SPI_PORT.DATA;
    60ee:	e0 ec       	ldi	r30, 0xC0	; 192
    60f0:	f8 e0       	ldi	r31, 0x08	; 8
    60f2:	93 81       	ldd	r25, Z+3	; 0x03
	SPI_PORT.DATA = 0;
    60f4:	13 82       	std	Z+3, r1	; 0x03
	
	while(!(SPI_PORT.STATUS & SPI_IF_bm));
    60f6:	92 81       	ldd	r25, Z+2	; 0x02
    60f8:	99 23       	and	r25, r25
    60fa:	ec f7       	brge	.-6      	; 0x60f6 <GetFullTemp+0x44>
	data0 = SPI_PORT.DATA;
    60fc:	90 91 c3 08 	lds	r25, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	
	SPI_IO_PORT.OUTSET |= CS_PIN;
    6100:	e0 e4       	ldi	r30, 0x40	; 64
    6102:	f6 e0       	ldi	r31, 0x06	; 6
    6104:	95 81       	ldd	r25, Z+5	; 0x05
    6106:	90 61       	ori	r25, 0x10	; 16
    6108:	95 83       	std	Z+5, r25	; 0x05
	
	junction = ((data1 << 8) + data0) >> 4;
	status = ((data3 & 0x01) << 3) + (data0 & 0x07);
	return (data3 << 8) + data2;	
    610a:	90 e0       	ldi	r25, 0x00	; 0
    610c:	98 2f       	mov	r25, r24
    610e:	88 27       	eor	r24, r24
	
}
    6110:	82 0f       	add	r24, r18
    6112:	91 1d       	adc	r25, r1
    6114:	08 95       	ret

00006116 <GetTemp>:

#include "TempSensor.h"
#include <util/delay.h>

uint16_t GetTemp()
{
    6116:	cf 93       	push	r28
    6118:	df 93       	push	r29
    611a:	00 d0       	rcall	.+0      	; 0x611c <GetTemp+0x6>
    611c:	cd b7       	in	r28, 0x3d	; 61
    611e:	de b7       	in	r29, 0x3e	; 62
	uint16_t junction;
	uint8_t status;
	return GetFullTemp(&junction, &status);
    6120:	be 01       	movw	r22, r28
    6122:	6d 5f       	subi	r22, 0xFD	; 253
    6124:	7f 4f       	sbci	r23, 0xFF	; 255
    6126:	ce 01       	movw	r24, r28
    6128:	01 96       	adiw	r24, 0x01	; 1
    612a:	c3 df       	rcall	.-122    	; 0x60b2 <GetFullTemp>
}
    612c:	23 96       	adiw	r28, 0x03	; 3
    612e:	cd bf       	out	0x3d, r28	; 61
    6130:	de bf       	out	0x3e, r29	; 62
    6132:	df 91       	pop	r29
    6134:	cf 91       	pop	r28
    6136:	08 95       	ret

00006138 <InitSPI>:



void InitSPI()
{
	CS_PIN_CTRL = PORT_OPC_PULLDOWN_gc;
    6138:	e0 e4       	ldi	r30, 0x40	; 64
    613a:	f6 e0       	ldi	r31, 0x06	; 6
    613c:	80 e1       	ldi	r24, 0x10	; 16
    613e:	84 8b       	std	Z+20, r24	; 0x14
	SPI_IO_PORT.DIRSET |= PIN4_bm | PIN7_bm; // output SPI
    6140:	81 81       	ldd	r24, Z+1	; 0x01
    6142:	80 69       	ori	r24, 0x90	; 144
    6144:	81 83       	std	Z+1, r24	; 0x01
	SPI_PORT.CTRL = SPI_ENABLE_bm | SPI_PRESCALER_DIV16_gc | SPI_MASTER_bm;
    6146:	81 e5       	ldi	r24, 0x51	; 81
    6148:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
    614c:	08 95       	ret

0000614e <InitTempSensor>:
}

void InitTempSensor()
{
	InitSPI();
    614e:	f4 cf       	rjmp	.-24     	; 0x6138 <InitSPI>
    6150:	08 95       	ret

00006152 <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
    6152:	cf 93       	push	r28
    6154:	df 93       	push	r29
    6156:	cd b7       	in	r28, 0x3d	; 61
    6158:	de b7       	in	r29, 0x3e	; 62
    615a:	25 97       	sbiw	r28, 0x05	; 5
    615c:	cd bf       	out	0x3d, r28	; 61
    615e:	de bf       	out	0x3e, r29	; 62
    6160:	6c e1       	ldi	r22, 0x1C	; 28
    6162:	70 e0       	ldi	r23, 0x00	; 0
    6164:	82 e0       	ldi	r24, 0x02	; 2
    6166:	a0 d0       	rcall	.+320    	; 0x62a8 <nvm_read_byte>
    6168:	8a 83       	std	Y+2, r24	; 0x02
    616a:	6d e1       	ldi	r22, 0x1D	; 29
    616c:	70 e0       	ldi	r23, 0x00	; 0
    616e:	82 e0       	ldi	r24, 0x02	; 2
    6170:	9b d0       	rcall	.+310    	; 0x62a8 <nvm_read_byte>
    6172:	89 83       	std	Y+1, r24	; 0x01
    6174:	89 81       	ldd	r24, Y+1	; 0x01
    6176:	9a 81       	ldd	r25, Y+2	; 0x02
    6178:	01 96       	adiw	r24, 0x01	; 1
    617a:	21 f4       	brne	.+8      	; 0x6184 <sysclk_init+0x32>
    617c:	80 e4       	ldi	r24, 0x40	; 64
    617e:	93 e2       	ldi	r25, 0x23	; 35
    6180:	89 83       	std	Y+1, r24	; 0x01
    6182:	9a 83       	std	Y+2, r25	; 0x02
    6184:	89 81       	ldd	r24, Y+1	; 0x01
    6186:	9a 81       	ldd	r25, Y+2	; 0x02
    6188:	8b 83       	std	Y+3, r24	; 0x03
    618a:	9c 83       	std	Y+4, r25	; 0x04
    618c:	e0 e6       	ldi	r30, 0x60	; 96
    618e:	f0 e0       	ldi	r31, 0x00	; 0
    6190:	82 83       	std	Z+2, r24	; 0x02
    6192:	8c 81       	ldd	r24, Y+4	; 0x04
    6194:	83 83       	std	Z+3, r24	; 0x03
    6196:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    619a:	84 fd       	sbrc	r24, 4
    619c:	0f c0       	rjmp	.+30     	; 0x61bc <sysclk_init+0x6a>
    619e:	8f b7       	in	r24, 0x3f	; 63
    61a0:	8d 83       	std	Y+5, r24	; 0x05
    61a2:	f8 94       	cli
    61a4:	9d 81       	ldd	r25, Y+5	; 0x05
    61a6:	e0 e5       	ldi	r30, 0x50	; 80
    61a8:	f0 e0       	ldi	r31, 0x00	; 0
    61aa:	80 e1       	ldi	r24, 0x10	; 16
    61ac:	85 83       	std	Z+5, r24	; 0x05
    61ae:	80 81       	ld	r24, Z
    61b0:	80 61       	ori	r24, 0x10	; 16
    61b2:	80 83       	st	Z, r24
    61b4:	9f bf       	out	0x3f, r25	; 63
    61b6:	81 81       	ldd	r24, Z+1	; 0x01
    61b8:	84 ff       	sbrs	r24, 4
    61ba:	fd cf       	rjmp	.-6      	; 0x61b6 <sysclk_init+0x64>
    61bc:	64 e0       	ldi	r22, 0x04	; 4
    61be:	80 e4       	ldi	r24, 0x40	; 64
    61c0:	90 e0       	ldi	r25, 0x00	; 0
    61c2:	7c d0       	rcall	.+248    	; 0x62bc <ccp_write_io>
    61c4:	25 96       	adiw	r28, 0x05	; 5
    61c6:	cd bf       	out	0x3d, r28	; 61
    61c8:	de bf       	out	0x3e, r29	; 62
    61ca:	df 91       	pop	r29
    61cc:	cf 91       	pop	r28
    61ce:	08 95       	ret

000061d0 <sysclk_enable_module>:
    61d0:	cf 93       	push	r28
    61d2:	df 93       	push	r29
    61d4:	1f 92       	push	r1
    61d6:	cd b7       	in	r28, 0x3d	; 61
    61d8:	de b7       	in	r29, 0x3e	; 62
    61da:	9f b7       	in	r25, 0x3f	; 63
    61dc:	99 83       	std	Y+1, r25	; 0x01
    61de:	f8 94       	cli
    61e0:	99 81       	ldd	r25, Y+1	; 0x01
    61e2:	e8 2f       	mov	r30, r24
    61e4:	f0 e0       	ldi	r31, 0x00	; 0
    61e6:	e0 59       	subi	r30, 0x90	; 144
    61e8:	ff 4f       	sbci	r31, 0xFF	; 255
    61ea:	60 95       	com	r22
    61ec:	80 81       	ld	r24, Z
    61ee:	68 23       	and	r22, r24
    61f0:	60 83       	st	Z, r22
    61f2:	9f bf       	out	0x3f, r25	; 63
    61f4:	0f 90       	pop	r0
    61f6:	df 91       	pop	r29
    61f8:	cf 91       	pop	r28
    61fa:	08 95       	ret

000061fc <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    61fc:	cf 93       	push	r28
    61fe:	df 93       	push	r29
    6200:	1f 92       	push	r1
    6202:	1f 92       	push	r1
    6204:	cd b7       	in	r28, 0x3d	; 61
    6206:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    6208:	86 30       	cpi	r24, 0x06	; 6
    620a:	11 f0       	breq	.+4      	; 0x6210 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    620c:	60 e0       	ldi	r22, 0x00	; 0
    620e:	01 c0       	rjmp	.+2      	; 0x6212 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    6210:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    6212:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    6216:	81 fd       	sbrc	r24, 1
    6218:	2a c0       	rjmp	.+84     	; 0x626e <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    621a:	8f b7       	in	r24, 0x3f	; 63
    621c:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    621e:	f8 94       	cli
	return flags;
    6220:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    6222:	e0 e5       	ldi	r30, 0x50	; 80
    6224:	f0 e0       	ldi	r31, 0x00	; 0
    6226:	80 81       	ld	r24, Z
    6228:	82 60       	ori	r24, 0x02	; 2
    622a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    622c:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    622e:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    6230:	81 ff       	sbrs	r24, 1
    6232:	fd cf       	rjmp	.-6      	; 0x622e <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    6234:	8f b7       	in	r24, 0x3f	; 63
    6236:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    6238:	f8 94       	cli
	return flags;
    623a:	99 81       	ldd	r25, Y+1	; 0x01
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    623c:	a0 e5       	ldi	r26, 0x50	; 80
    623e:	b0 e0       	ldi	r27, 0x00	; 0
    6240:	16 96       	adiw	r26, 0x06	; 6
    6242:	8c 91       	ld	r24, X
    6244:	16 97       	sbiw	r26, 0x06	; 6
    6246:	89 7f       	andi	r24, 0xF9	; 249
    6248:	16 96       	adiw	r26, 0x06	; 6
    624a:	8c 93       	st	X, r24
    624c:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    624e:	e0 e6       	ldi	r30, 0x60	; 96
    6250:	f0 e0       	ldi	r31, 0x00	; 0
    6252:	80 e8       	ldi	r24, 0x80	; 128
    6254:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    6256:	8b eb       	ldi	r24, 0xBB	; 187
    6258:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    625a:	16 96       	adiw	r26, 0x06	; 6
    625c:	8c 91       	ld	r24, X
    625e:	16 97       	sbiw	r26, 0x06	; 6
    6260:	84 60       	ori	r24, 0x04	; 4
    6262:	16 96       	adiw	r26, 0x06	; 6
    6264:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    6266:	80 81       	ld	r24, Z
    6268:	81 60       	ori	r24, 0x01	; 1
    626a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    626c:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    626e:	63 60       	ori	r22, 0x03	; 3
    6270:	84 e4       	ldi	r24, 0x44	; 68
    6272:	90 e0       	ldi	r25, 0x00	; 0
    6274:	23 d0       	rcall	.+70     	; 0x62bc <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    6276:	60 e4       	ldi	r22, 0x40	; 64
    6278:	80 e0       	ldi	r24, 0x00	; 0
    627a:	aa df       	rcall	.-172    	; 0x61d0 <sysclk_enable_module>
}
    627c:	0f 90       	pop	r0
    627e:	0f 90       	pop	r0
    6280:	df 91       	pop	r29
    6282:	cf 91       	pop	r28
    6284:	08 95       	ret

00006286 <nvm_eeprom_read_byte>:
 * \param  addr       EEPROM address, between 0 and EEPROM_SIZE
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t nvm_eeprom_read_byte(eeprom_addr_t addr)
{
    6286:	dc 01       	movw	r26, r24
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    6288:	e0 ec       	ldi	r30, 0xC0	; 192
    628a:	f1 e0       	ldi	r31, 0x01	; 1
    628c:	97 85       	ldd	r25, Z+15	; 0x0f
    628e:	99 23       	and	r25, r25
    6290:	ec f3       	brlt	.-6      	; 0x628c <nvm_eeprom_read_byte+0x6>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
    6292:	ec ec       	ldi	r30, 0xCC	; 204
    6294:	f1 e0       	ldi	r31, 0x01	; 1
    6296:	80 81       	ld	r24, Z
    6298:	88 60       	ori	r24, 0x08	; 8
    629a:	80 83       	st	Z, r24
	Assert(addr <= EEPROM_SIZE);

	/* Wait until NVM is ready */
	nvm_wait_until_ready();
	eeprom_enable_mapping();
	data = *(uint8_t*)(addr + MAPPED_EEPROM_START),
    629c:	b0 5f       	subi	r27, 0xF0	; 240
    629e:	8c 91       	ld	r24, X
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
    62a0:	90 81       	ld	r25, Z
    62a2:	97 7f       	andi	r25, 0xF7	; 247
    62a4:	90 83       	st	Z, r25
	eeprom_disable_mapping();
	return data;
}
    62a6:	08 95       	ret

000062a8 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    62a8:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    62ac:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    62ae:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    62b0:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    62b4:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    62b6:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    62ba:	08 95       	ret

000062bc <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    62bc:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    62be:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    62c0:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    62c2:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    62c4:	60 83       	st	Z, r22
	ret                             // Return to caller
    62c6:	08 95       	ret

000062c8 <__subsf3>:
    62c8:	50 58       	subi	r21, 0x80	; 128

000062ca <__addsf3>:
    62ca:	bb 27       	eor	r27, r27
    62cc:	aa 27       	eor	r26, r26
    62ce:	0e d0       	rcall	.+28     	; 0x62ec <__addsf3x>
    62d0:	75 c1       	rjmp	.+746    	; 0x65bc <__fp_round>
    62d2:	66 d1       	rcall	.+716    	; 0x65a0 <__fp_pscA>
    62d4:	30 f0       	brcs	.+12     	; 0x62e2 <__addsf3+0x18>
    62d6:	6b d1       	rcall	.+726    	; 0x65ae <__fp_pscB>
    62d8:	20 f0       	brcs	.+8      	; 0x62e2 <__addsf3+0x18>
    62da:	31 f4       	brne	.+12     	; 0x62e8 <__addsf3+0x1e>
    62dc:	9f 3f       	cpi	r25, 0xFF	; 255
    62de:	11 f4       	brne	.+4      	; 0x62e4 <__addsf3+0x1a>
    62e0:	1e f4       	brtc	.+6      	; 0x62e8 <__addsf3+0x1e>
    62e2:	5b c1       	rjmp	.+694    	; 0x659a <__fp_nan>
    62e4:	0e f4       	brtc	.+2      	; 0x62e8 <__addsf3+0x1e>
    62e6:	e0 95       	com	r30
    62e8:	e7 fb       	bst	r30, 7
    62ea:	51 c1       	rjmp	.+674    	; 0x658e <__fp_inf>

000062ec <__addsf3x>:
    62ec:	e9 2f       	mov	r30, r25
    62ee:	77 d1       	rcall	.+750    	; 0x65de <__fp_split3>
    62f0:	80 f3       	brcs	.-32     	; 0x62d2 <__addsf3+0x8>
    62f2:	ba 17       	cp	r27, r26
    62f4:	62 07       	cpc	r22, r18
    62f6:	73 07       	cpc	r23, r19
    62f8:	84 07       	cpc	r24, r20
    62fa:	95 07       	cpc	r25, r21
    62fc:	18 f0       	brcs	.+6      	; 0x6304 <__addsf3x+0x18>
    62fe:	71 f4       	brne	.+28     	; 0x631c <__addsf3x+0x30>
    6300:	9e f5       	brtc	.+102    	; 0x6368 <__addsf3x+0x7c>
    6302:	8f c1       	rjmp	.+798    	; 0x6622 <__fp_zero>
    6304:	0e f4       	brtc	.+2      	; 0x6308 <__addsf3x+0x1c>
    6306:	e0 95       	com	r30
    6308:	0b 2e       	mov	r0, r27
    630a:	ba 2f       	mov	r27, r26
    630c:	a0 2d       	mov	r26, r0
    630e:	0b 01       	movw	r0, r22
    6310:	b9 01       	movw	r22, r18
    6312:	90 01       	movw	r18, r0
    6314:	0c 01       	movw	r0, r24
    6316:	ca 01       	movw	r24, r20
    6318:	a0 01       	movw	r20, r0
    631a:	11 24       	eor	r1, r1
    631c:	ff 27       	eor	r31, r31
    631e:	59 1b       	sub	r21, r25
    6320:	99 f0       	breq	.+38     	; 0x6348 <__addsf3x+0x5c>
    6322:	59 3f       	cpi	r21, 0xF9	; 249
    6324:	50 f4       	brcc	.+20     	; 0x633a <__addsf3x+0x4e>
    6326:	50 3e       	cpi	r21, 0xE0	; 224
    6328:	68 f1       	brcs	.+90     	; 0x6384 <__addsf3x+0x98>
    632a:	1a 16       	cp	r1, r26
    632c:	f0 40       	sbci	r31, 0x00	; 0
    632e:	a2 2f       	mov	r26, r18
    6330:	23 2f       	mov	r18, r19
    6332:	34 2f       	mov	r19, r20
    6334:	44 27       	eor	r20, r20
    6336:	58 5f       	subi	r21, 0xF8	; 248
    6338:	f3 cf       	rjmp	.-26     	; 0x6320 <__addsf3x+0x34>
    633a:	46 95       	lsr	r20
    633c:	37 95       	ror	r19
    633e:	27 95       	ror	r18
    6340:	a7 95       	ror	r26
    6342:	f0 40       	sbci	r31, 0x00	; 0
    6344:	53 95       	inc	r21
    6346:	c9 f7       	brne	.-14     	; 0x633a <__addsf3x+0x4e>
    6348:	7e f4       	brtc	.+30     	; 0x6368 <__addsf3x+0x7c>
    634a:	1f 16       	cp	r1, r31
    634c:	ba 0b       	sbc	r27, r26
    634e:	62 0b       	sbc	r22, r18
    6350:	73 0b       	sbc	r23, r19
    6352:	84 0b       	sbc	r24, r20
    6354:	ba f0       	brmi	.+46     	; 0x6384 <__addsf3x+0x98>
    6356:	91 50       	subi	r25, 0x01	; 1
    6358:	a1 f0       	breq	.+40     	; 0x6382 <__addsf3x+0x96>
    635a:	ff 0f       	add	r31, r31
    635c:	bb 1f       	adc	r27, r27
    635e:	66 1f       	adc	r22, r22
    6360:	77 1f       	adc	r23, r23
    6362:	88 1f       	adc	r24, r24
    6364:	c2 f7       	brpl	.-16     	; 0x6356 <__addsf3x+0x6a>
    6366:	0e c0       	rjmp	.+28     	; 0x6384 <__addsf3x+0x98>
    6368:	ba 0f       	add	r27, r26
    636a:	62 1f       	adc	r22, r18
    636c:	73 1f       	adc	r23, r19
    636e:	84 1f       	adc	r24, r20
    6370:	48 f4       	brcc	.+18     	; 0x6384 <__addsf3x+0x98>
    6372:	87 95       	ror	r24
    6374:	77 95       	ror	r23
    6376:	67 95       	ror	r22
    6378:	b7 95       	ror	r27
    637a:	f7 95       	ror	r31
    637c:	9e 3f       	cpi	r25, 0xFE	; 254
    637e:	08 f0       	brcs	.+2      	; 0x6382 <__addsf3x+0x96>
    6380:	b3 cf       	rjmp	.-154    	; 0x62e8 <__addsf3+0x1e>
    6382:	93 95       	inc	r25
    6384:	88 0f       	add	r24, r24
    6386:	08 f0       	brcs	.+2      	; 0x638a <__addsf3x+0x9e>
    6388:	99 27       	eor	r25, r25
    638a:	ee 0f       	add	r30, r30
    638c:	97 95       	ror	r25
    638e:	87 95       	ror	r24
    6390:	08 95       	ret

00006392 <__cmpsf2>:
    6392:	d9 d0       	rcall	.+434    	; 0x6546 <__fp_cmp>
    6394:	08 f4       	brcc	.+2      	; 0x6398 <__cmpsf2+0x6>
    6396:	81 e0       	ldi	r24, 0x01	; 1
    6398:	08 95       	ret

0000639a <__divsf3>:
    639a:	0c d0       	rcall	.+24     	; 0x63b4 <__divsf3x>
    639c:	0f c1       	rjmp	.+542    	; 0x65bc <__fp_round>
    639e:	07 d1       	rcall	.+526    	; 0x65ae <__fp_pscB>
    63a0:	40 f0       	brcs	.+16     	; 0x63b2 <__divsf3+0x18>
    63a2:	fe d0       	rcall	.+508    	; 0x65a0 <__fp_pscA>
    63a4:	30 f0       	brcs	.+12     	; 0x63b2 <__divsf3+0x18>
    63a6:	21 f4       	brne	.+8      	; 0x63b0 <__divsf3+0x16>
    63a8:	5f 3f       	cpi	r21, 0xFF	; 255
    63aa:	19 f0       	breq	.+6      	; 0x63b2 <__divsf3+0x18>
    63ac:	f0 c0       	rjmp	.+480    	; 0x658e <__fp_inf>
    63ae:	51 11       	cpse	r21, r1
    63b0:	39 c1       	rjmp	.+626    	; 0x6624 <__fp_szero>
    63b2:	f3 c0       	rjmp	.+486    	; 0x659a <__fp_nan>

000063b4 <__divsf3x>:
    63b4:	14 d1       	rcall	.+552    	; 0x65de <__fp_split3>
    63b6:	98 f3       	brcs	.-26     	; 0x639e <__divsf3+0x4>

000063b8 <__divsf3_pse>:
    63b8:	99 23       	and	r25, r25
    63ba:	c9 f3       	breq	.-14     	; 0x63ae <__divsf3+0x14>
    63bc:	55 23       	and	r21, r21
    63be:	b1 f3       	breq	.-20     	; 0x63ac <__divsf3+0x12>
    63c0:	95 1b       	sub	r25, r21
    63c2:	55 0b       	sbc	r21, r21
    63c4:	bb 27       	eor	r27, r27
    63c6:	aa 27       	eor	r26, r26
    63c8:	62 17       	cp	r22, r18
    63ca:	73 07       	cpc	r23, r19
    63cc:	84 07       	cpc	r24, r20
    63ce:	38 f0       	brcs	.+14     	; 0x63de <__divsf3_pse+0x26>
    63d0:	9f 5f       	subi	r25, 0xFF	; 255
    63d2:	5f 4f       	sbci	r21, 0xFF	; 255
    63d4:	22 0f       	add	r18, r18
    63d6:	33 1f       	adc	r19, r19
    63d8:	44 1f       	adc	r20, r20
    63da:	aa 1f       	adc	r26, r26
    63dc:	a9 f3       	breq	.-22     	; 0x63c8 <__divsf3_pse+0x10>
    63de:	33 d0       	rcall	.+102    	; 0x6446 <__divsf3_pse+0x8e>
    63e0:	0e 2e       	mov	r0, r30
    63e2:	3a f0       	brmi	.+14     	; 0x63f2 <__divsf3_pse+0x3a>
    63e4:	e0 e8       	ldi	r30, 0x80	; 128
    63e6:	30 d0       	rcall	.+96     	; 0x6448 <__divsf3_pse+0x90>
    63e8:	91 50       	subi	r25, 0x01	; 1
    63ea:	50 40       	sbci	r21, 0x00	; 0
    63ec:	e6 95       	lsr	r30
    63ee:	00 1c       	adc	r0, r0
    63f0:	ca f7       	brpl	.-14     	; 0x63e4 <__divsf3_pse+0x2c>
    63f2:	29 d0       	rcall	.+82     	; 0x6446 <__divsf3_pse+0x8e>
    63f4:	fe 2f       	mov	r31, r30
    63f6:	27 d0       	rcall	.+78     	; 0x6446 <__divsf3_pse+0x8e>
    63f8:	66 0f       	add	r22, r22
    63fa:	77 1f       	adc	r23, r23
    63fc:	88 1f       	adc	r24, r24
    63fe:	bb 1f       	adc	r27, r27
    6400:	26 17       	cp	r18, r22
    6402:	37 07       	cpc	r19, r23
    6404:	48 07       	cpc	r20, r24
    6406:	ab 07       	cpc	r26, r27
    6408:	b0 e8       	ldi	r27, 0x80	; 128
    640a:	09 f0       	breq	.+2      	; 0x640e <__divsf3_pse+0x56>
    640c:	bb 0b       	sbc	r27, r27
    640e:	80 2d       	mov	r24, r0
    6410:	bf 01       	movw	r22, r30
    6412:	ff 27       	eor	r31, r31
    6414:	93 58       	subi	r25, 0x83	; 131
    6416:	5f 4f       	sbci	r21, 0xFF	; 255
    6418:	2a f0       	brmi	.+10     	; 0x6424 <__divsf3_pse+0x6c>
    641a:	9e 3f       	cpi	r25, 0xFE	; 254
    641c:	51 05       	cpc	r21, r1
    641e:	68 f0       	brcs	.+26     	; 0x643a <__divsf3_pse+0x82>
    6420:	b6 c0       	rjmp	.+364    	; 0x658e <__fp_inf>
    6422:	00 c1       	rjmp	.+512    	; 0x6624 <__fp_szero>
    6424:	5f 3f       	cpi	r21, 0xFF	; 255
    6426:	ec f3       	brlt	.-6      	; 0x6422 <__divsf3_pse+0x6a>
    6428:	98 3e       	cpi	r25, 0xE8	; 232
    642a:	dc f3       	brlt	.-10     	; 0x6422 <__divsf3_pse+0x6a>
    642c:	86 95       	lsr	r24
    642e:	77 95       	ror	r23
    6430:	67 95       	ror	r22
    6432:	b7 95       	ror	r27
    6434:	f7 95       	ror	r31
    6436:	9f 5f       	subi	r25, 0xFF	; 255
    6438:	c9 f7       	brne	.-14     	; 0x642c <__divsf3_pse+0x74>
    643a:	88 0f       	add	r24, r24
    643c:	91 1d       	adc	r25, r1
    643e:	96 95       	lsr	r25
    6440:	87 95       	ror	r24
    6442:	97 f9       	bld	r25, 7
    6444:	08 95       	ret
    6446:	e1 e0       	ldi	r30, 0x01	; 1
    6448:	66 0f       	add	r22, r22
    644a:	77 1f       	adc	r23, r23
    644c:	88 1f       	adc	r24, r24
    644e:	bb 1f       	adc	r27, r27
    6450:	62 17       	cp	r22, r18
    6452:	73 07       	cpc	r23, r19
    6454:	84 07       	cpc	r24, r20
    6456:	ba 07       	cpc	r27, r26
    6458:	20 f0       	brcs	.+8      	; 0x6462 <__divsf3_pse+0xaa>
    645a:	62 1b       	sub	r22, r18
    645c:	73 0b       	sbc	r23, r19
    645e:	84 0b       	sbc	r24, r20
    6460:	ba 0b       	sbc	r27, r26
    6462:	ee 1f       	adc	r30, r30
    6464:	88 f7       	brcc	.-30     	; 0x6448 <__divsf3_pse+0x90>
    6466:	e0 95       	com	r30
    6468:	08 95       	ret

0000646a <__fixsfsi>:
    646a:	04 d0       	rcall	.+8      	; 0x6474 <__fixunssfsi>
    646c:	68 94       	set
    646e:	b1 11       	cpse	r27, r1
    6470:	d9 c0       	rjmp	.+434    	; 0x6624 <__fp_szero>
    6472:	08 95       	ret

00006474 <__fixunssfsi>:
    6474:	bc d0       	rcall	.+376    	; 0x65ee <__fp_splitA>
    6476:	88 f0       	brcs	.+34     	; 0x649a <__fixunssfsi+0x26>
    6478:	9f 57       	subi	r25, 0x7F	; 127
    647a:	90 f0       	brcs	.+36     	; 0x64a0 <__fixunssfsi+0x2c>
    647c:	b9 2f       	mov	r27, r25
    647e:	99 27       	eor	r25, r25
    6480:	b7 51       	subi	r27, 0x17	; 23
    6482:	a0 f0       	brcs	.+40     	; 0x64ac <__fixunssfsi+0x38>
    6484:	d1 f0       	breq	.+52     	; 0x64ba <__fixunssfsi+0x46>
    6486:	66 0f       	add	r22, r22
    6488:	77 1f       	adc	r23, r23
    648a:	88 1f       	adc	r24, r24
    648c:	99 1f       	adc	r25, r25
    648e:	1a f0       	brmi	.+6      	; 0x6496 <__fixunssfsi+0x22>
    6490:	ba 95       	dec	r27
    6492:	c9 f7       	brne	.-14     	; 0x6486 <__fixunssfsi+0x12>
    6494:	12 c0       	rjmp	.+36     	; 0x64ba <__fixunssfsi+0x46>
    6496:	b1 30       	cpi	r27, 0x01	; 1
    6498:	81 f0       	breq	.+32     	; 0x64ba <__fixunssfsi+0x46>
    649a:	c3 d0       	rcall	.+390    	; 0x6622 <__fp_zero>
    649c:	b1 e0       	ldi	r27, 0x01	; 1
    649e:	08 95       	ret
    64a0:	c0 c0       	rjmp	.+384    	; 0x6622 <__fp_zero>
    64a2:	67 2f       	mov	r22, r23
    64a4:	78 2f       	mov	r23, r24
    64a6:	88 27       	eor	r24, r24
    64a8:	b8 5f       	subi	r27, 0xF8	; 248
    64aa:	39 f0       	breq	.+14     	; 0x64ba <__fixunssfsi+0x46>
    64ac:	b9 3f       	cpi	r27, 0xF9	; 249
    64ae:	cc f3       	brlt	.-14     	; 0x64a2 <__fixunssfsi+0x2e>
    64b0:	86 95       	lsr	r24
    64b2:	77 95       	ror	r23
    64b4:	67 95       	ror	r22
    64b6:	b3 95       	inc	r27
    64b8:	d9 f7       	brne	.-10     	; 0x64b0 <__fixunssfsi+0x3c>
    64ba:	3e f4       	brtc	.+14     	; 0x64ca <__fixunssfsi+0x56>
    64bc:	90 95       	com	r25
    64be:	80 95       	com	r24
    64c0:	70 95       	com	r23
    64c2:	61 95       	neg	r22
    64c4:	7f 4f       	sbci	r23, 0xFF	; 255
    64c6:	8f 4f       	sbci	r24, 0xFF	; 255
    64c8:	9f 4f       	sbci	r25, 0xFF	; 255
    64ca:	08 95       	ret

000064cc <__floatunsisf>:
    64cc:	e8 94       	clt
    64ce:	09 c0       	rjmp	.+18     	; 0x64e2 <__floatsisf+0x12>

000064d0 <__floatsisf>:
    64d0:	97 fb       	bst	r25, 7
    64d2:	3e f4       	brtc	.+14     	; 0x64e2 <__floatsisf+0x12>
    64d4:	90 95       	com	r25
    64d6:	80 95       	com	r24
    64d8:	70 95       	com	r23
    64da:	61 95       	neg	r22
    64dc:	7f 4f       	sbci	r23, 0xFF	; 255
    64de:	8f 4f       	sbci	r24, 0xFF	; 255
    64e0:	9f 4f       	sbci	r25, 0xFF	; 255
    64e2:	99 23       	and	r25, r25
    64e4:	a9 f0       	breq	.+42     	; 0x6510 <__floatsisf+0x40>
    64e6:	f9 2f       	mov	r31, r25
    64e8:	96 e9       	ldi	r25, 0x96	; 150
    64ea:	bb 27       	eor	r27, r27
    64ec:	93 95       	inc	r25
    64ee:	f6 95       	lsr	r31
    64f0:	87 95       	ror	r24
    64f2:	77 95       	ror	r23
    64f4:	67 95       	ror	r22
    64f6:	b7 95       	ror	r27
    64f8:	f1 11       	cpse	r31, r1
    64fa:	f8 cf       	rjmp	.-16     	; 0x64ec <__floatsisf+0x1c>
    64fc:	fa f4       	brpl	.+62     	; 0x653c <__floatsisf+0x6c>
    64fe:	bb 0f       	add	r27, r27
    6500:	11 f4       	brne	.+4      	; 0x6506 <__floatsisf+0x36>
    6502:	60 ff       	sbrs	r22, 0
    6504:	1b c0       	rjmp	.+54     	; 0x653c <__floatsisf+0x6c>
    6506:	6f 5f       	subi	r22, 0xFF	; 255
    6508:	7f 4f       	sbci	r23, 0xFF	; 255
    650a:	8f 4f       	sbci	r24, 0xFF	; 255
    650c:	9f 4f       	sbci	r25, 0xFF	; 255
    650e:	16 c0       	rjmp	.+44     	; 0x653c <__floatsisf+0x6c>
    6510:	88 23       	and	r24, r24
    6512:	11 f0       	breq	.+4      	; 0x6518 <__floatsisf+0x48>
    6514:	96 e9       	ldi	r25, 0x96	; 150
    6516:	11 c0       	rjmp	.+34     	; 0x653a <__floatsisf+0x6a>
    6518:	77 23       	and	r23, r23
    651a:	21 f0       	breq	.+8      	; 0x6524 <__floatsisf+0x54>
    651c:	9e e8       	ldi	r25, 0x8E	; 142
    651e:	87 2f       	mov	r24, r23
    6520:	76 2f       	mov	r23, r22
    6522:	05 c0       	rjmp	.+10     	; 0x652e <__floatsisf+0x5e>
    6524:	66 23       	and	r22, r22
    6526:	71 f0       	breq	.+28     	; 0x6544 <__floatsisf+0x74>
    6528:	96 e8       	ldi	r25, 0x86	; 134
    652a:	86 2f       	mov	r24, r22
    652c:	70 e0       	ldi	r23, 0x00	; 0
    652e:	60 e0       	ldi	r22, 0x00	; 0
    6530:	2a f0       	brmi	.+10     	; 0x653c <__floatsisf+0x6c>
    6532:	9a 95       	dec	r25
    6534:	66 0f       	add	r22, r22
    6536:	77 1f       	adc	r23, r23
    6538:	88 1f       	adc	r24, r24
    653a:	da f7       	brpl	.-10     	; 0x6532 <__floatsisf+0x62>
    653c:	88 0f       	add	r24, r24
    653e:	96 95       	lsr	r25
    6540:	87 95       	ror	r24
    6542:	97 f9       	bld	r25, 7
    6544:	08 95       	ret

00006546 <__fp_cmp>:
    6546:	99 0f       	add	r25, r25
    6548:	00 08       	sbc	r0, r0
    654a:	55 0f       	add	r21, r21
    654c:	aa 0b       	sbc	r26, r26
    654e:	e0 e8       	ldi	r30, 0x80	; 128
    6550:	fe ef       	ldi	r31, 0xFE	; 254
    6552:	16 16       	cp	r1, r22
    6554:	17 06       	cpc	r1, r23
    6556:	e8 07       	cpc	r30, r24
    6558:	f9 07       	cpc	r31, r25
    655a:	c0 f0       	brcs	.+48     	; 0x658c <__fp_cmp+0x46>
    655c:	12 16       	cp	r1, r18
    655e:	13 06       	cpc	r1, r19
    6560:	e4 07       	cpc	r30, r20
    6562:	f5 07       	cpc	r31, r21
    6564:	98 f0       	brcs	.+38     	; 0x658c <__fp_cmp+0x46>
    6566:	62 1b       	sub	r22, r18
    6568:	73 0b       	sbc	r23, r19
    656a:	84 0b       	sbc	r24, r20
    656c:	95 0b       	sbc	r25, r21
    656e:	39 f4       	brne	.+14     	; 0x657e <__fp_cmp+0x38>
    6570:	0a 26       	eor	r0, r26
    6572:	61 f0       	breq	.+24     	; 0x658c <__fp_cmp+0x46>
    6574:	23 2b       	or	r18, r19
    6576:	24 2b       	or	r18, r20
    6578:	25 2b       	or	r18, r21
    657a:	21 f4       	brne	.+8      	; 0x6584 <__fp_cmp+0x3e>
    657c:	08 95       	ret
    657e:	0a 26       	eor	r0, r26
    6580:	09 f4       	brne	.+2      	; 0x6584 <__fp_cmp+0x3e>
    6582:	a1 40       	sbci	r26, 0x01	; 1
    6584:	a6 95       	lsr	r26
    6586:	8f ef       	ldi	r24, 0xFF	; 255
    6588:	81 1d       	adc	r24, r1
    658a:	81 1d       	adc	r24, r1
    658c:	08 95       	ret

0000658e <__fp_inf>:
    658e:	97 f9       	bld	r25, 7
    6590:	9f 67       	ori	r25, 0x7F	; 127
    6592:	80 e8       	ldi	r24, 0x80	; 128
    6594:	70 e0       	ldi	r23, 0x00	; 0
    6596:	60 e0       	ldi	r22, 0x00	; 0
    6598:	08 95       	ret

0000659a <__fp_nan>:
    659a:	9f ef       	ldi	r25, 0xFF	; 255
    659c:	80 ec       	ldi	r24, 0xC0	; 192
    659e:	08 95       	ret

000065a0 <__fp_pscA>:
    65a0:	00 24       	eor	r0, r0
    65a2:	0a 94       	dec	r0
    65a4:	16 16       	cp	r1, r22
    65a6:	17 06       	cpc	r1, r23
    65a8:	18 06       	cpc	r1, r24
    65aa:	09 06       	cpc	r0, r25
    65ac:	08 95       	ret

000065ae <__fp_pscB>:
    65ae:	00 24       	eor	r0, r0
    65b0:	0a 94       	dec	r0
    65b2:	12 16       	cp	r1, r18
    65b4:	13 06       	cpc	r1, r19
    65b6:	14 06       	cpc	r1, r20
    65b8:	05 06       	cpc	r0, r21
    65ba:	08 95       	ret

000065bc <__fp_round>:
    65bc:	09 2e       	mov	r0, r25
    65be:	03 94       	inc	r0
    65c0:	00 0c       	add	r0, r0
    65c2:	11 f4       	brne	.+4      	; 0x65c8 <__fp_round+0xc>
    65c4:	88 23       	and	r24, r24
    65c6:	52 f0       	brmi	.+20     	; 0x65dc <__fp_round+0x20>
    65c8:	bb 0f       	add	r27, r27
    65ca:	40 f4       	brcc	.+16     	; 0x65dc <__fp_round+0x20>
    65cc:	bf 2b       	or	r27, r31
    65ce:	11 f4       	brne	.+4      	; 0x65d4 <__fp_round+0x18>
    65d0:	60 ff       	sbrs	r22, 0
    65d2:	04 c0       	rjmp	.+8      	; 0x65dc <__fp_round+0x20>
    65d4:	6f 5f       	subi	r22, 0xFF	; 255
    65d6:	7f 4f       	sbci	r23, 0xFF	; 255
    65d8:	8f 4f       	sbci	r24, 0xFF	; 255
    65da:	9f 4f       	sbci	r25, 0xFF	; 255
    65dc:	08 95       	ret

000065de <__fp_split3>:
    65de:	57 fd       	sbrc	r21, 7
    65e0:	90 58       	subi	r25, 0x80	; 128
    65e2:	44 0f       	add	r20, r20
    65e4:	55 1f       	adc	r21, r21
    65e6:	59 f0       	breq	.+22     	; 0x65fe <__fp_splitA+0x10>
    65e8:	5f 3f       	cpi	r21, 0xFF	; 255
    65ea:	71 f0       	breq	.+28     	; 0x6608 <__fp_splitA+0x1a>
    65ec:	47 95       	ror	r20

000065ee <__fp_splitA>:
    65ee:	88 0f       	add	r24, r24
    65f0:	97 fb       	bst	r25, 7
    65f2:	99 1f       	adc	r25, r25
    65f4:	61 f0       	breq	.+24     	; 0x660e <__fp_splitA+0x20>
    65f6:	9f 3f       	cpi	r25, 0xFF	; 255
    65f8:	79 f0       	breq	.+30     	; 0x6618 <__fp_splitA+0x2a>
    65fa:	87 95       	ror	r24
    65fc:	08 95       	ret
    65fe:	12 16       	cp	r1, r18
    6600:	13 06       	cpc	r1, r19
    6602:	14 06       	cpc	r1, r20
    6604:	55 1f       	adc	r21, r21
    6606:	f2 cf       	rjmp	.-28     	; 0x65ec <__fp_split3+0xe>
    6608:	46 95       	lsr	r20
    660a:	f1 df       	rcall	.-30     	; 0x65ee <__fp_splitA>
    660c:	08 c0       	rjmp	.+16     	; 0x661e <__fp_splitA+0x30>
    660e:	16 16       	cp	r1, r22
    6610:	17 06       	cpc	r1, r23
    6612:	18 06       	cpc	r1, r24
    6614:	99 1f       	adc	r25, r25
    6616:	f1 cf       	rjmp	.-30     	; 0x65fa <__fp_splitA+0xc>
    6618:	86 95       	lsr	r24
    661a:	71 05       	cpc	r23, r1
    661c:	61 05       	cpc	r22, r1
    661e:	08 94       	sec
    6620:	08 95       	ret

00006622 <__fp_zero>:
    6622:	e8 94       	clt

00006624 <__fp_szero>:
    6624:	bb 27       	eor	r27, r27
    6626:	66 27       	eor	r22, r22
    6628:	77 27       	eor	r23, r23
    662a:	cb 01       	movw	r24, r22
    662c:	97 f9       	bld	r25, 7
    662e:	08 95       	ret

00006630 <__mulsf3>:
    6630:	0b d0       	rcall	.+22     	; 0x6648 <__mulsf3x>
    6632:	c4 cf       	rjmp	.-120    	; 0x65bc <__fp_round>
    6634:	b5 df       	rcall	.-150    	; 0x65a0 <__fp_pscA>
    6636:	28 f0       	brcs	.+10     	; 0x6642 <__mulsf3+0x12>
    6638:	ba df       	rcall	.-140    	; 0x65ae <__fp_pscB>
    663a:	18 f0       	brcs	.+6      	; 0x6642 <__mulsf3+0x12>
    663c:	95 23       	and	r25, r21
    663e:	09 f0       	breq	.+2      	; 0x6642 <__mulsf3+0x12>
    6640:	a6 cf       	rjmp	.-180    	; 0x658e <__fp_inf>
    6642:	ab cf       	rjmp	.-170    	; 0x659a <__fp_nan>
    6644:	11 24       	eor	r1, r1
    6646:	ee cf       	rjmp	.-36     	; 0x6624 <__fp_szero>

00006648 <__mulsf3x>:
    6648:	ca df       	rcall	.-108    	; 0x65de <__fp_split3>
    664a:	a0 f3       	brcs	.-24     	; 0x6634 <__mulsf3+0x4>

0000664c <__mulsf3_pse>:
    664c:	95 9f       	mul	r25, r21
    664e:	d1 f3       	breq	.-12     	; 0x6644 <__mulsf3+0x14>
    6650:	95 0f       	add	r25, r21
    6652:	50 e0       	ldi	r21, 0x00	; 0
    6654:	55 1f       	adc	r21, r21
    6656:	62 9f       	mul	r22, r18
    6658:	f0 01       	movw	r30, r0
    665a:	72 9f       	mul	r23, r18
    665c:	bb 27       	eor	r27, r27
    665e:	f0 0d       	add	r31, r0
    6660:	b1 1d       	adc	r27, r1
    6662:	63 9f       	mul	r22, r19
    6664:	aa 27       	eor	r26, r26
    6666:	f0 0d       	add	r31, r0
    6668:	b1 1d       	adc	r27, r1
    666a:	aa 1f       	adc	r26, r26
    666c:	64 9f       	mul	r22, r20
    666e:	66 27       	eor	r22, r22
    6670:	b0 0d       	add	r27, r0
    6672:	a1 1d       	adc	r26, r1
    6674:	66 1f       	adc	r22, r22
    6676:	82 9f       	mul	r24, r18
    6678:	22 27       	eor	r18, r18
    667a:	b0 0d       	add	r27, r0
    667c:	a1 1d       	adc	r26, r1
    667e:	62 1f       	adc	r22, r18
    6680:	73 9f       	mul	r23, r19
    6682:	b0 0d       	add	r27, r0
    6684:	a1 1d       	adc	r26, r1
    6686:	62 1f       	adc	r22, r18
    6688:	83 9f       	mul	r24, r19
    668a:	a0 0d       	add	r26, r0
    668c:	61 1d       	adc	r22, r1
    668e:	22 1f       	adc	r18, r18
    6690:	74 9f       	mul	r23, r20
    6692:	33 27       	eor	r19, r19
    6694:	a0 0d       	add	r26, r0
    6696:	61 1d       	adc	r22, r1
    6698:	23 1f       	adc	r18, r19
    669a:	84 9f       	mul	r24, r20
    669c:	60 0d       	add	r22, r0
    669e:	21 1d       	adc	r18, r1
    66a0:	82 2f       	mov	r24, r18
    66a2:	76 2f       	mov	r23, r22
    66a4:	6a 2f       	mov	r22, r26
    66a6:	11 24       	eor	r1, r1
    66a8:	9f 57       	subi	r25, 0x7F	; 127
    66aa:	50 40       	sbci	r21, 0x00	; 0
    66ac:	8a f0       	brmi	.+34     	; 0x66d0 <__mulsf3_pse+0x84>
    66ae:	e1 f0       	breq	.+56     	; 0x66e8 <__mulsf3_pse+0x9c>
    66b0:	88 23       	and	r24, r24
    66b2:	4a f0       	brmi	.+18     	; 0x66c6 <__mulsf3_pse+0x7a>
    66b4:	ee 0f       	add	r30, r30
    66b6:	ff 1f       	adc	r31, r31
    66b8:	bb 1f       	adc	r27, r27
    66ba:	66 1f       	adc	r22, r22
    66bc:	77 1f       	adc	r23, r23
    66be:	88 1f       	adc	r24, r24
    66c0:	91 50       	subi	r25, 0x01	; 1
    66c2:	50 40       	sbci	r21, 0x00	; 0
    66c4:	a9 f7       	brne	.-22     	; 0x66b0 <__mulsf3_pse+0x64>
    66c6:	9e 3f       	cpi	r25, 0xFE	; 254
    66c8:	51 05       	cpc	r21, r1
    66ca:	70 f0       	brcs	.+28     	; 0x66e8 <__mulsf3_pse+0x9c>
    66cc:	60 cf       	rjmp	.-320    	; 0x658e <__fp_inf>
    66ce:	aa cf       	rjmp	.-172    	; 0x6624 <__fp_szero>
    66d0:	5f 3f       	cpi	r21, 0xFF	; 255
    66d2:	ec f3       	brlt	.-6      	; 0x66ce <__mulsf3_pse+0x82>
    66d4:	98 3e       	cpi	r25, 0xE8	; 232
    66d6:	dc f3       	brlt	.-10     	; 0x66ce <__mulsf3_pse+0x82>
    66d8:	86 95       	lsr	r24
    66da:	77 95       	ror	r23
    66dc:	67 95       	ror	r22
    66de:	b7 95       	ror	r27
    66e0:	f7 95       	ror	r31
    66e2:	e7 95       	ror	r30
    66e4:	9f 5f       	subi	r25, 0xFF	; 255
    66e6:	c1 f7       	brne	.-16     	; 0x66d8 <__mulsf3_pse+0x8c>
    66e8:	fe 2b       	or	r31, r30
    66ea:	88 0f       	add	r24, r24
    66ec:	91 1d       	adc	r25, r1
    66ee:	96 95       	lsr	r25
    66f0:	87 95       	ror	r24
    66f2:	97 f9       	bld	r25, 7
    66f4:	08 95       	ret

000066f6 <__udivmodhi4>:
    66f6:	aa 1b       	sub	r26, r26
    66f8:	bb 1b       	sub	r27, r27
    66fa:	51 e1       	ldi	r21, 0x11	; 17
    66fc:	07 c0       	rjmp	.+14     	; 0x670c <__udivmodhi4_ep>

000066fe <__udivmodhi4_loop>:
    66fe:	aa 1f       	adc	r26, r26
    6700:	bb 1f       	adc	r27, r27
    6702:	a6 17       	cp	r26, r22
    6704:	b7 07       	cpc	r27, r23
    6706:	10 f0       	brcs	.+4      	; 0x670c <__udivmodhi4_ep>
    6708:	a6 1b       	sub	r26, r22
    670a:	b7 0b       	sbc	r27, r23

0000670c <__udivmodhi4_ep>:
    670c:	88 1f       	adc	r24, r24
    670e:	99 1f       	adc	r25, r25
    6710:	5a 95       	dec	r21
    6712:	a9 f7       	brne	.-22     	; 0x66fe <__udivmodhi4_loop>
    6714:	80 95       	com	r24
    6716:	90 95       	com	r25
    6718:	bc 01       	movw	r22, r24
    671a:	cd 01       	movw	r24, r26
    671c:	08 95       	ret

0000671e <__tablejump2__>:
    671e:	ee 0f       	add	r30, r30
    6720:	ff 1f       	adc	r31, r31
    6722:	88 1f       	adc	r24, r24
    6724:	8b bf       	out	0x3b, r24	; 59
    6726:	07 90       	elpm	r0, Z+
    6728:	f6 91       	elpm	r31, Z
    672a:	e0 2d       	mov	r30, r0
    672c:	1b be       	out	0x3b, r1	; 59
    672e:	19 94       	eijmp

00006730 <__umulhisi3>:
    6730:	a2 9f       	mul	r26, r18
    6732:	b0 01       	movw	r22, r0
    6734:	b3 9f       	mul	r27, r19
    6736:	c0 01       	movw	r24, r0
    6738:	a3 9f       	mul	r26, r19
    673a:	70 0d       	add	r23, r0
    673c:	81 1d       	adc	r24, r1
    673e:	11 24       	eor	r1, r1
    6740:	91 1d       	adc	r25, r1
    6742:	b2 9f       	mul	r27, r18
    6744:	70 0d       	add	r23, r0
    6746:	81 1d       	adc	r24, r1
    6748:	11 24       	eor	r1, r1
    674a:	91 1d       	adc	r25, r1
    674c:	08 95       	ret

0000674e <calloc>:
    674e:	0f 93       	push	r16
    6750:	1f 93       	push	r17
    6752:	cf 93       	push	r28
    6754:	df 93       	push	r29
    6756:	86 9f       	mul	r24, r22
    6758:	80 01       	movw	r16, r0
    675a:	87 9f       	mul	r24, r23
    675c:	10 0d       	add	r17, r0
    675e:	96 9f       	mul	r25, r22
    6760:	10 0d       	add	r17, r0
    6762:	11 24       	eor	r1, r1
    6764:	c8 01       	movw	r24, r16
    6766:	0d d0       	rcall	.+26     	; 0x6782 <malloc>
    6768:	ec 01       	movw	r28, r24
    676a:	00 97       	sbiw	r24, 0x00	; 0
    676c:	21 f0       	breq	.+8      	; 0x6776 <calloc+0x28>
    676e:	a8 01       	movw	r20, r16
    6770:	60 e0       	ldi	r22, 0x00	; 0
    6772:	70 e0       	ldi	r23, 0x00	; 0
    6774:	59 d1       	rcall	.+690    	; 0x6a28 <memset>
    6776:	ce 01       	movw	r24, r28
    6778:	df 91       	pop	r29
    677a:	cf 91       	pop	r28
    677c:	1f 91       	pop	r17
    677e:	0f 91       	pop	r16
    6780:	08 95       	ret

00006782 <malloc>:
    6782:	cf 93       	push	r28
    6784:	df 93       	push	r29
    6786:	82 30       	cpi	r24, 0x02	; 2
    6788:	91 05       	cpc	r25, r1
    678a:	10 f4       	brcc	.+4      	; 0x6790 <malloc+0xe>
    678c:	82 e0       	ldi	r24, 0x02	; 2
    678e:	90 e0       	ldi	r25, 0x00	; 0
    6790:	e0 91 5f 33 	lds	r30, 0x335F	; 0x80335f <__flp>
    6794:	f0 91 60 33 	lds	r31, 0x3360	; 0x803360 <__flp+0x1>
    6798:	20 e0       	ldi	r18, 0x00	; 0
    679a:	30 e0       	ldi	r19, 0x00	; 0
    679c:	c0 e0       	ldi	r28, 0x00	; 0
    679e:	d0 e0       	ldi	r29, 0x00	; 0
    67a0:	30 97       	sbiw	r30, 0x00	; 0
    67a2:	11 f1       	breq	.+68     	; 0x67e8 <malloc+0x66>
    67a4:	40 81       	ld	r20, Z
    67a6:	51 81       	ldd	r21, Z+1	; 0x01
    67a8:	48 17       	cp	r20, r24
    67aa:	59 07       	cpc	r21, r25
    67ac:	c0 f0       	brcs	.+48     	; 0x67de <malloc+0x5c>
    67ae:	48 17       	cp	r20, r24
    67b0:	59 07       	cpc	r21, r25
    67b2:	61 f4       	brne	.+24     	; 0x67cc <malloc+0x4a>
    67b4:	82 81       	ldd	r24, Z+2	; 0x02
    67b6:	93 81       	ldd	r25, Z+3	; 0x03
    67b8:	20 97       	sbiw	r28, 0x00	; 0
    67ba:	19 f0       	breq	.+6      	; 0x67c2 <malloc+0x40>
    67bc:	8a 83       	std	Y+2, r24	; 0x02
    67be:	9b 83       	std	Y+3, r25	; 0x03
    67c0:	2b c0       	rjmp	.+86     	; 0x6818 <malloc+0x96>
    67c2:	80 93 5f 33 	sts	0x335F, r24	; 0x80335f <__flp>
    67c6:	90 93 60 33 	sts	0x3360, r25	; 0x803360 <__flp+0x1>
    67ca:	26 c0       	rjmp	.+76     	; 0x6818 <malloc+0x96>
    67cc:	21 15       	cp	r18, r1
    67ce:	31 05       	cpc	r19, r1
    67d0:	19 f0       	breq	.+6      	; 0x67d8 <malloc+0x56>
    67d2:	42 17       	cp	r20, r18
    67d4:	53 07       	cpc	r21, r19
    67d6:	18 f4       	brcc	.+6      	; 0x67de <malloc+0x5c>
    67d8:	9a 01       	movw	r18, r20
    67da:	be 01       	movw	r22, r28
    67dc:	df 01       	movw	r26, r30
    67de:	ef 01       	movw	r28, r30
    67e0:	02 80       	ldd	r0, Z+2	; 0x02
    67e2:	f3 81       	ldd	r31, Z+3	; 0x03
    67e4:	e0 2d       	mov	r30, r0
    67e6:	dc cf       	rjmp	.-72     	; 0x67a0 <malloc+0x1e>
    67e8:	21 15       	cp	r18, r1
    67ea:	31 05       	cpc	r19, r1
    67ec:	09 f1       	breq	.+66     	; 0x6830 <malloc+0xae>
    67ee:	28 1b       	sub	r18, r24
    67f0:	39 0b       	sbc	r19, r25
    67f2:	24 30       	cpi	r18, 0x04	; 4
    67f4:	31 05       	cpc	r19, r1
    67f6:	90 f4       	brcc	.+36     	; 0x681c <malloc+0x9a>
    67f8:	12 96       	adiw	r26, 0x02	; 2
    67fa:	8d 91       	ld	r24, X+
    67fc:	9c 91       	ld	r25, X
    67fe:	13 97       	sbiw	r26, 0x03	; 3
    6800:	61 15       	cp	r22, r1
    6802:	71 05       	cpc	r23, r1
    6804:	21 f0       	breq	.+8      	; 0x680e <malloc+0x8c>
    6806:	fb 01       	movw	r30, r22
    6808:	82 83       	std	Z+2, r24	; 0x02
    680a:	93 83       	std	Z+3, r25	; 0x03
    680c:	04 c0       	rjmp	.+8      	; 0x6816 <malloc+0x94>
    680e:	80 93 5f 33 	sts	0x335F, r24	; 0x80335f <__flp>
    6812:	90 93 60 33 	sts	0x3360, r25	; 0x803360 <__flp+0x1>
    6816:	fd 01       	movw	r30, r26
    6818:	32 96       	adiw	r30, 0x02	; 2
    681a:	44 c0       	rjmp	.+136    	; 0x68a4 <malloc+0x122>
    681c:	fd 01       	movw	r30, r26
    681e:	e2 0f       	add	r30, r18
    6820:	f3 1f       	adc	r31, r19
    6822:	81 93       	st	Z+, r24
    6824:	91 93       	st	Z+, r25
    6826:	22 50       	subi	r18, 0x02	; 2
    6828:	31 09       	sbc	r19, r1
    682a:	2d 93       	st	X+, r18
    682c:	3c 93       	st	X, r19
    682e:	3a c0       	rjmp	.+116    	; 0x68a4 <malloc+0x122>
    6830:	20 91 5d 33 	lds	r18, 0x335D	; 0x80335d <__brkval>
    6834:	30 91 5e 33 	lds	r19, 0x335E	; 0x80335e <__brkval+0x1>
    6838:	23 2b       	or	r18, r19
    683a:	41 f4       	brne	.+16     	; 0x684c <malloc+0xca>
    683c:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    6840:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    6844:	20 93 5d 33 	sts	0x335D, r18	; 0x80335d <__brkval>
    6848:	30 93 5e 33 	sts	0x335E, r19	; 0x80335e <__brkval+0x1>
    684c:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    6850:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    6854:	21 15       	cp	r18, r1
    6856:	31 05       	cpc	r19, r1
    6858:	41 f4       	brne	.+16     	; 0x686a <malloc+0xe8>
    685a:	2d b7       	in	r18, 0x3d	; 61
    685c:	3e b7       	in	r19, 0x3e	; 62
    685e:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    6862:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    6866:	24 1b       	sub	r18, r20
    6868:	35 0b       	sbc	r19, r21
    686a:	e0 91 5d 33 	lds	r30, 0x335D	; 0x80335d <__brkval>
    686e:	f0 91 5e 33 	lds	r31, 0x335E	; 0x80335e <__brkval+0x1>
    6872:	e2 17       	cp	r30, r18
    6874:	f3 07       	cpc	r31, r19
    6876:	a0 f4       	brcc	.+40     	; 0x68a0 <malloc+0x11e>
    6878:	2e 1b       	sub	r18, r30
    687a:	3f 0b       	sbc	r19, r31
    687c:	28 17       	cp	r18, r24
    687e:	39 07       	cpc	r19, r25
    6880:	78 f0       	brcs	.+30     	; 0x68a0 <malloc+0x11e>
    6882:	ac 01       	movw	r20, r24
    6884:	4e 5f       	subi	r20, 0xFE	; 254
    6886:	5f 4f       	sbci	r21, 0xFF	; 255
    6888:	24 17       	cp	r18, r20
    688a:	35 07       	cpc	r19, r21
    688c:	48 f0       	brcs	.+18     	; 0x68a0 <malloc+0x11e>
    688e:	4e 0f       	add	r20, r30
    6890:	5f 1f       	adc	r21, r31
    6892:	40 93 5d 33 	sts	0x335D, r20	; 0x80335d <__brkval>
    6896:	50 93 5e 33 	sts	0x335E, r21	; 0x80335e <__brkval+0x1>
    689a:	81 93       	st	Z+, r24
    689c:	91 93       	st	Z+, r25
    689e:	02 c0       	rjmp	.+4      	; 0x68a4 <malloc+0x122>
    68a0:	e0 e0       	ldi	r30, 0x00	; 0
    68a2:	f0 e0       	ldi	r31, 0x00	; 0
    68a4:	cf 01       	movw	r24, r30
    68a6:	df 91       	pop	r29
    68a8:	cf 91       	pop	r28
    68aa:	08 95       	ret

000068ac <free>:
    68ac:	0f 93       	push	r16
    68ae:	1f 93       	push	r17
    68b0:	cf 93       	push	r28
    68b2:	df 93       	push	r29
    68b4:	00 97       	sbiw	r24, 0x00	; 0
    68b6:	09 f4       	brne	.+2      	; 0x68ba <free+0xe>
    68b8:	8c c0       	rjmp	.+280    	; 0x69d2 <free+0x126>
    68ba:	fc 01       	movw	r30, r24
    68bc:	32 97       	sbiw	r30, 0x02	; 2
    68be:	12 82       	std	Z+2, r1	; 0x02
    68c0:	13 82       	std	Z+3, r1	; 0x03
    68c2:	00 91 5f 33 	lds	r16, 0x335F	; 0x80335f <__flp>
    68c6:	10 91 60 33 	lds	r17, 0x3360	; 0x803360 <__flp+0x1>
    68ca:	01 15       	cp	r16, r1
    68cc:	11 05       	cpc	r17, r1
    68ce:	81 f4       	brne	.+32     	; 0x68f0 <free+0x44>
    68d0:	20 81       	ld	r18, Z
    68d2:	31 81       	ldd	r19, Z+1	; 0x01
    68d4:	82 0f       	add	r24, r18
    68d6:	93 1f       	adc	r25, r19
    68d8:	20 91 5d 33 	lds	r18, 0x335D	; 0x80335d <__brkval>
    68dc:	30 91 5e 33 	lds	r19, 0x335E	; 0x80335e <__brkval+0x1>
    68e0:	28 17       	cp	r18, r24
    68e2:	39 07       	cpc	r19, r25
    68e4:	79 f5       	brne	.+94     	; 0x6944 <free+0x98>
    68e6:	e0 93 5d 33 	sts	0x335D, r30	; 0x80335d <__brkval>
    68ea:	f0 93 5e 33 	sts	0x335E, r31	; 0x80335e <__brkval+0x1>
    68ee:	71 c0       	rjmp	.+226    	; 0x69d2 <free+0x126>
    68f0:	d8 01       	movw	r26, r16
    68f2:	40 e0       	ldi	r20, 0x00	; 0
    68f4:	50 e0       	ldi	r21, 0x00	; 0
    68f6:	ae 17       	cp	r26, r30
    68f8:	bf 07       	cpc	r27, r31
    68fa:	50 f4       	brcc	.+20     	; 0x6910 <free+0x64>
    68fc:	12 96       	adiw	r26, 0x02	; 2
    68fe:	2d 91       	ld	r18, X+
    6900:	3c 91       	ld	r19, X
    6902:	13 97       	sbiw	r26, 0x03	; 3
    6904:	ad 01       	movw	r20, r26
    6906:	21 15       	cp	r18, r1
    6908:	31 05       	cpc	r19, r1
    690a:	09 f1       	breq	.+66     	; 0x694e <free+0xa2>
    690c:	d9 01       	movw	r26, r18
    690e:	f3 cf       	rjmp	.-26     	; 0x68f6 <free+0x4a>
    6910:	9d 01       	movw	r18, r26
    6912:	da 01       	movw	r26, r20
    6914:	22 83       	std	Z+2, r18	; 0x02
    6916:	33 83       	std	Z+3, r19	; 0x03
    6918:	60 81       	ld	r22, Z
    691a:	71 81       	ldd	r23, Z+1	; 0x01
    691c:	86 0f       	add	r24, r22
    691e:	97 1f       	adc	r25, r23
    6920:	82 17       	cp	r24, r18
    6922:	93 07       	cpc	r25, r19
    6924:	69 f4       	brne	.+26     	; 0x6940 <free+0x94>
    6926:	ec 01       	movw	r28, r24
    6928:	28 81       	ld	r18, Y
    692a:	39 81       	ldd	r19, Y+1	; 0x01
    692c:	26 0f       	add	r18, r22
    692e:	37 1f       	adc	r19, r23
    6930:	2e 5f       	subi	r18, 0xFE	; 254
    6932:	3f 4f       	sbci	r19, 0xFF	; 255
    6934:	20 83       	st	Z, r18
    6936:	31 83       	std	Z+1, r19	; 0x01
    6938:	8a 81       	ldd	r24, Y+2	; 0x02
    693a:	9b 81       	ldd	r25, Y+3	; 0x03
    693c:	82 83       	std	Z+2, r24	; 0x02
    693e:	93 83       	std	Z+3, r25	; 0x03
    6940:	45 2b       	or	r20, r21
    6942:	29 f4       	brne	.+10     	; 0x694e <free+0xa2>
    6944:	e0 93 5f 33 	sts	0x335F, r30	; 0x80335f <__flp>
    6948:	f0 93 60 33 	sts	0x3360, r31	; 0x803360 <__flp+0x1>
    694c:	42 c0       	rjmp	.+132    	; 0x69d2 <free+0x126>
    694e:	12 96       	adiw	r26, 0x02	; 2
    6950:	ed 93       	st	X+, r30
    6952:	fc 93       	st	X, r31
    6954:	13 97       	sbiw	r26, 0x03	; 3
    6956:	ed 01       	movw	r28, r26
    6958:	49 91       	ld	r20, Y+
    695a:	59 91       	ld	r21, Y+
    695c:	9e 01       	movw	r18, r28
    695e:	24 0f       	add	r18, r20
    6960:	35 1f       	adc	r19, r21
    6962:	e2 17       	cp	r30, r18
    6964:	f3 07       	cpc	r31, r19
    6966:	71 f4       	brne	.+28     	; 0x6984 <free+0xd8>
    6968:	80 81       	ld	r24, Z
    696a:	91 81       	ldd	r25, Z+1	; 0x01
    696c:	84 0f       	add	r24, r20
    696e:	95 1f       	adc	r25, r21
    6970:	02 96       	adiw	r24, 0x02	; 2
    6972:	8d 93       	st	X+, r24
    6974:	9c 93       	st	X, r25
    6976:	11 97       	sbiw	r26, 0x01	; 1
    6978:	82 81       	ldd	r24, Z+2	; 0x02
    697a:	93 81       	ldd	r25, Z+3	; 0x03
    697c:	12 96       	adiw	r26, 0x02	; 2
    697e:	8d 93       	st	X+, r24
    6980:	9c 93       	st	X, r25
    6982:	13 97       	sbiw	r26, 0x03	; 3
    6984:	e0 e0       	ldi	r30, 0x00	; 0
    6986:	f0 e0       	ldi	r31, 0x00	; 0
    6988:	d8 01       	movw	r26, r16
    698a:	12 96       	adiw	r26, 0x02	; 2
    698c:	8d 91       	ld	r24, X+
    698e:	9c 91       	ld	r25, X
    6990:	13 97       	sbiw	r26, 0x03	; 3
    6992:	00 97       	sbiw	r24, 0x00	; 0
    6994:	19 f0       	breq	.+6      	; 0x699c <free+0xf0>
    6996:	f8 01       	movw	r30, r16
    6998:	8c 01       	movw	r16, r24
    699a:	f6 cf       	rjmp	.-20     	; 0x6988 <free+0xdc>
    699c:	8d 91       	ld	r24, X+
    699e:	9c 91       	ld	r25, X
    69a0:	98 01       	movw	r18, r16
    69a2:	2e 5f       	subi	r18, 0xFE	; 254
    69a4:	3f 4f       	sbci	r19, 0xFF	; 255
    69a6:	82 0f       	add	r24, r18
    69a8:	93 1f       	adc	r25, r19
    69aa:	20 91 5d 33 	lds	r18, 0x335D	; 0x80335d <__brkval>
    69ae:	30 91 5e 33 	lds	r19, 0x335E	; 0x80335e <__brkval+0x1>
    69b2:	28 17       	cp	r18, r24
    69b4:	39 07       	cpc	r19, r25
    69b6:	69 f4       	brne	.+26     	; 0x69d2 <free+0x126>
    69b8:	30 97       	sbiw	r30, 0x00	; 0
    69ba:	29 f4       	brne	.+10     	; 0x69c6 <free+0x11a>
    69bc:	10 92 5f 33 	sts	0x335F, r1	; 0x80335f <__flp>
    69c0:	10 92 60 33 	sts	0x3360, r1	; 0x803360 <__flp+0x1>
    69c4:	02 c0       	rjmp	.+4      	; 0x69ca <free+0x11e>
    69c6:	12 82       	std	Z+2, r1	; 0x02
    69c8:	13 82       	std	Z+3, r1	; 0x03
    69ca:	00 93 5d 33 	sts	0x335D, r16	; 0x80335d <__brkval>
    69ce:	10 93 5e 33 	sts	0x335E, r17	; 0x80335e <__brkval+0x1>
    69d2:	df 91       	pop	r29
    69d4:	cf 91       	pop	r28
    69d6:	1f 91       	pop	r17
    69d8:	0f 91       	pop	r16
    69da:	08 95       	ret

000069dc <atoi>:
    69dc:	fc 01       	movw	r30, r24
    69de:	88 27       	eor	r24, r24
    69e0:	99 27       	eor	r25, r25
    69e2:	e8 94       	clt
    69e4:	21 91       	ld	r18, Z+
    69e6:	20 32       	cpi	r18, 0x20	; 32
    69e8:	e9 f3       	breq	.-6      	; 0x69e4 <atoi+0x8>
    69ea:	29 30       	cpi	r18, 0x09	; 9
    69ec:	10 f0       	brcs	.+4      	; 0x69f2 <atoi+0x16>
    69ee:	2e 30       	cpi	r18, 0x0E	; 14
    69f0:	c8 f3       	brcs	.-14     	; 0x69e4 <atoi+0x8>
    69f2:	2b 32       	cpi	r18, 0x2B	; 43
    69f4:	39 f0       	breq	.+14     	; 0x6a04 <atoi+0x28>
    69f6:	2d 32       	cpi	r18, 0x2D	; 45
    69f8:	31 f4       	brne	.+12     	; 0x6a06 <atoi+0x2a>
    69fa:	68 94       	set
    69fc:	03 c0       	rjmp	.+6      	; 0x6a04 <atoi+0x28>
    69fe:	2e d0       	rcall	.+92     	; 0x6a5c <__mulhi_const_10>
    6a00:	82 0f       	add	r24, r18
    6a02:	91 1d       	adc	r25, r1
    6a04:	21 91       	ld	r18, Z+
    6a06:	20 53       	subi	r18, 0x30	; 48
    6a08:	2a 30       	cpi	r18, 0x0A	; 10
    6a0a:	c8 f3       	brcs	.-14     	; 0x69fe <atoi+0x22>
    6a0c:	1e f4       	brtc	.+6      	; 0x6a14 <atoi+0x38>
    6a0e:	90 95       	com	r25
    6a10:	81 95       	neg	r24
    6a12:	9f 4f       	sbci	r25, 0xFF	; 255
    6a14:	08 95       	ret

00006a16 <memcpy>:
    6a16:	fb 01       	movw	r30, r22
    6a18:	dc 01       	movw	r26, r24
    6a1a:	02 c0       	rjmp	.+4      	; 0x6a20 <memcpy+0xa>
    6a1c:	01 90       	ld	r0, Z+
    6a1e:	0d 92       	st	X+, r0
    6a20:	41 50       	subi	r20, 0x01	; 1
    6a22:	50 40       	sbci	r21, 0x00	; 0
    6a24:	d8 f7       	brcc	.-10     	; 0x6a1c <memcpy+0x6>
    6a26:	08 95       	ret

00006a28 <memset>:
    6a28:	dc 01       	movw	r26, r24
    6a2a:	01 c0       	rjmp	.+2      	; 0x6a2e <memset+0x6>
    6a2c:	6d 93       	st	X+, r22
    6a2e:	41 50       	subi	r20, 0x01	; 1
    6a30:	50 40       	sbci	r21, 0x00	; 0
    6a32:	e0 f7       	brcc	.-8      	; 0x6a2c <memset+0x4>
    6a34:	08 95       	ret

00006a36 <strcmp>:
    6a36:	fb 01       	movw	r30, r22
    6a38:	dc 01       	movw	r26, r24
    6a3a:	8d 91       	ld	r24, X+
    6a3c:	01 90       	ld	r0, Z+
    6a3e:	80 19       	sub	r24, r0
    6a40:	01 10       	cpse	r0, r1
    6a42:	d9 f3       	breq	.-10     	; 0x6a3a <strcmp+0x4>
    6a44:	99 0b       	sbc	r25, r25
    6a46:	08 95       	ret

00006a48 <__itoa_ncheck>:
    6a48:	bb 27       	eor	r27, r27
    6a4a:	4a 30       	cpi	r20, 0x0A	; 10
    6a4c:	31 f4       	brne	.+12     	; 0x6a5a <__itoa_ncheck+0x12>
    6a4e:	99 23       	and	r25, r25
    6a50:	22 f4       	brpl	.+8      	; 0x6a5a <__itoa_ncheck+0x12>
    6a52:	bd e2       	ldi	r27, 0x2D	; 45
    6a54:	90 95       	com	r25
    6a56:	81 95       	neg	r24
    6a58:	9f 4f       	sbci	r25, 0xFF	; 255
    6a5a:	09 c0       	rjmp	.+18     	; 0x6a6e <__utoa_common>

00006a5c <__mulhi_const_10>:
    6a5c:	7a e0       	ldi	r23, 0x0A	; 10
    6a5e:	97 9f       	mul	r25, r23
    6a60:	90 2d       	mov	r25, r0
    6a62:	87 9f       	mul	r24, r23
    6a64:	80 2d       	mov	r24, r0
    6a66:	91 0d       	add	r25, r1
    6a68:	11 24       	eor	r1, r1
    6a6a:	08 95       	ret

00006a6c <__utoa_ncheck>:
    6a6c:	bb 27       	eor	r27, r27

00006a6e <__utoa_common>:
    6a6e:	fb 01       	movw	r30, r22
    6a70:	55 27       	eor	r21, r21
    6a72:	aa 27       	eor	r26, r26
    6a74:	88 0f       	add	r24, r24
    6a76:	99 1f       	adc	r25, r25
    6a78:	aa 1f       	adc	r26, r26
    6a7a:	a4 17       	cp	r26, r20
    6a7c:	10 f0       	brcs	.+4      	; 0x6a82 <__utoa_common+0x14>
    6a7e:	a4 1b       	sub	r26, r20
    6a80:	83 95       	inc	r24
    6a82:	50 51       	subi	r21, 0x10	; 16
    6a84:	b9 f7       	brne	.-18     	; 0x6a74 <__utoa_common+0x6>
    6a86:	a0 5d       	subi	r26, 0xD0	; 208
    6a88:	aa 33       	cpi	r26, 0x3A	; 58
    6a8a:	08 f0       	brcs	.+2      	; 0x6a8e <__utoa_common+0x20>
    6a8c:	a9 5d       	subi	r26, 0xD9	; 217
    6a8e:	a1 93       	st	Z+, r26
    6a90:	00 97       	sbiw	r24, 0x00	; 0
    6a92:	79 f7       	brne	.-34     	; 0x6a72 <__utoa_common+0x4>
    6a94:	b1 11       	cpse	r27, r1
    6a96:	b1 93       	st	Z+, r27
    6a98:	11 92       	st	Z+, r1
    6a9a:	cb 01       	movw	r24, r22
    6a9c:	68 c2       	rjmp	.+1232   	; 0x6f6e <strrev>

00006a9e <printf>:
    6a9e:	cf 93       	push	r28
    6aa0:	df 93       	push	r29
    6aa2:	cd b7       	in	r28, 0x3d	; 61
    6aa4:	de b7       	in	r29, 0x3e	; 62
    6aa6:	ae 01       	movw	r20, r28
    6aa8:	4a 5f       	subi	r20, 0xFA	; 250
    6aaa:	5f 4f       	sbci	r21, 0xFF	; 255
    6aac:	fa 01       	movw	r30, r20
    6aae:	61 91       	ld	r22, Z+
    6ab0:	71 91       	ld	r23, Z+
    6ab2:	af 01       	movw	r20, r30
    6ab4:	80 91 63 33 	lds	r24, 0x3363	; 0x803363 <__iob+0x2>
    6ab8:	90 91 64 33 	lds	r25, 0x3364	; 0x803364 <__iob+0x3>
    6abc:	5a d0       	rcall	.+180    	; 0x6b72 <vfprintf>
    6abe:	df 91       	pop	r29
    6ac0:	cf 91       	pop	r28
    6ac2:	08 95       	ret

00006ac4 <printf_P>:
    6ac4:	0f 93       	push	r16
    6ac6:	1f 93       	push	r17
    6ac8:	cf 93       	push	r28
    6aca:	df 93       	push	r29
    6acc:	cd b7       	in	r28, 0x3d	; 61
    6ace:	de b7       	in	r29, 0x3e	; 62
    6ad0:	ae 01       	movw	r20, r28
    6ad2:	48 5f       	subi	r20, 0xF8	; 248
    6ad4:	5f 4f       	sbci	r21, 0xFF	; 255
    6ad6:	da 01       	movw	r26, r20
    6ad8:	6d 91       	ld	r22, X+
    6ada:	7d 91       	ld	r23, X+
    6adc:	ad 01       	movw	r20, r26
    6ade:	01 e6       	ldi	r16, 0x61	; 97
    6ae0:	13 e3       	ldi	r17, 0x33	; 51
    6ae2:	f8 01       	movw	r30, r16
    6ae4:	82 81       	ldd	r24, Z+2	; 0x02
    6ae6:	93 81       	ldd	r25, Z+3	; 0x03
    6ae8:	dc 01       	movw	r26, r24
    6aea:	13 96       	adiw	r26, 0x03	; 3
    6aec:	2c 91       	ld	r18, X
    6aee:	13 97       	sbiw	r26, 0x03	; 3
    6af0:	28 60       	ori	r18, 0x08	; 8
    6af2:	13 96       	adiw	r26, 0x03	; 3
    6af4:	2c 93       	st	X, r18
    6af6:	3d d0       	rcall	.+122    	; 0x6b72 <vfprintf>
    6af8:	d8 01       	movw	r26, r16
    6afa:	12 96       	adiw	r26, 0x02	; 2
    6afc:	ed 91       	ld	r30, X+
    6afe:	fc 91       	ld	r31, X
    6b00:	13 97       	sbiw	r26, 0x03	; 3
    6b02:	23 81       	ldd	r18, Z+3	; 0x03
    6b04:	27 7f       	andi	r18, 0xF7	; 247
    6b06:	23 83       	std	Z+3, r18	; 0x03
    6b08:	df 91       	pop	r29
    6b0a:	cf 91       	pop	r28
    6b0c:	1f 91       	pop	r17
    6b0e:	0f 91       	pop	r16
    6b10:	08 95       	ret

00006b12 <puts>:
    6b12:	0f 93       	push	r16
    6b14:	1f 93       	push	r17
    6b16:	cf 93       	push	r28
    6b18:	df 93       	push	r29
    6b1a:	e0 91 63 33 	lds	r30, 0x3363	; 0x803363 <__iob+0x2>
    6b1e:	f0 91 64 33 	lds	r31, 0x3364	; 0x803364 <__iob+0x3>
    6b22:	23 81       	ldd	r18, Z+3	; 0x03
    6b24:	21 ff       	sbrs	r18, 1
    6b26:	1b c0       	rjmp	.+54     	; 0x6b5e <puts+0x4c>
    6b28:	8c 01       	movw	r16, r24
    6b2a:	d0 e0       	ldi	r29, 0x00	; 0
    6b2c:	c0 e0       	ldi	r28, 0x00	; 0
    6b2e:	f8 01       	movw	r30, r16
    6b30:	81 91       	ld	r24, Z+
    6b32:	8f 01       	movw	r16, r30
    6b34:	60 91 63 33 	lds	r22, 0x3363	; 0x803363 <__iob+0x2>
    6b38:	70 91 64 33 	lds	r23, 0x3364	; 0x803364 <__iob+0x3>
    6b3c:	db 01       	movw	r26, r22
    6b3e:	18 96       	adiw	r26, 0x08	; 8
    6b40:	ed 91       	ld	r30, X+
    6b42:	fc 91       	ld	r31, X
    6b44:	19 97       	sbiw	r26, 0x09	; 9
    6b46:	88 23       	and	r24, r24
    6b48:	31 f0       	breq	.+12     	; 0x6b56 <puts+0x44>
    6b4a:	19 95       	eicall
    6b4c:	89 2b       	or	r24, r25
    6b4e:	79 f3       	breq	.-34     	; 0x6b2e <puts+0x1c>
    6b50:	df ef       	ldi	r29, 0xFF	; 255
    6b52:	cf ef       	ldi	r28, 0xFF	; 255
    6b54:	ec cf       	rjmp	.-40     	; 0x6b2e <puts+0x1c>
    6b56:	8a e0       	ldi	r24, 0x0A	; 10
    6b58:	19 95       	eicall
    6b5a:	89 2b       	or	r24, r25
    6b5c:	19 f0       	breq	.+6      	; 0x6b64 <puts+0x52>
    6b5e:	8f ef       	ldi	r24, 0xFF	; 255
    6b60:	9f ef       	ldi	r25, 0xFF	; 255
    6b62:	02 c0       	rjmp	.+4      	; 0x6b68 <puts+0x56>
    6b64:	8d 2f       	mov	r24, r29
    6b66:	9c 2f       	mov	r25, r28
    6b68:	df 91       	pop	r29
    6b6a:	cf 91       	pop	r28
    6b6c:	1f 91       	pop	r17
    6b6e:	0f 91       	pop	r16
    6b70:	08 95       	ret

00006b72 <vfprintf>:
    6b72:	2f 92       	push	r2
    6b74:	3f 92       	push	r3
    6b76:	4f 92       	push	r4
    6b78:	5f 92       	push	r5
    6b7a:	6f 92       	push	r6
    6b7c:	7f 92       	push	r7
    6b7e:	8f 92       	push	r8
    6b80:	9f 92       	push	r9
    6b82:	af 92       	push	r10
    6b84:	bf 92       	push	r11
    6b86:	cf 92       	push	r12
    6b88:	df 92       	push	r13
    6b8a:	ef 92       	push	r14
    6b8c:	ff 92       	push	r15
    6b8e:	0f 93       	push	r16
    6b90:	1f 93       	push	r17
    6b92:	cf 93       	push	r28
    6b94:	df 93       	push	r29
    6b96:	cd b7       	in	r28, 0x3d	; 61
    6b98:	de b7       	in	r29, 0x3e	; 62
    6b9a:	2c 97       	sbiw	r28, 0x0c	; 12
    6b9c:	cd bf       	out	0x3d, r28	; 61
    6b9e:	de bf       	out	0x3e, r29	; 62
    6ba0:	7c 01       	movw	r14, r24
    6ba2:	6b 01       	movw	r12, r22
    6ba4:	8a 01       	movw	r16, r20
    6ba6:	fc 01       	movw	r30, r24
    6ba8:	16 82       	std	Z+6, r1	; 0x06
    6baa:	17 82       	std	Z+7, r1	; 0x07
    6bac:	83 81       	ldd	r24, Z+3	; 0x03
    6bae:	81 ff       	sbrs	r24, 1
    6bb0:	b0 c1       	rjmp	.+864    	; 0x6f12 <vfprintf+0x3a0>
    6bb2:	ce 01       	movw	r24, r28
    6bb4:	01 96       	adiw	r24, 0x01	; 1
    6bb6:	4c 01       	movw	r8, r24
    6bb8:	f7 01       	movw	r30, r14
    6bba:	93 81       	ldd	r25, Z+3	; 0x03
    6bbc:	f6 01       	movw	r30, r12
    6bbe:	93 fd       	sbrc	r25, 3
    6bc0:	85 91       	lpm	r24, Z+
    6bc2:	93 ff       	sbrs	r25, 3
    6bc4:	81 91       	ld	r24, Z+
    6bc6:	6f 01       	movw	r12, r30
    6bc8:	88 23       	and	r24, r24
    6bca:	09 f4       	brne	.+2      	; 0x6bce <vfprintf+0x5c>
    6bcc:	9e c1       	rjmp	.+828    	; 0x6f0a <vfprintf+0x398>
    6bce:	85 32       	cpi	r24, 0x25	; 37
    6bd0:	39 f4       	brne	.+14     	; 0x6be0 <vfprintf+0x6e>
    6bd2:	93 fd       	sbrc	r25, 3
    6bd4:	85 91       	lpm	r24, Z+
    6bd6:	93 ff       	sbrs	r25, 3
    6bd8:	81 91       	ld	r24, Z+
    6bda:	6f 01       	movw	r12, r30
    6bdc:	85 32       	cpi	r24, 0x25	; 37
    6bde:	21 f4       	brne	.+8      	; 0x6be8 <vfprintf+0x76>
    6be0:	b7 01       	movw	r22, r14
    6be2:	90 e0       	ldi	r25, 0x00	; 0
    6be4:	d4 d1       	rcall	.+936    	; 0x6f8e <fputc>
    6be6:	e8 cf       	rjmp	.-48     	; 0x6bb8 <vfprintf+0x46>
    6be8:	51 2c       	mov	r5, r1
    6bea:	31 2c       	mov	r3, r1
    6bec:	20 e0       	ldi	r18, 0x00	; 0
    6bee:	20 32       	cpi	r18, 0x20	; 32
    6bf0:	a0 f4       	brcc	.+40     	; 0x6c1a <vfprintf+0xa8>
    6bf2:	8b 32       	cpi	r24, 0x2B	; 43
    6bf4:	69 f0       	breq	.+26     	; 0x6c10 <vfprintf+0x9e>
    6bf6:	30 f4       	brcc	.+12     	; 0x6c04 <vfprintf+0x92>
    6bf8:	80 32       	cpi	r24, 0x20	; 32
    6bfa:	59 f0       	breq	.+22     	; 0x6c12 <vfprintf+0xa0>
    6bfc:	83 32       	cpi	r24, 0x23	; 35
    6bfe:	69 f4       	brne	.+26     	; 0x6c1a <vfprintf+0xa8>
    6c00:	20 61       	ori	r18, 0x10	; 16
    6c02:	2c c0       	rjmp	.+88     	; 0x6c5c <vfprintf+0xea>
    6c04:	8d 32       	cpi	r24, 0x2D	; 45
    6c06:	39 f0       	breq	.+14     	; 0x6c16 <vfprintf+0xa4>
    6c08:	80 33       	cpi	r24, 0x30	; 48
    6c0a:	39 f4       	brne	.+14     	; 0x6c1a <vfprintf+0xa8>
    6c0c:	21 60       	ori	r18, 0x01	; 1
    6c0e:	26 c0       	rjmp	.+76     	; 0x6c5c <vfprintf+0xea>
    6c10:	22 60       	ori	r18, 0x02	; 2
    6c12:	24 60       	ori	r18, 0x04	; 4
    6c14:	23 c0       	rjmp	.+70     	; 0x6c5c <vfprintf+0xea>
    6c16:	28 60       	ori	r18, 0x08	; 8
    6c18:	21 c0       	rjmp	.+66     	; 0x6c5c <vfprintf+0xea>
    6c1a:	27 fd       	sbrc	r18, 7
    6c1c:	27 c0       	rjmp	.+78     	; 0x6c6c <vfprintf+0xfa>
    6c1e:	30 ed       	ldi	r19, 0xD0	; 208
    6c20:	38 0f       	add	r19, r24
    6c22:	3a 30       	cpi	r19, 0x0A	; 10
    6c24:	78 f4       	brcc	.+30     	; 0x6c44 <vfprintf+0xd2>
    6c26:	26 ff       	sbrs	r18, 6
    6c28:	06 c0       	rjmp	.+12     	; 0x6c36 <vfprintf+0xc4>
    6c2a:	fa e0       	ldi	r31, 0x0A	; 10
    6c2c:	5f 9e       	mul	r5, r31
    6c2e:	30 0d       	add	r19, r0
    6c30:	11 24       	eor	r1, r1
    6c32:	53 2e       	mov	r5, r19
    6c34:	13 c0       	rjmp	.+38     	; 0x6c5c <vfprintf+0xea>
    6c36:	8a e0       	ldi	r24, 0x0A	; 10
    6c38:	38 9e       	mul	r3, r24
    6c3a:	30 0d       	add	r19, r0
    6c3c:	11 24       	eor	r1, r1
    6c3e:	33 2e       	mov	r3, r19
    6c40:	20 62       	ori	r18, 0x20	; 32
    6c42:	0c c0       	rjmp	.+24     	; 0x6c5c <vfprintf+0xea>
    6c44:	8e 32       	cpi	r24, 0x2E	; 46
    6c46:	21 f4       	brne	.+8      	; 0x6c50 <vfprintf+0xde>
    6c48:	26 fd       	sbrc	r18, 6
    6c4a:	5f c1       	rjmp	.+702    	; 0x6f0a <vfprintf+0x398>
    6c4c:	20 64       	ori	r18, 0x40	; 64
    6c4e:	06 c0       	rjmp	.+12     	; 0x6c5c <vfprintf+0xea>
    6c50:	8c 36       	cpi	r24, 0x6C	; 108
    6c52:	11 f4       	brne	.+4      	; 0x6c58 <vfprintf+0xe6>
    6c54:	20 68       	ori	r18, 0x80	; 128
    6c56:	02 c0       	rjmp	.+4      	; 0x6c5c <vfprintf+0xea>
    6c58:	88 36       	cpi	r24, 0x68	; 104
    6c5a:	41 f4       	brne	.+16     	; 0x6c6c <vfprintf+0xfa>
    6c5c:	f6 01       	movw	r30, r12
    6c5e:	93 fd       	sbrc	r25, 3
    6c60:	85 91       	lpm	r24, Z+
    6c62:	93 ff       	sbrs	r25, 3
    6c64:	81 91       	ld	r24, Z+
    6c66:	6f 01       	movw	r12, r30
    6c68:	81 11       	cpse	r24, r1
    6c6a:	c1 cf       	rjmp	.-126    	; 0x6bee <vfprintf+0x7c>
    6c6c:	98 2f       	mov	r25, r24
    6c6e:	9f 7d       	andi	r25, 0xDF	; 223
    6c70:	95 54       	subi	r25, 0x45	; 69
    6c72:	93 30       	cpi	r25, 0x03	; 3
    6c74:	28 f4       	brcc	.+10     	; 0x6c80 <vfprintf+0x10e>
    6c76:	0c 5f       	subi	r16, 0xFC	; 252
    6c78:	1f 4f       	sbci	r17, 0xFF	; 255
    6c7a:	ff e3       	ldi	r31, 0x3F	; 63
    6c7c:	f9 83       	std	Y+1, r31	; 0x01
    6c7e:	0d c0       	rjmp	.+26     	; 0x6c9a <vfprintf+0x128>
    6c80:	83 36       	cpi	r24, 0x63	; 99
    6c82:	31 f0       	breq	.+12     	; 0x6c90 <vfprintf+0x11e>
    6c84:	83 37       	cpi	r24, 0x73	; 115
    6c86:	71 f0       	breq	.+28     	; 0x6ca4 <vfprintf+0x132>
    6c88:	83 35       	cpi	r24, 0x53	; 83
    6c8a:	09 f0       	breq	.+2      	; 0x6c8e <vfprintf+0x11c>
    6c8c:	57 c0       	rjmp	.+174    	; 0x6d3c <vfprintf+0x1ca>
    6c8e:	21 c0       	rjmp	.+66     	; 0x6cd2 <vfprintf+0x160>
    6c90:	f8 01       	movw	r30, r16
    6c92:	80 81       	ld	r24, Z
    6c94:	89 83       	std	Y+1, r24	; 0x01
    6c96:	0e 5f       	subi	r16, 0xFE	; 254
    6c98:	1f 4f       	sbci	r17, 0xFF	; 255
    6c9a:	44 24       	eor	r4, r4
    6c9c:	43 94       	inc	r4
    6c9e:	51 2c       	mov	r5, r1
    6ca0:	54 01       	movw	r10, r8
    6ca2:	14 c0       	rjmp	.+40     	; 0x6ccc <vfprintf+0x15a>
    6ca4:	38 01       	movw	r6, r16
    6ca6:	f2 e0       	ldi	r31, 0x02	; 2
    6ca8:	6f 0e       	add	r6, r31
    6caa:	71 1c       	adc	r7, r1
    6cac:	f8 01       	movw	r30, r16
    6cae:	a0 80       	ld	r10, Z
    6cb0:	b1 80       	ldd	r11, Z+1	; 0x01
    6cb2:	26 ff       	sbrs	r18, 6
    6cb4:	03 c0       	rjmp	.+6      	; 0x6cbc <vfprintf+0x14a>
    6cb6:	65 2d       	mov	r22, r5
    6cb8:	70 e0       	ldi	r23, 0x00	; 0
    6cba:	02 c0       	rjmp	.+4      	; 0x6cc0 <vfprintf+0x14e>
    6cbc:	6f ef       	ldi	r22, 0xFF	; 255
    6cbe:	7f ef       	ldi	r23, 0xFF	; 255
    6cc0:	c5 01       	movw	r24, r10
    6cc2:	2c 87       	std	Y+12, r18	; 0x0c
    6cc4:	49 d1       	rcall	.+658    	; 0x6f58 <strnlen>
    6cc6:	2c 01       	movw	r4, r24
    6cc8:	83 01       	movw	r16, r6
    6cca:	2c 85       	ldd	r18, Y+12	; 0x0c
    6ccc:	2f 77       	andi	r18, 0x7F	; 127
    6cce:	22 2e       	mov	r2, r18
    6cd0:	16 c0       	rjmp	.+44     	; 0x6cfe <vfprintf+0x18c>
    6cd2:	38 01       	movw	r6, r16
    6cd4:	f2 e0       	ldi	r31, 0x02	; 2
    6cd6:	6f 0e       	add	r6, r31
    6cd8:	71 1c       	adc	r7, r1
    6cda:	f8 01       	movw	r30, r16
    6cdc:	a0 80       	ld	r10, Z
    6cde:	b1 80       	ldd	r11, Z+1	; 0x01
    6ce0:	26 ff       	sbrs	r18, 6
    6ce2:	03 c0       	rjmp	.+6      	; 0x6cea <vfprintf+0x178>
    6ce4:	65 2d       	mov	r22, r5
    6ce6:	70 e0       	ldi	r23, 0x00	; 0
    6ce8:	02 c0       	rjmp	.+4      	; 0x6cee <vfprintf+0x17c>
    6cea:	6f ef       	ldi	r22, 0xFF	; 255
    6cec:	7f ef       	ldi	r23, 0xFF	; 255
    6cee:	c5 01       	movw	r24, r10
    6cf0:	2c 87       	std	Y+12, r18	; 0x0c
    6cf2:	27 d1       	rcall	.+590    	; 0x6f42 <strnlen_P>
    6cf4:	2c 01       	movw	r4, r24
    6cf6:	2c 85       	ldd	r18, Y+12	; 0x0c
    6cf8:	20 68       	ori	r18, 0x80	; 128
    6cfa:	22 2e       	mov	r2, r18
    6cfc:	83 01       	movw	r16, r6
    6cfe:	23 fc       	sbrc	r2, 3
    6d00:	19 c0       	rjmp	.+50     	; 0x6d34 <vfprintf+0x1c2>
    6d02:	83 2d       	mov	r24, r3
    6d04:	90 e0       	ldi	r25, 0x00	; 0
    6d06:	48 16       	cp	r4, r24
    6d08:	59 06       	cpc	r5, r25
    6d0a:	a0 f4       	brcc	.+40     	; 0x6d34 <vfprintf+0x1c2>
    6d0c:	b7 01       	movw	r22, r14
    6d0e:	80 e2       	ldi	r24, 0x20	; 32
    6d10:	90 e0       	ldi	r25, 0x00	; 0
    6d12:	3d d1       	rcall	.+634    	; 0x6f8e <fputc>
    6d14:	3a 94       	dec	r3
    6d16:	f5 cf       	rjmp	.-22     	; 0x6d02 <vfprintf+0x190>
    6d18:	f5 01       	movw	r30, r10
    6d1a:	27 fc       	sbrc	r2, 7
    6d1c:	85 91       	lpm	r24, Z+
    6d1e:	27 fe       	sbrs	r2, 7
    6d20:	81 91       	ld	r24, Z+
    6d22:	5f 01       	movw	r10, r30
    6d24:	b7 01       	movw	r22, r14
    6d26:	90 e0       	ldi	r25, 0x00	; 0
    6d28:	32 d1       	rcall	.+612    	; 0x6f8e <fputc>
    6d2a:	31 10       	cpse	r3, r1
    6d2c:	3a 94       	dec	r3
    6d2e:	f1 e0       	ldi	r31, 0x01	; 1
    6d30:	4f 1a       	sub	r4, r31
    6d32:	51 08       	sbc	r5, r1
    6d34:	41 14       	cp	r4, r1
    6d36:	51 04       	cpc	r5, r1
    6d38:	79 f7       	brne	.-34     	; 0x6d18 <vfprintf+0x1a6>
    6d3a:	de c0       	rjmp	.+444    	; 0x6ef8 <vfprintf+0x386>
    6d3c:	84 36       	cpi	r24, 0x64	; 100
    6d3e:	11 f0       	breq	.+4      	; 0x6d44 <vfprintf+0x1d2>
    6d40:	89 36       	cpi	r24, 0x69	; 105
    6d42:	31 f5       	brne	.+76     	; 0x6d90 <vfprintf+0x21e>
    6d44:	f8 01       	movw	r30, r16
    6d46:	27 ff       	sbrs	r18, 7
    6d48:	07 c0       	rjmp	.+14     	; 0x6d58 <vfprintf+0x1e6>
    6d4a:	60 81       	ld	r22, Z
    6d4c:	71 81       	ldd	r23, Z+1	; 0x01
    6d4e:	82 81       	ldd	r24, Z+2	; 0x02
    6d50:	93 81       	ldd	r25, Z+3	; 0x03
    6d52:	0c 5f       	subi	r16, 0xFC	; 252
    6d54:	1f 4f       	sbci	r17, 0xFF	; 255
    6d56:	08 c0       	rjmp	.+16     	; 0x6d68 <vfprintf+0x1f6>
    6d58:	60 81       	ld	r22, Z
    6d5a:	71 81       	ldd	r23, Z+1	; 0x01
    6d5c:	07 2e       	mov	r0, r23
    6d5e:	00 0c       	add	r0, r0
    6d60:	88 0b       	sbc	r24, r24
    6d62:	99 0b       	sbc	r25, r25
    6d64:	0e 5f       	subi	r16, 0xFE	; 254
    6d66:	1f 4f       	sbci	r17, 0xFF	; 255
    6d68:	2f 76       	andi	r18, 0x6F	; 111
    6d6a:	72 2e       	mov	r7, r18
    6d6c:	97 ff       	sbrs	r25, 7
    6d6e:	09 c0       	rjmp	.+18     	; 0x6d82 <vfprintf+0x210>
    6d70:	90 95       	com	r25
    6d72:	80 95       	com	r24
    6d74:	70 95       	com	r23
    6d76:	61 95       	neg	r22
    6d78:	7f 4f       	sbci	r23, 0xFF	; 255
    6d7a:	8f 4f       	sbci	r24, 0xFF	; 255
    6d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    6d7e:	20 68       	ori	r18, 0x80	; 128
    6d80:	72 2e       	mov	r7, r18
    6d82:	2a e0       	ldi	r18, 0x0A	; 10
    6d84:	30 e0       	ldi	r19, 0x00	; 0
    6d86:	a4 01       	movw	r20, r8
    6d88:	3a d1       	rcall	.+628    	; 0x6ffe <__ultoa_invert>
    6d8a:	a8 2e       	mov	r10, r24
    6d8c:	a8 18       	sub	r10, r8
    6d8e:	43 c0       	rjmp	.+134    	; 0x6e16 <vfprintf+0x2a4>
    6d90:	85 37       	cpi	r24, 0x75	; 117
    6d92:	29 f4       	brne	.+10     	; 0x6d9e <vfprintf+0x22c>
    6d94:	2f 7e       	andi	r18, 0xEF	; 239
    6d96:	b2 2e       	mov	r11, r18
    6d98:	2a e0       	ldi	r18, 0x0A	; 10
    6d9a:	30 e0       	ldi	r19, 0x00	; 0
    6d9c:	25 c0       	rjmp	.+74     	; 0x6de8 <vfprintf+0x276>
    6d9e:	f2 2f       	mov	r31, r18
    6da0:	f9 7f       	andi	r31, 0xF9	; 249
    6da2:	bf 2e       	mov	r11, r31
    6da4:	8f 36       	cpi	r24, 0x6F	; 111
    6da6:	c1 f0       	breq	.+48     	; 0x6dd8 <vfprintf+0x266>
    6da8:	18 f4       	brcc	.+6      	; 0x6db0 <vfprintf+0x23e>
    6daa:	88 35       	cpi	r24, 0x58	; 88
    6dac:	79 f0       	breq	.+30     	; 0x6dcc <vfprintf+0x25a>
    6dae:	ad c0       	rjmp	.+346    	; 0x6f0a <vfprintf+0x398>
    6db0:	80 37       	cpi	r24, 0x70	; 112
    6db2:	19 f0       	breq	.+6      	; 0x6dba <vfprintf+0x248>
    6db4:	88 37       	cpi	r24, 0x78	; 120
    6db6:	21 f0       	breq	.+8      	; 0x6dc0 <vfprintf+0x24e>
    6db8:	a8 c0       	rjmp	.+336    	; 0x6f0a <vfprintf+0x398>
    6dba:	2f 2f       	mov	r18, r31
    6dbc:	20 61       	ori	r18, 0x10	; 16
    6dbe:	b2 2e       	mov	r11, r18
    6dc0:	b4 fe       	sbrs	r11, 4
    6dc2:	0d c0       	rjmp	.+26     	; 0x6dde <vfprintf+0x26c>
    6dc4:	8b 2d       	mov	r24, r11
    6dc6:	84 60       	ori	r24, 0x04	; 4
    6dc8:	b8 2e       	mov	r11, r24
    6dca:	09 c0       	rjmp	.+18     	; 0x6dde <vfprintf+0x26c>
    6dcc:	24 ff       	sbrs	r18, 4
    6dce:	0a c0       	rjmp	.+20     	; 0x6de4 <vfprintf+0x272>
    6dd0:	9f 2f       	mov	r25, r31
    6dd2:	96 60       	ori	r25, 0x06	; 6
    6dd4:	b9 2e       	mov	r11, r25
    6dd6:	06 c0       	rjmp	.+12     	; 0x6de4 <vfprintf+0x272>
    6dd8:	28 e0       	ldi	r18, 0x08	; 8
    6dda:	30 e0       	ldi	r19, 0x00	; 0
    6ddc:	05 c0       	rjmp	.+10     	; 0x6de8 <vfprintf+0x276>
    6dde:	20 e1       	ldi	r18, 0x10	; 16
    6de0:	30 e0       	ldi	r19, 0x00	; 0
    6de2:	02 c0       	rjmp	.+4      	; 0x6de8 <vfprintf+0x276>
    6de4:	20 e1       	ldi	r18, 0x10	; 16
    6de6:	32 e0       	ldi	r19, 0x02	; 2
    6de8:	f8 01       	movw	r30, r16
    6dea:	b7 fe       	sbrs	r11, 7
    6dec:	07 c0       	rjmp	.+14     	; 0x6dfc <vfprintf+0x28a>
    6dee:	60 81       	ld	r22, Z
    6df0:	71 81       	ldd	r23, Z+1	; 0x01
    6df2:	82 81       	ldd	r24, Z+2	; 0x02
    6df4:	93 81       	ldd	r25, Z+3	; 0x03
    6df6:	0c 5f       	subi	r16, 0xFC	; 252
    6df8:	1f 4f       	sbci	r17, 0xFF	; 255
    6dfa:	06 c0       	rjmp	.+12     	; 0x6e08 <vfprintf+0x296>
    6dfc:	60 81       	ld	r22, Z
    6dfe:	71 81       	ldd	r23, Z+1	; 0x01
    6e00:	80 e0       	ldi	r24, 0x00	; 0
    6e02:	90 e0       	ldi	r25, 0x00	; 0
    6e04:	0e 5f       	subi	r16, 0xFE	; 254
    6e06:	1f 4f       	sbci	r17, 0xFF	; 255
    6e08:	a4 01       	movw	r20, r8
    6e0a:	f9 d0       	rcall	.+498    	; 0x6ffe <__ultoa_invert>
    6e0c:	a8 2e       	mov	r10, r24
    6e0e:	a8 18       	sub	r10, r8
    6e10:	fb 2d       	mov	r31, r11
    6e12:	ff 77       	andi	r31, 0x7F	; 127
    6e14:	7f 2e       	mov	r7, r31
    6e16:	76 fe       	sbrs	r7, 6
    6e18:	0b c0       	rjmp	.+22     	; 0x6e30 <vfprintf+0x2be>
    6e1a:	37 2d       	mov	r19, r7
    6e1c:	3e 7f       	andi	r19, 0xFE	; 254
    6e1e:	a5 14       	cp	r10, r5
    6e20:	50 f4       	brcc	.+20     	; 0x6e36 <vfprintf+0x2c4>
    6e22:	74 fe       	sbrs	r7, 4
    6e24:	0a c0       	rjmp	.+20     	; 0x6e3a <vfprintf+0x2c8>
    6e26:	72 fc       	sbrc	r7, 2
    6e28:	08 c0       	rjmp	.+16     	; 0x6e3a <vfprintf+0x2c8>
    6e2a:	37 2d       	mov	r19, r7
    6e2c:	3e 7e       	andi	r19, 0xEE	; 238
    6e2e:	05 c0       	rjmp	.+10     	; 0x6e3a <vfprintf+0x2c8>
    6e30:	ba 2c       	mov	r11, r10
    6e32:	37 2d       	mov	r19, r7
    6e34:	03 c0       	rjmp	.+6      	; 0x6e3c <vfprintf+0x2ca>
    6e36:	ba 2c       	mov	r11, r10
    6e38:	01 c0       	rjmp	.+2      	; 0x6e3c <vfprintf+0x2ca>
    6e3a:	b5 2c       	mov	r11, r5
    6e3c:	34 ff       	sbrs	r19, 4
    6e3e:	0d c0       	rjmp	.+26     	; 0x6e5a <vfprintf+0x2e8>
    6e40:	fe 01       	movw	r30, r28
    6e42:	ea 0d       	add	r30, r10
    6e44:	f1 1d       	adc	r31, r1
    6e46:	80 81       	ld	r24, Z
    6e48:	80 33       	cpi	r24, 0x30	; 48
    6e4a:	11 f4       	brne	.+4      	; 0x6e50 <vfprintf+0x2de>
    6e4c:	39 7e       	andi	r19, 0xE9	; 233
    6e4e:	09 c0       	rjmp	.+18     	; 0x6e62 <vfprintf+0x2f0>
    6e50:	32 ff       	sbrs	r19, 2
    6e52:	06 c0       	rjmp	.+12     	; 0x6e60 <vfprintf+0x2ee>
    6e54:	b3 94       	inc	r11
    6e56:	b3 94       	inc	r11
    6e58:	04 c0       	rjmp	.+8      	; 0x6e62 <vfprintf+0x2f0>
    6e5a:	83 2f       	mov	r24, r19
    6e5c:	86 78       	andi	r24, 0x86	; 134
    6e5e:	09 f0       	breq	.+2      	; 0x6e62 <vfprintf+0x2f0>
    6e60:	b3 94       	inc	r11
    6e62:	33 fd       	sbrc	r19, 3
    6e64:	12 c0       	rjmp	.+36     	; 0x6e8a <vfprintf+0x318>
    6e66:	30 ff       	sbrs	r19, 0
    6e68:	06 c0       	rjmp	.+12     	; 0x6e76 <vfprintf+0x304>
    6e6a:	5a 2c       	mov	r5, r10
    6e6c:	b3 14       	cp	r11, r3
    6e6e:	18 f4       	brcc	.+6      	; 0x6e76 <vfprintf+0x304>
    6e70:	53 0c       	add	r5, r3
    6e72:	5b 18       	sub	r5, r11
    6e74:	b3 2c       	mov	r11, r3
    6e76:	b3 14       	cp	r11, r3
    6e78:	60 f4       	brcc	.+24     	; 0x6e92 <vfprintf+0x320>
    6e7a:	b7 01       	movw	r22, r14
    6e7c:	80 e2       	ldi	r24, 0x20	; 32
    6e7e:	90 e0       	ldi	r25, 0x00	; 0
    6e80:	3c 87       	std	Y+12, r19	; 0x0c
    6e82:	85 d0       	rcall	.+266    	; 0x6f8e <fputc>
    6e84:	b3 94       	inc	r11
    6e86:	3c 85       	ldd	r19, Y+12	; 0x0c
    6e88:	f6 cf       	rjmp	.-20     	; 0x6e76 <vfprintf+0x304>
    6e8a:	b3 14       	cp	r11, r3
    6e8c:	10 f4       	brcc	.+4      	; 0x6e92 <vfprintf+0x320>
    6e8e:	3b 18       	sub	r3, r11
    6e90:	01 c0       	rjmp	.+2      	; 0x6e94 <vfprintf+0x322>
    6e92:	31 2c       	mov	r3, r1
    6e94:	34 ff       	sbrs	r19, 4
    6e96:	11 c0       	rjmp	.+34     	; 0x6eba <vfprintf+0x348>
    6e98:	b7 01       	movw	r22, r14
    6e9a:	80 e3       	ldi	r24, 0x30	; 48
    6e9c:	90 e0       	ldi	r25, 0x00	; 0
    6e9e:	3c 87       	std	Y+12, r19	; 0x0c
    6ea0:	76 d0       	rcall	.+236    	; 0x6f8e <fputc>
    6ea2:	3c 85       	ldd	r19, Y+12	; 0x0c
    6ea4:	32 ff       	sbrs	r19, 2
    6ea6:	16 c0       	rjmp	.+44     	; 0x6ed4 <vfprintf+0x362>
    6ea8:	31 fd       	sbrc	r19, 1
    6eaa:	03 c0       	rjmp	.+6      	; 0x6eb2 <vfprintf+0x340>
    6eac:	88 e7       	ldi	r24, 0x78	; 120
    6eae:	90 e0       	ldi	r25, 0x00	; 0
    6eb0:	02 c0       	rjmp	.+4      	; 0x6eb6 <vfprintf+0x344>
    6eb2:	88 e5       	ldi	r24, 0x58	; 88
    6eb4:	90 e0       	ldi	r25, 0x00	; 0
    6eb6:	b7 01       	movw	r22, r14
    6eb8:	0c c0       	rjmp	.+24     	; 0x6ed2 <vfprintf+0x360>
    6eba:	83 2f       	mov	r24, r19
    6ebc:	86 78       	andi	r24, 0x86	; 134
    6ebe:	51 f0       	breq	.+20     	; 0x6ed4 <vfprintf+0x362>
    6ec0:	31 ff       	sbrs	r19, 1
    6ec2:	02 c0       	rjmp	.+4      	; 0x6ec8 <vfprintf+0x356>
    6ec4:	8b e2       	ldi	r24, 0x2B	; 43
    6ec6:	01 c0       	rjmp	.+2      	; 0x6eca <vfprintf+0x358>
    6ec8:	80 e2       	ldi	r24, 0x20	; 32
    6eca:	37 fd       	sbrc	r19, 7
    6ecc:	8d e2       	ldi	r24, 0x2D	; 45
    6ece:	b7 01       	movw	r22, r14
    6ed0:	90 e0       	ldi	r25, 0x00	; 0
    6ed2:	5d d0       	rcall	.+186    	; 0x6f8e <fputc>
    6ed4:	a5 14       	cp	r10, r5
    6ed6:	30 f4       	brcc	.+12     	; 0x6ee4 <vfprintf+0x372>
    6ed8:	b7 01       	movw	r22, r14
    6eda:	80 e3       	ldi	r24, 0x30	; 48
    6edc:	90 e0       	ldi	r25, 0x00	; 0
    6ede:	57 d0       	rcall	.+174    	; 0x6f8e <fputc>
    6ee0:	5a 94       	dec	r5
    6ee2:	f8 cf       	rjmp	.-16     	; 0x6ed4 <vfprintf+0x362>
    6ee4:	aa 94       	dec	r10
    6ee6:	f4 01       	movw	r30, r8
    6ee8:	ea 0d       	add	r30, r10
    6eea:	f1 1d       	adc	r31, r1
    6eec:	80 81       	ld	r24, Z
    6eee:	b7 01       	movw	r22, r14
    6ef0:	90 e0       	ldi	r25, 0x00	; 0
    6ef2:	4d d0       	rcall	.+154    	; 0x6f8e <fputc>
    6ef4:	a1 10       	cpse	r10, r1
    6ef6:	f6 cf       	rjmp	.-20     	; 0x6ee4 <vfprintf+0x372>
    6ef8:	33 20       	and	r3, r3
    6efa:	09 f4       	brne	.+2      	; 0x6efe <vfprintf+0x38c>
    6efc:	5d ce       	rjmp	.-838    	; 0x6bb8 <vfprintf+0x46>
    6efe:	b7 01       	movw	r22, r14
    6f00:	80 e2       	ldi	r24, 0x20	; 32
    6f02:	90 e0       	ldi	r25, 0x00	; 0
    6f04:	44 d0       	rcall	.+136    	; 0x6f8e <fputc>
    6f06:	3a 94       	dec	r3
    6f08:	f7 cf       	rjmp	.-18     	; 0x6ef8 <vfprintf+0x386>
    6f0a:	f7 01       	movw	r30, r14
    6f0c:	86 81       	ldd	r24, Z+6	; 0x06
    6f0e:	97 81       	ldd	r25, Z+7	; 0x07
    6f10:	02 c0       	rjmp	.+4      	; 0x6f16 <vfprintf+0x3a4>
    6f12:	8f ef       	ldi	r24, 0xFF	; 255
    6f14:	9f ef       	ldi	r25, 0xFF	; 255
    6f16:	2c 96       	adiw	r28, 0x0c	; 12
    6f18:	cd bf       	out	0x3d, r28	; 61
    6f1a:	de bf       	out	0x3e, r29	; 62
    6f1c:	df 91       	pop	r29
    6f1e:	cf 91       	pop	r28
    6f20:	1f 91       	pop	r17
    6f22:	0f 91       	pop	r16
    6f24:	ff 90       	pop	r15
    6f26:	ef 90       	pop	r14
    6f28:	df 90       	pop	r13
    6f2a:	cf 90       	pop	r12
    6f2c:	bf 90       	pop	r11
    6f2e:	af 90       	pop	r10
    6f30:	9f 90       	pop	r9
    6f32:	8f 90       	pop	r8
    6f34:	7f 90       	pop	r7
    6f36:	6f 90       	pop	r6
    6f38:	5f 90       	pop	r5
    6f3a:	4f 90       	pop	r4
    6f3c:	3f 90       	pop	r3
    6f3e:	2f 90       	pop	r2
    6f40:	08 95       	ret

00006f42 <strnlen_P>:
    6f42:	fc 01       	movw	r30, r24
    6f44:	05 90       	lpm	r0, Z+
    6f46:	61 50       	subi	r22, 0x01	; 1
    6f48:	70 40       	sbci	r23, 0x00	; 0
    6f4a:	01 10       	cpse	r0, r1
    6f4c:	d8 f7       	brcc	.-10     	; 0x6f44 <strnlen_P+0x2>
    6f4e:	80 95       	com	r24
    6f50:	90 95       	com	r25
    6f52:	8e 0f       	add	r24, r30
    6f54:	9f 1f       	adc	r25, r31
    6f56:	08 95       	ret

00006f58 <strnlen>:
    6f58:	fc 01       	movw	r30, r24
    6f5a:	61 50       	subi	r22, 0x01	; 1
    6f5c:	70 40       	sbci	r23, 0x00	; 0
    6f5e:	01 90       	ld	r0, Z+
    6f60:	01 10       	cpse	r0, r1
    6f62:	d8 f7       	brcc	.-10     	; 0x6f5a <strnlen+0x2>
    6f64:	80 95       	com	r24
    6f66:	90 95       	com	r25
    6f68:	8e 0f       	add	r24, r30
    6f6a:	9f 1f       	adc	r25, r31
    6f6c:	08 95       	ret

00006f6e <strrev>:
    6f6e:	dc 01       	movw	r26, r24
    6f70:	fc 01       	movw	r30, r24
    6f72:	67 2f       	mov	r22, r23
    6f74:	71 91       	ld	r23, Z+
    6f76:	77 23       	and	r23, r23
    6f78:	e1 f7       	brne	.-8      	; 0x6f72 <strrev+0x4>
    6f7a:	32 97       	sbiw	r30, 0x02	; 2
    6f7c:	04 c0       	rjmp	.+8      	; 0x6f86 <strrev+0x18>
    6f7e:	7c 91       	ld	r23, X
    6f80:	6d 93       	st	X+, r22
    6f82:	70 83       	st	Z, r23
    6f84:	62 91       	ld	r22, -Z
    6f86:	ae 17       	cp	r26, r30
    6f88:	bf 07       	cpc	r27, r31
    6f8a:	c8 f3       	brcs	.-14     	; 0x6f7e <strrev+0x10>
    6f8c:	08 95       	ret

00006f8e <fputc>:
    6f8e:	0f 93       	push	r16
    6f90:	1f 93       	push	r17
    6f92:	cf 93       	push	r28
    6f94:	df 93       	push	r29
    6f96:	fb 01       	movw	r30, r22
    6f98:	23 81       	ldd	r18, Z+3	; 0x03
    6f9a:	21 fd       	sbrc	r18, 1
    6f9c:	03 c0       	rjmp	.+6      	; 0x6fa4 <fputc+0x16>
    6f9e:	8f ef       	ldi	r24, 0xFF	; 255
    6fa0:	9f ef       	ldi	r25, 0xFF	; 255
    6fa2:	28 c0       	rjmp	.+80     	; 0x6ff4 <fputc+0x66>
    6fa4:	22 ff       	sbrs	r18, 2
    6fa6:	16 c0       	rjmp	.+44     	; 0x6fd4 <fputc+0x46>
    6fa8:	46 81       	ldd	r20, Z+6	; 0x06
    6faa:	57 81       	ldd	r21, Z+7	; 0x07
    6fac:	24 81       	ldd	r18, Z+4	; 0x04
    6fae:	35 81       	ldd	r19, Z+5	; 0x05
    6fb0:	42 17       	cp	r20, r18
    6fb2:	53 07       	cpc	r21, r19
    6fb4:	44 f4       	brge	.+16     	; 0x6fc6 <fputc+0x38>
    6fb6:	a0 81       	ld	r26, Z
    6fb8:	b1 81       	ldd	r27, Z+1	; 0x01
    6fba:	9d 01       	movw	r18, r26
    6fbc:	2f 5f       	subi	r18, 0xFF	; 255
    6fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    6fc0:	20 83       	st	Z, r18
    6fc2:	31 83       	std	Z+1, r19	; 0x01
    6fc4:	8c 93       	st	X, r24
    6fc6:	26 81       	ldd	r18, Z+6	; 0x06
    6fc8:	37 81       	ldd	r19, Z+7	; 0x07
    6fca:	2f 5f       	subi	r18, 0xFF	; 255
    6fcc:	3f 4f       	sbci	r19, 0xFF	; 255
    6fce:	26 83       	std	Z+6, r18	; 0x06
    6fd0:	37 83       	std	Z+7, r19	; 0x07
    6fd2:	10 c0       	rjmp	.+32     	; 0x6ff4 <fputc+0x66>
    6fd4:	eb 01       	movw	r28, r22
    6fd6:	09 2f       	mov	r16, r25
    6fd8:	18 2f       	mov	r17, r24
    6fda:	00 84       	ldd	r0, Z+8	; 0x08
    6fdc:	f1 85       	ldd	r31, Z+9	; 0x09
    6fde:	e0 2d       	mov	r30, r0
    6fe0:	19 95       	eicall
    6fe2:	89 2b       	or	r24, r25
    6fe4:	e1 f6       	brne	.-72     	; 0x6f9e <fputc+0x10>
    6fe6:	8e 81       	ldd	r24, Y+6	; 0x06
    6fe8:	9f 81       	ldd	r25, Y+7	; 0x07
    6fea:	01 96       	adiw	r24, 0x01	; 1
    6fec:	8e 83       	std	Y+6, r24	; 0x06
    6fee:	9f 83       	std	Y+7, r25	; 0x07
    6ff0:	81 2f       	mov	r24, r17
    6ff2:	90 2f       	mov	r25, r16
    6ff4:	df 91       	pop	r29
    6ff6:	cf 91       	pop	r28
    6ff8:	1f 91       	pop	r17
    6ffa:	0f 91       	pop	r16
    6ffc:	08 95       	ret

00006ffe <__ultoa_invert>:
    6ffe:	fa 01       	movw	r30, r20
    7000:	aa 27       	eor	r26, r26
    7002:	28 30       	cpi	r18, 0x08	; 8
    7004:	51 f1       	breq	.+84     	; 0x705a <__ultoa_invert+0x5c>
    7006:	20 31       	cpi	r18, 0x10	; 16
    7008:	81 f1       	breq	.+96     	; 0x706a <__ultoa_invert+0x6c>
    700a:	e8 94       	clt
    700c:	6f 93       	push	r22
    700e:	6e 7f       	andi	r22, 0xFE	; 254
    7010:	6e 5f       	subi	r22, 0xFE	; 254
    7012:	7f 4f       	sbci	r23, 0xFF	; 255
    7014:	8f 4f       	sbci	r24, 0xFF	; 255
    7016:	9f 4f       	sbci	r25, 0xFF	; 255
    7018:	af 4f       	sbci	r26, 0xFF	; 255
    701a:	b1 e0       	ldi	r27, 0x01	; 1
    701c:	3e d0       	rcall	.+124    	; 0x709a <__ultoa_invert+0x9c>
    701e:	b4 e0       	ldi	r27, 0x04	; 4
    7020:	3c d0       	rcall	.+120    	; 0x709a <__ultoa_invert+0x9c>
    7022:	67 0f       	add	r22, r23
    7024:	78 1f       	adc	r23, r24
    7026:	89 1f       	adc	r24, r25
    7028:	9a 1f       	adc	r25, r26
    702a:	a1 1d       	adc	r26, r1
    702c:	68 0f       	add	r22, r24
    702e:	79 1f       	adc	r23, r25
    7030:	8a 1f       	adc	r24, r26
    7032:	91 1d       	adc	r25, r1
    7034:	a1 1d       	adc	r26, r1
    7036:	6a 0f       	add	r22, r26
    7038:	71 1d       	adc	r23, r1
    703a:	81 1d       	adc	r24, r1
    703c:	91 1d       	adc	r25, r1
    703e:	a1 1d       	adc	r26, r1
    7040:	20 d0       	rcall	.+64     	; 0x7082 <__ultoa_invert+0x84>
    7042:	09 f4       	brne	.+2      	; 0x7046 <__ultoa_invert+0x48>
    7044:	68 94       	set
    7046:	3f 91       	pop	r19
    7048:	2a e0       	ldi	r18, 0x0A	; 10
    704a:	26 9f       	mul	r18, r22
    704c:	11 24       	eor	r1, r1
    704e:	30 19       	sub	r19, r0
    7050:	30 5d       	subi	r19, 0xD0	; 208
    7052:	31 93       	st	Z+, r19
    7054:	de f6       	brtc	.-74     	; 0x700c <__ultoa_invert+0xe>
    7056:	cf 01       	movw	r24, r30
    7058:	08 95       	ret
    705a:	46 2f       	mov	r20, r22
    705c:	47 70       	andi	r20, 0x07	; 7
    705e:	40 5d       	subi	r20, 0xD0	; 208
    7060:	41 93       	st	Z+, r20
    7062:	b3 e0       	ldi	r27, 0x03	; 3
    7064:	0f d0       	rcall	.+30     	; 0x7084 <__ultoa_invert+0x86>
    7066:	c9 f7       	brne	.-14     	; 0x705a <__ultoa_invert+0x5c>
    7068:	f6 cf       	rjmp	.-20     	; 0x7056 <__ultoa_invert+0x58>
    706a:	46 2f       	mov	r20, r22
    706c:	4f 70       	andi	r20, 0x0F	; 15
    706e:	40 5d       	subi	r20, 0xD0	; 208
    7070:	4a 33       	cpi	r20, 0x3A	; 58
    7072:	18 f0       	brcs	.+6      	; 0x707a <__ultoa_invert+0x7c>
    7074:	49 5d       	subi	r20, 0xD9	; 217
    7076:	31 fd       	sbrc	r19, 1
    7078:	40 52       	subi	r20, 0x20	; 32
    707a:	41 93       	st	Z+, r20
    707c:	02 d0       	rcall	.+4      	; 0x7082 <__ultoa_invert+0x84>
    707e:	a9 f7       	brne	.-22     	; 0x706a <__ultoa_invert+0x6c>
    7080:	ea cf       	rjmp	.-44     	; 0x7056 <__ultoa_invert+0x58>
    7082:	b4 e0       	ldi	r27, 0x04	; 4
    7084:	a6 95       	lsr	r26
    7086:	97 95       	ror	r25
    7088:	87 95       	ror	r24
    708a:	77 95       	ror	r23
    708c:	67 95       	ror	r22
    708e:	ba 95       	dec	r27
    7090:	c9 f7       	brne	.-14     	; 0x7084 <__ultoa_invert+0x86>
    7092:	00 97       	sbiw	r24, 0x00	; 0
    7094:	61 05       	cpc	r22, r1
    7096:	71 05       	cpc	r23, r1
    7098:	08 95       	ret
    709a:	9b 01       	movw	r18, r22
    709c:	ac 01       	movw	r20, r24
    709e:	0a 2e       	mov	r0, r26
    70a0:	06 94       	lsr	r0
    70a2:	57 95       	ror	r21
    70a4:	47 95       	ror	r20
    70a6:	37 95       	ror	r19
    70a8:	27 95       	ror	r18
    70aa:	ba 95       	dec	r27
    70ac:	c9 f7       	brne	.-14     	; 0x70a0 <__ultoa_invert+0xa2>
    70ae:	62 0f       	add	r22, r18
    70b0:	73 1f       	adc	r23, r19
    70b2:	84 1f       	adc	r24, r20
    70b4:	95 1f       	adc	r25, r21
    70b6:	a0 1d       	adc	r26, r0
    70b8:	08 95       	ret

000070ba <_exit>:
    70ba:	f8 94       	cli

000070bc <__stop_program>:
    70bc:	ff cf       	rjmp	.-2      	; 0x70bc <__stop_program>
