
USB_Flash_Programmer_xmega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000217a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000de  00802000  0000217a  0000220e  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000027f  008020de  008020de  000022ee  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000231c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000400  00000000  00000000  00002360  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008c95  00000000  00000000  00002760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a1f  00000000  00000000  0000b3f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004b94  00000000  00000000  0000ee14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a84  00000000  00000000  000139a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003287a  00000000  00000000  0001442c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d4d  00000000  00000000  00046ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d8  00000000  00000000  000499f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000a73e  00000000  00000000  00049dd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	27 c1       	rjmp	.+590    	; 0x254 <__bad_interrupt>
       6:	00 00       	nop
       8:	25 c1       	rjmp	.+586    	; 0x254 <__bad_interrupt>
       a:	00 00       	nop
       c:	23 c1       	rjmp	.+582    	; 0x254 <__bad_interrupt>
       e:	00 00       	nop
      10:	21 c1       	rjmp	.+578    	; 0x254 <__bad_interrupt>
      12:	00 00       	nop
      14:	1f c1       	rjmp	.+574    	; 0x254 <__bad_interrupt>
      16:	00 00       	nop
      18:	1d c1       	rjmp	.+570    	; 0x254 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1b c1       	rjmp	.+566    	; 0x254 <__bad_interrupt>
      1e:	00 00       	nop
      20:	19 c1       	rjmp	.+562    	; 0x254 <__bad_interrupt>
      22:	00 00       	nop
      24:	17 c1       	rjmp	.+558    	; 0x254 <__bad_interrupt>
      26:	00 00       	nop
      28:	15 c1       	rjmp	.+554    	; 0x254 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	13 c1       	rjmp	.+550    	; 0x254 <__bad_interrupt>
      2e:	00 00       	nop
      30:	11 c1       	rjmp	.+546    	; 0x254 <__bad_interrupt>
      32:	00 00       	nop
      34:	0f c1       	rjmp	.+542    	; 0x254 <__bad_interrupt>
      36:	00 00       	nop
      38:	0d c1       	rjmp	.+538    	; 0x254 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0b c1       	rjmp	.+534    	; 0x254 <__bad_interrupt>
      3e:	00 00       	nop
      40:	09 c1       	rjmp	.+530    	; 0x254 <__bad_interrupt>
      42:	00 00       	nop
      44:	07 c1       	rjmp	.+526    	; 0x254 <__bad_interrupt>
      46:	00 00       	nop
      48:	05 c1       	rjmp	.+522    	; 0x254 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	03 c1       	rjmp	.+518    	; 0x254 <__bad_interrupt>
      4e:	00 00       	nop
      50:	01 c1       	rjmp	.+514    	; 0x254 <__bad_interrupt>
      52:	00 00       	nop
      54:	ff c0       	rjmp	.+510    	; 0x254 <__bad_interrupt>
      56:	00 00       	nop
      58:	fd c0       	rjmp	.+506    	; 0x254 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	fb c0       	rjmp	.+502    	; 0x254 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f9 c0       	rjmp	.+498    	; 0x254 <__bad_interrupt>
      62:	00 00       	nop
      64:	f7 c0       	rjmp	.+494    	; 0x254 <__bad_interrupt>
      66:	00 00       	nop
      68:	f5 c0       	rjmp	.+490    	; 0x254 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f3 c0       	rjmp	.+486    	; 0x254 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f1 c0       	rjmp	.+482    	; 0x254 <__bad_interrupt>
      72:	00 00       	nop
      74:	ef c0       	rjmp	.+478    	; 0x254 <__bad_interrupt>
      76:	00 00       	nop
      78:	ed c0       	rjmp	.+474    	; 0x254 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	eb c0       	rjmp	.+470    	; 0x254 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e9 c0       	rjmp	.+466    	; 0x254 <__bad_interrupt>
      82:	00 00       	nop
      84:	e7 c0       	rjmp	.+462    	; 0x254 <__bad_interrupt>
      86:	00 00       	nop
      88:	e5 c0       	rjmp	.+458    	; 0x254 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e3 c0       	rjmp	.+454    	; 0x254 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e1 c0       	rjmp	.+450    	; 0x254 <__bad_interrupt>
      92:	00 00       	nop
      94:	df c0       	rjmp	.+446    	; 0x254 <__bad_interrupt>
      96:	00 00       	nop
      98:	dd c0       	rjmp	.+442    	; 0x254 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	db c0       	rjmp	.+438    	; 0x254 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d9 c0       	rjmp	.+434    	; 0x254 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d7 c0       	rjmp	.+430    	; 0x254 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d5 c0       	rjmp	.+426    	; 0x254 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d3 c0       	rjmp	.+422    	; 0x254 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d1 c0       	rjmp	.+418    	; 0x254 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cf c0       	rjmp	.+414    	; 0x254 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	cd c0       	rjmp	.+410    	; 0x254 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	cb c0       	rjmp	.+406    	; 0x254 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c9 c0       	rjmp	.+402    	; 0x254 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c7 c0       	rjmp	.+398    	; 0x254 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c5 c0       	rjmp	.+394    	; 0x254 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c3 c0       	rjmp	.+390    	; 0x254 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c1 c0       	rjmp	.+386    	; 0x254 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	bf c0       	rjmp	.+382    	; 0x254 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	bd c0       	rjmp	.+378    	; 0x254 <__bad_interrupt>
      da:	00 00       	nop
      dc:	bb c0       	rjmp	.+374    	; 0x254 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b9 c0       	rjmp	.+370    	; 0x254 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b7 c0       	rjmp	.+366    	; 0x254 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b5 c0       	rjmp	.+362    	; 0x254 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b3 c0       	rjmp	.+358    	; 0x254 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b1 c0       	rjmp	.+354    	; 0x254 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	af c0       	rjmp	.+350    	; 0x254 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ad c0       	rjmp	.+346    	; 0x254 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ab c0       	rjmp	.+342    	; 0x254 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a9 c0       	rjmp	.+338    	; 0x254 <__bad_interrupt>
     102:	00 00       	nop
     104:	a7 c0       	rjmp	.+334    	; 0x254 <__bad_interrupt>
     106:	00 00       	nop
     108:	a5 c0       	rjmp	.+330    	; 0x254 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a3 c0       	rjmp	.+326    	; 0x254 <__bad_interrupt>
     10e:	00 00       	nop
     110:	a1 c0       	rjmp	.+322    	; 0x254 <__bad_interrupt>
     112:	00 00       	nop
     114:	9f c0       	rjmp	.+318    	; 0x254 <__bad_interrupt>
     116:	00 00       	nop
     118:	9d c0       	rjmp	.+314    	; 0x254 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	9b c0       	rjmp	.+310    	; 0x254 <__bad_interrupt>
     11e:	00 00       	nop
     120:	99 c0       	rjmp	.+306    	; 0x254 <__bad_interrupt>
     122:	00 00       	nop
     124:	97 c0       	rjmp	.+302    	; 0x254 <__bad_interrupt>
     126:	00 00       	nop
     128:	95 c0       	rjmp	.+298    	; 0x254 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	93 c0       	rjmp	.+294    	; 0x254 <__bad_interrupt>
     12e:	00 00       	nop
     130:	91 c0       	rjmp	.+290    	; 0x254 <__bad_interrupt>
     132:	00 00       	nop
     134:	8f c0       	rjmp	.+286    	; 0x254 <__bad_interrupt>
     136:	00 00       	nop
     138:	8d c0       	rjmp	.+282    	; 0x254 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	8b c0       	rjmp	.+278    	; 0x254 <__bad_interrupt>
     13e:	00 00       	nop
     140:	89 c0       	rjmp	.+274    	; 0x254 <__bad_interrupt>
     142:	00 00       	nop
     144:	87 c0       	rjmp	.+270    	; 0x254 <__bad_interrupt>
     146:	00 00       	nop
     148:	85 c0       	rjmp	.+266    	; 0x254 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	83 c0       	rjmp	.+262    	; 0x254 <__bad_interrupt>
     14e:	00 00       	nop
     150:	81 c0       	rjmp	.+258    	; 0x254 <__bad_interrupt>
     152:	00 00       	nop
     154:	7f c0       	rjmp	.+254    	; 0x254 <__bad_interrupt>
     156:	00 00       	nop
     158:	7d c0       	rjmp	.+250    	; 0x254 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	7b c0       	rjmp	.+246    	; 0x254 <__bad_interrupt>
     15e:	00 00       	nop
     160:	79 c0       	rjmp	.+242    	; 0x254 <__bad_interrupt>
     162:	00 00       	nop
     164:	77 c0       	rjmp	.+238    	; 0x254 <__bad_interrupt>
     166:	00 00       	nop
     168:	75 c0       	rjmp	.+234    	; 0x254 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	73 c0       	rjmp	.+230    	; 0x254 <__bad_interrupt>
     16e:	00 00       	nop
     170:	71 c0       	rjmp	.+226    	; 0x254 <__bad_interrupt>
     172:	00 00       	nop
     174:	6f c0       	rjmp	.+222    	; 0x254 <__bad_interrupt>
     176:	00 00       	nop
     178:	6d c0       	rjmp	.+218    	; 0x254 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	6b c0       	rjmp	.+214    	; 0x254 <__bad_interrupt>
     17e:	00 00       	nop
     180:	69 c0       	rjmp	.+210    	; 0x254 <__bad_interrupt>
     182:	00 00       	nop
     184:	67 c0       	rjmp	.+206    	; 0x254 <__bad_interrupt>
     186:	00 00       	nop
     188:	65 c0       	rjmp	.+202    	; 0x254 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	63 c0       	rjmp	.+198    	; 0x254 <__bad_interrupt>
     18e:	00 00       	nop
     190:	61 c0       	rjmp	.+194    	; 0x254 <__bad_interrupt>
     192:	00 00       	nop
     194:	5f c0       	rjmp	.+190    	; 0x254 <__bad_interrupt>
     196:	00 00       	nop
     198:	5d c0       	rjmp	.+186    	; 0x254 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	5b c0       	rjmp	.+182    	; 0x254 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	59 c0       	rjmp	.+178    	; 0x254 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	57 c0       	rjmp	.+174    	; 0x254 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	55 c0       	rjmp	.+170    	; 0x254 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	53 c0       	rjmp	.+166    	; 0x254 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	51 c0       	rjmp	.+162    	; 0x254 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	4f c0       	rjmp	.+158    	; 0x254 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	4d c0       	rjmp	.+154    	; 0x254 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	4b c0       	rjmp	.+150    	; 0x254 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	49 c0       	rjmp	.+146    	; 0x254 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	47 c0       	rjmp	.+142    	; 0x254 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	45 c0       	rjmp	.+138    	; 0x254 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	43 c0       	rjmp	.+134    	; 0x254 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	41 c0       	rjmp	.+130    	; 0x254 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	3f c0       	rjmp	.+126    	; 0x254 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	3d c0       	rjmp	.+122    	; 0x254 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	3b c0       	rjmp	.+118    	; 0x254 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	39 c0       	rjmp	.+114    	; 0x254 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	37 c0       	rjmp	.+110    	; 0x254 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	35 c0       	rjmp	.+106    	; 0x254 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	33 c0       	rjmp	.+102    	; 0x254 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	31 c0       	rjmp	.+98     	; 0x254 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 20 0e 	jmp	0x1c40	; 0x1c40 <__vector_125>
     1f8:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <__vector_126>
     1fc:	16 09       	sbc	r17, r6
     1fe:	19 09       	sbc	r17, r9
     200:	1c 09       	sbc	r17, r12
     202:	1f 09       	sbc	r17, r15
     204:	22 09       	sbc	r18, r2
     206:	25 09       	sbc	r18, r5
     208:	28 09       	sbc	r18, r8

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e3       	ldi	r29, 0x3F	; 63
     214:	de bf       	out	0x3e, r29	; 62
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0c bf       	out	0x3c, r16	; 60
     21a:	18 be       	out	0x38, r1	; 56
     21c:	19 be       	out	0x39, r1	; 57
     21e:	1a be       	out	0x3a, r1	; 58
     220:	1b be       	out	0x3b, r1	; 59

00000222 <__do_copy_data>:
     222:	10 e2       	ldi	r17, 0x20	; 32
     224:	a0 e0       	ldi	r26, 0x00	; 0
     226:	b0 e2       	ldi	r27, 0x20	; 32
     228:	ea e7       	ldi	r30, 0x7A	; 122
     22a:	f1 e2       	ldi	r31, 0x21	; 33
     22c:	00 e0       	ldi	r16, 0x00	; 0
     22e:	0b bf       	out	0x3b, r16	; 59
     230:	02 c0       	rjmp	.+4      	; 0x236 <__do_copy_data+0x14>
     232:	07 90       	elpm	r0, Z+
     234:	0d 92       	st	X+, r0
     236:	ae 3d       	cpi	r26, 0xDE	; 222
     238:	b1 07       	cpc	r27, r17
     23a:	d9 f7       	brne	.-10     	; 0x232 <__do_copy_data+0x10>
     23c:	1b be       	out	0x3b, r1	; 59

0000023e <__do_clear_bss>:
     23e:	23 e2       	ldi	r18, 0x23	; 35
     240:	ae ed       	ldi	r26, 0xDE	; 222
     242:	b0 e2       	ldi	r27, 0x20	; 32
     244:	01 c0       	rjmp	.+2      	; 0x248 <.do_clear_bss_start>

00000246 <.do_clear_bss_loop>:
     246:	1d 92       	st	X+, r1

00000248 <.do_clear_bss_start>:
     248:	ad 35       	cpi	r26, 0x5D	; 93
     24a:	b2 07       	cpc	r27, r18
     24c:	e1 f7       	brne	.-8      	; 0x246 <.do_clear_bss_loop>
     24e:	0d d0       	rcall	.+26     	; 0x26a <main>
     250:	0c 94 bb 10 	jmp	0x2176	; 0x2176 <_exit>

00000254 <__bad_interrupt>:
     254:	d5 ce       	rjmp	.-598    	; 0x0 <__vectors>

00000256 <uart_putchar>:
volatile FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);


void uart_putchar(uint8_t c, FILE * stream)
{
	udi_cdc_putc(c);
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	28 c3       	rjmp	.+1616   	; 0x8aa <udi_cdc_putc>
     25a:	08 95       	ret

0000025c <my_callback_cdc_enable>:

bool my_callback_cdc_enable(void)
{

	return true;
}
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	08 95       	ret

00000260 <my_callback_cdc_disable>:
void my_callback_cdc_disable(void)
{
     260:	08 95       	ret

00000262 <my_callback_rx_notify>:
}

void my_callback_rx_notify(uint8_t port)
{
	//echo test
	udi_cdc_putc(udi_cdc_getc());
     262:	9a d2       	rcall	.+1332   	; 0x798 <udi_cdc_getc>
     264:	22 c3       	rjmp	.+1604   	; 0x8aa <udi_cdc_putc>
     266:	08 95       	ret

00000268 <my_callback_tx_empty_notify>:
	
}

void my_callback_tx_empty_notify(uint8_t port)
{
     268:	08 95       	ret

0000026a <main>:

int main(void)
{


	cli();
     26a:	f8 94       	cli

	sysclk_init();
     26c:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <sysclk_init>


	udc_start();
     270:	05 d4       	rcall	.+2058   	; 0xa7c <udc_start>

	
	stdout = &mystdout;
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	90 e2       	ldi	r25, 0x20	; 32
     276:	80 93 59 23 	sts	0x2359, r24	; 0x802359 <__iob+0x2>
     27a:	90 93 5a 23 	sts	0x235A, r25	; 0x80235a <__iob+0x3>
	
	irq_initialize_vectors();
     27e:	87 e0       	ldi	r24, 0x07	; 7
     280:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>


	sei();
     284:	78 94       	sei
	
	while(1){ }
     286:	ff cf       	rjmp	.-2      	; 0x286 <main+0x1c>

00000288 <udi_cdc_comm_disable>:
}

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
}
     288:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <udi_cdc_nb_comm_enabled>
     28c:	81 50       	subi	r24, 0x01	; 1
     28e:	80 93 f4 21 	sts	0x21F4, r24	; 0x8021f4 <udi_cdc_nb_comm_enabled>
     292:	08 95       	ret

00000294 <udi_cdc_data_setup>:
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	08 95       	ret

00000298 <udi_cdc_getsetting>:
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	08 95       	ret

0000029c <udi_cdc_comm_setup>:
     29c:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <udd_g_ctrlreq>
     2a0:	88 23       	and	r24, r24
     2a2:	cc f4       	brge	.+50     	; 0x2d6 <udi_cdc_comm_setup+0x3a>
     2a4:	80 76       	andi	r24, 0x60	; 96
     2a6:	80 32       	cpi	r24, 0x20	; 32
     2a8:	b9 f5       	brne	.+110    	; 0x318 <udi_cdc_comm_setup+0x7c>
     2aa:	80 91 42 23 	lds	r24, 0x2342	; 0x802342 <udd_g_ctrlreq+0x1>
     2ae:	81 32       	cpi	r24, 0x21	; 33
     2b0:	a9 f5       	brne	.+106    	; 0x31c <udi_cdc_comm_setup+0x80>
     2b2:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <udd_g_ctrlreq+0x6>
     2b6:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <udd_g_ctrlreq+0x7>
     2ba:	07 97       	sbiw	r24, 0x07	; 7
     2bc:	89 f5       	brne	.+98     	; 0x320 <udi_cdc_comm_setup+0x84>
     2be:	e1 e4       	ldi	r30, 0x41	; 65
     2c0:	f3 e2       	ldi	r31, 0x23	; 35
     2c2:	82 e0       	ldi	r24, 0x02	; 2
     2c4:	92 e2       	ldi	r25, 0x22	; 34
     2c6:	80 87       	std	Z+8, r24	; 0x08
     2c8:	91 87       	std	Z+9, r25	; 0x09
     2ca:	87 e0       	ldi	r24, 0x07	; 7
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	82 87       	std	Z+10, r24	; 0x0a
     2d0:	93 87       	std	Z+11, r25	; 0x0b
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	08 95       	ret
     2d6:	80 76       	andi	r24, 0x60	; 96
     2d8:	80 32       	cpi	r24, 0x20	; 32
     2da:	21 f5       	brne	.+72     	; 0x324 <udi_cdc_comm_setup+0x88>
     2dc:	80 91 42 23 	lds	r24, 0x2342	; 0x802342 <udd_g_ctrlreq+0x1>
     2e0:	80 32       	cpi	r24, 0x20	; 32
     2e2:	21 f0       	breq	.+8      	; 0x2ec <udi_cdc_comm_setup+0x50>
     2e4:	82 32       	cpi	r24, 0x22	; 34
     2e6:	01 f1       	breq	.+64     	; 0x328 <udi_cdc_comm_setup+0x8c>
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	08 95       	ret
     2ec:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <udd_g_ctrlreq+0x6>
     2f0:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <udd_g_ctrlreq+0x7>
     2f4:	07 97       	sbiw	r24, 0x07	; 7
     2f6:	d1 f4       	brne	.+52     	; 0x32c <udi_cdc_comm_setup+0x90>
     2f8:	e1 e4       	ldi	r30, 0x41	; 65
     2fa:	f3 e2       	ldi	r31, 0x23	; 35
     2fc:	88 e9       	ldi	r24, 0x98	; 152
     2fe:	91 e0       	ldi	r25, 0x01	; 1
     300:	84 87       	std	Z+12, r24	; 0x0c
     302:	95 87       	std	Z+13, r25	; 0x0d
     304:	82 e0       	ldi	r24, 0x02	; 2
     306:	92 e2       	ldi	r25, 0x22	; 34
     308:	80 87       	std	Z+8, r24	; 0x08
     30a:	91 87       	std	Z+9, r25	; 0x09
     30c:	87 e0       	ldi	r24, 0x07	; 7
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	82 87       	std	Z+10, r24	; 0x0a
     312:	93 87       	std	Z+11, r25	; 0x0b
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	08 95       	ret
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	08 95       	ret
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	08 95       	ret
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	08 95       	ret
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	08 95       	ret
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	08 95       	ret
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	08 95       	ret

00000330 <udi_cdc_line_coding_received>:
     330:	08 95       	ret

00000332 <udi_cdc_comm_enable>:
     332:	10 92 f4 21 	sts	0x21F4, r1	; 0x8021f4 <udi_cdc_nb_comm_enabled>
     336:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <udi_cdc_state>
     33a:	10 92 01 22 	sts	0x2201, r1	; 0x802201 <udi_cdc_state+0x1>
     33e:	e6 ef       	ldi	r30, 0xF6	; 246
     340:	f1 e2       	ldi	r31, 0x21	; 33
     342:	81 ea       	ldi	r24, 0xA1	; 161
     344:	80 83       	st	Z, r24
     346:	80 e2       	ldi	r24, 0x20	; 32
     348:	81 83       	std	Z+1, r24	; 0x01
     34a:	12 82       	std	Z+2, r1	; 0x02
     34c:	13 82       	std	Z+3, r1	; 0x03
     34e:	14 82       	std	Z+4, r1	; 0x04
     350:	15 82       	std	Z+5, r1	; 0x05
     352:	82 e0       	ldi	r24, 0x02	; 2
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	86 83       	std	Z+6, r24	; 0x06
     358:	97 83       	std	Z+7, r25	; 0x07
     35a:	10 86       	std	Z+8, r1	; 0x08
     35c:	11 86       	std	Z+9, r1	; 0x09
     35e:	e2 e0       	ldi	r30, 0x02	; 2
     360:	f2 e2       	ldi	r31, 0x22	; 34
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	92 ec       	ldi	r25, 0xC2	; 194
     366:	a1 e0       	ldi	r26, 0x01	; 1
     368:	b0 e0       	ldi	r27, 0x00	; 0
     36a:	80 83       	st	Z, r24
     36c:	91 83       	std	Z+1, r25	; 0x01
     36e:	a2 83       	std	Z+2, r26	; 0x02
     370:	b3 83       	std	Z+3, r27	; 0x03
     372:	14 82       	std	Z+4, r1	; 0x04
     374:	15 82       	std	Z+5, r1	; 0x05
     376:	88 e0       	ldi	r24, 0x08	; 8
     378:	86 83       	std	Z+6, r24	; 0x06
     37a:	70 df       	rcall	.-288    	; 0x25c <my_callback_cdc_enable>
     37c:	88 23       	and	r24, r24
     37e:	29 f0       	breq	.+10     	; 0x38a <udi_cdc_comm_enable+0x58>
     380:	90 91 f4 21 	lds	r25, 0x21F4	; 0x8021f4 <udi_cdc_nb_comm_enabled>
     384:	9f 5f       	subi	r25, 0xFF	; 255
     386:	90 93 f4 21 	sts	0x21F4, r25	; 0x8021f4 <udi_cdc_nb_comm_enabled>
     38a:	08 95       	ret

0000038c <udi_cdc_tx_send>:
     38c:	ff 92       	push	r15
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	1f 92       	push	r1
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
     39c:	80 91 e1 20 	lds	r24, 0x20E1	; 0x8020e1 <udi_cdc_tx_trans_ongoing>
     3a0:	81 11       	cpse	r24, r1
     3a2:	9e c0       	rjmp	.+316    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     3a4:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <udd_is_high_speed>
     3a8:	88 23       	and	r24, r24
     3aa:	51 f0       	breq	.+20     	; 0x3c0 <udi_cdc_tx_send+0x34>
     3ac:	00 91 e2 20 	lds	r16, 0x20E2	; 0x8020e2 <udi_cdc_tx_sof_num>
     3b0:	10 91 e3 20 	lds	r17, 0x20E3	; 0x8020e3 <udi_cdc_tx_sof_num+0x1>
     3b4:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <udd_get_micro_frame_number>
     3b8:	08 17       	cp	r16, r24
     3ba:	19 07       	cpc	r17, r25
     3bc:	59 f4       	brne	.+22     	; 0x3d4 <udi_cdc_tx_send+0x48>
     3be:	90 c0       	rjmp	.+288    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     3c0:	00 91 e2 20 	lds	r16, 0x20E2	; 0x8020e2 <udi_cdc_tx_sof_num>
     3c4:	10 91 e3 20 	lds	r17, 0x20E3	; 0x8020e3 <udi_cdc_tx_sof_num+0x1>
     3c8:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <udd_get_frame_number>
     3cc:	08 17       	cp	r16, r24
     3ce:	19 07       	cpc	r17, r25
     3d0:	09 f4       	brne	.+2      	; 0x3d4 <udi_cdc_tx_send+0x48>
     3d2:	86 c0       	rjmp	.+268    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     3d4:	8f b7       	in	r24, 0x3f	; 63
     3d6:	89 83       	std	Y+1, r24	; 0x01
     3d8:	f8 94       	cli
     3da:	19 81       	ldd	r17, Y+1	; 0x01
     3dc:	00 91 e4 20 	lds	r16, 0x20E4	; 0x8020e4 <udi_cdc_tx_buf_sel>
     3e0:	e0 2f       	mov	r30, r16
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	ee 0f       	add	r30, r30
     3e6:	ff 1f       	adc	r31, r31
     3e8:	eb 51       	subi	r30, 0x1B	; 27
     3ea:	ff 4d       	sbci	r31, 0xDF	; 223
     3ec:	80 81       	ld	r24, Z
     3ee:	91 81       	ldd	r25, Z+1	; 0x01
     3f0:	89 2b       	or	r24, r25
     3f2:	09 f5       	brne	.+66     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     3f4:	80 91 de 20 	lds	r24, 0x20DE	; 0x8020de <__data_end>
     3f8:	90 91 df 20 	lds	r25, 0x20DF	; 0x8020df <__data_end+0x1>
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	80 93 de 20 	sts	0x20DE, r24	; 0x8020de <__data_end>
     402:	90 93 df 20 	sts	0x20DF, r25	; 0x8020df <__data_end+0x1>
     406:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <udd_is_high_speed>
     40a:	81 11       	cpse	r24, r1
     40c:	07 c0       	rjmp	.+14     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     40e:	80 91 de 20 	lds	r24, 0x20DE	; 0x8020de <__data_end>
     412:	90 91 df 20 	lds	r25, 0x20DF	; 0x8020df <__data_end+0x1>
     416:	84 36       	cpi	r24, 0x64	; 100
     418:	91 05       	cpc	r25, r1
     41a:	58 f0       	brcs	.+22     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     41c:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <udd_is_high_speed>
     420:	88 23       	and	r24, r24
     422:	49 f0       	breq	.+18     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     424:	80 91 de 20 	lds	r24, 0x20DE	; 0x8020de <__data_end>
     428:	90 91 df 20 	lds	r25, 0x20DF	; 0x8020df <__data_end+0x1>
     42c:	80 32       	cpi	r24, 0x20	; 32
     42e:	93 40       	sbci	r25, 0x03	; 3
     430:	10 f4       	brcc	.+4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     432:	1f bf       	out	0x3f, r17	; 63
     434:	55 c0       	rjmp	.+170    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     436:	10 92 de 20 	sts	0x20DE, r1	; 0x8020de <__data_end>
     43a:	10 92 df 20 	sts	0x20DF, r1	; 0x8020df <__data_end+0x1>
     43e:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <udi_cdc_tx_both_buf_to_send>
     442:	81 11       	cpse	r24, r1
     444:	06 c0       	rjmp	.+12     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	01 11       	cpse	r16, r1
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	80 93 e4 20 	sts	0x20E4, r24	; 0x8020e4 <udi_cdc_tx_buf_sel>
     450:	04 c0       	rjmp	.+8      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	01 11       	cpse	r16, r1
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	08 2f       	mov	r16, r24
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	80 93 e1 20 	sts	0x20E1, r24	; 0x8020e1 <udi_cdc_tx_trans_ongoing>
     460:	1f bf       	out	0x3f, r17	; 63
     462:	10 e0       	ldi	r17, 0x00	; 0
     464:	f8 01       	movw	r30, r16
     466:	ee 0f       	add	r30, r30
     468:	ff 1f       	adc	r31, r31
     46a:	eb 51       	subi	r30, 0x1B	; 27
     46c:	ff 4d       	sbci	r31, 0xDF	; 223
     46e:	ff 24       	eor	r15, r15
     470:	f3 94       	inc	r15
     472:	80 81       	ld	r24, Z
     474:	91 81       	ldd	r25, Z+1	; 0x01
     476:	80 34       	cpi	r24, 0x40	; 64
     478:	91 05       	cpc	r25, r1
     47a:	09 f4       	brne	.+2      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     47c:	f1 2c       	mov	r15, r1
     47e:	ff 20       	and	r15, r15
     480:	91 f0       	breq	.+36     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     482:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <udd_is_high_speed>
     486:	88 23       	and	r24, r24
     488:	39 f0       	breq	.+14     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     48a:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <udd_get_micro_frame_number>
     48e:	80 93 e2 20 	sts	0x20E2, r24	; 0x8020e2 <udi_cdc_tx_sof_num>
     492:	90 93 e3 20 	sts	0x20E3, r25	; 0x8020e3 <udi_cdc_tx_sof_num+0x1>
     496:	0b c0       	rjmp	.+22     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     498:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <udd_get_frame_number>
     49c:	80 93 e2 20 	sts	0x20E2, r24	; 0x8020e2 <udi_cdc_tx_sof_num>
     4a0:	90 93 e3 20 	sts	0x20E3, r25	; 0x8020e3 <udi_cdc_tx_sof_num+0x1>
     4a4:	04 c0       	rjmp	.+8      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4a6:	10 92 e2 20 	sts	0x20E2, r1	; 0x8020e2 <udi_cdc_tx_sof_num>
     4aa:	10 92 e3 20 	sts	0x20E3, r1	; 0x8020e3 <udi_cdc_tx_sof_num+0x1>
     4ae:	f8 01       	movw	r30, r16
     4b0:	ee 0f       	add	r30, r30
     4b2:	ff 1f       	adc	r31, r31
     4b4:	eb 51       	subi	r30, 0x1B	; 27
     4b6:	ff 4d       	sbci	r31, 0xDF	; 223
     4b8:	20 81       	ld	r18, Z
     4ba:	31 81       	ldd	r19, Z+1	; 0x01
     4bc:	a8 01       	movw	r20, r16
     4be:	00 24       	eor	r0, r0
     4c0:	56 95       	lsr	r21
     4c2:	47 95       	ror	r20
     4c4:	07 94       	ror	r0
     4c6:	56 95       	lsr	r21
     4c8:	47 95       	ror	r20
     4ca:	07 94       	ror	r0
     4cc:	54 2f       	mov	r21, r20
     4ce:	40 2d       	mov	r20, r0
     4d0:	46 51       	subi	r20, 0x16	; 22
     4d2:	5f 4d       	sbci	r21, 0xDF	; 223
     4d4:	0a e7       	ldi	r16, 0x7A	; 122
     4d6:	12 e0       	ldi	r17, 0x02	; 2
     4d8:	6f 2d       	mov	r22, r15
     4da:	81 e8       	ldi	r24, 0x81	; 129
     4dc:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <udd_ep_run>
     4e0:	0f 90       	pop	r0
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	0f 91       	pop	r16
     4ea:	ff 90       	pop	r15
     4ec:	08 95       	ret

000004ee <udi_cdc_data_sof_notify>:
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	4d cf       	rjmp	.-358    	; 0x38c <udi_cdc_tx_send>
     4f2:	08 95       	ret

000004f4 <udi_cdc_data_sent>:
     4f4:	81 11       	cpse	r24, r1
     4f6:	19 c0       	rjmp	.+50     	; 0x52a <udi_cdc_data_sent+0x36>
     4f8:	20 91 e4 20 	lds	r18, 0x20E4	; 0x8020e4 <udi_cdc_tx_buf_sel>
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	22 23       	and	r18, r18
     502:	11 f0       	breq	.+4      	; 0x508 <udi_cdc_data_sent+0x14>
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	88 0f       	add	r24, r24
     50a:	99 1f       	adc	r25, r25
     50c:	fc 01       	movw	r30, r24
     50e:	eb 51       	subi	r30, 0x1B	; 27
     510:	ff 4d       	sbci	r31, 0xDF	; 223
     512:	10 82       	st	Z, r1
     514:	11 82       	std	Z+1, r1	; 0x01
     516:	10 92 e0 20 	sts	0x20E0, r1	; 0x8020e0 <udi_cdc_tx_both_buf_to_send>
     51a:	10 92 e1 20 	sts	0x20E1, r1	; 0x8020e1 <udi_cdc_tx_trans_ongoing>
     51e:	67 2b       	or	r22, r23
     520:	11 f0       	breq	.+4      	; 0x526 <udi_cdc_data_sent+0x32>
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	a1 de       	rcall	.-702    	; 0x268 <my_callback_tx_empty_notify>
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	31 cf       	rjmp	.-414    	; 0x38c <udi_cdc_tx_send>
     52a:	08 95       	ret

0000052c <udi_cdc_data_disable>:
     52c:	80 91 f3 21 	lds	r24, 0x21F3	; 0x8021f3 <udi_cdc_nb_data_enabled>
     530:	81 50       	subi	r24, 0x01	; 1
     532:	80 93 f3 21 	sts	0x21F3, r24	; 0x8021f3 <udi_cdc_nb_data_enabled>
     536:	80 91 f3 21 	lds	r24, 0x21F3	; 0x8021f3 <udi_cdc_nb_data_enabled>
     53a:	92 de       	rcall	.-732    	; 0x260 <my_callback_cdc_disable>
     53c:	10 92 f2 21 	sts	0x21F2, r1	; 0x8021f2 <udi_cdc_data_running>
     540:	08 95       	ret

00000542 <udi_cdc_multi_get_nb_received_data>:
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	1f 92       	push	r1
     548:	cd b7       	in	r28, 0x3d	; 61
     54a:	de b7       	in	r29, 0x3e	; 62
     54c:	8f b7       	in	r24, 0x3f	; 63
     54e:	89 83       	std	Y+1, r24	; 0x01
     550:	f8 94       	cli
     552:	49 81       	ldd	r20, Y+1	; 0x01
     554:	20 91 6b 21 	lds	r18, 0x216B	; 0x80216b <udi_cdc_rx_pos>
     558:	30 91 6c 21 	lds	r19, 0x216C	; 0x80216c <udi_cdc_rx_pos+0x1>
     55c:	e0 91 6d 21 	lds	r30, 0x216D	; 0x80216d <udi_cdc_rx_buf_sel>
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	ee 0f       	add	r30, r30
     564:	ff 1f       	adc	r31, r31
     566:	e2 59       	subi	r30, 0x92	; 146
     568:	fe 4d       	sbci	r31, 0xDE	; 222
     56a:	80 81       	ld	r24, Z
     56c:	91 81       	ldd	r25, Z+1	; 0x01
     56e:	4f bf       	out	0x3f, r20	; 63
     570:	82 1b       	sub	r24, r18
     572:	93 0b       	sbc	r25, r19
     574:	0f 90       	pop	r0
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	08 95       	ret

0000057c <udi_cdc_multi_is_rx_ready>:
     57c:	e2 df       	rcall	.-60     	; 0x542 <udi_cdc_multi_get_nb_received_data>
     57e:	21 e0       	ldi	r18, 0x01	; 1
     580:	89 2b       	or	r24, r25
     582:	09 f4       	brne	.+2      	; 0x586 <udi_cdc_multi_is_rx_ready+0xa>
     584:	20 e0       	ldi	r18, 0x00	; 0
     586:	82 2f       	mov	r24, r18
     588:	08 95       	ret

0000058a <udi_cdc_rx_start>:
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	1f 92       	push	r1
     594:	cd b7       	in	r28, 0x3d	; 61
     596:	de b7       	in	r29, 0x3e	; 62
     598:	8f b7       	in	r24, 0x3f	; 63
     59a:	89 83       	std	Y+1, r24	; 0x01
     59c:	f8 94       	cli
     59e:	99 81       	ldd	r25, Y+1	; 0x01
     5a0:	20 91 6d 21 	lds	r18, 0x216D	; 0x80216d <udi_cdc_rx_buf_sel>
     5a4:	80 91 6a 21 	lds	r24, 0x216A	; 0x80216a <udi_cdc_rx_trans_ongoing>
     5a8:	81 11       	cpse	r24, r1
     5aa:	10 c0       	rjmp	.+32     	; 0x5cc <udi_cdc_rx_start+0x42>
     5ac:	60 91 6b 21 	lds	r22, 0x216B	; 0x80216b <udi_cdc_rx_pos>
     5b0:	70 91 6c 21 	lds	r23, 0x216C	; 0x80216c <udi_cdc_rx_pos+0x1>
     5b4:	02 2f       	mov	r16, r18
     5b6:	10 e0       	ldi	r17, 0x00	; 0
     5b8:	f8 01       	movw	r30, r16
     5ba:	ee 0f       	add	r30, r30
     5bc:	ff 1f       	adc	r31, r31
     5be:	e2 59       	subi	r30, 0x92	; 146
     5c0:	fe 4d       	sbci	r31, 0xDE	; 222
     5c2:	40 81       	ld	r20, Z
     5c4:	51 81       	ldd	r21, Z+1	; 0x01
     5c6:	64 17       	cp	r22, r20
     5c8:	75 07       	cpc	r23, r21
     5ca:	18 f4       	brcc	.+6      	; 0x5d2 <udi_cdc_rx_start+0x48>
     5cc:	9f bf       	out	0x3f, r25	; 63
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	27 c0       	rjmp	.+78     	; 0x620 <udi_cdc_rx_start+0x96>
     5d2:	10 92 6b 21 	sts	0x216B, r1	; 0x80216b <udi_cdc_rx_pos>
     5d6:	10 92 6c 21 	sts	0x216C, r1	; 0x80216c <udi_cdc_rx_pos+0x1>
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	21 11       	cpse	r18, r1
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	80 93 6d 21 	sts	0x216D, r24	; 0x80216d <udi_cdc_rx_buf_sel>
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	80 93 6a 21 	sts	0x216A, r24	; 0x80216a <udi_cdc_rx_trans_ongoing>
     5ea:	9f bf       	out	0x3f, r25	; 63
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	c6 df       	rcall	.-116    	; 0x57c <udi_cdc_multi_is_rx_ready>
     5f0:	88 23       	and	r24, r24
     5f2:	11 f0       	breq	.+4      	; 0x5f8 <udi_cdc_rx_start+0x6e>
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	35 de       	rcall	.-918    	; 0x262 <my_callback_rx_notify>
     5f8:	a8 01       	movw	r20, r16
     5fa:	00 24       	eor	r0, r0
     5fc:	56 95       	lsr	r21
     5fe:	47 95       	ror	r20
     600:	07 94       	ror	r0
     602:	56 95       	lsr	r21
     604:	47 95       	ror	r20
     606:	07 94       	ror	r0
     608:	54 2f       	mov	r21, r20
     60a:	40 2d       	mov	r20, r0
     60c:	4e 58       	subi	r20, 0x8E	; 142
     60e:	5e 4d       	sbci	r21, 0xDE	; 222
     610:	08 e4       	ldi	r16, 0x48	; 72
     612:	13 e0       	ldi	r17, 0x03	; 3
     614:	20 e4       	ldi	r18, 0x40	; 64
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	61 e0       	ldi	r22, 0x01	; 1
     61a:	82 e0       	ldi	r24, 0x02	; 2
     61c:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <udd_ep_run>
     620:	0f 90       	pop	r0
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	1f 91       	pop	r17
     628:	0f 91       	pop	r16
     62a:	08 95       	ret

0000062c <udi_cdc_data_enable>:
     62c:	10 92 f3 21 	sts	0x21F3, r1	; 0x8021f3 <udi_cdc_nb_data_enabled>
     630:	10 92 e1 20 	sts	0x20E1, r1	; 0x8020e1 <udi_cdc_tx_trans_ongoing>
     634:	10 92 e0 20 	sts	0x20E0, r1	; 0x8020e0 <udi_cdc_tx_both_buf_to_send>
     638:	10 92 e4 20 	sts	0x20E4, r1	; 0x8020e4 <udi_cdc_tx_buf_sel>
     63c:	e5 ee       	ldi	r30, 0xE5	; 229
     63e:	f0 e2       	ldi	r31, 0x20	; 32
     640:	10 82       	st	Z, r1
     642:	11 82       	std	Z+1, r1	; 0x01
     644:	12 82       	std	Z+2, r1	; 0x02
     646:	13 82       	std	Z+3, r1	; 0x03
     648:	10 92 e2 20 	sts	0x20E2, r1	; 0x8020e2 <udi_cdc_tx_sof_num>
     64c:	10 92 e3 20 	sts	0x20E3, r1	; 0x8020e3 <udi_cdc_tx_sof_num+0x1>
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	9c de       	rcall	.-712    	; 0x38c <udi_cdc_tx_send>
     654:	10 92 6a 21 	sts	0x216A, r1	; 0x80216a <udi_cdc_rx_trans_ongoing>
     658:	10 92 6d 21 	sts	0x216D, r1	; 0x80216d <udi_cdc_rx_buf_sel>
     65c:	ee e6       	ldi	r30, 0x6E	; 110
     65e:	f1 e2       	ldi	r31, 0x21	; 33
     660:	10 82       	st	Z, r1
     662:	11 82       	std	Z+1, r1	; 0x01
     664:	12 82       	std	Z+2, r1	; 0x02
     666:	13 82       	std	Z+3, r1	; 0x03
     668:	10 92 6b 21 	sts	0x216B, r1	; 0x80216b <udi_cdc_rx_pos>
     66c:	10 92 6c 21 	sts	0x216C, r1	; 0x80216c <udi_cdc_rx_pos+0x1>
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	8b df       	rcall	.-234    	; 0x58a <udi_cdc_rx_start>
     674:	88 23       	and	r24, r24
     676:	59 f0       	breq	.+22     	; 0x68e <udi_cdc_data_enable+0x62>
     678:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <udi_cdc_nb_data_enabled>
     67c:	9f 5f       	subi	r25, 0xFF	; 255
     67e:	90 93 f3 21 	sts	0x21F3, r25	; 0x8021f3 <udi_cdc_nb_data_enabled>
     682:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <udi_cdc_nb_data_enabled>
     686:	91 30       	cpi	r25, 0x01	; 1
     688:	11 f4       	brne	.+4      	; 0x68e <udi_cdc_data_enable+0x62>
     68a:	90 93 f2 21 	sts	0x21F2, r25	; 0x8021f2 <udi_cdc_data_running>
     68e:	08 95       	ret

00000690 <udi_cdc_data_received>:
     690:	0f 93       	push	r16
     692:	1f 93       	push	r17
     694:	81 11       	cpse	r24, r1
     696:	29 c0       	rjmp	.+82     	; 0x6ea <udi_cdc_data_received+0x5a>
     698:	80 91 6d 21 	lds	r24, 0x216D	; 0x80216d <udi_cdc_rx_buf_sel>
     69c:	e1 e0       	ldi	r30, 0x01	; 1
     69e:	81 11       	cpse	r24, r1
     6a0:	e0 e0       	ldi	r30, 0x00	; 0
     6a2:	84 2f       	mov	r24, r20
     6a4:	61 15       	cp	r22, r1
     6a6:	71 05       	cpc	r23, r1
     6a8:	a9 f4       	brne	.+42     	; 0x6d4 <udi_cdc_data_received+0x44>
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	00 24       	eor	r0, r0
     6ae:	f6 95       	lsr	r31
     6b0:	e7 95       	ror	r30
     6b2:	07 94       	ror	r0
     6b4:	f6 95       	lsr	r31
     6b6:	e7 95       	ror	r30
     6b8:	07 94       	ror	r0
     6ba:	fe 2f       	mov	r31, r30
     6bc:	e0 2d       	mov	r30, r0
     6be:	af 01       	movw	r20, r30
     6c0:	4e 58       	subi	r20, 0x8E	; 142
     6c2:	5e 4d       	sbci	r21, 0xDE	; 222
     6c4:	08 e4       	ldi	r16, 0x48	; 72
     6c6:	13 e0       	ldi	r17, 0x03	; 3
     6c8:	20 e4       	ldi	r18, 0x40	; 64
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	61 e0       	ldi	r22, 0x01	; 1
     6ce:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <udd_ep_run>
     6d2:	0b c0       	rjmp	.+22     	; 0x6ea <udi_cdc_data_received+0x5a>
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	ee 0f       	add	r30, r30
     6d8:	ff 1f       	adc	r31, r31
     6da:	e2 59       	subi	r30, 0x92	; 146
     6dc:	fe 4d       	sbci	r31, 0xDE	; 222
     6de:	60 83       	st	Z, r22
     6e0:	71 83       	std	Z+1, r23	; 0x01
     6e2:	10 92 6a 21 	sts	0x216A, r1	; 0x80216a <udi_cdc_rx_trans_ongoing>
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	50 df       	rcall	.-352    	; 0x58a <udi_cdc_rx_start>
     6ea:	1f 91       	pop	r17
     6ec:	0f 91       	pop	r16
     6ee:	08 95       	ret

000006f0 <udi_cdc_multi_getc>:
     6f0:	ef 92       	push	r14
     6f2:	ff 92       	push	r15
     6f4:	1f 93       	push	r17
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	1f 92       	push	r1
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
     700:	11 e0       	ldi	r17, 0x01	; 1
     702:	80 91 08 22 	lds	r24, 0x2208	; 0x802208 <udi_cdc_line_coding+0x6>
     706:	89 30       	cpi	r24, 0x09	; 9
     708:	09 f0       	breq	.+2      	; 0x70c <udi_cdc_multi_getc+0x1c>
     70a:	10 e0       	ldi	r17, 0x00	; 0
     70c:	40 e0       	ldi	r20, 0x00	; 0
     70e:	50 e0       	ldi	r21, 0x00	; 0
     710:	8f b7       	in	r24, 0x3f	; 63
     712:	89 83       	std	Y+1, r24	; 0x01
     714:	f8 94       	cli
     716:	a9 81       	ldd	r26, Y+1	; 0x01
     718:	20 91 6b 21 	lds	r18, 0x216B	; 0x80216b <udi_cdc_rx_pos>
     71c:	30 91 6c 21 	lds	r19, 0x216C	; 0x80216c <udi_cdc_rx_pos+0x1>
     720:	80 91 6d 21 	lds	r24, 0x216D	; 0x80216d <udi_cdc_rx_buf_sel>
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	fc 01       	movw	r30, r24
     728:	ee 0f       	add	r30, r30
     72a:	ff 1f       	adc	r31, r31
     72c:	e2 59       	subi	r30, 0x92	; 146
     72e:	fe 4d       	sbci	r31, 0xDE	; 222
     730:	60 81       	ld	r22, Z
     732:	71 81       	ldd	r23, Z+1	; 0x01
     734:	af bf       	out	0x3f, r26	; 63
     736:	26 17       	cp	r18, r22
     738:	37 07       	cpc	r19, r23
     73a:	30 f0       	brcs	.+12     	; 0x748 <udi_cdc_multi_getc+0x58>
     73c:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <udi_cdc_data_running>
     740:	81 11       	cpse	r24, r1
     742:	e6 cf       	rjmp	.-52     	; 0x710 <udi_cdc_multi_getc+0x20>
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	21 c0       	rjmp	.+66     	; 0x78a <udi_cdc_multi_getc+0x9a>
     748:	fc 01       	movw	r30, r24
     74a:	00 24       	eor	r0, r0
     74c:	f6 95       	lsr	r31
     74e:	e7 95       	ror	r30
     750:	07 94       	ror	r0
     752:	f6 95       	lsr	r31
     754:	e7 95       	ror	r30
     756:	07 94       	ror	r0
     758:	fe 2f       	mov	r31, r30
     75a:	e0 2d       	mov	r30, r0
     75c:	e2 0f       	add	r30, r18
     75e:	f3 1f       	adc	r31, r19
     760:	ee 58       	subi	r30, 0x8E	; 142
     762:	fe 4d       	sbci	r31, 0xDE	; 222
     764:	80 81       	ld	r24, Z
     766:	7a 01       	movw	r14, r20
     768:	e8 2a       	or	r14, r24
     76a:	2f 5f       	subi	r18, 0xFF	; 255
     76c:	3f 4f       	sbci	r19, 0xFF	; 255
     76e:	20 93 6b 21 	sts	0x216B, r18	; 0x80216b <udi_cdc_rx_pos>
     772:	30 93 6c 21 	sts	0x216C, r19	; 0x80216c <udi_cdc_rx_pos+0x1>
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	08 df       	rcall	.-496    	; 0x58a <udi_cdc_rx_start>
     77a:	11 23       	and	r17, r17
     77c:	21 f0       	breq	.+8      	; 0x786 <udi_cdc_multi_getc+0x96>
     77e:	5e 2d       	mov	r21, r14
     780:	44 27       	eor	r20, r20
     782:	10 e0       	ldi	r17, 0x00	; 0
     784:	c5 cf       	rjmp	.-118    	; 0x710 <udi_cdc_multi_getc+0x20>
     786:	8e 2d       	mov	r24, r14
     788:	9f 2d       	mov	r25, r15
     78a:	0f 90       	pop	r0
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	1f 91       	pop	r17
     792:	ff 90       	pop	r15
     794:	ef 90       	pop	r14
     796:	08 95       	ret

00000798 <udi_cdc_getc>:
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	aa cf       	rjmp	.-172    	; 0x6f0 <udi_cdc_multi_getc>
     79c:	08 95       	ret

0000079e <udi_cdc_multi_get_free_tx_buffer>:
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	1f 92       	push	r1
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
     7a8:	8f b7       	in	r24, 0x3f	; 63
     7aa:	89 83       	std	Y+1, r24	; 0x01
     7ac:	f8 94       	cli
     7ae:	99 81       	ldd	r25, Y+1	; 0x01
     7b0:	80 91 e4 20 	lds	r24, 0x20E4	; 0x8020e4 <udi_cdc_tx_buf_sel>
     7b4:	e8 2f       	mov	r30, r24
     7b6:	f0 e0       	ldi	r31, 0x00	; 0
     7b8:	ee 0f       	add	r30, r30
     7ba:	ff 1f       	adc	r31, r31
     7bc:	eb 51       	subi	r30, 0x1B	; 27
     7be:	ff 4d       	sbci	r31, 0xDF	; 223
     7c0:	20 81       	ld	r18, Z
     7c2:	31 81       	ldd	r19, Z+1	; 0x01
     7c4:	20 34       	cpi	r18, 0x40	; 64
     7c6:	31 05       	cpc	r19, r1
     7c8:	89 f4       	brne	.+34     	; 0x7ec <udi_cdc_multi_get_free_tx_buffer+0x4e>
     7ca:	40 91 e1 20 	lds	r20, 0x20E1	; 0x8020e1 <udi_cdc_tx_trans_ongoing>
     7ce:	41 11       	cpse	r20, r1
     7d0:	0d c0       	rjmp	.+26     	; 0x7ec <udi_cdc_multi_get_free_tx_buffer+0x4e>
     7d2:	40 91 e0 20 	lds	r20, 0x20E0	; 0x8020e0 <udi_cdc_tx_both_buf_to_send>
     7d6:	41 11       	cpse	r20, r1
     7d8:	09 c0       	rjmp	.+18     	; 0x7ec <udi_cdc_multi_get_free_tx_buffer+0x4e>
     7da:	21 e0       	ldi	r18, 0x01	; 1
     7dc:	20 93 e0 20 	sts	0x20E0, r18	; 0x8020e0 <udi_cdc_tx_both_buf_to_send>
     7e0:	81 11       	cpse	r24, r1
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	20 93 e4 20 	sts	0x20E4, r18	; 0x8020e4 <udi_cdc_tx_buf_sel>
     7e8:	20 e0       	ldi	r18, 0x00	; 0
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	9f bf       	out	0x3f, r25	; 63
     7ee:	80 e4       	ldi	r24, 0x40	; 64
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	82 1b       	sub	r24, r18
     7f4:	93 0b       	sbc	r25, r19
     7f6:	0f 90       	pop	r0
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	08 95       	ret

000007fe <udi_cdc_multi_is_tx_ready>:
     7fe:	cf df       	rcall	.-98     	; 0x79e <udi_cdc_multi_get_free_tx_buffer>
     800:	21 e0       	ldi	r18, 0x01	; 1
     802:	89 2b       	or	r24, r25
     804:	09 f4       	brne	.+2      	; 0x808 <udi_cdc_multi_is_tx_ready+0xa>
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	82 2f       	mov	r24, r18
     80a:	08 95       	ret

0000080c <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
     80c:	ff 92       	push	r15
     80e:	0f 93       	push	r16
     810:	1f 93       	push	r17
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	1f 92       	push	r1
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
     81c:	f6 2e       	mov	r15, r22
     81e:	17 2f       	mov	r17, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     820:	01 e0       	ldi	r16, 0x01	; 1
     822:	80 91 08 22 	lds	r24, 0x2208	; 0x802208 <udi_cdc_line_coding+0x6>
     826:	89 30       	cpi	r24, 0x09	; 9
     828:	09 f0       	breq	.+2      	; 0x82c <udi_cdc_multi_putc+0x20>
     82a:	00 e0       	ldi	r16, 0x00	; 0

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	e7 df       	rcall	.-50     	; 0x7fe <udi_cdc_multi_is_tx_ready>
     830:	81 11       	cpse	r24, r1
     832:	07 c0       	rjmp	.+14     	; 0x842 <udi_cdc_multi_putc+0x36>
		if (!udi_cdc_data_running) {
     834:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <udi_cdc_data_running>
     838:	81 11       	cpse	r24, r1
     83a:	f8 cf       	rjmp	.-16     	; 0x82c <udi_cdc_multi_putc+0x20>
			return false;
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	2d c0       	rjmp	.+90     	; 0x89c <udi_cdc_multi_putc+0x90>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     842:	8f b7       	in	r24, 0x3f	; 63
     844:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     846:	f8 94       	cli
	return flags;
     848:	29 81       	ldd	r18, Y+1	; 0x01
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     84a:	e0 91 e4 20 	lds	r30, 0x20E4	; 0x8020e4 <udi_cdc_tx_buf_sel>
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	df 01       	movw	r26, r30
     852:	aa 0f       	add	r26, r26
     854:	bb 1f       	adc	r27, r27
     856:	ab 51       	subi	r26, 0x1B	; 27
     858:	bf 4d       	sbci	r27, 0xDF	; 223
     85a:	8d 91       	ld	r24, X+
     85c:	9c 91       	ld	r25, X
     85e:	11 97       	sbiw	r26, 0x01	; 1
     860:	ac 01       	movw	r20, r24
     862:	4f 5f       	subi	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	4d 93       	st	X+, r20
     868:	5c 93       	st	X, r21
     86a:	00 24       	eor	r0, r0
     86c:	f6 95       	lsr	r31
     86e:	e7 95       	ror	r30
     870:	07 94       	ror	r0
     872:	f6 95       	lsr	r31
     874:	e7 95       	ror	r30
     876:	07 94       	ror	r0
     878:	fe 2f       	mov	r31, r30
     87a:	e0 2d       	mov	r30, r0
     87c:	8e 0f       	add	r24, r30
     87e:	9f 1f       	adc	r25, r31
     880:	fc 01       	movw	r30, r24
     882:	e6 51       	subi	r30, 0x16	; 22
     884:	ff 4d       	sbci	r31, 0xDF	; 223
     886:	f0 82       	st	Z, r15
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     888:	2f bf       	out	0x3f, r18	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
     88a:	00 23       	and	r16, r16
     88c:	29 f0       	breq	.+10     	; 0x898 <udi_cdc_multi_putc+0x8c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     88e:	f1 2e       	mov	r15, r17
     890:	11 0f       	add	r17, r17
     892:	11 0b       	sbc	r17, r17
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
     894:	00 e0       	ldi	r16, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
     896:	ca cf       	rjmp	.-108    	; 0x82c <udi_cdc_multi_putc+0x20>
	}
	return true;
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	90 e0       	ldi	r25, 0x00	; 0
}
     89c:	0f 90       	pop	r0
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	1f 91       	pop	r17
     8a4:	0f 91       	pop	r16
     8a6:	ff 90       	pop	r15
     8a8:	08 95       	ret

000008aa <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
     8aa:	bc 01       	movw	r22, r24
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	ae cf       	rjmp	.-164    	; 0x80c <udi_cdc_multi_putc>
}
     8b0:	08 95       	ret

000008b2 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     8b2:	e0 91 0e 22 	lds	r30, 0x220E	; 0x80220e <udc_ptr_conf>
     8b6:	f0 91 0f 22 	lds	r31, 0x220F	; 0x80220f <udc_ptr_conf+0x1>
     8ba:	01 90       	ld	r0, Z+
     8bc:	f0 81       	ld	r31, Z
     8be:	e0 2d       	mov	r30, r0
     8c0:	22 81       	ldd	r18, Z+2	; 0x02
     8c2:	33 81       	ldd	r19, Z+3	; 0x03
     8c4:	2e 0f       	add	r18, r30
     8c6:	3f 1f       	adc	r19, r31
     8c8:	fc 01       	movw	r30, r24
     8ca:	40 81       	ld	r20, Z
     8cc:	e4 0f       	add	r30, r20
     8ce:	f1 1d       	adc	r31, r1
     8d0:	e2 17       	cp	r30, r18
     8d2:	f3 07       	cpc	r31, r19
     8d4:	b8 f4       	brcc	.+46     	; 0x904 <udc_next_desc_in_iface+0x52>
     8d6:	81 81       	ldd	r24, Z+1	; 0x01
     8d8:	84 30       	cpi	r24, 0x04	; 4
     8da:	b9 f0       	breq	.+46     	; 0x90a <udc_next_desc_in_iface+0x58>
     8dc:	86 13       	cpse	r24, r22
     8de:	09 c0       	rjmp	.+18     	; 0x8f2 <udc_next_desc_in_iface+0x40>
     8e0:	05 c0       	rjmp	.+10     	; 0x8ec <udc_next_desc_in_iface+0x3a>
     8e2:	81 81       	ldd	r24, Z+1	; 0x01
     8e4:	84 30       	cpi	r24, 0x04	; 4
     8e6:	a1 f0       	breq	.+40     	; 0x910 <udc_next_desc_in_iface+0x5e>
     8e8:	86 13       	cpse	r24, r22
     8ea:	03 c0       	rjmp	.+6      	; 0x8f2 <udc_next_desc_in_iface+0x40>
     8ec:	8e 2f       	mov	r24, r30
     8ee:	9f 2f       	mov	r25, r31
     8f0:	08 95       	ret
     8f2:	80 81       	ld	r24, Z
     8f4:	e8 0f       	add	r30, r24
     8f6:	f1 1d       	adc	r31, r1
     8f8:	e2 17       	cp	r30, r18
     8fa:	f3 07       	cpc	r31, r19
     8fc:	90 f3       	brcs	.-28     	; 0x8e2 <udc_next_desc_in_iface+0x30>
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	08 95       	ret
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	08 95       	ret
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	08 95       	ret
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	08 95       	ret

00000916 <udc_valid_address>:
     916:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <udd_g_ctrlreq+0x2>
     91a:	8f 77       	andi	r24, 0x7F	; 127
     91c:	59 c7       	rjmp	.+3762   	; 0x17d0 <udd_set_address>
     91e:	08 95       	ret

00000920 <udc_update_iface_desc>:
     920:	90 91 10 22 	lds	r25, 0x2210	; 0x802210 <udc_num_configuration>
     924:	99 23       	and	r25, r25
     926:	81 f1       	breq	.+96     	; 0x988 <udc_update_iface_desc+0x68>
     928:	e0 91 0e 22 	lds	r30, 0x220E	; 0x80220e <udc_ptr_conf>
     92c:	f0 91 0f 22 	lds	r31, 0x220F	; 0x80220f <udc_ptr_conf+0x1>
     930:	01 90       	ld	r0, Z+
     932:	f0 81       	ld	r31, Z
     934:	e0 2d       	mov	r30, r0
     936:	94 81       	ldd	r25, Z+4	; 0x04
     938:	89 17       	cp	r24, r25
     93a:	40 f5       	brcc	.+80     	; 0x98c <udc_update_iface_desc+0x6c>
     93c:	e0 93 0c 22 	sts	0x220C, r30	; 0x80220c <udc_ptr_iface>
     940:	f0 93 0d 22 	sts	0x220D, r31	; 0x80220d <udc_ptr_iface+0x1>
     944:	22 81       	ldd	r18, Z+2	; 0x02
     946:	33 81       	ldd	r19, Z+3	; 0x03
     948:	2e 0f       	add	r18, r30
     94a:	3f 1f       	adc	r19, r31
     94c:	e2 17       	cp	r30, r18
     94e:	f3 07       	cpc	r31, r19
     950:	f8 f4       	brcc	.+62     	; 0x990 <udc_update_iface_desc+0x70>
     952:	91 81       	ldd	r25, Z+1	; 0x01
     954:	94 30       	cpi	r25, 0x04	; 4
     956:	61 f4       	brne	.+24     	; 0x970 <udc_update_iface_desc+0x50>
     958:	92 81       	ldd	r25, Z+2	; 0x02
     95a:	98 13       	cpse	r25, r24
     95c:	09 c0       	rjmp	.+18     	; 0x970 <udc_update_iface_desc+0x50>
     95e:	93 81       	ldd	r25, Z+3	; 0x03
     960:	96 13       	cpse	r25, r22
     962:	06 c0       	rjmp	.+12     	; 0x970 <udc_update_iface_desc+0x50>
     964:	e0 93 0c 22 	sts	0x220C, r30	; 0x80220c <udc_ptr_iface>
     968:	f0 93 0d 22 	sts	0x220D, r31	; 0x80220d <udc_ptr_iface+0x1>
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	08 95       	ret
     970:	90 81       	ld	r25, Z
     972:	e9 0f       	add	r30, r25
     974:	f1 1d       	adc	r31, r1
     976:	e2 17       	cp	r30, r18
     978:	f3 07       	cpc	r31, r19
     97a:	58 f3       	brcs	.-42     	; 0x952 <udc_update_iface_desc+0x32>
     97c:	e0 93 0c 22 	sts	0x220C, r30	; 0x80220c <udc_ptr_iface>
     980:	f0 93 0d 22 	sts	0x220D, r31	; 0x80220d <udc_ptr_iface+0x1>
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	08 95       	ret
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	08 95       	ret
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	08 95       	ret
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	08 95       	ret

00000994 <udc_iface_disable>:
     994:	ef 92       	push	r14
     996:	ff 92       	push	r15
     998:	1f 93       	push	r17
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	c8 2f       	mov	r28, r24
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	be df       	rcall	.-132    	; 0x920 <udc_update_iface_desc>
     9a4:	18 2f       	mov	r17, r24
     9a6:	88 23       	and	r24, r24
     9a8:	81 f1       	breq	.+96     	; 0xa0a <udc_iface_disable+0x76>
     9aa:	a0 91 0e 22 	lds	r26, 0x220E	; 0x80220e <udc_ptr_conf>
     9ae:	b0 91 0f 22 	lds	r27, 0x220F	; 0x80220f <udc_ptr_conf+0x1>
     9b2:	ec 2f       	mov	r30, r28
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	ee 0f       	add	r30, r30
     9b8:	ff 1f       	adc	r31, r31
     9ba:	12 96       	adiw	r26, 0x02	; 2
     9bc:	8d 91       	ld	r24, X+
     9be:	9c 91       	ld	r25, X
     9c0:	13 97       	sbiw	r26, 0x03	; 3
     9c2:	e8 0f       	add	r30, r24
     9c4:	f9 1f       	adc	r31, r25
     9c6:	e0 80       	ld	r14, Z
     9c8:	f1 80       	ldd	r15, Z+1	; 0x01
     9ca:	d7 01       	movw	r26, r14
     9cc:	16 96       	adiw	r26, 0x06	; 6
     9ce:	ed 91       	ld	r30, X+
     9d0:	fc 91       	ld	r31, X
     9d2:	17 97       	sbiw	r26, 0x07	; 7
     9d4:	19 95       	eicall
     9d6:	68 2f       	mov	r22, r24
     9d8:	8c 2f       	mov	r24, r28
     9da:	a2 df       	rcall	.-188    	; 0x920 <udc_update_iface_desc>
     9dc:	18 2f       	mov	r17, r24
     9de:	88 23       	and	r24, r24
     9e0:	a1 f0       	breq	.+40     	; 0xa0a <udc_iface_disable+0x76>
     9e2:	c0 91 0c 22 	lds	r28, 0x220C	; 0x80220c <udc_ptr_iface>
     9e6:	d0 91 0d 22 	lds	r29, 0x220D	; 0x80220d <udc_ptr_iface+0x1>
     9ea:	65 e0       	ldi	r22, 0x05	; 5
     9ec:	ce 01       	movw	r24, r28
     9ee:	61 df       	rcall	.-318    	; 0x8b2 <udc_next_desc_in_iface>
     9f0:	ec 01       	movw	r28, r24
     9f2:	89 2b       	or	r24, r25
     9f4:	21 f0       	breq	.+8      	; 0x9fe <udc_iface_disable+0x6a>
     9f6:	8a 81       	ldd	r24, Y+2	; 0x02
     9f8:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <udd_ep_free>
     9fc:	f6 cf       	rjmp	.-20     	; 0x9ea <udc_iface_disable+0x56>
     9fe:	d7 01       	movw	r26, r14
     a00:	12 96       	adiw	r26, 0x02	; 2
     a02:	ed 91       	ld	r30, X+
     a04:	fc 91       	ld	r31, X
     a06:	13 97       	sbiw	r26, 0x03	; 3
     a08:	19 95       	eicall
     a0a:	81 2f       	mov	r24, r17
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	1f 91       	pop	r17
     a12:	ff 90       	pop	r15
     a14:	ef 90       	pop	r14
     a16:	08 95       	ret

00000a18 <udc_iface_enable>:
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	18 2f       	mov	r17, r24
     a20:	7f df       	rcall	.-258    	; 0x920 <udc_update_iface_desc>
     a22:	88 23       	and	r24, r24
     a24:	39 f1       	breq	.+78     	; 0xa74 <udc_iface_enable+0x5c>
     a26:	c0 91 0c 22 	lds	r28, 0x220C	; 0x80220c <udc_ptr_iface>
     a2a:	d0 91 0d 22 	lds	r29, 0x220D	; 0x80220d <udc_ptr_iface+0x1>
     a2e:	65 e0       	ldi	r22, 0x05	; 5
     a30:	ce 01       	movw	r24, r28
     a32:	3f df       	rcall	.-386    	; 0x8b2 <udc_next_desc_in_iface>
     a34:	ec 01       	movw	r28, r24
     a36:	89 2b       	or	r24, r25
     a38:	41 f0       	breq	.+16     	; 0xa4a <udc_iface_enable+0x32>
     a3a:	4c 81       	ldd	r20, Y+4	; 0x04
     a3c:	5d 81       	ldd	r21, Y+5	; 0x05
     a3e:	6b 81       	ldd	r22, Y+3	; 0x03
     a40:	8a 81       	ldd	r24, Y+2	; 0x02
     a42:	db d6       	rcall	.+3510   	; 0x17fa <udd_ep_alloc>
     a44:	81 11       	cpse	r24, r1
     a46:	f3 cf       	rjmp	.-26     	; 0xa2e <udc_iface_enable+0x16>
     a48:	15 c0       	rjmp	.+42     	; 0xa74 <udc_iface_enable+0x5c>
     a4a:	a0 91 0e 22 	lds	r26, 0x220E	; 0x80220e <udc_ptr_conf>
     a4e:	b0 91 0f 22 	lds	r27, 0x220F	; 0x80220f <udc_ptr_conf+0x1>
     a52:	e1 2f       	mov	r30, r17
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	ee 0f       	add	r30, r30
     a58:	ff 1f       	adc	r31, r31
     a5a:	12 96       	adiw	r26, 0x02	; 2
     a5c:	8d 91       	ld	r24, X+
     a5e:	9c 91       	ld	r25, X
     a60:	13 97       	sbiw	r26, 0x03	; 3
     a62:	e8 0f       	add	r30, r24
     a64:	f9 1f       	adc	r31, r25
     a66:	01 90       	ld	r0, Z+
     a68:	f0 81       	ld	r31, Z
     a6a:	e0 2d       	mov	r30, r0
     a6c:	01 90       	ld	r0, Z+
     a6e:	f0 81       	ld	r31, Z
     a70:	e0 2d       	mov	r30, r0
     a72:	19 95       	eicall
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	1f 91       	pop	r17
     a7a:	08 95       	ret

00000a7c <udc_start>:
     a7c:	25 c6       	rjmp	.+3146   	; 0x16c8 <udd_enable>
     a7e:	08 95       	ret

00000a80 <udc_reset>:
     a80:	cf 93       	push	r28
     a82:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <udc_num_configuration>
     a86:	88 23       	and	r24, r24
     a88:	c1 f0       	breq	.+48     	; 0xaba <udc_reset+0x3a>
     a8a:	e0 91 0e 22 	lds	r30, 0x220E	; 0x80220e <udc_ptr_conf>
     a8e:	f0 91 0f 22 	lds	r31, 0x220F	; 0x80220f <udc_ptr_conf+0x1>
     a92:	01 90       	ld	r0, Z+
     a94:	f0 81       	ld	r31, Z
     a96:	e0 2d       	mov	r30, r0
     a98:	84 81       	ldd	r24, Z+4	; 0x04
     a9a:	88 23       	and	r24, r24
     a9c:	71 f0       	breq	.+28     	; 0xaba <udc_reset+0x3a>
     a9e:	c0 e0       	ldi	r28, 0x00	; 0
     aa0:	8c 2f       	mov	r24, r28
     aa2:	78 df       	rcall	.-272    	; 0x994 <udc_iface_disable>
     aa4:	cf 5f       	subi	r28, 0xFF	; 255
     aa6:	e0 91 0e 22 	lds	r30, 0x220E	; 0x80220e <udc_ptr_conf>
     aaa:	f0 91 0f 22 	lds	r31, 0x220F	; 0x80220f <udc_ptr_conf+0x1>
     aae:	01 90       	ld	r0, Z+
     ab0:	f0 81       	ld	r31, Z
     ab2:	e0 2d       	mov	r30, r0
     ab4:	84 81       	ldd	r24, Z+4	; 0x04
     ab6:	c8 17       	cp	r28, r24
     ab8:	98 f3       	brcs	.-26     	; 0xaa0 <udc_reset+0x20>
     aba:	10 92 10 22 	sts	0x2210, r1	; 0x802210 <udc_num_configuration>
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	80 93 14 22 	sts	0x2214, r24	; 0x802214 <udc_device_status>
     ac6:	90 93 15 22 	sts	0x2215, r25	; 0x802215 <udc_device_status+0x1>
     aca:	cf 91       	pop	r28
     acc:	08 95       	ret

00000ace <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     ace:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     ad0:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <udc_num_configuration>
     ad4:	88 23       	and	r24, r24
     ad6:	49 f1       	breq	.+82     	; 0xb2a <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     ad8:	a0 91 0e 22 	lds	r26, 0x220E	; 0x80220e <udc_ptr_conf>
     adc:	b0 91 0f 22 	lds	r27, 0x220F	; 0x80220f <udc_ptr_conf+0x1>
     ae0:	ed 91       	ld	r30, X+
     ae2:	fc 91       	ld	r31, X
     ae4:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     ae6:	84 81       	ldd	r24, Z+4	; 0x04
     ae8:	88 23       	and	r24, r24
     aea:	f9 f0       	breq	.+62     	; 0xb2a <udc_sof_notify+0x5c>
     aec:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     aee:	ec 2f       	mov	r30, r28
     af0:	f0 e0       	ldi	r31, 0x00	; 0
     af2:	ee 0f       	add	r30, r30
     af4:	ff 1f       	adc	r31, r31
     af6:	12 96       	adiw	r26, 0x02	; 2
     af8:	8d 91       	ld	r24, X+
     afa:	9c 91       	ld	r25, X
     afc:	13 97       	sbiw	r26, 0x03	; 3
     afe:	e8 0f       	add	r30, r24
     b00:	f9 1f       	adc	r31, r25
     b02:	01 90       	ld	r0, Z+
     b04:	f0 81       	ld	r31, Z
     b06:	e0 2d       	mov	r30, r0
     b08:	00 84       	ldd	r0, Z+8	; 0x08
     b0a:	f1 85       	ldd	r31, Z+9	; 0x09
     b0c:	e0 2d       	mov	r30, r0
     b0e:	30 97       	sbiw	r30, 0x00	; 0
     b10:	09 f0       	breq	.+2      	; 0xb14 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     b12:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     b14:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     b16:	a0 91 0e 22 	lds	r26, 0x220E	; 0x80220e <udc_ptr_conf>
     b1a:	b0 91 0f 22 	lds	r27, 0x220F	; 0x80220f <udc_ptr_conf+0x1>
     b1e:	ed 91       	ld	r30, X+
     b20:	fc 91       	ld	r31, X
     b22:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     b24:	84 81       	ldd	r24, Z+4	; 0x04
     b26:	c8 17       	cp	r28, r24
     b28:	10 f3       	brcs	.-60     	; 0xaee <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     b2a:	cf 91       	pop	r28
     b2c:	08 95       	ret

00000b2e <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     b36:	e1 e4       	ldi	r30, 0x41	; 65
     b38:	f3 e2       	ldi	r31, 0x23	; 35
     b3a:	12 86       	std	Z+10, r1	; 0x0a
     b3c:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
     b3e:	14 86       	std	Z+12, r1	; 0x0c
     b40:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
     b42:	16 86       	std	Z+14, r1	; 0x0e
     b44:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
     b46:	80 81       	ld	r24, Z
     b48:	88 23       	and	r24, r24
     b4a:	0c f0       	brlt	.+2      	; 0xb4e <udc_process_setup+0x20>
     b4c:	63 c2       	rjmp	.+1222   	; 0x1014 <udc_process_setup+0x4e6>
		if (udd_g_ctrlreq.req.wLength == 0) {
     b4e:	20 91 47 23 	lds	r18, 0x2347	; 0x802347 <udd_g_ctrlreq+0x6>
     b52:	30 91 48 23 	lds	r19, 0x2348	; 0x802348 <udd_g_ctrlreq+0x7>
     b56:	21 15       	cp	r18, r1
     b58:	31 05       	cpc	r19, r1
     b5a:	09 f0       	breq	.+2      	; 0xb5e <udc_process_setup+0x30>
     b5c:	56 c2       	rjmp	.+1196   	; 0x100a <udc_process_setup+0x4dc>
     b5e:	51 c2       	rjmp	.+1186   	; 0x1002 <udc_process_setup+0x4d4>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     b60:	8f 71       	andi	r24, 0x1F	; 31
     b62:	09 f0       	breq	.+2      	; 0xb66 <udc_process_setup+0x38>
     b64:	a7 c0       	rjmp	.+334    	; 0xcb4 <udc_process_setup+0x186>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     b66:	90 91 42 23 	lds	r25, 0x2342	; 0x802342 <udd_g_ctrlreq+0x1>
     b6a:	96 30       	cpi	r25, 0x06	; 6
     b6c:	79 f0       	breq	.+30     	; 0xb8c <udc_process_setup+0x5e>
     b6e:	98 30       	cpi	r25, 0x08	; 8
     b70:	09 f4       	brne	.+2      	; 0xb74 <udc_process_setup+0x46>
     b72:	96 c0       	rjmp	.+300    	; 0xca0 <udc_process_setup+0x172>
     b74:	91 11       	cpse	r25, r1
     b76:	9e c0       	rjmp	.+316    	; 0xcb4 <udc_process_setup+0x186>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     b78:	22 30       	cpi	r18, 0x02	; 2
     b7a:	31 05       	cpc	r19, r1
     b7c:	09 f0       	breq	.+2      	; 0xb80 <udc_process_setup+0x52>
     b7e:	ca c1       	rjmp	.+916    	; 0xf14 <udc_process_setup+0x3e6>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     b80:	62 e0       	ldi	r22, 0x02	; 2
     b82:	70 e0       	ldi	r23, 0x00	; 0
     b84:	84 e1       	ldi	r24, 0x14	; 20
     b86:	92 e2       	ldi	r25, 0x22	; 34
     b88:	31 d6       	rcall	.+3170   	; 0x17ec <udd_set_setup_payload>
     b8a:	4d c2       	rjmp	.+1178   	; 0x1026 <udc_process_setup+0x4f8>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     b8c:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <udd_g_ctrlreq+0x2>
     b90:	90 91 44 23 	lds	r25, 0x2344	; 0x802344 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     b94:	29 2f       	mov	r18, r25
     b96:	33 27       	eor	r19, r19
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	a9 f0       	breq	.+42     	; 0xbc8 <udc_process_setup+0x9a>
     b9e:	24 f4       	brge	.+8      	; 0xba8 <udc_process_setup+0x7a>
     ba0:	21 30       	cpi	r18, 0x01	; 1
     ba2:	31 05       	cpc	r19, r1
     ba4:	41 f0       	breq	.+16     	; 0xbb6 <udc_process_setup+0x88>
     ba6:	ad c1       	rjmp	.+858    	; 0xf02 <udc_process_setup+0x3d4>
     ba8:	23 30       	cpi	r18, 0x03	; 3
     baa:	31 05       	cpc	r19, r1
     bac:	d9 f1       	breq	.+118    	; 0xc24 <udc_process_setup+0xf6>
     bae:	2f 30       	cpi	r18, 0x0F	; 15
     bb0:	31 05       	cpc	r19, r1
     bb2:	51 f1       	breq	.+84     	; 0xc08 <udc_process_setup+0xda>
     bb4:	a6 c1       	rjmp	.+844    	; 0xf02 <udc_process_setup+0x3d4>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     bb6:	80 91 72 20 	lds	r24, 0x2072	; 0x802072 <udc_config>
     bba:	90 91 73 20 	lds	r25, 0x2073	; 0x802073 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     bbe:	dc 01       	movw	r26, r24
     bc0:	6c 91       	ld	r22, X
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	13 d6       	rcall	.+3110   	; 0x17ec <udd_set_setup_payload>
     bc6:	5d c0       	rjmp	.+186    	; 0xc82 <udc_process_setup+0x154>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     bc8:	e0 91 72 20 	lds	r30, 0x2072	; 0x802072 <udc_config>
     bcc:	f0 91 73 20 	lds	r31, 0x2073	; 0x802073 <udc_config+0x1>
     bd0:	21 89       	ldd	r18, Z+17	; 0x11
     bd2:	82 17       	cp	r24, r18
     bd4:	08 f0       	brcs	.+2      	; 0xbd8 <udc_process_setup+0xaa>
     bd6:	9e c1       	rjmp	.+828    	; 0xf14 <udc_process_setup+0x3e6>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     bd8:	99 27       	eor	r25, r25
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	e0 91 74 20 	lds	r30, 0x2074	; 0x802074 <udc_config+0x2>
     be6:	f0 91 75 20 	lds	r31, 0x2075	; 0x802075 <udc_config+0x3>
     bea:	e8 0f       	add	r30, r24
     bec:	f9 1f       	adc	r31, r25
     bee:	80 81       	ld	r24, Z
     bf0:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     bf2:	fc 01       	movw	r30, r24
     bf4:	62 81       	ldd	r22, Z+2	; 0x02
     bf6:	73 81       	ldd	r23, Z+3	; 0x03
     bf8:	f9 d5       	rcall	.+3058   	; 0x17ec <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     bfa:	e0 91 49 23 	lds	r30, 0x2349	; 0x802349 <udd_g_ctrlreq+0x8>
     bfe:	f0 91 4a 23 	lds	r31, 0x234A	; 0x80234a <udd_g_ctrlreq+0x9>
     c02:	82 e0       	ldi	r24, 0x02	; 2
     c04:	81 83       	std	Z+1, r24	; 0x01
     c06:	3d c0       	rjmp	.+122    	; 0xc82 <udc_process_setup+0x154>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
     c08:	80 91 76 20 	lds	r24, 0x2076	; 0x802076 <udc_config+0x4>
     c0c:	90 91 77 20 	lds	r25, 0x2077	; 0x802077 <udc_config+0x5>
     c10:	00 97       	sbiw	r24, 0x00	; 0
     c12:	09 f4       	brne	.+2      	; 0xc16 <udc_process_setup+0xe8>
     c14:	7f c1       	rjmp	.+766    	; 0xf14 <udc_process_setup+0x3e6>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     c16:	dc 01       	movw	r26, r24
     c18:	12 96       	adiw	r26, 0x02	; 2
     c1a:	6d 91       	ld	r22, X+
     c1c:	7c 91       	ld	r23, X
     c1e:	13 97       	sbiw	r26, 0x03	; 3
     c20:	e5 d5       	rcall	.+3018   	; 0x17ec <udd_set_setup_payload>
     c22:	2f c0       	rjmp	.+94     	; 0xc82 <udc_process_setup+0x154>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     c24:	99 27       	eor	r25, r25
     c26:	81 30       	cpi	r24, 0x01	; 1
     c28:	91 05       	cpc	r25, r1
     c2a:	91 f0       	breq	.+36     	; 0xc50 <udc_process_setup+0x122>
     c2c:	58 f0       	brcs	.+22     	; 0xc44 <udc_process_setup+0x116>
     c2e:	82 30       	cpi	r24, 0x02	; 2
     c30:	91 05       	cpc	r25, r1
     c32:	09 f4       	brne	.+2      	; 0xc36 <udc_process_setup+0x108>
     c34:	f4 c1       	rjmp	.+1000   	; 0x101e <udc_process_setup+0x4f0>
     c36:	03 97       	sbiw	r24, 0x03	; 3
     c38:	09 f0       	breq	.+2      	; 0xc3c <udc_process_setup+0x10e>
     c3a:	6c c1       	rjmp	.+728    	; 0xf14 <udc_process_setup+0x3e6>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
     c3c:	27 e0       	ldi	r18, 0x07	; 7
		str = udc_get_string_serial_name();
     c3e:	86 ed       	ldi	r24, 0xD6	; 214
     c40:	90 e2       	ldi	r25, 0x20	; 32
     c42:	09 c0       	rjmp	.+18     	; 0xc56 <udc_process_setup+0x128>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     c44:	64 e0       	ldi	r22, 0x04	; 4
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	8e e6       	ldi	r24, 0x6E	; 110
     c4a:	90 e2       	ldi	r25, 0x20	; 32
     c4c:	cf d5       	rcall	.+2974   	; 0x17ec <udd_set_setup_payload>
     c4e:	19 c0       	rjmp	.+50     	; 0xc82 <udc_process_setup+0x154>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
     c50:	8b e5       	ldi	r24, 0x5B	; 91
     c52:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     c54:	22 e1       	ldi	r18, 0x12	; 18
     c56:	38 2f       	mov	r19, r24
     c58:	a4 e2       	ldi	r26, 0x24	; 36
     c5a:	b0 e2       	ldi	r27, 0x20	; 32
     c5c:	e8 2f       	mov	r30, r24
     c5e:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     c60:	81 91       	ld	r24, Z+
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	8d 93       	st	X+, r24
     c66:	9d 93       	st	X+, r25
     c68:	8e 2f       	mov	r24, r30
     c6a:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
     c6c:	82 17       	cp	r24, r18
     c6e:	c0 f3       	brcs	.-16     	; 0xc60 <udc_process_setup+0x132>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     c70:	62 2f       	mov	r22, r18
     c72:	66 0f       	add	r22, r22
     c74:	6e 5f       	subi	r22, 0xFE	; 254
     c76:	60 93 22 20 	sts	0x2022, r22	; 0x802022 <udc_string_desc>
		udd_set_setup_payload(
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	82 e2       	ldi	r24, 0x22	; 34
     c7e:	90 e2       	ldi	r25, 0x20	; 32
     c80:	b5 d5       	rcall	.+2922   	; 0x17ec <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     c82:	e1 e4       	ldi	r30, 0x41	; 65
     c84:	f3 e2       	ldi	r31, 0x23	; 35
     c86:	86 81       	ldd	r24, Z+6	; 0x06
     c88:	97 81       	ldd	r25, Z+7	; 0x07
     c8a:	22 85       	ldd	r18, Z+10	; 0x0a
     c8c:	33 85       	ldd	r19, Z+11	; 0x0b
     c8e:	82 17       	cp	r24, r18
     c90:	93 07       	cpc	r25, r19
     c92:	08 f0       	brcs	.+2      	; 0xc96 <udc_process_setup+0x168>
     c94:	c8 c1       	rjmp	.+912    	; 0x1026 <udc_process_setup+0x4f8>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     c96:	80 93 4b 23 	sts	0x234B, r24	; 0x80234b <udd_g_ctrlreq+0xa>
     c9a:	90 93 4c 23 	sts	0x234C, r25	; 0x80234c <udd_g_ctrlreq+0xb>
     c9e:	c3 c1       	rjmp	.+902    	; 0x1026 <udc_process_setup+0x4f8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     ca0:	21 30       	cpi	r18, 0x01	; 1
     ca2:	31 05       	cpc	r19, r1
     ca4:	09 f0       	breq	.+2      	; 0xca8 <udc_process_setup+0x17a>
     ca6:	36 c1       	rjmp	.+620    	; 0xf14 <udc_process_setup+0x3e6>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     ca8:	61 e0       	ldi	r22, 0x01	; 1
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	80 e1       	ldi	r24, 0x10	; 16
     cae:	92 e2       	ldi	r25, 0x22	; 34
     cb0:	9d d5       	rcall	.+2874   	; 0x17ec <udd_set_setup_payload>
     cb2:	b9 c1       	rjmp	.+882    	; 0x1026 <udc_process_setup+0x4f8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     cb4:	81 30       	cpi	r24, 0x01	; 1
     cb6:	e1 f5       	brne	.+120    	; 0xd30 <udc_process_setup+0x202>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     cb8:	90 91 42 23 	lds	r25, 0x2342	; 0x802342 <udd_g_ctrlreq+0x1>
     cbc:	9a 30       	cpi	r25, 0x0A	; 10
     cbe:	c1 f5       	brne	.+112    	; 0xd30 <udc_process_setup+0x202>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     cc0:	21 30       	cpi	r18, 0x01	; 1
     cc2:	31 05       	cpc	r19, r1
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <udc_process_setup+0x19a>
     cc6:	26 c1       	rjmp	.+588    	; 0xf14 <udc_process_setup+0x3e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     cc8:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <udc_num_configuration>
     ccc:	88 23       	and	r24, r24
     cce:	09 f4       	brne	.+2      	; 0xcd2 <udc_process_setup+0x1a4>
     cd0:	21 c1       	rjmp	.+578    	; 0xf14 <udc_process_setup+0x3e6>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     cd2:	c0 91 45 23 	lds	r28, 0x2345	; 0x802345 <udd_g_ctrlreq+0x4>
     cd6:	d0 91 46 23 	lds	r29, 0x2346	; 0x802346 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     cda:	00 91 0e 22 	lds	r16, 0x220E	; 0x80220e <udc_ptr_conf>
     cde:	10 91 0f 22 	lds	r17, 0x220F	; 0x80220f <udc_ptr_conf+0x1>
     ce2:	d8 01       	movw	r26, r16
     ce4:	ed 91       	ld	r30, X+
     ce6:	fc 91       	ld	r31, X
     ce8:	84 81       	ldd	r24, Z+4	; 0x04
     cea:	c8 17       	cp	r28, r24
     cec:	08 f0       	brcs	.+2      	; 0xcf0 <udc_process_setup+0x1c2>
     cee:	12 c1       	rjmp	.+548    	; 0xf14 <udc_process_setup+0x3e6>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     cf0:	60 e0       	ldi	r22, 0x00	; 0
     cf2:	8c 2f       	mov	r24, r28
     cf4:	15 de       	rcall	.-982    	; 0x920 <udc_update_iface_desc>
     cf6:	88 23       	and	r24, r24
     cf8:	09 f4       	brne	.+2      	; 0xcfc <udc_process_setup+0x1ce>
     cfa:	0c c1       	rjmp	.+536    	; 0xf14 <udc_process_setup+0x3e6>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     cfc:	ce 01       	movw	r24, r28
     cfe:	99 27       	eor	r25, r25
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	d8 01       	movw	r26, r16
     d06:	12 96       	adiw	r26, 0x02	; 2
     d08:	ed 91       	ld	r30, X+
     d0a:	fc 91       	ld	r31, X
     d0c:	13 97       	sbiw	r26, 0x03	; 3
     d0e:	e8 0f       	add	r30, r24
     d10:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     d12:	01 90       	ld	r0, Z+
     d14:	f0 81       	ld	r31, Z
     d16:	e0 2d       	mov	r30, r0
     d18:	86 81       	ldd	r24, Z+6	; 0x06
     d1a:	97 81       	ldd	r25, Z+7	; 0x07
     d1c:	fc 01       	movw	r30, r24
     d1e:	19 95       	eicall
     d20:	80 93 12 22 	sts	0x2212, r24	; 0x802212 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     d24:	61 e0       	ldi	r22, 0x01	; 1
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	82 e1       	ldi	r24, 0x12	; 18
     d2a:	92 e2       	ldi	r25, 0x22	; 34
     d2c:	5f d5       	rcall	.+2750   	; 0x17ec <udd_set_setup_payload>
     d2e:	7b c1       	rjmp	.+758    	; 0x1026 <udc_process_setup+0x4f8>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     d30:	82 30       	cpi	r24, 0x02	; 2
     d32:	09 f0       	breq	.+2      	; 0xd36 <udc_process_setup+0x208>
     d34:	ef c0       	rjmp	.+478    	; 0xf14 <udc_process_setup+0x3e6>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     d36:	80 91 42 23 	lds	r24, 0x2342	; 0x802342 <udd_g_ctrlreq+0x1>
     d3a:	81 11       	cpse	r24, r1
     d3c:	e4 c0       	rjmp	.+456    	; 0xf06 <udc_process_setup+0x3d8>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     d3e:	22 30       	cpi	r18, 0x02	; 2
     d40:	31 05       	cpc	r19, r1
     d42:	09 f0       	breq	.+2      	; 0xd46 <udc_process_setup+0x218>
     d44:	e7 c0       	rjmp	.+462    	; 0xf14 <udc_process_setup+0x3e6>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     d46:	80 91 45 23 	lds	r24, 0x2345	; 0x802345 <udd_g_ctrlreq+0x4>
     d4a:	df d5       	rcall	.+3006   	; 0x190a <udd_ep_is_halted>
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	80 93 0a 22 	sts	0x220A, r24	; 0x80220a <udc_ep_status.4671>
     d52:	90 93 0b 22 	sts	0x220B, r25	; 0x80220b <udc_ep_status.4671+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     d56:	62 e0       	ldi	r22, 0x02	; 2
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	8a e0       	ldi	r24, 0x0A	; 10
     d5c:	92 e2       	ldi	r25, 0x22	; 34
     d5e:	46 d5       	rcall	.+2700   	; 0x17ec <udd_set_setup_payload>
     d60:	62 c1       	rjmp	.+708    	; 0x1026 <udc_process_setup+0x4f8>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     d62:	8f 71       	andi	r24, 0x1F	; 31
     d64:	09 f0       	breq	.+2      	; 0xd68 <udc_process_setup+0x23a>
     d66:	83 c0       	rjmp	.+262    	; 0xe6e <udc_process_setup+0x340>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     d68:	90 91 42 23 	lds	r25, 0x2342	; 0x802342 <udd_g_ctrlreq+0x1>
     d6c:	93 30       	cpi	r25, 0x03	; 3
     d6e:	09 f4       	brne	.+2      	; 0xd72 <udc_process_setup+0x244>
     d70:	cc c0       	rjmp	.+408    	; 0xf0a <udc_process_setup+0x3dc>
     d72:	18 f4       	brcc	.+6      	; 0xd7a <udc_process_setup+0x24c>
     d74:	91 30       	cpi	r25, 0x01	; 1
     d76:	a1 f0       	breq	.+40     	; 0xda0 <udc_process_setup+0x272>
     d78:	7a c0       	rjmp	.+244    	; 0xe6e <udc_process_setup+0x340>
     d7a:	95 30       	cpi	r25, 0x05	; 5
     d7c:	19 f0       	breq	.+6      	; 0xd84 <udc_process_setup+0x256>
     d7e:	99 30       	cpi	r25, 0x09	; 9
     d80:	39 f1       	breq	.+78     	; 0xdd0 <udc_process_setup+0x2a2>
     d82:	75 c0       	rjmp	.+234    	; 0xe6e <udc_process_setup+0x340>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     d84:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <udd_g_ctrlreq+0x6>
     d88:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <udd_g_ctrlreq+0x7>
     d8c:	89 2b       	or	r24, r25
     d8e:	09 f0       	breq	.+2      	; 0xd92 <udc_process_setup+0x264>
     d90:	c1 c0       	rjmp	.+386    	; 0xf14 <udc_process_setup+0x3e6>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     d92:	8b e8       	ldi	r24, 0x8B	; 139
     d94:	94 e0       	ldi	r25, 0x04	; 4
     d96:	80 93 4d 23 	sts	0x234D, r24	; 0x80234d <udd_g_ctrlreq+0xc>
     d9a:	90 93 4e 23 	sts	0x234E, r25	; 0x80234e <udd_g_ctrlreq+0xd>
     d9e:	43 c1       	rjmp	.+646    	; 0x1026 <udc_process_setup+0x4f8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     da0:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <udd_g_ctrlreq+0x6>
     da4:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <udd_g_ctrlreq+0x7>
     da8:	89 2b       	or	r24, r25
     daa:	09 f0       	breq	.+2      	; 0xdae <udc_process_setup+0x280>
     dac:	b3 c0       	rjmp	.+358    	; 0xf14 <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     dae:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <udd_g_ctrlreq+0x2>
     db2:	90 91 44 23 	lds	r25, 0x2344	; 0x802344 <udd_g_ctrlreq+0x3>
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	09 f0       	breq	.+2      	; 0xdbc <udc_process_setup+0x28e>
     dba:	ac c0       	rjmp	.+344    	; 0xf14 <udc_process_setup+0x3e6>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     dbc:	80 91 14 22 	lds	r24, 0x2214	; 0x802214 <udc_device_status>
     dc0:	90 91 15 22 	lds	r25, 0x2215	; 0x802215 <udc_device_status+0x1>
     dc4:	8d 7f       	andi	r24, 0xFD	; 253
     dc6:	80 93 14 22 	sts	0x2214, r24	; 0x802214 <udc_device_status>
     dca:	90 93 15 22 	sts	0x2215, r25	; 0x802215 <udc_device_status+0x1>
     dce:	2b c1       	rjmp	.+598    	; 0x1026 <udc_process_setup+0x4f8>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     dd0:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <udd_g_ctrlreq+0x6>
     dd4:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <udd_g_ctrlreq+0x7>
     dd8:	89 2b       	or	r24, r25
     dda:	09 f0       	breq	.+2      	; 0xdde <udc_process_setup+0x2b0>
     ddc:	9b c0       	rjmp	.+310    	; 0xf14 <udc_process_setup+0x3e6>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     dde:	fb d4       	rcall	.+2550   	; 0x17d6 <udd_getaddress>
     de0:	88 23       	and	r24, r24
     de2:	09 f4       	brne	.+2      	; 0xde6 <udc_process_setup+0x2b8>
     de4:	97 c0       	rjmp	.+302    	; 0xf14 <udc_process_setup+0x3e6>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     de6:	20 91 43 23 	lds	r18, 0x2343	; 0x802343 <udd_g_ctrlreq+0x2>
     dea:	30 91 44 23 	lds	r19, 0x2344	; 0x802344 <udd_g_ctrlreq+0x3>
     dee:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
     df0:	e0 91 72 20 	lds	r30, 0x2072	; 0x802072 <udc_config>
     df4:	f0 91 73 20 	lds	r31, 0x2073	; 0x802073 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     df8:	81 89       	ldd	r24, Z+17	; 0x11
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	82 17       	cp	r24, r18
     dfe:	93 07       	cpc	r25, r19
     e00:	08 f4       	brcc	.+2      	; 0xe04 <udc_process_setup+0x2d6>
     e02:	88 c0       	rjmp	.+272    	; 0xf14 <udc_process_setup+0x3e6>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     e04:	3d de       	rcall	.-902    	; 0xa80 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     e06:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <udd_g_ctrlreq+0x2>
     e0a:	90 91 44 23 	lds	r25, 0x2344	; 0x802344 <udd_g_ctrlreq+0x3>
     e0e:	80 93 10 22 	sts	0x2210, r24	; 0x802210 <udc_num_configuration>
	if (udc_num_configuration == 0) {
     e12:	88 23       	and	r24, r24
     e14:	09 f4       	brne	.+2      	; 0xe18 <udc_process_setup+0x2ea>
     e16:	07 c1       	rjmp	.+526    	; 0x1026 <udc_process_setup+0x4f8>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     e18:	99 27       	eor	r25, r25
     e1a:	81 50       	subi	r24, 0x01	; 1
     e1c:	90 4c       	sbci	r25, 0xC0	; 192
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	e0 91 74 20 	lds	r30, 0x2074	; 0x802074 <udc_config+0x2>
     e2a:	f0 91 75 20 	lds	r31, 0x2075	; 0x802075 <udc_config+0x3>
     e2e:	e8 0f       	add	r30, r24
     e30:	f9 1f       	adc	r31, r25
     e32:	e0 93 0e 22 	sts	0x220E, r30	; 0x80220e <udc_ptr_conf>
     e36:	f0 93 0f 22 	sts	0x220F, r31	; 0x80220f <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     e3a:	01 90       	ld	r0, Z+
     e3c:	f0 81       	ld	r31, Z
     e3e:	e0 2d       	mov	r30, r0
     e40:	84 81       	ldd	r24, Z+4	; 0x04
     e42:	88 23       	and	r24, r24
     e44:	09 f4       	brne	.+2      	; 0xe48 <udc_process_setup+0x31a>
     e46:	ef c0       	rjmp	.+478    	; 0x1026 <udc_process_setup+0x4f8>
     e48:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	8c 2f       	mov	r24, r28
     e4e:	e4 dd       	rcall	.-1080   	; 0xa18 <udc_iface_enable>
     e50:	88 23       	and	r24, r24
     e52:	09 f4       	brne	.+2      	; 0xe56 <udc_process_setup+0x328>
     e54:	5f c0       	rjmp	.+190    	; 0xf14 <udc_process_setup+0x3e6>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     e56:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     e58:	e0 91 0e 22 	lds	r30, 0x220E	; 0x80220e <udc_ptr_conf>
     e5c:	f0 91 0f 22 	lds	r31, 0x220F	; 0x80220f <udc_ptr_conf+0x1>
     e60:	01 90       	ld	r0, Z+
     e62:	f0 81       	ld	r31, Z
     e64:	e0 2d       	mov	r30, r0
     e66:	84 81       	ldd	r24, Z+4	; 0x04
     e68:	c8 17       	cp	r28, r24
     e6a:	78 f3       	brcs	.-34     	; 0xe4a <udc_process_setup+0x31c>
     e6c:	dc c0       	rjmp	.+440    	; 0x1026 <udc_process_setup+0x4f8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	e1 f4       	brne	.+56     	; 0xeaa <udc_process_setup+0x37c>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     e72:	90 91 42 23 	lds	r25, 0x2342	; 0x802342 <udd_g_ctrlreq+0x1>
     e76:	9b 30       	cpi	r25, 0x0B	; 11
     e78:	c1 f4       	brne	.+48     	; 0xeaa <udc_process_setup+0x37c>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     e7a:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <udd_g_ctrlreq+0x6>
     e7e:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <udd_g_ctrlreq+0x7>
     e82:	89 2b       	or	r24, r25
     e84:	09 f0       	breq	.+2      	; 0xe88 <udc_process_setup+0x35a>
     e86:	46 c0       	rjmp	.+140    	; 0xf14 <udc_process_setup+0x3e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     e88:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <udc_num_configuration>
     e8c:	88 23       	and	r24, r24
     e8e:	09 f4       	brne	.+2      	; 0xe92 <udc_process_setup+0x364>
     e90:	41 c0       	rjmp	.+130    	; 0xf14 <udc_process_setup+0x3e6>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     e92:	e1 e4       	ldi	r30, 0x41	; 65
     e94:	f3 e2       	ldi	r31, 0x23	; 35
     e96:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     e98:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     e9a:	8c 2f       	mov	r24, r28
     e9c:	7b dd       	rcall	.-1290   	; 0x994 <udc_iface_disable>
     e9e:	88 23       	and	r24, r24
     ea0:	c9 f1       	breq	.+114    	; 0xf14 <udc_process_setup+0x3e6>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     ea2:	6d 2f       	mov	r22, r29
     ea4:	8c 2f       	mov	r24, r28
     ea6:	b8 dd       	rcall	.-1168   	; 0xa18 <udc_iface_enable>
     ea8:	33 c0       	rjmp	.+102    	; 0xf10 <udc_process_setup+0x3e2>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     eaa:	82 30       	cpi	r24, 0x02	; 2
     eac:	99 f5       	brne	.+102    	; 0xf14 <udc_process_setup+0x3e6>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     eae:	80 91 42 23 	lds	r24, 0x2342	; 0x802342 <udd_g_ctrlreq+0x1>
     eb2:	81 30       	cpi	r24, 0x01	; 1
     eb4:	19 f0       	breq	.+6      	; 0xebc <udc_process_setup+0x38e>
     eb6:	83 30       	cpi	r24, 0x03	; 3
     eb8:	89 f0       	breq	.+34     	; 0xedc <udc_process_setup+0x3ae>
     eba:	29 c0       	rjmp	.+82     	; 0xf0e <udc_process_setup+0x3e0>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     ebc:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <udd_g_ctrlreq+0x6>
     ec0:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <udd_g_ctrlreq+0x7>
     ec4:	89 2b       	or	r24, r25
     ec6:	31 f5       	brne	.+76     	; 0xf14 <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     ec8:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <udd_g_ctrlreq+0x2>
     ecc:	90 91 44 23 	lds	r25, 0x2344	; 0x802344 <udd_g_ctrlreq+0x3>
     ed0:	89 2b       	or	r24, r25
     ed2:	01 f5       	brne	.+64     	; 0xf14 <udc_process_setup+0x3e6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     ed4:	80 91 45 23 	lds	r24, 0x2345	; 0x802345 <udd_g_ctrlreq+0x4>
     ed8:	33 d5       	rcall	.+2662   	; 0x1940 <udd_ep_clear_halt>
     eda:	1a c0       	rjmp	.+52     	; 0xf10 <udc_process_setup+0x3e2>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     edc:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <udd_g_ctrlreq+0x6>
     ee0:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <udd_g_ctrlreq+0x7>
     ee4:	89 2b       	or	r24, r25
     ee6:	b1 f4       	brne	.+44     	; 0xf14 <udc_process_setup+0x3e6>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     ee8:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <udd_g_ctrlreq+0x2>
     eec:	90 91 44 23 	lds	r25, 0x2344	; 0x802344 <udd_g_ctrlreq+0x3>
     ef0:	89 2b       	or	r24, r25
     ef2:	81 f4       	brne	.+32     	; 0xf14 <udc_process_setup+0x3e6>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     ef4:	c1 e4       	ldi	r28, 0x41	; 65
     ef6:	d3 e2       	ldi	r29, 0x23	; 35
     ef8:	8c 81       	ldd	r24, Y+4	; 0x04
     efa:	20 d6       	rcall	.+3136   	; 0x1b3c <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     efc:	8c 81       	ldd	r24, Y+4	; 0x04
     efe:	83 d6       	rcall	.+3334   	; 0x1c06 <udd_ep_set_halt>
     f00:	07 c0       	rjmp	.+14     	; 0xf10 <udc_process_setup+0x3e2>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	05 c0       	rjmp	.+10     	; 0xf10 <udc_process_setup+0x3e2>
				break;
			}
		}
#endif
	}
	return false;
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	03 c0       	rjmp	.+6      	; 0xf10 <udc_process_setup+0x3e2>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	01 c0       	rjmp	.+2      	; 0xf10 <udc_process_setup+0x3e2>
				break;
			}
		}
#endif
	}
	return false;
     f0e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
     f10:	81 11       	cpse	r24, r1
     f12:	8a c0       	rjmp	.+276    	; 0x1028 <udc_process_setup+0x4fa>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     f14:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <udd_g_ctrlreq>
     f18:	8f 71       	andi	r24, 0x1F	; 31
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	71 f5       	brne	.+92     	; 0xf7a <udc_process_setup+0x44c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     f1e:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <udc_num_configuration>
     f22:	88 23       	and	r24, r24
     f24:	51 f1       	breq	.+84     	; 0xf7a <udc_process_setup+0x44c>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     f26:	00 91 45 23 	lds	r16, 0x2345	; 0x802345 <udd_g_ctrlreq+0x4>
     f2a:	10 91 46 23 	lds	r17, 0x2346	; 0x802346 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     f2e:	c0 91 0e 22 	lds	r28, 0x220E	; 0x80220e <udc_ptr_conf>
     f32:	d0 91 0f 22 	lds	r29, 0x220F	; 0x80220f <udc_ptr_conf+0x1>
     f36:	e8 81       	ld	r30, Y
     f38:	f9 81       	ldd	r31, Y+1	; 0x01
     f3a:	84 81       	ldd	r24, Z+4	; 0x04
     f3c:	08 17       	cp	r16, r24
     f3e:	e8 f4       	brcc	.+58     	; 0xf7a <udc_process_setup+0x44c>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	80 2f       	mov	r24, r16
     f44:	ed dc       	rcall	.-1574   	; 0x920 <udc_update_iface_desc>
     f46:	88 23       	and	r24, r24
     f48:	c1 f0       	breq	.+48     	; 0xf7a <udc_process_setup+0x44c>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     f4a:	f8 01       	movw	r30, r16
     f4c:	ff 27       	eor	r31, r31
     f4e:	cf 01       	movw	r24, r30
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	ea 81       	ldd	r30, Y+2	; 0x02
     f56:	fb 81       	ldd	r31, Y+3	; 0x03
     f58:	e8 0f       	add	r30, r24
     f5a:	f9 1f       	adc	r31, r25
     f5c:	c0 81       	ld	r28, Z
     f5e:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     f60:	ee 81       	ldd	r30, Y+6	; 0x06
     f62:	ff 81       	ldd	r31, Y+7	; 0x07
     f64:	19 95       	eicall
     f66:	68 2f       	mov	r22, r24
     f68:	80 2f       	mov	r24, r16
     f6a:	da dc       	rcall	.-1612   	; 0x920 <udc_update_iface_desc>
     f6c:	88 23       	and	r24, r24
     f6e:	29 f0       	breq	.+10     	; 0xf7a <udc_process_setup+0x44c>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
     f70:	ec 81       	ldd	r30, Y+4	; 0x04
     f72:	fd 81       	ldd	r31, Y+5	; 0x05
     f74:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
     f76:	81 11       	cpse	r24, r1
     f78:	57 c0       	rjmp	.+174    	; 0x1028 <udc_process_setup+0x4fa>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     f7a:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <udd_g_ctrlreq>
     f7e:	8f 71       	andi	r24, 0x1F	; 31
     f80:	82 30       	cpi	r24, 0x02	; 2
     f82:	09 f0       	breq	.+2      	; 0xf86 <udc_process_setup+0x458>
     f84:	40 c0       	rjmp	.+128    	; 0x1006 <udc_process_setup+0x4d8>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     f86:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <udc_num_configuration>
     f8a:	88 23       	and	r24, r24
     f8c:	b1 f1       	breq	.+108    	; 0xffa <udc_process_setup+0x4cc>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f8e:	a0 91 0e 22 	lds	r26, 0x220E	; 0x80220e <udc_ptr_conf>
     f92:	b0 91 0f 22 	lds	r27, 0x220F	; 0x80220f <udc_ptr_conf+0x1>
     f96:	ed 91       	ld	r30, X+
     f98:	fc 91       	ld	r31, X
     f9a:	11 97       	sbiw	r26, 0x01	; 1
     f9c:	84 81       	ldd	r24, Z+4	; 0x04
     f9e:	88 23       	and	r24, r24
     fa0:	71 f1       	breq	.+92     	; 0xffe <udc_process_setup+0x4d0>
     fa2:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     fa4:	ec 2f       	mov	r30, r28
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	ee 0f       	add	r30, r30
     faa:	ff 1f       	adc	r31, r31
     fac:	12 96       	adiw	r26, 0x02	; 2
     fae:	8d 91       	ld	r24, X+
     fb0:	9c 91       	ld	r25, X
     fb2:	13 97       	sbiw	r26, 0x03	; 3
     fb4:	e8 0f       	add	r30, r24
     fb6:	f9 1f       	adc	r31, r25
     fb8:	00 81       	ld	r16, Z
     fba:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     fbc:	d8 01       	movw	r26, r16
     fbe:	16 96       	adiw	r26, 0x06	; 6
     fc0:	ed 91       	ld	r30, X+
     fc2:	fc 91       	ld	r31, X
     fc4:	17 97       	sbiw	r26, 0x07	; 7
     fc6:	19 95       	eicall
     fc8:	68 2f       	mov	r22, r24
     fca:	8c 2f       	mov	r24, r28
     fcc:	a9 dc       	rcall	.-1710   	; 0x920 <udc_update_iface_desc>
     fce:	88 23       	and	r24, r24
     fd0:	59 f1       	breq	.+86     	; 0x1028 <udc_process_setup+0x4fa>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
     fd2:	d8 01       	movw	r26, r16
     fd4:	14 96       	adiw	r26, 0x04	; 4
     fd6:	ed 91       	ld	r30, X+
     fd8:	fc 91       	ld	r31, X
     fda:	15 97       	sbiw	r26, 0x05	; 5
     fdc:	19 95       	eicall
     fde:	81 11       	cpse	r24, r1
     fe0:	23 c0       	rjmp	.+70     	; 0x1028 <udc_process_setup+0x4fa>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     fe2:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     fe4:	a0 91 0e 22 	lds	r26, 0x220E	; 0x80220e <udc_ptr_conf>
     fe8:	b0 91 0f 22 	lds	r27, 0x220F	; 0x80220f <udc_ptr_conf+0x1>
     fec:	ed 91       	ld	r30, X+
     fee:	fc 91       	ld	r31, X
     ff0:	11 97       	sbiw	r26, 0x01	; 1
     ff2:	94 81       	ldd	r25, Z+4	; 0x04
     ff4:	c9 17       	cp	r28, r25
     ff6:	b0 f2       	brcs	.-84     	; 0xfa4 <udc_process_setup+0x476>
     ff8:	17 c0       	rjmp	.+46     	; 0x1028 <udc_process_setup+0x4fa>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	15 c0       	rjmp	.+42     	; 0x1028 <udc_process_setup+0x4fa>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	13 c0       	rjmp	.+38     	; 0x1028 <udc_process_setup+0x4fa>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	11 c0       	rjmp	.+34     	; 0x1028 <udc_process_setup+0x4fa>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	0f c0       	rjmp	.+30     	; 0x1028 <udc_process_setup+0x4fa>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    100a:	98 2f       	mov	r25, r24
    100c:	90 76       	andi	r25, 0x60	; 96
    100e:	09 f0       	breq	.+2      	; 0x1012 <udc_process_setup+0x4e4>
    1010:	81 cf       	rjmp	.-254    	; 0xf14 <udc_process_setup+0x3e6>
    1012:	a6 cd       	rjmp	.-1204   	; 0xb60 <udc_process_setup+0x32>
    1014:	98 2f       	mov	r25, r24
    1016:	90 76       	andi	r25, 0x60	; 96
    1018:	09 f0       	breq	.+2      	; 0x101c <udc_process_setup+0x4ee>
    101a:	7c cf       	rjmp	.-264    	; 0xf14 <udc_process_setup+0x3e6>
    101c:	a2 ce       	rjmp	.-700    	; 0xd62 <udc_process_setup+0x234>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    101e:	22 e1       	ldi	r18, 0x12	; 18
		str = udc_string_product_name;
    1020:	88 e4       	ldi	r24, 0x48	; 72
    1022:	90 e2       	ldi	r25, 0x20	; 32
    1024:	18 ce       	rjmp	.-976    	; 0xc56 <udc_process_setup+0x128>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1026:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	1f 91       	pop	r17
    102e:	0f 91       	pop	r16
    1030:	08 95       	ret

00001032 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	1f 92       	push	r1
    1038:	1f 92       	push	r1
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	81 11       	cpse	r24, r1
    1040:	26 c0       	rjmp	.+76     	; 0x108e <udd_sleep_mode+0x5c>
    1042:	90 91 40 23 	lds	r25, 0x2340	; 0x802340 <udd_b_idle>
    1046:	99 23       	and	r25, r25
    1048:	f9 f0       	breq	.+62     	; 0x1088 <udd_sleep_mode+0x56>
    104a:	90 91 52 23 	lds	r25, 0x2352	; 0x802352 <sleepmgr_locks+0x1>
    104e:	91 11       	cpse	r25, r1
    1050:	01 c0       	rjmp	.+2      	; 0x1054 <udd_sleep_mode+0x22>
    1052:	ff cf       	rjmp	.-2      	; 0x1052 <udd_sleep_mode+0x20>
    1054:	9f b7       	in	r25, 0x3f	; 63
    1056:	9a 83       	std	Y+2, r25	; 0x02
    1058:	f8 94       	cli
    105a:	2a 81       	ldd	r18, Y+2	; 0x02
    105c:	e1 e5       	ldi	r30, 0x51	; 81
    105e:	f3 e2       	ldi	r31, 0x23	; 35
    1060:	91 81       	ldd	r25, Z+1	; 0x01
    1062:	91 50       	subi	r25, 0x01	; 1
    1064:	91 83       	std	Z+1, r25	; 0x01
    1066:	2f bf       	out	0x3f, r18	; 63
    1068:	0f c0       	rjmp	.+30     	; 0x1088 <udd_sleep_mode+0x56>
    106a:	90 91 52 23 	lds	r25, 0x2352	; 0x802352 <sleepmgr_locks+0x1>
    106e:	9f 3f       	cpi	r25, 0xFF	; 255
    1070:	09 f4       	brne	.+2      	; 0x1074 <udd_sleep_mode+0x42>
    1072:	ff cf       	rjmp	.-2      	; 0x1072 <udd_sleep_mode+0x40>
    1074:	9f b7       	in	r25, 0x3f	; 63
    1076:	99 83       	std	Y+1, r25	; 0x01
    1078:	f8 94       	cli
    107a:	29 81       	ldd	r18, Y+1	; 0x01
    107c:	e1 e5       	ldi	r30, 0x51	; 81
    107e:	f3 e2       	ldi	r31, 0x23	; 35
    1080:	91 81       	ldd	r25, Z+1	; 0x01
    1082:	9f 5f       	subi	r25, 0xFF	; 255
    1084:	91 83       	std	Z+1, r25	; 0x01
    1086:	2f bf       	out	0x3f, r18	; 63
    1088:	80 93 40 23 	sts	0x2340, r24	; 0x802340 <udd_b_idle>
    108c:	05 c0       	rjmp	.+10     	; 0x1098 <udd_sleep_mode+0x66>
    108e:	90 91 40 23 	lds	r25, 0x2340	; 0x802340 <udd_b_idle>
    1092:	99 23       	and	r25, r25
    1094:	51 f3       	breq	.-44     	; 0x106a <udd_sleep_mode+0x38>
    1096:	f8 cf       	rjmp	.-16     	; 0x1088 <udd_sleep_mode+0x56>
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	08 95       	ret

000010a2 <udd_ctrl_init>:
    10a2:	0f 93       	push	r16
    10a4:	e8 ec       	ldi	r30, 0xC8	; 200
    10a6:	f4 e0       	ldi	r31, 0x04	; 4
    10a8:	80 81       	ld	r24, Z
    10aa:	8f 7d       	andi	r24, 0xDF	; 223
    10ac:	80 83       	st	Z, r24
    10ae:	80 81       	ld	r24, Z
    10b0:	8f 7d       	andi	r24, 0xDF	; 223
    10b2:	80 83       	st	Z, r24
    10b4:	e4 e1       	ldi	r30, 0x14	; 20
    10b6:	f3 e2       	ldi	r31, 0x23	; 35
    10b8:	02 e0       	ldi	r16, 0x02	; 2
    10ba:	05 93       	las	Z, r16
    10bc:	10 92 16 23 	sts	0x2316, r1	; 0x802316 <udd_sram+0x16>
    10c0:	10 92 17 23 	sts	0x2317, r1	; 0x802317 <udd_sram+0x17>
    10c4:	00 e2       	ldi	r16, 0x20	; 32
    10c6:	06 93       	lac	Z, r16
    10c8:	00 e4       	ldi	r16, 0x40	; 64
    10ca:	06 93       	lac	Z, r16
    10cc:	ec e0       	ldi	r30, 0x0C	; 12
    10ce:	f3 e2       	ldi	r31, 0x23	; 35
    10d0:	00 e4       	ldi	r16, 0x40	; 64
    10d2:	06 93       	lac	Z, r16
    10d4:	e1 e4       	ldi	r30, 0x41	; 65
    10d6:	f3 e2       	ldi	r31, 0x23	; 35
    10d8:	14 86       	std	Z+12, r1	; 0x0c
    10da:	15 86       	std	Z+13, r1	; 0x0d
    10dc:	16 86       	std	Z+14, r1	; 0x0e
    10de:	17 86       	std	Z+15, r1	; 0x0f
    10e0:	12 86       	std	Z+10, r1	; 0x0a
    10e2:	13 86       	std	Z+11, r1	; 0x0b
    10e4:	10 92 ff 22 	sts	0x22FF, r1	; 0x8022ff <udd_ep_control_state>
    10e8:	0f 91       	pop	r16
    10ea:	08 95       	ret

000010ec <udd_ctrl_stall_data>:
    10ec:	0f 93       	push	r16
    10ee:	85 e0       	ldi	r24, 0x05	; 5
    10f0:	80 93 ff 22 	sts	0x22FF, r24	; 0x8022ff <udd_ep_control_state>
    10f4:	e5 e1       	ldi	r30, 0x15	; 21
    10f6:	f3 e2       	ldi	r31, 0x23	; 35
    10f8:	04 e0       	ldi	r16, 0x04	; 4
    10fa:	05 93       	las	Z, r16
    10fc:	ed e0       	ldi	r30, 0x0D	; 13
    10fe:	f3 e2       	ldi	r31, 0x23	; 35
    1100:	04 e0       	ldi	r16, 0x04	; 4
    1102:	05 93       	las	Z, r16
    1104:	0f 91       	pop	r16
    1106:	08 95       	ret

00001108 <udd_ctrl_send_zlp_in>:
    1108:	0f 93       	push	r16
    110a:	83 e0       	ldi	r24, 0x03	; 3
    110c:	80 93 ff 22 	sts	0x22FF, r24	; 0x8022ff <udd_ep_control_state>
    1110:	10 92 16 23 	sts	0x2316, r1	; 0x802316 <udd_sram+0x16>
    1114:	10 92 17 23 	sts	0x2317, r1	; 0x802317 <udd_sram+0x17>
    1118:	e4 e1       	ldi	r30, 0x14	; 20
    111a:	f3 e2       	ldi	r31, 0x23	; 35
    111c:	02 e0       	ldi	r16, 0x02	; 2
    111e:	06 93       	lac	Z, r16
    1120:	0f 91       	pop	r16
    1122:	08 95       	ret

00001124 <udd_ctrl_endofrequest>:
    1124:	e0 91 4d 23 	lds	r30, 0x234D	; 0x80234d <udd_g_ctrlreq+0xc>
    1128:	f0 91 4e 23 	lds	r31, 0x234E	; 0x80234e <udd_g_ctrlreq+0xd>
    112c:	30 97       	sbiw	r30, 0x00	; 0
    112e:	09 f0       	breq	.+2      	; 0x1132 <udd_ctrl_endofrequest+0xe>
    1130:	19 95       	eicall
    1132:	08 95       	ret

00001134 <udd_ctrl_in_sent>:
    1134:	0f 93       	push	r16
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	80 91 ff 22 	lds	r24, 0x22FF	; 0x8022ff <udd_ep_control_state>
    113e:	83 30       	cpi	r24, 0x03	; 3
    1140:	19 f4       	brne	.+6      	; 0x1148 <udd_ctrl_in_sent+0x14>
    1142:	f0 df       	rcall	.-32     	; 0x1124 <udd_ctrl_endofrequest>
    1144:	ae df       	rcall	.-164    	; 0x10a2 <udd_ctrl_init>
    1146:	5e c0       	rjmp	.+188    	; 0x1204 <udd_ctrl_in_sent+0xd0>
    1148:	80 91 fb 22 	lds	r24, 0x22FB	; 0x8022fb <udd_ctrl_payload_nb_trans>
    114c:	90 91 fc 22 	lds	r25, 0x22FC	; 0x8022fc <udd_ctrl_payload_nb_trans+0x1>
    1150:	c0 91 4b 23 	lds	r28, 0x234B	; 0x80234b <udd_g_ctrlreq+0xa>
    1154:	d0 91 4c 23 	lds	r29, 0x234C	; 0x80234c <udd_g_ctrlreq+0xb>
    1158:	c8 1b       	sub	r28, r24
    115a:	d9 0b       	sbc	r29, r25
    115c:	71 f5       	brne	.+92     	; 0x11ba <udd_ctrl_in_sent+0x86>
    115e:	20 91 fd 22 	lds	r18, 0x22FD	; 0x8022fd <udd_ctrl_prev_payload_nb_trans>
    1162:	30 91 fe 22 	lds	r19, 0x22FE	; 0x8022fe <udd_ctrl_prev_payload_nb_trans+0x1>
    1166:	82 0f       	add	r24, r18
    1168:	93 1f       	adc	r25, r19
    116a:	80 93 fd 22 	sts	0x22FD, r24	; 0x8022fd <udd_ctrl_prev_payload_nb_trans>
    116e:	90 93 fe 22 	sts	0x22FE, r25	; 0x8022fe <udd_ctrl_prev_payload_nb_trans+0x1>
    1172:	20 91 47 23 	lds	r18, 0x2347	; 0x802347 <udd_g_ctrlreq+0x6>
    1176:	30 91 48 23 	lds	r19, 0x2348	; 0x802348 <udd_g_ctrlreq+0x7>
    117a:	82 17       	cp	r24, r18
    117c:	93 07       	cpc	r25, r19
    117e:	21 f0       	breq	.+8      	; 0x1188 <udd_ctrl_in_sent+0x54>
    1180:	80 91 16 22 	lds	r24, 0x2216	; 0x802216 <b_shortpacket.5383>
    1184:	88 23       	and	r24, r24
    1186:	41 f0       	breq	.+16     	; 0x1198 <udd_ctrl_in_sent+0x64>
    1188:	84 e0       	ldi	r24, 0x04	; 4
    118a:	80 93 ff 22 	sts	0x22FF, r24	; 0x8022ff <udd_ep_control_state>
    118e:	ec e0       	ldi	r30, 0x0C	; 12
    1190:	f3 e2       	ldi	r31, 0x23	; 35
    1192:	02 e0       	ldi	r16, 0x02	; 2
    1194:	06 93       	lac	Z, r16
    1196:	36 c0       	rjmp	.+108    	; 0x1204 <udd_ctrl_in_sent+0xd0>
    1198:	e0 91 4f 23 	lds	r30, 0x234F	; 0x80234f <udd_g_ctrlreq+0xe>
    119c:	f0 91 50 23 	lds	r31, 0x2350	; 0x802350 <udd_g_ctrlreq+0xf>
    11a0:	30 97       	sbiw	r30, 0x00	; 0
    11a2:	99 f0       	breq	.+38     	; 0x11ca <udd_ctrl_in_sent+0x96>
    11a4:	19 95       	eicall
    11a6:	88 23       	and	r24, r24
    11a8:	81 f0       	breq	.+32     	; 0x11ca <udd_ctrl_in_sent+0x96>
    11aa:	10 92 fb 22 	sts	0x22FB, r1	; 0x8022fb <udd_ctrl_payload_nb_trans>
    11ae:	10 92 fc 22 	sts	0x22FC, r1	; 0x8022fc <udd_ctrl_payload_nb_trans+0x1>
    11b2:	c0 91 4b 23 	lds	r28, 0x234B	; 0x80234b <udd_g_ctrlreq+0xa>
    11b6:	d0 91 4c 23 	lds	r29, 0x234C	; 0x80234c <udd_g_ctrlreq+0xb>
    11ba:	c0 34       	cpi	r28, 0x40	; 64
    11bc:	d1 05       	cpc	r29, r1
    11be:	28 f0       	brcs	.+10     	; 0x11ca <udd_ctrl_in_sent+0x96>
    11c0:	10 92 16 22 	sts	0x2216, r1	; 0x802216 <b_shortpacket.5383>
    11c4:	c0 e4       	ldi	r28, 0x40	; 64
    11c6:	d0 e0       	ldi	r29, 0x00	; 0
    11c8:	03 c0       	rjmp	.+6      	; 0x11d0 <udd_ctrl_in_sent+0x9c>
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	80 93 16 22 	sts	0x2216, r24	; 0x802216 <b_shortpacket.5383>
    11d0:	e0 e0       	ldi	r30, 0x00	; 0
    11d2:	f3 e2       	ldi	r31, 0x23	; 35
    11d4:	c6 8b       	std	Z+22, r28	; 0x16
    11d6:	d7 8b       	std	Z+23, r29	; 0x17
    11d8:	80 91 fb 22 	lds	r24, 0x22FB	; 0x8022fb <udd_ctrl_payload_nb_trans>
    11dc:	90 91 fc 22 	lds	r25, 0x22FC	; 0x8022fc <udd_ctrl_payload_nb_trans+0x1>
    11e0:	20 91 49 23 	lds	r18, 0x2349	; 0x802349 <udd_g_ctrlreq+0x8>
    11e4:	30 91 4a 23 	lds	r19, 0x234A	; 0x80234a <udd_g_ctrlreq+0x9>
    11e8:	28 0f       	add	r18, r24
    11ea:	39 1f       	adc	r19, r25
    11ec:	20 8f       	std	Z+24, r18	; 0x18
    11ee:	31 8f       	std	Z+25, r19	; 0x19
    11f0:	c8 0f       	add	r28, r24
    11f2:	d9 1f       	adc	r29, r25
    11f4:	c0 93 fb 22 	sts	0x22FB, r28	; 0x8022fb <udd_ctrl_payload_nb_trans>
    11f8:	d0 93 fc 22 	sts	0x22FC, r29	; 0x8022fc <udd_ctrl_payload_nb_trans+0x1>
    11fc:	e4 e1       	ldi	r30, 0x14	; 20
    11fe:	f3 e2       	ldi	r31, 0x23	; 35
    1200:	02 e0       	ldi	r16, 0x02	; 2
    1202:	06 93       	lac	Z, r16
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	0f 91       	pop	r16
    120a:	08 95       	ret

0000120c <udd_ep_get_size>:
    120c:	fc 01       	movw	r30, r24
    120e:	81 81       	ldd	r24, Z+1	; 0x01
    1210:	e8 2f       	mov	r30, r24
    1212:	e7 70       	andi	r30, 0x07	; 7
    1214:	8e 2f       	mov	r24, r30
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	fc 01       	movw	r30, r24
    121a:	31 97       	sbiw	r30, 0x01	; 1
    121c:	e7 30       	cpi	r30, 0x07	; 7
    121e:	f1 05       	cpc	r31, r1
    1220:	d0 f4       	brcc	.+52     	; 0x1256 <udd_ep_get_size+0x4a>
    1222:	88 27       	eor	r24, r24
    1224:	e2 50       	subi	r30, 0x02	; 2
    1226:	ff 4f       	sbci	r31, 0xFF	; 255
    1228:	8f 4f       	sbci	r24, 0xFF	; 255
    122a:	93 c7       	rjmp	.+3878   	; 0x2152 <__tablejump2__>
    122c:	80 e1       	ldi	r24, 0x10	; 16
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	08 95       	ret
    1232:	80 e2       	ldi	r24, 0x20	; 32
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	08 95       	ret
    1238:	80 e4       	ldi	r24, 0x40	; 64
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	08 95       	ret
    123e:	80 e8       	ldi	r24, 0x80	; 128
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	08 95       	ret
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	91 e0       	ldi	r25, 0x01	; 1
    1248:	08 95       	ret
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	92 e0       	ldi	r25, 0x02	; 2
    124e:	08 95       	ret
    1250:	8f ef       	ldi	r24, 0xFF	; 255
    1252:	93 e0       	ldi	r25, 0x03	; 3
    1254:	08 95       	ret
    1256:	88 e0       	ldi	r24, 0x08	; 8
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	08 95       	ret

0000125c <udd_ep_get_job>:
    125c:	28 2f       	mov	r18, r24
    125e:	2f 70       	andi	r18, 0x0F	; 15
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	22 0f       	add	r18, r18
    1264:	33 1f       	adc	r19, r19
    1266:	08 2e       	mov	r0, r24
    1268:	00 0c       	add	r0, r0
    126a:	99 0b       	sbc	r25, r25
    126c:	88 27       	eor	r24, r24
    126e:	99 0f       	add	r25, r25
    1270:	88 1f       	adc	r24, r24
    1272:	99 27       	eor	r25, r25
    1274:	82 0f       	add	r24, r18
    1276:	93 1f       	adc	r25, r19
    1278:	02 97       	sbiw	r24, 0x02	; 2
    127a:	9c 01       	movw	r18, r24
    127c:	22 0f       	add	r18, r18
    127e:	33 1f       	adc	r19, r19
    1280:	22 0f       	add	r18, r18
    1282:	33 1f       	adc	r19, r19
    1284:	22 0f       	add	r18, r18
    1286:	33 1f       	adc	r19, r19
    1288:	82 0f       	add	r24, r18
    128a:	93 1f       	adc	r25, r19
    128c:	89 56       	subi	r24, 0x69	; 105
    128e:	9d 4d       	sbci	r25, 0xDD	; 221
    1290:	08 95       	ret

00001292 <udd_ctrl_interrupt_tc_setup>:
    1292:	0f 93       	push	r16
    1294:	cf 93       	push	r28
    1296:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    129a:	80 ff       	sbrs	r24, 0
    129c:	64 c0       	rjmp	.+200    	; 0x1366 <udd_ctrl_interrupt_tc_setup+0xd4>
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    12a4:	ec e0       	ldi	r30, 0x0C	; 12
    12a6:	f3 e2       	ldi	r31, 0x23	; 35
    12a8:	00 e8       	ldi	r16, 0x80	; 128
    12aa:	06 93       	lac	Z, r16
    12ac:	e4 e1       	ldi	r30, 0x14	; 20
    12ae:	f3 e2       	ldi	r31, 0x23	; 35
    12b0:	00 e8       	ldi	r16, 0x80	; 128
    12b2:	06 93       	lac	Z, r16
    12b4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    12b8:	ec e0       	ldi	r30, 0x0C	; 12
    12ba:	f3 e2       	ldi	r31, 0x23	; 35
    12bc:	00 e1       	ldi	r16, 0x10	; 16
    12be:	06 93       	lac	Z, r16
    12c0:	80 91 ff 22 	lds	r24, 0x22FF	; 0x8022ff <udd_ep_control_state>
    12c4:	88 23       	and	r24, r24
    12c6:	29 f0       	breq	.+10     	; 0x12d2 <udd_ctrl_interrupt_tc_setup+0x40>
    12c8:	83 50       	subi	r24, 0x03	; 3
    12ca:	82 30       	cpi	r24, 0x02	; 2
    12cc:	08 f4       	brcc	.+2      	; 0x12d0 <udd_ctrl_interrupt_tc_setup+0x3e>
    12ce:	2a df       	rcall	.-428    	; 0x1124 <udd_ctrl_endofrequest>
    12d0:	e8 de       	rcall	.-560    	; 0x10a2 <udd_ctrl_init>
    12d2:	80 91 0e 23 	lds	r24, 0x230E	; 0x80230e <udd_sram+0xe>
    12d6:	90 91 0f 23 	lds	r25, 0x230F	; 0x80230f <udd_sram+0xf>
    12da:	08 97       	sbiw	r24, 0x08	; 8
    12dc:	09 f0       	breq	.+2      	; 0x12e0 <udd_ctrl_interrupt_tc_setup+0x4e>
    12de:	45 c0       	rjmp	.+138    	; 0x136a <udd_ctrl_interrupt_tc_setup+0xd8>
    12e0:	88 e0       	ldi	r24, 0x08	; 8
    12e2:	eb eb       	ldi	r30, 0xBB	; 187
    12e4:	f2 e2       	ldi	r31, 0x22	; 34
    12e6:	a1 e4       	ldi	r26, 0x41	; 65
    12e8:	b3 e2       	ldi	r27, 0x23	; 35
    12ea:	01 90       	ld	r0, Z+
    12ec:	0d 92       	st	X+, r0
    12ee:	8a 95       	dec	r24
    12f0:	e1 f7       	brne	.-8      	; 0x12ea <udd_ctrl_interrupt_tc_setup+0x58>
    12f2:	e8 ec       	ldi	r30, 0xC8	; 200
    12f4:	f4 e0       	ldi	r31, 0x04	; 4
    12f6:	80 81       	ld	r24, Z
    12f8:	80 62       	ori	r24, 0x20	; 32
    12fa:	80 83       	st	Z, r24
    12fc:	80 81       	ld	r24, Z
    12fe:	80 62       	ori	r24, 0x20	; 32
    1300:	80 83       	st	Z, r24
    1302:	15 dc       	rcall	.-2006   	; 0xb2e <udc_process_setup>
    1304:	c8 2f       	mov	r28, r24
    1306:	81 11       	cpse	r24, r1
    1308:	03 c0       	rjmp	.+6      	; 0x1310 <udd_ctrl_interrupt_tc_setup+0x7e>
    130a:	f0 de       	rcall	.-544    	; 0x10ec <udd_ctrl_stall_data>
    130c:	c1 e0       	ldi	r28, 0x01	; 1
    130e:	2e c0       	rjmp	.+92     	; 0x136c <udd_ctrl_interrupt_tc_setup+0xda>
    1310:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <udd_g_ctrlreq>
    1314:	88 23       	and	r24, r24
    1316:	6c f4       	brge	.+26     	; 0x1332 <udd_ctrl_interrupt_tc_setup+0xa0>
    1318:	10 92 fd 22 	sts	0x22FD, r1	; 0x8022fd <udd_ctrl_prev_payload_nb_trans>
    131c:	10 92 fe 22 	sts	0x22FE, r1	; 0x8022fe <udd_ctrl_prev_payload_nb_trans+0x1>
    1320:	10 92 fb 22 	sts	0x22FB, r1	; 0x8022fb <udd_ctrl_payload_nb_trans>
    1324:	10 92 fc 22 	sts	0x22FC, r1	; 0x8022fc <udd_ctrl_payload_nb_trans+0x1>
    1328:	82 e0       	ldi	r24, 0x02	; 2
    132a:	80 93 ff 22 	sts	0x22FF, r24	; 0x8022ff <udd_ep_control_state>
    132e:	02 df       	rcall	.-508    	; 0x1134 <udd_ctrl_in_sent>
    1330:	1d c0       	rjmp	.+58     	; 0x136c <udd_ctrl_interrupt_tc_setup+0xda>
    1332:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <udd_g_ctrlreq+0x6>
    1336:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <udd_g_ctrlreq+0x7>
    133a:	89 2b       	or	r24, r25
    133c:	11 f4       	brne	.+4      	; 0x1342 <udd_ctrl_interrupt_tc_setup+0xb0>
    133e:	e4 de       	rcall	.-568    	; 0x1108 <udd_ctrl_send_zlp_in>
    1340:	15 c0       	rjmp	.+42     	; 0x136c <udd_ctrl_interrupt_tc_setup+0xda>
    1342:	10 92 fd 22 	sts	0x22FD, r1	; 0x8022fd <udd_ctrl_prev_payload_nb_trans>
    1346:	10 92 fe 22 	sts	0x22FE, r1	; 0x8022fe <udd_ctrl_prev_payload_nb_trans+0x1>
    134a:	10 92 fb 22 	sts	0x22FB, r1	; 0x8022fb <udd_ctrl_payload_nb_trans>
    134e:	10 92 fc 22 	sts	0x22FC, r1	; 0x8022fc <udd_ctrl_payload_nb_trans+0x1>
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	80 93 ff 22 	sts	0x22FF, r24	; 0x8022ff <udd_ep_control_state>
    1358:	ec e0       	ldi	r30, 0x0C	; 12
    135a:	f3 e2       	ldi	r31, 0x23	; 35
    135c:	02 e0       	ldi	r16, 0x02	; 2
    135e:	06 93       	lac	Z, r16
    1360:	00 e2       	ldi	r16, 0x20	; 32
    1362:	06 93       	lac	Z, r16
    1364:	03 c0       	rjmp	.+6      	; 0x136c <udd_ctrl_interrupt_tc_setup+0xda>
    1366:	c0 e0       	ldi	r28, 0x00	; 0
    1368:	01 c0       	rjmp	.+2      	; 0x136c <udd_ctrl_interrupt_tc_setup+0xda>
    136a:	c1 e0       	ldi	r28, 0x01	; 1
    136c:	8c 2f       	mov	r24, r28
    136e:	cf 91       	pop	r28
    1370:	0f 91       	pop	r16
    1372:	08 95       	ret

00001374 <udd_ep_trans_complet>:
    1374:	8f 92       	push	r8
    1376:	9f 92       	push	r9
    1378:	af 92       	push	r10
    137a:	bf 92       	push	r11
    137c:	df 92       	push	r13
    137e:	ef 92       	push	r14
    1380:	ff 92       	push	r15
    1382:	0f 93       	push	r16
    1384:	1f 93       	push	r17
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	d8 2e       	mov	r13, r24
    138c:	67 df       	rcall	.-306    	; 0x125c <udd_ep_get_job>
    138e:	8c 01       	movw	r16, r24
    1390:	bd 2c       	mov	r11, r13
    1392:	bb 1c       	adc	r11, r11
    1394:	bb 24       	eor	r11, r11
    1396:	bb 1c       	adc	r11, r11
    1398:	cd 2d       	mov	r28, r13
    139a:	cf 70       	andi	r28, 0x0F	; 15
    139c:	d0 e0       	ldi	r29, 0x00	; 0
    139e:	cc 0f       	add	r28, r28
    13a0:	dd 1f       	adc	r29, r29
    13a2:	cb 0d       	add	r28, r11
    13a4:	d1 1d       	adc	r29, r1
    13a6:	ce 01       	movw	r24, r28
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	88 0f       	add	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	9c 01       	movw	r18, r24
    13b6:	24 5f       	subi	r18, 0xF4	; 244
    13b8:	3c 4d       	sbci	r19, 0xDC	; 220
    13ba:	79 01       	movw	r14, r18
    13bc:	c9 01       	movw	r24, r18
    13be:	26 df       	rcall	.-436    	; 0x120c <udd_ep_get_size>
    13c0:	4c 01       	movw	r8, r24
    13c2:	bb 20       	and	r11, r11
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <udd_ep_trans_complet+0x54>
    13c6:	79 c0       	rjmp	.+242    	; 0x14ba <udd_ep_trans_complet+0x146>
    13c8:	fe 01       	movw	r30, r28
    13ca:	ee 0f       	add	r30, r30
    13cc:	ff 1f       	adc	r31, r31
    13ce:	ee 0f       	add	r30, r30
    13d0:	ff 1f       	adc	r31, r31
    13d2:	ee 0f       	add	r30, r30
    13d4:	ff 1f       	adc	r31, r31
    13d6:	e0 50       	subi	r30, 0x00	; 0
    13d8:	fd 4d       	sbci	r31, 0xDD	; 221
    13da:	22 89       	ldd	r18, Z+18	; 0x12
    13dc:	33 89       	ldd	r19, Z+19	; 0x13
    13de:	d8 01       	movw	r26, r16
    13e0:	15 96       	adiw	r26, 0x05	; 5
    13e2:	8d 91       	ld	r24, X+
    13e4:	9c 91       	ld	r25, X
    13e6:	16 97       	sbiw	r26, 0x06	; 6
    13e8:	82 0f       	add	r24, r18
    13ea:	93 1f       	adc	r25, r19
    13ec:	15 96       	adiw	r26, 0x05	; 5
    13ee:	8d 93       	st	X+, r24
    13f0:	9c 93       	st	X, r25
    13f2:	16 97       	sbiw	r26, 0x06	; 6
    13f4:	13 96       	adiw	r26, 0x03	; 3
    13f6:	2d 91       	ld	r18, X+
    13f8:	3c 91       	ld	r19, X
    13fa:	14 97       	sbiw	r26, 0x04	; 4
    13fc:	82 17       	cp	r24, r18
    13fe:	93 07       	cpc	r25, r19
    1400:	09 f4       	brne	.+2      	; 0x1404 <udd_ep_trans_complet+0x90>
    1402:	45 c0       	rjmp	.+138    	; 0x148e <udd_ep_trans_complet+0x11a>
    1404:	28 1b       	sub	r18, r24
    1406:	39 0b       	sbc	r19, r25
    1408:	21 15       	cp	r18, r1
    140a:	b4 e0       	ldi	r27, 0x04	; 4
    140c:	3b 07       	cpc	r19, r27
    140e:	38 f0       	brcs	.+14     	; 0x141e <udd_ep_trans_complet+0xaa>
    1410:	2f ef       	ldi	r18, 0xFF	; 255
    1412:	33 e0       	ldi	r19, 0x03	; 3
    1414:	c9 01       	movw	r24, r18
    1416:	b4 01       	movw	r22, r8
    1418:	88 d6       	rcall	.+3344   	; 0x212a <__udivmodhi4>
    141a:	28 1b       	sub	r18, r24
    141c:	39 0b       	sbc	r19, r25
    141e:	f8 01       	movw	r30, r16
    1420:	80 81       	ld	r24, Z
    1422:	81 ff       	sbrs	r24, 1
    1424:	09 c0       	rjmp	.+18     	; 0x1438 <udd_ep_trans_complet+0xc4>
    1426:	c9 01       	movw	r24, r18
    1428:	b4 01       	movw	r22, r8
    142a:	7f d6       	rcall	.+3326   	; 0x212a <__udivmodhi4>
    142c:	41 e0       	ldi	r20, 0x01	; 1
    142e:	89 2b       	or	r24, r25
    1430:	09 f0       	breq	.+2      	; 0x1434 <udd_ep_trans_complet+0xc0>
    1432:	40 e0       	ldi	r20, 0x00	; 0
    1434:	84 2f       	mov	r24, r20
    1436:	01 c0       	rjmp	.+2      	; 0x143a <udd_ep_trans_complet+0xc6>
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	d8 01       	movw	r26, r16
    143c:	9c 91       	ld	r25, X
    143e:	80 fb       	bst	r24, 0
    1440:	91 f9       	bld	r25, 1
    1442:	9c 93       	st	X, r25
    1444:	fe 01       	movw	r30, r28
    1446:	ee 0f       	add	r30, r30
    1448:	ff 1f       	adc	r31, r31
    144a:	ee 0f       	add	r30, r30
    144c:	ff 1f       	adc	r31, r31
    144e:	ee 0f       	add	r30, r30
    1450:	ff 1f       	adc	r31, r31
    1452:	e0 50       	subi	r30, 0x00	; 0
    1454:	fd 4d       	sbci	r31, 0xDD	; 221
    1456:	12 8a       	std	Z+18, r1	; 0x12
    1458:	13 8a       	std	Z+19, r1	; 0x13
    145a:	26 87       	std	Z+14, r18	; 0x0e
    145c:	37 87       	std	Z+15, r19	; 0x0f
    145e:	11 96       	adiw	r26, 0x01	; 1
    1460:	2d 91       	ld	r18, X+
    1462:	3c 91       	ld	r19, X
    1464:	12 97       	sbiw	r26, 0x02	; 2
    1466:	15 96       	adiw	r26, 0x05	; 5
    1468:	8d 91       	ld	r24, X+
    146a:	9c 91       	ld	r25, X
    146c:	16 97       	sbiw	r26, 0x06	; 6
    146e:	82 0f       	add	r24, r18
    1470:	93 1f       	adc	r25, r19
    1472:	cc 0f       	add	r28, r28
    1474:	dd 1f       	adc	r29, r29
    1476:	cc 0f       	add	r28, r28
    1478:	dd 1f       	adc	r29, r29
    147a:	cc 0f       	add	r28, r28
    147c:	dd 1f       	adc	r29, r29
    147e:	c0 5f       	subi	r28, 0xF0	; 240
    1480:	dc 4d       	sbci	r29, 0xDC	; 220
    1482:	88 83       	st	Y, r24
    1484:	99 83       	std	Y+1, r25	; 0x01
    1486:	f7 01       	movw	r30, r14
    1488:	02 e0       	ldi	r16, 0x02	; 2
    148a:	06 93       	lac	Z, r16
    148c:	e4 c0       	rjmp	.+456    	; 0x1656 <udd_ep_trans_complet+0x2e2>
    148e:	d8 01       	movw	r26, r16
    1490:	8c 91       	ld	r24, X
    1492:	81 ff       	sbrs	r24, 1
    1494:	cd c0       	rjmp	.+410    	; 0x1630 <udd_ep_trans_complet+0x2bc>
    1496:	8d 7f       	andi	r24, 0xFD	; 253
    1498:	8c 93       	st	X, r24
    149a:	cc 0f       	add	r28, r28
    149c:	dd 1f       	adc	r29, r29
    149e:	cc 0f       	add	r28, r28
    14a0:	dd 1f       	adc	r29, r29
    14a2:	cc 0f       	add	r28, r28
    14a4:	dd 1f       	adc	r29, r29
    14a6:	c0 50       	subi	r28, 0x00	; 0
    14a8:	dd 4d       	sbci	r29, 0xDD	; 221
    14aa:	1a 8a       	std	Y+18, r1	; 0x12
    14ac:	1b 8a       	std	Y+19, r1	; 0x13
    14ae:	1e 86       	std	Y+14, r1	; 0x0e
    14b0:	1f 86       	std	Y+15, r1	; 0x0f
    14b2:	f7 01       	movw	r30, r14
    14b4:	02 e0       	ldi	r16, 0x02	; 2
    14b6:	06 93       	lac	Z, r16
    14b8:	ce c0       	rjmp	.+412    	; 0x1656 <udd_ep_trans_complet+0x2e2>
    14ba:	fe 01       	movw	r30, r28
    14bc:	ee 0f       	add	r30, r30
    14be:	ff 1f       	adc	r31, r31
    14c0:	ee 0f       	add	r30, r30
    14c2:	ff 1f       	adc	r31, r31
    14c4:	ee 0f       	add	r30, r30
    14c6:	ff 1f       	adc	r31, r31
    14c8:	e0 50       	subi	r30, 0x00	; 0
    14ca:	fd 4d       	sbci	r31, 0xDD	; 221
    14cc:	a6 84       	ldd	r10, Z+14	; 0x0e
    14ce:	b7 84       	ldd	r11, Z+15	; 0x0f
    14d0:	d8 01       	movw	r26, r16
    14d2:	8c 91       	ld	r24, X
    14d4:	82 ff       	sbrs	r24, 2
    14d6:	19 c0       	rjmp	.+50     	; 0x150a <udd_ep_trans_complet+0x196>
    14d8:	11 96       	adiw	r26, 0x01	; 1
    14da:	ed 91       	ld	r30, X+
    14dc:	fc 91       	ld	r31, X
    14de:	12 97       	sbiw	r26, 0x02	; 2
    14e0:	15 96       	adiw	r26, 0x05	; 5
    14e2:	2d 91       	ld	r18, X+
    14e4:	3c 91       	ld	r19, X
    14e6:	16 97       	sbiw	r26, 0x06	; 6
    14e8:	13 96       	adiw	r26, 0x03	; 3
    14ea:	8d 91       	ld	r24, X+
    14ec:	9c 91       	ld	r25, X
    14ee:	14 97       	sbiw	r26, 0x04	; 4
    14f0:	b4 01       	movw	r22, r8
    14f2:	1b d6       	rcall	.+3126   	; 0x212a <__udivmodhi4>
    14f4:	b0 e4       	ldi	r27, 0x40	; 64
    14f6:	db 9e       	mul	r13, r27
    14f8:	b0 01       	movw	r22, r0
    14fa:	11 24       	eor	r1, r1
    14fc:	69 52       	subi	r22, 0x29	; 41
    14fe:	7e 4d       	sbci	r23, 0xDE	; 222
    1500:	ac 01       	movw	r20, r24
    1502:	cf 01       	movw	r24, r30
    1504:	82 0f       	add	r24, r18
    1506:	93 1f       	adc	r25, r19
    1508:	2d d6       	rcall	.+3162   	; 0x2164 <memcpy>
    150a:	f8 01       	movw	r30, r16
    150c:	25 81       	ldd	r18, Z+5	; 0x05
    150e:	36 81       	ldd	r19, Z+6	; 0x06
    1510:	2a 0d       	add	r18, r10
    1512:	3b 1d       	adc	r19, r11
    1514:	25 83       	std	Z+5, r18	; 0x05
    1516:	36 83       	std	Z+6, r19	; 0x06
    1518:	83 81       	ldd	r24, Z+3	; 0x03
    151a:	94 81       	ldd	r25, Z+4	; 0x04
    151c:	82 17       	cp	r24, r18
    151e:	93 07       	cpc	r25, r19
    1520:	68 f4       	brcc	.+26     	; 0x153c <udd_ep_trans_complet+0x1c8>
    1522:	85 83       	std	Z+5, r24	; 0x05
    1524:	96 83       	std	Z+6, r25	; 0x06
    1526:	cc 0f       	add	r28, r28
    1528:	dd 1f       	adc	r29, r29
    152a:	cc 0f       	add	r28, r28
    152c:	dd 1f       	adc	r29, r29
    152e:	cc 0f       	add	r28, r28
    1530:	dd 1f       	adc	r29, r29
    1532:	c0 50       	subi	r28, 0x00	; 0
    1534:	dd 4d       	sbci	r29, 0xDD	; 221
    1536:	8a 89       	ldd	r24, Y+18	; 0x12
    1538:	9b 89       	ldd	r25, Y+19	; 0x13
    153a:	7a c0       	rjmp	.+244    	; 0x1630 <udd_ep_trans_complet+0x2bc>
    153c:	fe 01       	movw	r30, r28
    153e:	ee 0f       	add	r30, r30
    1540:	ff 1f       	adc	r31, r31
    1542:	ee 0f       	add	r30, r30
    1544:	ff 1f       	adc	r31, r31
    1546:	ee 0f       	add	r30, r30
    1548:	ff 1f       	adc	r31, r31
    154a:	e0 50       	subi	r30, 0x00	; 0
    154c:	fd 4d       	sbci	r31, 0xDD	; 221
    154e:	42 89       	ldd	r20, Z+18	; 0x12
    1550:	53 89       	ldd	r21, Z+19	; 0x13
    1552:	4a 15       	cp	r20, r10
    1554:	5b 05       	cpc	r21, r11
    1556:	09 f0       	breq	.+2      	; 0x155a <udd_ep_trans_complet+0x1e6>
    1558:	6b c0       	rjmp	.+214    	; 0x1630 <udd_ep_trans_complet+0x2bc>
    155a:	28 17       	cp	r18, r24
    155c:	39 07       	cpc	r19, r25
    155e:	09 f4       	brne	.+2      	; 0x1562 <udd_ep_trans_complet+0x1ee>
    1560:	67 c0       	rjmp	.+206    	; 0x1630 <udd_ep_trans_complet+0x2bc>
    1562:	ac 01       	movw	r20, r24
    1564:	42 1b       	sub	r20, r18
    1566:	53 0b       	sbc	r21, r19
    1568:	9a 01       	movw	r18, r20
    156a:	21 15       	cp	r18, r1
    156c:	54 e0       	ldi	r21, 0x04	; 4
    156e:	35 07       	cpc	r19, r21
    1570:	50 f0       	brcs	.+20     	; 0x1586 <udd_ep_trans_complet+0x212>
    1572:	2f ef       	ldi	r18, 0xFF	; 255
    1574:	33 e0       	ldi	r19, 0x03	; 3
    1576:	c9 01       	movw	r24, r18
    1578:	b4 01       	movw	r22, r8
    157a:	d7 d5       	rcall	.+2990   	; 0x212a <__udivmodhi4>
    157c:	d9 01       	movw	r26, r18
    157e:	a8 1b       	sub	r26, r24
    1580:	b9 0b       	sbc	r27, r25
    1582:	cd 01       	movw	r24, r26
    1584:	07 c0       	rjmp	.+14     	; 0x1594 <udd_ep_trans_complet+0x220>
    1586:	c9 01       	movw	r24, r18
    1588:	b4 01       	movw	r22, r8
    158a:	cf d5       	rcall	.+2974   	; 0x212a <__udivmodhi4>
    158c:	f9 01       	movw	r30, r18
    158e:	e8 1b       	sub	r30, r24
    1590:	f9 0b       	sbc	r31, r25
    1592:	cf 01       	movw	r24, r30
    1594:	fe 01       	movw	r30, r28
    1596:	ee 0f       	add	r30, r30
    1598:	ff 1f       	adc	r31, r31
    159a:	ee 0f       	add	r30, r30
    159c:	ff 1f       	adc	r31, r31
    159e:	ee 0f       	add	r30, r30
    15a0:	ff 1f       	adc	r31, r31
    15a2:	e0 50       	subi	r30, 0x00	; 0
    15a4:	fd 4d       	sbci	r31, 0xDD	; 221
    15a6:	16 86       	std	Z+14, r1	; 0x0e
    15a8:	17 86       	std	Z+15, r1	; 0x0f
    15aa:	88 15       	cp	r24, r8
    15ac:	99 05       	cpc	r25, r9
    15ae:	00 f5       	brcc	.+64     	; 0x15f0 <udd_ep_trans_complet+0x27c>
    15b0:	d8 01       	movw	r26, r16
    15b2:	8c 91       	ld	r24, X
    15b4:	84 60       	ori	r24, 0x04	; 4
    15b6:	8c 93       	st	X, r24
    15b8:	b0 e4       	ldi	r27, 0x40	; 64
    15ba:	db 9e       	mul	r13, r27
    15bc:	c0 01       	movw	r24, r0
    15be:	11 24       	eor	r1, r1
    15c0:	89 52       	subi	r24, 0x29	; 41
    15c2:	9e 4d       	sbci	r25, 0xDE	; 222
    15c4:	fe 01       	movw	r30, r28
    15c6:	ee 0f       	add	r30, r30
    15c8:	ff 1f       	adc	r31, r31
    15ca:	ee 0f       	add	r30, r30
    15cc:	ff 1f       	adc	r31, r31
    15ce:	ee 0f       	add	r30, r30
    15d0:	ff 1f       	adc	r31, r31
    15d2:	e0 5f       	subi	r30, 0xF0	; 240
    15d4:	fc 4d       	sbci	r31, 0xDC	; 220
    15d6:	80 83       	st	Z, r24
    15d8:	91 83       	std	Z+1, r25	; 0x01
    15da:	cc 0f       	add	r28, r28
    15dc:	dd 1f       	adc	r29, r29
    15de:	cc 0f       	add	r28, r28
    15e0:	dd 1f       	adc	r29, r29
    15e2:	cc 0f       	add	r28, r28
    15e4:	dd 1f       	adc	r29, r29
    15e6:	c0 50       	subi	r28, 0x00	; 0
    15e8:	dd 4d       	sbci	r29, 0xDD	; 221
    15ea:	8a 8a       	std	Y+18, r8	; 0x12
    15ec:	9b 8a       	std	Y+19, r9	; 0x13
    15ee:	1c c0       	rjmp	.+56     	; 0x1628 <udd_ep_trans_complet+0x2b4>
    15f0:	f8 01       	movw	r30, r16
    15f2:	41 81       	ldd	r20, Z+1	; 0x01
    15f4:	52 81       	ldd	r21, Z+2	; 0x02
    15f6:	25 81       	ldd	r18, Z+5	; 0x05
    15f8:	36 81       	ldd	r19, Z+6	; 0x06
    15fa:	24 0f       	add	r18, r20
    15fc:	35 1f       	adc	r19, r21
    15fe:	fe 01       	movw	r30, r28
    1600:	ee 0f       	add	r30, r30
    1602:	ff 1f       	adc	r31, r31
    1604:	ee 0f       	add	r30, r30
    1606:	ff 1f       	adc	r31, r31
    1608:	ee 0f       	add	r30, r30
    160a:	ff 1f       	adc	r31, r31
    160c:	e0 5f       	subi	r30, 0xF0	; 240
    160e:	fc 4d       	sbci	r31, 0xDC	; 220
    1610:	20 83       	st	Z, r18
    1612:	31 83       	std	Z+1, r19	; 0x01
    1614:	cc 0f       	add	r28, r28
    1616:	dd 1f       	adc	r29, r29
    1618:	cc 0f       	add	r28, r28
    161a:	dd 1f       	adc	r29, r29
    161c:	cc 0f       	add	r28, r28
    161e:	dd 1f       	adc	r29, r29
    1620:	c0 50       	subi	r28, 0x00	; 0
    1622:	dd 4d       	sbci	r29, 0xDD	; 221
    1624:	8a 8b       	std	Y+18, r24	; 0x12
    1626:	9b 8b       	std	Y+19, r25	; 0x13
    1628:	f7 01       	movw	r30, r14
    162a:	02 e0       	ldi	r16, 0x02	; 2
    162c:	06 93       	lac	Z, r16
    162e:	13 c0       	rjmp	.+38     	; 0x1656 <udd_ep_trans_complet+0x2e2>
    1630:	d8 01       	movw	r26, r16
    1632:	8c 91       	ld	r24, X
    1634:	80 ff       	sbrs	r24, 0
    1636:	0f c0       	rjmp	.+30     	; 0x1656 <udd_ep_trans_complet+0x2e2>
    1638:	8e 7f       	andi	r24, 0xFE	; 254
    163a:	8c 93       	st	X, r24
    163c:	17 96       	adiw	r26, 0x07	; 7
    163e:	ed 91       	ld	r30, X+
    1640:	fc 91       	ld	r31, X
    1642:	18 97       	sbiw	r26, 0x08	; 8
    1644:	30 97       	sbiw	r30, 0x00	; 0
    1646:	39 f0       	breq	.+14     	; 0x1656 <udd_ep_trans_complet+0x2e2>
    1648:	15 96       	adiw	r26, 0x05	; 5
    164a:	6d 91       	ld	r22, X+
    164c:	7c 91       	ld	r23, X
    164e:	16 97       	sbiw	r26, 0x06	; 6
    1650:	4d 2d       	mov	r20, r13
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	19 95       	eicall
    1656:	df 91       	pop	r29
    1658:	cf 91       	pop	r28
    165a:	1f 91       	pop	r17
    165c:	0f 91       	pop	r16
    165e:	ff 90       	pop	r15
    1660:	ef 90       	pop	r14
    1662:	df 90       	pop	r13
    1664:	bf 90       	pop	r11
    1666:	af 90       	pop	r10
    1668:	9f 90       	pop	r9
    166a:	8f 90       	pop	r8
    166c:	08 95       	ret

0000166e <udd_attach>:
    166e:	1f 93       	push	r17
    1670:	cf 93       	push	r28
    1672:	df 93       	push	r29
    1674:	1f 92       	push	r1
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	8f b7       	in	r24, 0x3f	; 63
    167c:	89 83       	std	Y+1, r24	; 0x01
    167e:	f8 94       	cli
    1680:	19 81       	ldd	r17, Y+1	; 0x01
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	d6 dc       	rcall	.-1620   	; 0x1032 <udd_sleep_mode>
    1686:	ea ec       	ldi	r30, 0xCA	; 202
    1688:	f4 e0       	ldi	r31, 0x04	; 4
    168a:	80 e4       	ldi	r24, 0x40	; 64
    168c:	80 83       	st	Z, r24
    168e:	80 e2       	ldi	r24, 0x20	; 32
    1690:	80 83       	st	Z, r24
    1692:	e1 ec       	ldi	r30, 0xC1	; 193
    1694:	f4 e0       	ldi	r31, 0x04	; 4
    1696:	80 81       	ld	r24, Z
    1698:	81 60       	ori	r24, 0x01	; 1
    169a:	80 83       	st	Z, r24
    169c:	a9 ec       	ldi	r26, 0xC9	; 201
    169e:	b4 e0       	ldi	r27, 0x04	; 4
    16a0:	8c 91       	ld	r24, X
    16a2:	82 60       	ori	r24, 0x02	; 2
    16a4:	8c 93       	st	X, r24
    16a6:	e8 ec       	ldi	r30, 0xC8	; 200
    16a8:	f4 e0       	ldi	r31, 0x04	; 4
    16aa:	80 81       	ld	r24, Z
    16ac:	80 64       	ori	r24, 0x40	; 64
    16ae:	80 83       	st	Z, r24
    16b0:	8c 91       	ld	r24, X
    16b2:	81 60       	ori	r24, 0x01	; 1
    16b4:	8c 93       	st	X, r24
    16b6:	80 81       	ld	r24, Z
    16b8:	80 68       	ori	r24, 0x80	; 128
    16ba:	80 83       	st	Z, r24
    16bc:	1f bf       	out	0x3f, r17	; 63
    16be:	0f 90       	pop	r0
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	1f 91       	pop	r17
    16c6:	08 95       	ret

000016c8 <udd_enable>:
    16c8:	0f 93       	push	r16
    16ca:	1f 93       	push	r17
    16cc:	cf 93       	push	r28
    16ce:	df 93       	push	r29
    16d0:	1f 92       	push	r1
    16d2:	1f 92       	push	r1
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	00 e6       	ldi	r16, 0x60	; 96
    16da:	10 e0       	ldi	r17, 0x00	; 0
    16dc:	f8 01       	movw	r30, r16
    16de:	10 82       	st	Z, r1
    16e0:	80 e3       	ldi	r24, 0x30	; 48
    16e2:	ce d4       	rcall	.+2460   	; 0x2080 <sysclk_enable_usb>
    16e4:	e0 ec       	ldi	r30, 0xC0	; 192
    16e6:	f4 e0       	ldi	r31, 0x04	; 4
    16e8:	80 81       	ld	r24, Z
    16ea:	80 64       	ori	r24, 0x40	; 64
    16ec:	80 83       	st	Z, r24
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	f8 01       	movw	r30, r16
    16f2:	80 83       	st	Z, r24
    16f4:	8f b7       	in	r24, 0x3f	; 63
    16f6:	8a 83       	std	Y+2, r24	; 0x02
    16f8:	f8 94       	cli
    16fa:	1a 81       	ldd	r17, Y+2	; 0x02
    16fc:	e0 e0       	ldi	r30, 0x00	; 0
    16fe:	f3 e2       	ldi	r31, 0x23	; 35
    1700:	15 86       	std	Z+13, r1	; 0x0d
    1702:	15 8a       	std	Z+21, r1	; 0x15
    1704:	15 8e       	std	Z+29, r1	; 0x1d
    1706:	15 a2       	std	Z+37, r1	; 0x25
    1708:	15 a6       	std	Z+45, r1	; 0x2d
    170a:	15 aa       	std	Z+53, r1	; 0x35
    170c:	e7 e9       	ldi	r30, 0x97	; 151
    170e:	f2 e2       	ldi	r31, 0x22	; 34
    1710:	80 81       	ld	r24, Z
    1712:	8e 7f       	andi	r24, 0xFE	; 254
    1714:	80 83       	st	Z, r24
    1716:	e0 ea       	ldi	r30, 0xA0	; 160
    1718:	f2 e2       	ldi	r31, 0x22	; 34
    171a:	80 81       	ld	r24, Z
    171c:	8e 7f       	andi	r24, 0xFE	; 254
    171e:	80 83       	st	Z, r24
    1720:	e9 ea       	ldi	r30, 0xA9	; 169
    1722:	f2 e2       	ldi	r31, 0x22	; 34
    1724:	80 81       	ld	r24, Z
    1726:	8e 7f       	andi	r24, 0xFE	; 254
    1728:	80 83       	st	Z, r24
    172a:	e2 eb       	ldi	r30, 0xB2	; 178
    172c:	f2 e2       	ldi	r31, 0x22	; 34
    172e:	80 81       	ld	r24, Z
    1730:	8e 7f       	andi	r24, 0xFE	; 254
    1732:	80 83       	st	Z, r24
    1734:	6a e1       	ldi	r22, 0x1A	; 26
    1736:	70 e0       	ldi	r23, 0x00	; 0
    1738:	82 e0       	ldi	r24, 0x02	; 2
    173a:	e7 d4       	rcall	.+2510   	; 0x210a <nvm_read_byte>
    173c:	8f 3f       	cpi	r24, 0xFF	; 255
    173e:	19 f0       	breq	.+6      	; 0x1746 <udd_enable+0x7e>
    1740:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    1744:	03 c0       	rjmp	.+6      	; 0x174c <udd_enable+0x84>
    1746:	8f e1       	ldi	r24, 0x1F	; 31
    1748:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    174c:	6b e1       	ldi	r22, 0x1B	; 27
    174e:	70 e0       	ldi	r23, 0x00	; 0
    1750:	82 e0       	ldi	r24, 0x02	; 2
    1752:	db d4       	rcall	.+2486   	; 0x210a <nvm_read_byte>
    1754:	8f 3f       	cpi	r24, 0xFF	; 255
    1756:	19 f0       	breq	.+6      	; 0x175e <udd_enable+0x96>
    1758:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    175c:	03 c0       	rjmp	.+6      	; 0x1764 <udd_enable+0x9c>
    175e:	8f e1       	ldi	r24, 0x1F	; 31
    1760:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    1764:	e0 ec       	ldi	r30, 0xC0	; 192
    1766:	f4 e0       	ldi	r31, 0x04	; 4
    1768:	80 81       	ld	r24, Z
    176a:	82 60       	ori	r24, 0x02	; 2
    176c:	80 83       	st	Z, r24
    176e:	80 81       	ld	r24, Z
    1770:	80 68       	ori	r24, 0x80	; 128
    1772:	80 83       	st	Z, r24
    1774:	80 81       	ld	r24, Z
    1776:	80 61       	ori	r24, 0x10	; 16
    1778:	80 83       	st	Z, r24
    177a:	8c e0       	ldi	r24, 0x0C	; 12
    177c:	93 e2       	ldi	r25, 0x23	; 35
    177e:	86 83       	std	Z+6, r24	; 0x06
    1780:	97 83       	std	Z+7, r25	; 0x07
    1782:	80 81       	ld	r24, Z
    1784:	80 62       	ori	r24, 0x20	; 32
    1786:	80 83       	st	Z, r24
    1788:	8f ef       	ldi	r24, 0xFF	; 255
    178a:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    178e:	e8 ec       	ldi	r30, 0xC8	; 200
    1790:	f4 e0       	ldi	r31, 0x04	; 4
    1792:	80 81       	ld	r24, Z
    1794:	81 60       	ori	r24, 0x01	; 1
    1796:	80 83       	st	Z, r24
    1798:	10 92 40 23 	sts	0x2340, r1	; 0x802340 <udd_b_idle>
    179c:	80 91 56 23 	lds	r24, 0x2356	; 0x802356 <sleepmgr_locks+0x5>
    17a0:	8f 3f       	cpi	r24, 0xFF	; 255
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <udd_enable+0xde>
    17a4:	ff cf       	rjmp	.-2      	; 0x17a4 <udd_enable+0xdc>
    17a6:	8f b7       	in	r24, 0x3f	; 63
    17a8:	89 83       	std	Y+1, r24	; 0x01
    17aa:	f8 94       	cli
    17ac:	99 81       	ldd	r25, Y+1	; 0x01
    17ae:	e1 e5       	ldi	r30, 0x51	; 81
    17b0:	f3 e2       	ldi	r31, 0x23	; 35
    17b2:	85 81       	ldd	r24, Z+5	; 0x05
    17b4:	8f 5f       	subi	r24, 0xFF	; 255
    17b6:	85 83       	std	Z+5, r24	; 0x05
    17b8:	9f bf       	out	0x3f, r25	; 63
    17ba:	59 df       	rcall	.-334    	; 0x166e <udd_attach>
    17bc:	1f bf       	out	0x3f, r17	; 63
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	1f 91       	pop	r17
    17c8:	0f 91       	pop	r16
    17ca:	08 95       	ret

000017cc <udd_is_high_speed>:
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	08 95       	ret

000017d0 <udd_set_address>:
    17d0:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    17d4:	08 95       	ret

000017d6 <udd_getaddress>:
    17d6:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    17da:	08 95       	ret

000017dc <udd_get_frame_number>:
    17dc:	80 91 3c 23 	lds	r24, 0x233C	; 0x80233c <udd_sram+0x3c>
    17e0:	90 91 3d 23 	lds	r25, 0x233D	; 0x80233d <udd_sram+0x3d>
    17e4:	08 95       	ret

000017e6 <udd_get_micro_frame_number>:
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	08 95       	ret

000017ec <udd_set_setup_payload>:
    17ec:	e1 e4       	ldi	r30, 0x41	; 65
    17ee:	f3 e2       	ldi	r31, 0x23	; 35
    17f0:	80 87       	std	Z+8, r24	; 0x08
    17f2:	91 87       	std	Z+9, r25	; 0x09
    17f4:	62 87       	std	Z+10, r22	; 0x0a
    17f6:	73 87       	std	Z+11, r23	; 0x0b
    17f8:	08 95       	ret

000017fa <udd_ep_alloc>:
    17fa:	28 2f       	mov	r18, r24
    17fc:	2f 70       	andi	r18, 0x0F	; 15
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	22 0f       	add	r18, r18
    1802:	33 1f       	adc	r19, r19
    1804:	08 2e       	mov	r0, r24
    1806:	00 0c       	add	r0, r0
    1808:	99 0b       	sbc	r25, r25
    180a:	88 27       	eor	r24, r24
    180c:	99 0f       	add	r25, r25
    180e:	88 1f       	adc	r24, r24
    1810:	99 27       	eor	r25, r25
    1812:	82 0f       	add	r24, r18
    1814:	93 1f       	adc	r25, r19
    1816:	fc 01       	movw	r30, r24
    1818:	ee 0f       	add	r30, r30
    181a:	ff 1f       	adc	r31, r31
    181c:	ee 0f       	add	r30, r30
    181e:	ff 1f       	adc	r31, r31
    1820:	ee 0f       	add	r30, r30
    1822:	ff 1f       	adc	r31, r31
    1824:	e0 50       	subi	r30, 0x00	; 0
    1826:	fd 4d       	sbci	r31, 0xDD	; 221
    1828:	25 85       	ldd	r18, Z+13	; 0x0d
    182a:	20 7c       	andi	r18, 0xC0	; 192
    182c:	09 f0       	breq	.+2      	; 0x1830 <udd_ep_alloc+0x36>
    182e:	69 c0       	rjmp	.+210    	; 0x1902 <udd_ep_alloc+0x108>
    1830:	63 70       	andi	r22, 0x03	; 3
    1832:	61 30       	cpi	r22, 0x01	; 1
    1834:	11 f0       	breq	.+4      	; 0x183a <udd_ep_alloc+0x40>
    1836:	18 f4       	brcc	.+6      	; 0x183e <udd_ep_alloc+0x44>
    1838:	04 c0       	rjmp	.+8      	; 0x1842 <udd_ep_alloc+0x48>
    183a:	20 ec       	ldi	r18, 0xC0	; 192
    183c:	03 c0       	rjmp	.+6      	; 0x1844 <udd_ep_alloc+0x4a>
    183e:	20 e8       	ldi	r18, 0x80	; 128
    1840:	01 c0       	rjmp	.+2      	; 0x1844 <udd_ep_alloc+0x4a>
    1842:	20 e4       	ldi	r18, 0x40	; 64
    1844:	40 38       	cpi	r20, 0x80	; 128
    1846:	51 05       	cpc	r21, r1
    1848:	e9 f0       	breq	.+58     	; 0x1884 <udd_ep_alloc+0x8a>
    184a:	50 f4       	brcc	.+20     	; 0x1860 <udd_ep_alloc+0x66>
    184c:	40 32       	cpi	r20, 0x20	; 32
    184e:	51 05       	cpc	r21, r1
    1850:	a9 f0       	breq	.+42     	; 0x187c <udd_ep_alloc+0x82>
    1852:	40 34       	cpi	r20, 0x40	; 64
    1854:	51 05       	cpc	r21, r1
    1856:	a1 f0       	breq	.+40     	; 0x1880 <udd_ep_alloc+0x86>
    1858:	40 31       	cpi	r20, 0x10	; 16
    185a:	51 05       	cpc	r21, r1
    185c:	d9 f4       	brne	.+54     	; 0x1894 <udd_ep_alloc+0x9a>
    185e:	0c c0       	rjmp	.+24     	; 0x1878 <udd_ep_alloc+0x7e>
    1860:	41 15       	cp	r20, r1
    1862:	32 e0       	ldi	r19, 0x02	; 2
    1864:	53 07       	cpc	r21, r19
    1866:	91 f0       	breq	.+36     	; 0x188c <udd_ep_alloc+0x92>
    1868:	4f 3f       	cpi	r20, 0xFF	; 255
    186a:	33 e0       	ldi	r19, 0x03	; 3
    186c:	53 07       	cpc	r21, r19
    186e:	81 f0       	breq	.+32     	; 0x1890 <udd_ep_alloc+0x96>
    1870:	41 15       	cp	r20, r1
    1872:	51 40       	sbci	r21, 0x01	; 1
    1874:	79 f4       	brne	.+30     	; 0x1894 <udd_ep_alloc+0x9a>
    1876:	08 c0       	rjmp	.+16     	; 0x1888 <udd_ep_alloc+0x8e>
    1878:	41 e0       	ldi	r20, 0x01	; 1
    187a:	0d c0       	rjmp	.+26     	; 0x1896 <udd_ep_alloc+0x9c>
    187c:	42 e0       	ldi	r20, 0x02	; 2
    187e:	0b c0       	rjmp	.+22     	; 0x1896 <udd_ep_alloc+0x9c>
    1880:	43 e0       	ldi	r20, 0x03	; 3
    1882:	09 c0       	rjmp	.+18     	; 0x1896 <udd_ep_alloc+0x9c>
    1884:	44 e0       	ldi	r20, 0x04	; 4
    1886:	07 c0       	rjmp	.+14     	; 0x1896 <udd_ep_alloc+0x9c>
    1888:	45 e0       	ldi	r20, 0x05	; 5
    188a:	05 c0       	rjmp	.+10     	; 0x1896 <udd_ep_alloc+0x9c>
    188c:	46 e0       	ldi	r20, 0x06	; 6
    188e:	03 c0       	rjmp	.+6      	; 0x1896 <udd_ep_alloc+0x9c>
    1890:	47 e0       	ldi	r20, 0x07	; 7
    1892:	01 c0       	rjmp	.+2      	; 0x1896 <udd_ep_alloc+0x9c>
    1894:	40 e0       	ldi	r20, 0x00	; 0
    1896:	fc 01       	movw	r30, r24
    1898:	ee 0f       	add	r30, r30
    189a:	ff 1f       	adc	r31, r31
    189c:	ee 0f       	add	r30, r30
    189e:	ff 1f       	adc	r31, r31
    18a0:	ee 0f       	add	r30, r30
    18a2:	ff 1f       	adc	r31, r31
    18a4:	e0 50       	subi	r30, 0x00	; 0
    18a6:	fd 4d       	sbci	r31, 0xDD	; 221
    18a8:	15 86       	std	Z+13, r1	; 0x0d
    18aa:	36 e0       	ldi	r19, 0x06	; 6
    18ac:	34 87       	std	Z+12, r19	; 0x0c
    18ae:	24 2b       	or	r18, r20
    18b0:	25 87       	std	Z+13, r18	; 0x0d
    18b2:	fc 01       	movw	r30, r24
    18b4:	ee 0f       	add	r30, r30
    18b6:	ff 1f       	adc	r31, r31
    18b8:	ee 0f       	add	r30, r30
    18ba:	ff 1f       	adc	r31, r31
    18bc:	ee 0f       	add	r30, r30
    18be:	ff 1f       	adc	r31, r31
    18c0:	e0 50       	subi	r30, 0x00	; 0
    18c2:	fd 4d       	sbci	r31, 0xDD	; 221
    18c4:	25 85       	ldd	r18, Z+13	; 0x0d
    18c6:	20 7c       	andi	r18, 0xC0	; 192
    18c8:	20 3c       	cpi	r18, 0xC0	; 192
    18ca:	69 f4       	brne	.+26     	; 0x18e6 <udd_ep_alloc+0xec>
    18cc:	fc 01       	movw	r30, r24
    18ce:	ee 0f       	add	r30, r30
    18d0:	ff 1f       	adc	r31, r31
    18d2:	ee 0f       	add	r30, r30
    18d4:	ff 1f       	adc	r31, r31
    18d6:	ee 0f       	add	r30, r30
    18d8:	ff 1f       	adc	r31, r31
    18da:	e0 50       	subi	r30, 0x00	; 0
    18dc:	fd 4d       	sbci	r31, 0xDD	; 221
    18de:	25 85       	ldd	r18, Z+13	; 0x0d
    18e0:	27 70       	andi	r18, 0x07	; 7
    18e2:	27 30       	cpi	r18, 0x07	; 7
    18e4:	81 f0       	breq	.+32     	; 0x1906 <udd_ep_alloc+0x10c>
    18e6:	88 0f       	add	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	88 0f       	add	r24, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	fc 01       	movw	r30, r24
    18f4:	e0 50       	subi	r30, 0x00	; 0
    18f6:	fd 4d       	sbci	r31, 0xDD	; 221
    18f8:	85 85       	ldd	r24, Z+13	; 0x0d
    18fa:	80 62       	ori	r24, 0x20	; 32
    18fc:	85 87       	std	Z+13, r24	; 0x0d
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	08 95       	ret
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	08 95       	ret
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	08 95       	ret

0000190a <udd_ep_is_halted>:
    190a:	e8 2f       	mov	r30, r24
    190c:	ef 70       	andi	r30, 0x0F	; 15
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	ee 0f       	add	r30, r30
    1912:	ff 1f       	adc	r31, r31
    1914:	08 2e       	mov	r0, r24
    1916:	00 0c       	add	r0, r0
    1918:	99 0b       	sbc	r25, r25
    191a:	88 27       	eor	r24, r24
    191c:	99 0f       	add	r25, r25
    191e:	88 1f       	adc	r24, r24
    1920:	99 27       	eor	r25, r25
    1922:	e8 0f       	add	r30, r24
    1924:	f9 1f       	adc	r31, r25
    1926:	ee 0f       	add	r30, r30
    1928:	ff 1f       	adc	r31, r31
    192a:	ee 0f       	add	r30, r30
    192c:	ff 1f       	adc	r31, r31
    192e:	ee 0f       	add	r30, r30
    1930:	ff 1f       	adc	r31, r31
    1932:	e0 50       	subi	r30, 0x00	; 0
    1934:	fd 4d       	sbci	r31, 0xDD	; 221
    1936:	85 85       	ldd	r24, Z+13	; 0x0d
    1938:	82 fb       	bst	r24, 2
    193a:	88 27       	eor	r24, r24
    193c:	80 f9       	bld	r24, 0
    193e:	08 95       	ret

00001940 <udd_ep_clear_halt>:
    1940:	0f 93       	push	r16
    1942:	28 2f       	mov	r18, r24
    1944:	2f 70       	andi	r18, 0x0F	; 15
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	a9 01       	movw	r20, r18
    194a:	44 0f       	add	r20, r20
    194c:	55 1f       	adc	r21, r21
    194e:	28 2f       	mov	r18, r24
    1950:	08 2e       	mov	r0, r24
    1952:	00 0c       	add	r0, r0
    1954:	33 0b       	sbc	r19, r19
    1956:	22 27       	eor	r18, r18
    1958:	33 0f       	add	r19, r19
    195a:	22 1f       	adc	r18, r18
    195c:	33 27       	eor	r19, r19
    195e:	24 0f       	add	r18, r20
    1960:	35 1f       	adc	r19, r21
    1962:	a9 01       	movw	r20, r18
    1964:	44 0f       	add	r20, r20
    1966:	55 1f       	adc	r21, r21
    1968:	44 0f       	add	r20, r20
    196a:	55 1f       	adc	r21, r21
    196c:	44 0f       	add	r20, r20
    196e:	55 1f       	adc	r21, r21
    1970:	fa 01       	movw	r30, r20
    1972:	e4 5f       	subi	r30, 0xF4	; 244
    1974:	fc 4d       	sbci	r31, 0xDC	; 220
    1976:	01 e0       	ldi	r16, 0x01	; 1
    1978:	06 93       	lac	Z, r16
    197a:	fa 01       	movw	r30, r20
    197c:	e0 50       	subi	r30, 0x00	; 0
    197e:	fd 4d       	sbci	r31, 0xDD	; 221
    1980:	95 85       	ldd	r25, Z+13	; 0x0d
    1982:	92 ff       	sbrs	r25, 2
    1984:	11 c0       	rjmp	.+34     	; 0x19a8 <udd_ep_clear_halt+0x68>
    1986:	fa 01       	movw	r30, r20
    1988:	e0 50       	subi	r30, 0x00	; 0
    198a:	fd 4d       	sbci	r31, 0xDD	; 221
    198c:	95 85       	ldd	r25, Z+13	; 0x0d
    198e:	9b 7f       	andi	r25, 0xFB	; 251
    1990:	95 87       	std	Z+13, r25	; 0x0d
    1992:	64 dc       	rcall	.-1848   	; 0x125c <udd_ep_get_job>
    1994:	fc 01       	movw	r30, r24
    1996:	80 81       	ld	r24, Z
    1998:	80 ff       	sbrs	r24, 0
    199a:	06 c0       	rjmp	.+12     	; 0x19a8 <udd_ep_clear_halt+0x68>
    199c:	8e 7f       	andi	r24, 0xFE	; 254
    199e:	80 83       	st	Z, r24
    19a0:	07 80       	ldd	r0, Z+7	; 0x07
    19a2:	f0 85       	ldd	r31, Z+8	; 0x08
    19a4:	e0 2d       	mov	r30, r0
    19a6:	19 95       	eicall
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	0f 91       	pop	r16
    19ac:	08 95       	ret

000019ae <udd_ep_run>:
    19ae:	5f 92       	push	r5
    19b0:	6f 92       	push	r6
    19b2:	7f 92       	push	r7
    19b4:	8f 92       	push	r8
    19b6:	9f 92       	push	r9
    19b8:	af 92       	push	r10
    19ba:	bf 92       	push	r11
    19bc:	cf 92       	push	r12
    19be:	df 92       	push	r13
    19c0:	ef 92       	push	r14
    19c2:	ff 92       	push	r15
    19c4:	0f 93       	push	r16
    19c6:	1f 93       	push	r17
    19c8:	cf 93       	push	r28
    19ca:	df 93       	push	r29
    19cc:	1f 92       	push	r1
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	78 2e       	mov	r7, r24
    19d4:	66 2e       	mov	r6, r22
    19d6:	4a 01       	movw	r8, r20
    19d8:	59 01       	movw	r10, r18
    19da:	40 dc       	rcall	.-1920   	; 0x125c <udd_ep_get_job>
    19dc:	6c 01       	movw	r12, r24
    19de:	57 2c       	mov	r5, r7
    19e0:	55 1c       	adc	r5, r5
    19e2:	55 24       	eor	r5, r5
    19e4:	55 1c       	adc	r5, r5
    19e6:	87 2d       	mov	r24, r7
    19e8:	8f 70       	andi	r24, 0x0F	; 15
    19ea:	e8 2e       	mov	r14, r24
    19ec:	f1 2c       	mov	r15, r1
    19ee:	ee 0c       	add	r14, r14
    19f0:	ff 1c       	adc	r15, r15
    19f2:	e5 0c       	add	r14, r5
    19f4:	f1 1c       	adc	r15, r1
    19f6:	f7 01       	movw	r30, r14
    19f8:	ee 0f       	add	r30, r30
    19fa:	ff 1f       	adc	r31, r31
    19fc:	ee 0f       	add	r30, r30
    19fe:	ff 1f       	adc	r31, r31
    1a00:	ee 0f       	add	r30, r30
    1a02:	ff 1f       	adc	r31, r31
    1a04:	e0 50       	subi	r30, 0x00	; 0
    1a06:	fd 4d       	sbci	r31, 0xDD	; 221
    1a08:	85 85       	ldd	r24, Z+13	; 0x0d
    1a0a:	80 7c       	andi	r24, 0xC0	; 192
    1a0c:	09 f4       	brne	.+2      	; 0x1a10 <udd_ep_run+0x62>
    1a0e:	81 c0       	rjmp	.+258    	; 0x1b12 <udd_ep_run+0x164>
    1a10:	f7 01       	movw	r30, r14
    1a12:	ee 0f       	add	r30, r30
    1a14:	ff 1f       	adc	r31, r31
    1a16:	ee 0f       	add	r30, r30
    1a18:	ff 1f       	adc	r31, r31
    1a1a:	ee 0f       	add	r30, r30
    1a1c:	ff 1f       	adc	r31, r31
    1a1e:	e0 50       	subi	r30, 0x00	; 0
    1a20:	fd 4d       	sbci	r31, 0xDD	; 221
    1a22:	85 85       	ldd	r24, Z+13	; 0x0d
    1a24:	80 7c       	andi	r24, 0xC0	; 192
    1a26:	80 3c       	cpi	r24, 0xC0	; 192
    1a28:	61 f0       	breq	.+24     	; 0x1a42 <udd_ep_run+0x94>
    1a2a:	f7 01       	movw	r30, r14
    1a2c:	ee 0f       	add	r30, r30
    1a2e:	ff 1f       	adc	r31, r31
    1a30:	ee 0f       	add	r30, r30
    1a32:	ff 1f       	adc	r31, r31
    1a34:	ee 0f       	add	r30, r30
    1a36:	ff 1f       	adc	r31, r31
    1a38:	e0 50       	subi	r30, 0x00	; 0
    1a3a:	fd 4d       	sbci	r31, 0xDD	; 221
    1a3c:	85 85       	ldd	r24, Z+13	; 0x0d
    1a3e:	82 fd       	sbrc	r24, 2
    1a40:	6a c0       	rjmp	.+212    	; 0x1b16 <udd_ep_run+0x168>
    1a42:	8f b7       	in	r24, 0x3f	; 63
    1a44:	89 83       	std	Y+1, r24	; 0x01
    1a46:	f8 94       	cli
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	f6 01       	movw	r30, r12
    1a4c:	90 81       	ld	r25, Z
    1a4e:	90 ff       	sbrs	r25, 0
    1a50:	03 c0       	rjmp	.+6      	; 0x1a58 <udd_ep_run+0xaa>
    1a52:	8f bf       	out	0x3f, r24	; 63
    1a54:	51 2c       	mov	r5, r1
    1a56:	60 c0       	rjmp	.+192    	; 0x1b18 <udd_ep_run+0x16a>
    1a58:	f6 01       	movw	r30, r12
    1a5a:	90 81       	ld	r25, Z
    1a5c:	91 60       	ori	r25, 0x01	; 1
    1a5e:	90 83       	st	Z, r25
    1a60:	8f bf       	out	0x3f, r24	; 63
    1a62:	81 82       	std	Z+1, r8	; 0x01
    1a64:	92 82       	std	Z+2, r9	; 0x02
    1a66:	a3 82       	std	Z+3, r10	; 0x03
    1a68:	b4 82       	std	Z+4, r11	; 0x04
    1a6a:	15 82       	std	Z+5, r1	; 0x05
    1a6c:	16 82       	std	Z+6, r1	; 0x06
    1a6e:	07 83       	std	Z+7, r16	; 0x07
    1a70:	10 87       	std	Z+8, r17	; 0x08
    1a72:	61 10       	cpse	r6, r1
    1a74:	06 c0       	rjmp	.+12     	; 0x1a82 <udd_ep_run+0xd4>
    1a76:	91 e0       	ldi	r25, 0x01	; 1
    1a78:	a1 14       	cp	r10, r1
    1a7a:	b1 04       	cpc	r11, r1
    1a7c:	19 f0       	breq	.+6      	; 0x1a84 <udd_ep_run+0xd6>
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	01 c0       	rjmp	.+2      	; 0x1a84 <udd_ep_run+0xd6>
    1a82:	91 e0       	ldi	r25, 0x01	; 1
    1a84:	f6 01       	movw	r30, r12
    1a86:	80 81       	ld	r24, Z
    1a88:	90 fb       	bst	r25, 0
    1a8a:	81 f9       	bld	r24, 1
    1a8c:	8b 7f       	andi	r24, 0xFB	; 251
    1a8e:	80 83       	st	Z, r24
    1a90:	55 20       	and	r5, r5
    1a92:	61 f0       	breq	.+24     	; 0x1aac <udd_ep_run+0xfe>
    1a94:	f7 01       	movw	r30, r14
    1a96:	ee 0f       	add	r30, r30
    1a98:	ff 1f       	adc	r31, r31
    1a9a:	ee 0f       	add	r30, r30
    1a9c:	ff 1f       	adc	r31, r31
    1a9e:	ee 0f       	add	r30, r30
    1aa0:	ff 1f       	adc	r31, r31
    1aa2:	e0 50       	subi	r30, 0x00	; 0
    1aa4:	fd 4d       	sbci	r31, 0xDD	; 221
    1aa6:	12 8a       	std	Z+18, r1	; 0x12
    1aa8:	13 8a       	std	Z+19, r1	; 0x13
    1aaa:	2e c0       	rjmp	.+92     	; 0x1b08 <udd_ep_run+0x15a>
    1aac:	f7 01       	movw	r30, r14
    1aae:	ee 0f       	add	r30, r30
    1ab0:	ff 1f       	adc	r31, r31
    1ab2:	ee 0f       	add	r30, r30
    1ab4:	ff 1f       	adc	r31, r31
    1ab6:	ee 0f       	add	r30, r30
    1ab8:	ff 1f       	adc	r31, r31
    1aba:	e0 50       	subi	r30, 0x00	; 0
    1abc:	fd 4d       	sbci	r31, 0xDD	; 221
    1abe:	85 85       	ldd	r24, Z+13	; 0x0d
    1ac0:	80 7c       	andi	r24, 0xC0	; 192
    1ac2:	80 3c       	cpi	r24, 0xC0	; 192
    1ac4:	a1 f4       	brne	.+40     	; 0x1aee <udd_ep_run+0x140>
    1ac6:	c7 01       	movw	r24, r14
    1ac8:	88 0f       	add	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	88 0f       	add	r24, r24
    1ace:	99 1f       	adc	r25, r25
    1ad0:	88 0f       	add	r24, r24
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	84 5f       	subi	r24, 0xF4	; 244
    1ad6:	9c 4d       	sbci	r25, 0xDC	; 220
    1ad8:	99 db       	rcall	.-2254   	; 0x120c <udd_ep_get_size>
    1ada:	bc 01       	movw	r22, r24
    1adc:	c5 01       	movw	r24, r10
    1ade:	25 d3       	rcall	.+1610   	; 0x212a <__udivmodhi4>
    1ae0:	89 2b       	or	r24, r25
    1ae2:	29 f0       	breq	.+10     	; 0x1aee <udd_ep_run+0x140>
    1ae4:	f6 01       	movw	r30, r12
    1ae6:	80 81       	ld	r24, Z
    1ae8:	8e 7f       	andi	r24, 0xFE	; 254
    1aea:	80 83       	st	Z, r24
    1aec:	15 c0       	rjmp	.+42     	; 0x1b18 <udd_ep_run+0x16a>
    1aee:	f7 01       	movw	r30, r14
    1af0:	ee 0f       	add	r30, r30
    1af2:	ff 1f       	adc	r31, r31
    1af4:	ee 0f       	add	r30, r30
    1af6:	ff 1f       	adc	r31, r31
    1af8:	ee 0f       	add	r30, r30
    1afa:	ff 1f       	adc	r31, r31
    1afc:	e0 50       	subi	r30, 0x00	; 0
    1afe:	fd 4d       	sbci	r31, 0xDD	; 221
    1b00:	16 86       	std	Z+14, r1	; 0x0e
    1b02:	17 86       	std	Z+15, r1	; 0x0f
    1b04:	12 8a       	std	Z+18, r1	; 0x12
    1b06:	13 8a       	std	Z+19, r1	; 0x13
    1b08:	87 2d       	mov	r24, r7
    1b0a:	34 dc       	rcall	.-1944   	; 0x1374 <udd_ep_trans_complet>
    1b0c:	55 24       	eor	r5, r5
    1b0e:	53 94       	inc	r5
    1b10:	03 c0       	rjmp	.+6      	; 0x1b18 <udd_ep_run+0x16a>
    1b12:	51 2c       	mov	r5, r1
    1b14:	01 c0       	rjmp	.+2      	; 0x1b18 <udd_ep_run+0x16a>
    1b16:	51 2c       	mov	r5, r1
    1b18:	85 2d       	mov	r24, r5
    1b1a:	0f 90       	pop	r0
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	1f 91       	pop	r17
    1b22:	0f 91       	pop	r16
    1b24:	ff 90       	pop	r15
    1b26:	ef 90       	pop	r14
    1b28:	df 90       	pop	r13
    1b2a:	cf 90       	pop	r12
    1b2c:	bf 90       	pop	r11
    1b2e:	af 90       	pop	r10
    1b30:	9f 90       	pop	r9
    1b32:	8f 90       	pop	r8
    1b34:	7f 90       	pop	r7
    1b36:	6f 90       	pop	r6
    1b38:	5f 90       	pop	r5
    1b3a:	08 95       	ret

00001b3c <udd_ep_abort>:
    1b3c:	ff 92       	push	r15
    1b3e:	0f 93       	push	r16
    1b40:	1f 93       	push	r17
    1b42:	cf 93       	push	r28
    1b44:	df 93       	push	r29
    1b46:	18 2f       	mov	r17, r24
    1b48:	f8 2e       	mov	r15, r24
    1b4a:	ff 1c       	adc	r15, r15
    1b4c:	ff 24       	eor	r15, r15
    1b4e:	ff 1c       	adc	r15, r15
    1b50:	c8 2f       	mov	r28, r24
    1b52:	cf 70       	andi	r28, 0x0F	; 15
    1b54:	d0 e0       	ldi	r29, 0x00	; 0
    1b56:	cc 0f       	add	r28, r28
    1b58:	dd 1f       	adc	r29, r29
    1b5a:	cf 0d       	add	r28, r15
    1b5c:	d1 1d       	adc	r29, r1
    1b5e:	7e db       	rcall	.-2308   	; 0x125c <udd_ep_get_job>
    1b60:	dc 01       	movw	r26, r24
    1b62:	fe 01       	movw	r30, r28
    1b64:	ee 0f       	add	r30, r30
    1b66:	ff 1f       	adc	r31, r31
    1b68:	ee 0f       	add	r30, r30
    1b6a:	ff 1f       	adc	r31, r31
    1b6c:	ee 0f       	add	r30, r30
    1b6e:	ff 1f       	adc	r31, r31
    1b70:	e4 5f       	subi	r30, 0xF4	; 244
    1b72:	fc 4d       	sbci	r31, 0xDC	; 220
    1b74:	02 e0       	ldi	r16, 0x02	; 2
    1b76:	05 93       	las	Z, r16
    1b78:	8c 91       	ld	r24, X
    1b7a:	80 ff       	sbrs	r24, 0
    1b7c:	22 c0       	rjmp	.+68     	; 0x1bc2 <udd_ep_abort+0x86>
    1b7e:	8e 7f       	andi	r24, 0xFE	; 254
    1b80:	8c 93       	st	X, r24
    1b82:	17 96       	adiw	r26, 0x07	; 7
    1b84:	ed 91       	ld	r30, X+
    1b86:	fc 91       	ld	r31, X
    1b88:	18 97       	sbiw	r26, 0x08	; 8
    1b8a:	30 97       	sbiw	r30, 0x00	; 0
    1b8c:	d1 f0       	breq	.+52     	; 0x1bc2 <udd_ep_abort+0x86>
    1b8e:	ff 20       	and	r15, r15
    1b90:	59 f0       	breq	.+22     	; 0x1ba8 <udd_ep_abort+0x6c>
    1b92:	cc 0f       	add	r28, r28
    1b94:	dd 1f       	adc	r29, r29
    1b96:	cc 0f       	add	r28, r28
    1b98:	dd 1f       	adc	r29, r29
    1b9a:	cc 0f       	add	r28, r28
    1b9c:	dd 1f       	adc	r29, r29
    1b9e:	c0 50       	subi	r28, 0x00	; 0
    1ba0:	dd 4d       	sbci	r29, 0xDD	; 221
    1ba2:	6a 89       	ldd	r22, Y+18	; 0x12
    1ba4:	7b 89       	ldd	r23, Y+19	; 0x13
    1ba6:	0a c0       	rjmp	.+20     	; 0x1bbc <udd_ep_abort+0x80>
    1ba8:	cc 0f       	add	r28, r28
    1baa:	dd 1f       	adc	r29, r29
    1bac:	cc 0f       	add	r28, r28
    1bae:	dd 1f       	adc	r29, r29
    1bb0:	cc 0f       	add	r28, r28
    1bb2:	dd 1f       	adc	r29, r29
    1bb4:	c0 50       	subi	r28, 0x00	; 0
    1bb6:	dd 4d       	sbci	r29, 0xDD	; 221
    1bb8:	6e 85       	ldd	r22, Y+14	; 0x0e
    1bba:	7f 85       	ldd	r23, Y+15	; 0x0f
    1bbc:	41 2f       	mov	r20, r17
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	19 95       	eicall
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	1f 91       	pop	r17
    1bc8:	0f 91       	pop	r16
    1bca:	ff 90       	pop	r15
    1bcc:	08 95       	ret

00001bce <udd_ep_free>:
    1bce:	cf 93       	push	r28
    1bd0:	c8 2f       	mov	r28, r24
    1bd2:	b4 df       	rcall	.-152    	; 0x1b3c <udd_ep_abort>
    1bd4:	ec 2f       	mov	r30, r28
    1bd6:	ef 70       	andi	r30, 0x0F	; 15
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	ee 0f       	add	r30, r30
    1bdc:	ff 1f       	adc	r31, r31
    1bde:	8c 2f       	mov	r24, r28
    1be0:	cc 0f       	add	r28, r28
    1be2:	99 0b       	sbc	r25, r25
    1be4:	88 27       	eor	r24, r24
    1be6:	99 0f       	add	r25, r25
    1be8:	88 1f       	adc	r24, r24
    1bea:	99 27       	eor	r25, r25
    1bec:	e8 0f       	add	r30, r24
    1bee:	f9 1f       	adc	r31, r25
    1bf0:	ee 0f       	add	r30, r30
    1bf2:	ff 1f       	adc	r31, r31
    1bf4:	ee 0f       	add	r30, r30
    1bf6:	ff 1f       	adc	r31, r31
    1bf8:	ee 0f       	add	r30, r30
    1bfa:	ff 1f       	adc	r31, r31
    1bfc:	e0 50       	subi	r30, 0x00	; 0
    1bfe:	fd 4d       	sbci	r31, 0xDD	; 221
    1c00:	15 86       	std	Z+13, r1	; 0x0d
    1c02:	cf 91       	pop	r28
    1c04:	08 95       	ret

00001c06 <udd_ep_set_halt>:
    1c06:	e8 2f       	mov	r30, r24
    1c08:	ef 70       	andi	r30, 0x0F	; 15
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	ee 0f       	add	r30, r30
    1c0e:	ff 1f       	adc	r31, r31
    1c10:	28 2f       	mov	r18, r24
    1c12:	08 2e       	mov	r0, r24
    1c14:	00 0c       	add	r0, r0
    1c16:	33 0b       	sbc	r19, r19
    1c18:	22 27       	eor	r18, r18
    1c1a:	33 0f       	add	r19, r19
    1c1c:	22 1f       	adc	r18, r18
    1c1e:	33 27       	eor	r19, r19
    1c20:	e2 0f       	add	r30, r18
    1c22:	f3 1f       	adc	r31, r19
    1c24:	ee 0f       	add	r30, r30
    1c26:	ff 1f       	adc	r31, r31
    1c28:	ee 0f       	add	r30, r30
    1c2a:	ff 1f       	adc	r31, r31
    1c2c:	ee 0f       	add	r30, r30
    1c2e:	ff 1f       	adc	r31, r31
    1c30:	e0 50       	subi	r30, 0x00	; 0
    1c32:	fd 4d       	sbci	r31, 0xDD	; 221
    1c34:	95 85       	ldd	r25, Z+13	; 0x0d
    1c36:	94 60       	ori	r25, 0x04	; 4
    1c38:	95 87       	std	Z+13, r25	; 0x0d
    1c3a:	80 df       	rcall	.-256    	; 0x1b3c <udd_ep_abort>
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	08 95       	ret

00001c40 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    1c40:	1f 92       	push	r1
    1c42:	0f 92       	push	r0
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	0f 92       	push	r0
    1c48:	11 24       	eor	r1, r1
    1c4a:	08 b6       	in	r0, 0x38	; 56
    1c4c:	0f 92       	push	r0
    1c4e:	18 be       	out	0x38, r1	; 56
    1c50:	09 b6       	in	r0, 0x39	; 57
    1c52:	0f 92       	push	r0
    1c54:	19 be       	out	0x39, r1	; 57
    1c56:	0b b6       	in	r0, 0x3b	; 59
    1c58:	0f 92       	push	r0
    1c5a:	1b be       	out	0x3b, r1	; 59
    1c5c:	0f 93       	push	r16
    1c5e:	2f 93       	push	r18
    1c60:	3f 93       	push	r19
    1c62:	4f 93       	push	r20
    1c64:	5f 93       	push	r21
    1c66:	6f 93       	push	r22
    1c68:	7f 93       	push	r23
    1c6a:	8f 93       	push	r24
    1c6c:	9f 93       	push	r25
    1c6e:	af 93       	push	r26
    1c70:	bf 93       	push	r27
    1c72:	ef 93       	push	r30
    1c74:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    1c76:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    1c7a:	88 23       	and	r24, r24
    1c7c:	34 f4       	brge	.+12     	; 0x1c8a <__vector_125+0x4a>
		udd_ack_start_of_frame_event();
    1c7e:	80 e8       	ldi	r24, 0x80	; 128
    1c80:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    1c84:	0e 94 67 05 	call	0xace	; 0xace <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1c88:	86 c0       	rjmp	.+268    	; 0x1d96 <__vector_125+0x156>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    1c8a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    1c8e:	82 ff       	sbrs	r24, 2
    1c90:	20 c0       	rjmp	.+64     	; 0x1cd2 <__vector_125+0x92>
		udd_ack_underflow_event();
    1c92:	84 e0       	ldi	r24, 0x04	; 4
    1c94:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    1c98:	80 91 14 23 	lds	r24, 0x2314	; 0x802314 <udd_sram+0x14>
    1c9c:	86 ff       	sbrs	r24, 6
    1c9e:	7b c0       	rjmp	.+246    	; 0x1d96 <__vector_125+0x156>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1ca0:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1ca4:	81 fd       	sbrc	r24, 1
    1ca6:	77 c0       	rjmp	.+238    	; 0x1d96 <__vector_125+0x156>
    1ca8:	f4 da       	rcall	.-2584   	; 0x1292 <udd_ctrl_interrupt_tc_setup>
    1caa:	81 11       	cpse	r24, r1
    1cac:	74 c0       	rjmp	.+232    	; 0x1d96 <__vector_125+0x156>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1cae:	80 91 ff 22 	lds	r24, 0x22FF	; 0x8022ff <udd_ep_control_state>
    1cb2:	81 30       	cpi	r24, 0x01	; 1
    1cb4:	11 f4       	brne	.+4      	; 0x1cba <__vector_125+0x7a>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    1cb6:	28 da       	rcall	.-2992   	; 0x1108 <udd_ctrl_send_zlp_in>
    1cb8:	6e c0       	rjmp	.+220    	; 0x1d96 <__vector_125+0x156>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1cba:	84 30       	cpi	r24, 0x04	; 4
    1cbc:	09 f0       	breq	.+2      	; 0x1cc0 <__vector_125+0x80>
    1cbe:	6b c0       	rjmp	.+214    	; 0x1d96 <__vector_125+0x156>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    1cc0:	e5 e1       	ldi	r30, 0x15	; 21
    1cc2:	f3 e2       	ldi	r31, 0x23	; 35
    1cc4:	04 e0       	ldi	r16, 0x04	; 4
    1cc6:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1cc8:	ed e0       	ldi	r30, 0x0D	; 13
    1cca:	f3 e2       	ldi	r31, 0x23	; 35
    1ccc:	04 e0       	ldi	r16, 0x04	; 4
    1cce:	05 93       	las	Z, r16
    1cd0:	62 c0       	rjmp	.+196    	; 0x1d96 <__vector_125+0x156>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    1cd2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    1cd6:	81 ff       	sbrs	r24, 1
    1cd8:	59 c0       	rjmp	.+178    	; 0x1d8c <__vector_125+0x14c>
		udd_ack_overflow_event();
    1cda:	82 e0       	ldi	r24, 0x02	; 2
    1cdc:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    1ce0:	80 91 0c 23 	lds	r24, 0x230C	; 0x80230c <udd_sram+0xc>
    1ce4:	86 ff       	sbrs	r24, 6
    1ce6:	57 c0       	rjmp	.+174    	; 0x1d96 <__vector_125+0x156>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1ce8:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1cec:	81 fd       	sbrc	r24, 1
    1cee:	53 c0       	rjmp	.+166    	; 0x1d96 <__vector_125+0x156>
    1cf0:	d0 da       	rcall	.-2656   	; 0x1292 <udd_ctrl_interrupt_tc_setup>
    1cf2:	81 11       	cpse	r24, r1
    1cf4:	50 c0       	rjmp	.+160    	; 0x1d96 <__vector_125+0x156>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1cf6:	80 91 ff 22 	lds	r24, 0x22FF	; 0x8022ff <udd_ep_control_state>
    1cfa:	82 30       	cpi	r24, 0x02	; 2
    1cfc:	41 f4       	brne	.+16     	; 0x1d0e <__vector_125+0xce>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1cfe:	84 e0       	ldi	r24, 0x04	; 4
    1d00:	80 93 ff 22 	sts	0x22FF, r24	; 0x8022ff <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    1d04:	ec e0       	ldi	r30, 0x0C	; 12
    1d06:	f3 e2       	ldi	r31, 0x23	; 35
    1d08:	02 e0       	ldi	r16, 0x02	; 2
    1d0a:	06 93       	lac	Z, r16
    1d0c:	44 c0       	rjmp	.+136    	; 0x1d96 <__vector_125+0x156>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1d0e:	83 30       	cpi	r24, 0x03	; 3
    1d10:	09 f0       	breq	.+2      	; 0x1d14 <__vector_125+0xd4>
    1d12:	41 c0       	rjmp	.+130    	; 0x1d96 <__vector_125+0x156>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    1d14:	e5 e1       	ldi	r30, 0x15	; 21
    1d16:	f3 e2       	ldi	r31, 0x23	; 35
    1d18:	04 e0       	ldi	r16, 0x04	; 4
    1d1a:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1d1c:	ed e0       	ldi	r30, 0x0D	; 13
    1d1e:	f3 e2       	ldi	r31, 0x23	; 35
    1d20:	04 e0       	ldi	r16, 0x04	; 4
    1d22:	05 93       	las	Z, r16
    1d24:	38 c0       	rjmp	.+112    	; 0x1d96 <__vector_125+0x156>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    1d26:	80 e1       	ldi	r24, 0x10	; 16
    1d28:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	06 df       	rcall	.-500    	; 0x1b3c <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    1d30:	81 e8       	ldi	r24, 0x81	; 129
    1d32:	04 df       	rcall	.-504    	; 0x1b3c <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    1d34:	82 e0       	ldi	r24, 0x02	; 2
    1d36:	02 df       	rcall	.-508    	; 0x1b3c <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    1d38:	82 e8       	ldi	r24, 0x82	; 130
    1d3a:	00 df       	rcall	.-512    	; 0x1b3c <udd_ep_abort>
		}
#endif
		udc_reset();
    1d3c:	0e 94 40 05 	call	0xa80	; 0xa80 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    1d40:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    1d44:	e0 e0       	ldi	r30, 0x00	; 0
    1d46:	f3 e2       	ldi	r31, 0x23	; 35
    1d48:	15 86       	std	Z+13, r1	; 0x0d
	udd_endpoint_clear_status(ep_ctrl);
    1d4a:	96 e0       	ldi	r25, 0x06	; 6
    1d4c:	94 87       	std	Z+12, r25	; 0x0c
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    1d4e:	83 e4       	ldi	r24, 0x43	; 67
    1d50:	85 87       	std	Z+13, r24	; 0x0d
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    1d52:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    1d54:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    1d56:	85 8b       	std	Z+21, r24	; 0x15
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    1d58:	8b eb       	ldi	r24, 0xBB	; 187
    1d5a:	92 e2       	ldi	r25, 0x22	; 34
    1d5c:	80 8b       	std	Z+16, r24	; 0x10
    1d5e:	91 8b       	std	Z+17, r25	; 0x11
		// Reset endpoint control management
		udd_ctrl_init();
    1d60:	a0 d9       	rcall	.-3264   	; 0x10a2 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    1d62:	19 c0       	rjmp	.+50     	; 0x1d96 <__vector_125+0x156>
	}

	if (udd_is_suspend_event()) {
    1d64:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    1d68:	86 ff       	sbrs	r24, 6
    1d6a:	06 c0       	rjmp	.+12     	; 0x1d78 <__vector_125+0x138>
		udd_ack_suspend_event();
    1d6c:	80 e4       	ldi	r24, 0x40	; 64
    1d6e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	5e d9       	rcall	.-3396   	; 0x1032 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1d76:	0f c0       	rjmp	.+30     	; 0x1d96 <__vector_125+0x156>
	}

	if (udd_is_resume_event()) {
    1d78:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    1d7c:	85 ff       	sbrs	r24, 5
    1d7e:	0b c0       	rjmp	.+22     	; 0x1d96 <__vector_125+0x156>
		udd_ack_resume_event();
    1d80:	80 e2       	ldi	r24, 0x20	; 32
    1d82:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	54 d9       	rcall	.-3416   	; 0x1032 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1d8a:	05 c0       	rjmp	.+10     	; 0x1d96 <__vector_125+0x156>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    1d8c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    1d90:	84 fd       	sbrc	r24, 4
    1d92:	c9 cf       	rjmp	.-110    	; 0x1d26 <__vector_125+0xe6>
    1d94:	e7 cf       	rjmp	.-50     	; 0x1d64 <__vector_125+0x124>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    1d96:	ff 91       	pop	r31
    1d98:	ef 91       	pop	r30
    1d9a:	bf 91       	pop	r27
    1d9c:	af 91       	pop	r26
    1d9e:	9f 91       	pop	r25
    1da0:	8f 91       	pop	r24
    1da2:	7f 91       	pop	r23
    1da4:	6f 91       	pop	r22
    1da6:	5f 91       	pop	r21
    1da8:	4f 91       	pop	r20
    1daa:	3f 91       	pop	r19
    1dac:	2f 91       	pop	r18
    1dae:	0f 91       	pop	r16
    1db0:	0f 90       	pop	r0
    1db2:	0b be       	out	0x3b, r0	; 59
    1db4:	0f 90       	pop	r0
    1db6:	09 be       	out	0x39, r0	; 57
    1db8:	0f 90       	pop	r0
    1dba:	08 be       	out	0x38, r0	; 56
    1dbc:	0f 90       	pop	r0
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	0f 90       	pop	r0
    1dc2:	1f 90       	pop	r1
    1dc4:	18 95       	reti

00001dc6 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    1dc6:	1f 92       	push	r1
    1dc8:	0f 92       	push	r0
    1dca:	0f b6       	in	r0, 0x3f	; 63
    1dcc:	0f 92       	push	r0
    1dce:	11 24       	eor	r1, r1
    1dd0:	08 b6       	in	r0, 0x38	; 56
    1dd2:	0f 92       	push	r0
    1dd4:	18 be       	out	0x38, r1	; 56
    1dd6:	09 b6       	in	r0, 0x39	; 57
    1dd8:	0f 92       	push	r0
    1dda:	19 be       	out	0x39, r1	; 57
    1ddc:	0a b6       	in	r0, 0x3a	; 58
    1dde:	0f 92       	push	r0
    1de0:	1a be       	out	0x3a, r1	; 58
    1de2:	0b b6       	in	r0, 0x3b	; 59
    1de4:	0f 92       	push	r0
    1de6:	1b be       	out	0x3b, r1	; 59
    1de8:	0f 93       	push	r16
    1dea:	1f 93       	push	r17
    1dec:	2f 93       	push	r18
    1dee:	3f 93       	push	r19
    1df0:	4f 93       	push	r20
    1df2:	5f 93       	push	r21
    1df4:	6f 93       	push	r22
    1df6:	7f 93       	push	r23
    1df8:	8f 93       	push	r24
    1dfa:	9f 93       	push	r25
    1dfc:	af 93       	push	r26
    1dfe:	bf 93       	push	r27
    1e00:	cf 93       	push	r28
    1e02:	df 93       	push	r29
    1e04:	ef 93       	push	r30
    1e06:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    1e08:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1e0c:	81 fd       	sbrc	r24, 1
    1e0e:	03 c0       	rjmp	.+6      	; 0x1e16 <__vector_126+0x50>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    1e10:	40 da       	rcall	.-2944   	; 0x1292 <udd_ctrl_interrupt_tc_setup>
    1e12:	81 11       	cpse	r24, r1
    1e14:	c3 c0       	rjmp	.+390    	; 0x1f9c <__vector_126+0x1d6>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    1e16:	82 e0       	ldi	r24, 0x02	; 2
    1e18:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    1e1c:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    1e20:	81 95       	neg	r24
    1e22:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    1e24:	ec e0       	ldi	r30, 0x0C	; 12
    1e26:	f3 e2       	ldi	r31, 0x23	; 35
    1e28:	e8 1b       	sub	r30, r24
    1e2a:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    1e2c:	20 81       	ld	r18, Z
    1e2e:	31 81       	ldd	r19, Z+1	; 0x01
    1e30:	2c 50       	subi	r18, 0x0C	; 12
    1e32:	33 42       	sbci	r19, 0x23	; 35
    1e34:	36 95       	lsr	r19
    1e36:	27 95       	ror	r18
    1e38:	36 95       	lsr	r19
    1e3a:	27 95       	ror	r18
    1e3c:	36 95       	lsr	r19
    1e3e:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    1e40:	82 2f       	mov	r24, r18
    1e42:	86 95       	lsr	r24
    1e44:	20 fd       	sbrc	r18, 0
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <__vector_126+0x86>
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	01 c0       	rjmp	.+2      	; 0x1e4e <__vector_126+0x88>
    1e4c:	90 e8       	ldi	r25, 0x80	; 128
    1e4e:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    1e50:	e8 2f       	mov	r30, r24
    1e52:	ef 70       	andi	r30, 0x0F	; 15
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	ee 0f       	add	r30, r30
    1e58:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    1e5a:	28 2f       	mov	r18, r24
    1e5c:	08 2e       	mov	r0, r24
    1e5e:	00 0c       	add	r0, r0
    1e60:	33 0b       	sbc	r19, r19
    1e62:	22 27       	eor	r18, r18
    1e64:	33 0f       	add	r19, r19
    1e66:	22 1f       	adc	r18, r18
    1e68:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    1e6a:	e2 0f       	add	r30, r18
    1e6c:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    1e6e:	df 01       	movw	r26, r30
    1e70:	aa 0f       	add	r26, r26
    1e72:	bb 1f       	adc	r27, r27
    1e74:	aa 0f       	add	r26, r26
    1e76:	bb 1f       	adc	r27, r27
    1e78:	aa 0f       	add	r26, r26
    1e7a:	bb 1f       	adc	r27, r27
    1e7c:	a0 50       	subi	r26, 0x00	; 0
    1e7e:	bd 4d       	sbci	r27, 0xDD	; 221
    1e80:	1c 96       	adiw	r26, 0x0c	; 12
    1e82:	9c 91       	ld	r25, X
    1e84:	95 ff       	sbrs	r25, 5
    1e86:	8a c0       	rjmp	.+276    	; 0x1f9c <__vector_126+0x1d6>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    1e88:	ee 0f       	add	r30, r30
    1e8a:	ff 1f       	adc	r31, r31
    1e8c:	ee 0f       	add	r30, r30
    1e8e:	ff 1f       	adc	r31, r31
    1e90:	ee 0f       	add	r30, r30
    1e92:	ff 1f       	adc	r31, r31
    1e94:	e4 5f       	subi	r30, 0xF4	; 244
    1e96:	fc 4d       	sbci	r31, 0xDC	; 220
    1e98:	00 e2       	ldi	r16, 0x20	; 32
    1e9a:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    1e9c:	81 11       	cpse	r24, r1
    1e9e:	79 c0       	rjmp	.+242    	; 0x1f92 <__vector_126+0x1cc>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1ea0:	80 91 ff 22 	lds	r24, 0x22FF	; 0x8022ff <udd_ep_control_state>
    1ea4:	84 30       	cpi	r24, 0x04	; 4
    1ea6:	19 f4       	brne	.+6      	; 0x1eae <__vector_126+0xe8>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    1ea8:	3d d9       	rcall	.-3462   	; 0x1124 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    1eaa:	fb d8       	rcall	.-3594   	; 0x10a2 <udd_ctrl_init>
    1eac:	77 c0       	rjmp	.+238    	; 0x1f9c <__vector_126+0x1d6>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    1eae:	00 91 0e 23 	lds	r16, 0x230E	; 0x80230e <udd_sram+0xe>
    1eb2:	10 91 0f 23 	lds	r17, 0x230F	; 0x80230f <udd_sram+0xf>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    1eb6:	80 91 4b 23 	lds	r24, 0x234B	; 0x80234b <udd_g_ctrlreq+0xa>
    1eba:	90 91 4c 23 	lds	r25, 0x234C	; 0x80234c <udd_g_ctrlreq+0xb>
    1ebe:	c0 91 fb 22 	lds	r28, 0x22FB	; 0x8022fb <udd_ctrl_payload_nb_trans>
    1ec2:	d0 91 fc 22 	lds	r29, 0x22FC	; 0x8022fc <udd_ctrl_payload_nb_trans+0x1>
    1ec6:	9e 01       	movw	r18, r28
    1ec8:	20 0f       	add	r18, r16
    1eca:	31 1f       	adc	r19, r17
    1ecc:	82 17       	cp	r24, r18
    1ece:	93 07       	cpc	r25, r19
    1ed0:	18 f4       	brcc	.+6      	; 0x1ed8 <__vector_126+0x112>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1ed2:	8c 01       	movw	r16, r24
    1ed4:	0c 1b       	sub	r16, r28
    1ed6:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    1ed8:	80 91 49 23 	lds	r24, 0x2349	; 0x802349 <udd_g_ctrlreq+0x8>
    1edc:	90 91 4a 23 	lds	r25, 0x234A	; 0x80234a <udd_g_ctrlreq+0x9>
    1ee0:	a8 01       	movw	r20, r16
    1ee2:	6b eb       	ldi	r22, 0xBB	; 187
    1ee4:	72 e2       	ldi	r23, 0x22	; 34
    1ee6:	8c 0f       	add	r24, r28
    1ee8:	9d 1f       	adc	r25, r29
    1eea:	3c d1       	rcall	.+632    	; 0x2164 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    1eec:	c0 0f       	add	r28, r16
    1eee:	d1 1f       	adc	r29, r17
    1ef0:	c0 93 fb 22 	sts	0x22FB, r28	; 0x8022fb <udd_ctrl_payload_nb_trans>
    1ef4:	d0 93 fc 22 	sts	0x22FC, r29	; 0x8022fc <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1ef8:	00 34       	cpi	r16, 0x40	; 64
    1efa:	11 05       	cpc	r17, r1
    1efc:	69 f4       	brne	.+26     	; 0x1f18 <__vector_126+0x152>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    1efe:	80 91 fd 22 	lds	r24, 0x22FD	; 0x8022fd <udd_ctrl_prev_payload_nb_trans>
    1f02:	90 91 fe 22 	lds	r25, 0x22FE	; 0x8022fe <udd_ctrl_prev_payload_nb_trans+0x1>
    1f06:	8c 0f       	add	r24, r28
    1f08:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1f0a:	20 91 47 23 	lds	r18, 0x2347	; 0x802347 <udd_g_ctrlreq+0x6>
    1f0e:	30 91 48 23 	lds	r19, 0x2348	; 0x802348 <udd_g_ctrlreq+0x7>
    1f12:	82 17       	cp	r24, r18
    1f14:	93 07       	cpc	r25, r19
    1f16:	80 f0       	brcs	.+32     	; 0x1f38 <__vector_126+0x172>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    1f18:	e1 e4       	ldi	r30, 0x41	; 65
    1f1a:	f3 e2       	ldi	r31, 0x23	; 35
    1f1c:	c2 87       	std	Z+10, r28	; 0x0a
    1f1e:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    1f20:	06 84       	ldd	r0, Z+14	; 0x0e
    1f22:	f7 85       	ldd	r31, Z+15	; 0x0f
    1f24:	e0 2d       	mov	r30, r0
    1f26:	30 97       	sbiw	r30, 0x00	; 0
    1f28:	29 f0       	breq	.+10     	; 0x1f34 <__vector_126+0x16e>
			if (!udd_g_ctrlreq.over_under_run()) {
    1f2a:	19 95       	eicall
    1f2c:	81 11       	cpse	r24, r1
    1f2e:	02 c0       	rjmp	.+4      	; 0x1f34 <__vector_126+0x16e>
				// Stall ZLP
				udd_ctrl_stall_data();
    1f30:	dd d8       	rcall	.-3654   	; 0x10ec <udd_ctrl_stall_data>
    1f32:	34 c0       	rjmp	.+104    	; 0x1f9c <__vector_126+0x1d6>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    1f34:	e9 d8       	rcall	.-3630   	; 0x1108 <udd_ctrl_send_zlp_in>
    1f36:	32 c0       	rjmp	.+100    	; 0x1f9c <__vector_126+0x1d6>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    1f38:	80 91 4b 23 	lds	r24, 0x234B	; 0x80234b <udd_g_ctrlreq+0xa>
    1f3c:	90 91 4c 23 	lds	r25, 0x234C	; 0x80234c <udd_g_ctrlreq+0xb>
    1f40:	c8 17       	cp	r28, r24
    1f42:	d9 07       	cpc	r29, r25
    1f44:	f9 f4       	brne	.+62     	; 0x1f84 <__vector_126+0x1be>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    1f46:	e0 91 4f 23 	lds	r30, 0x234F	; 0x80234f <udd_g_ctrlreq+0xe>
    1f4a:	f0 91 50 23 	lds	r31, 0x2350	; 0x802350 <udd_g_ctrlreq+0xf>
    1f4e:	30 97       	sbiw	r30, 0x00	; 0
    1f50:	11 f4       	brne	.+4      	; 0x1f56 <__vector_126+0x190>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    1f52:	cc d8       	rcall	.-3688   	; 0x10ec <udd_ctrl_stall_data>
    1f54:	23 c0       	rjmp	.+70     	; 0x1f9c <__vector_126+0x1d6>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    1f56:	19 95       	eicall
    1f58:	81 11       	cpse	r24, r1
    1f5a:	02 c0       	rjmp	.+4      	; 0x1f60 <__vector_126+0x19a>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    1f5c:	c7 d8       	rcall	.-3698   	; 0x10ec <udd_ctrl_stall_data>
    1f5e:	1e c0       	rjmp	.+60     	; 0x1f9c <__vector_126+0x1d6>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1f60:	20 91 fd 22 	lds	r18, 0x22FD	; 0x8022fd <udd_ctrl_prev_payload_nb_trans>
    1f64:	30 91 fe 22 	lds	r19, 0x22FE	; 0x8022fe <udd_ctrl_prev_payload_nb_trans+0x1>
    1f68:	80 91 fb 22 	lds	r24, 0x22FB	; 0x8022fb <udd_ctrl_payload_nb_trans>
    1f6c:	90 91 fc 22 	lds	r25, 0x22FC	; 0x8022fc <udd_ctrl_payload_nb_trans+0x1>
    1f70:	82 0f       	add	r24, r18
    1f72:	93 1f       	adc	r25, r19
    1f74:	80 93 fd 22 	sts	0x22FD, r24	; 0x8022fd <udd_ctrl_prev_payload_nb_trans>
    1f78:	90 93 fe 22 	sts	0x22FE, r25	; 0x8022fe <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    1f7c:	10 92 fb 22 	sts	0x22FB, r1	; 0x8022fb <udd_ctrl_payload_nb_trans>
    1f80:	10 92 fc 22 	sts	0x22FC, r1	; 0x8022fc <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    1f84:	ec e0       	ldi	r30, 0x0C	; 12
    1f86:	f3 e2       	ldi	r31, 0x23	; 35
    1f88:	02 e0       	ldi	r16, 0x02	; 2
    1f8a:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    1f8c:	00 e2       	ldi	r16, 0x20	; 32
    1f8e:	06 93       	lac	Z, r16
    1f90:	05 c0       	rjmp	.+10     	; 0x1f9c <__vector_126+0x1d6>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    1f92:	80 38       	cpi	r24, 0x80	; 128
    1f94:	11 f4       	brne	.+4      	; 0x1f9a <__vector_126+0x1d4>
		udd_ctrl_in_sent();
    1f96:	ce d8       	rcall	.-3684   	; 0x1134 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    1f98:	01 c0       	rjmp	.+2      	; 0x1f9c <__vector_126+0x1d6>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    1f9a:	ec d9       	rcall	.-3112   	; 0x1374 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    1f9c:	ff 91       	pop	r31
    1f9e:	ef 91       	pop	r30
    1fa0:	df 91       	pop	r29
    1fa2:	cf 91       	pop	r28
    1fa4:	bf 91       	pop	r27
    1fa6:	af 91       	pop	r26
    1fa8:	9f 91       	pop	r25
    1faa:	8f 91       	pop	r24
    1fac:	7f 91       	pop	r23
    1fae:	6f 91       	pop	r22
    1fb0:	5f 91       	pop	r21
    1fb2:	4f 91       	pop	r20
    1fb4:	3f 91       	pop	r19
    1fb6:	2f 91       	pop	r18
    1fb8:	1f 91       	pop	r17
    1fba:	0f 91       	pop	r16
    1fbc:	0f 90       	pop	r0
    1fbe:	0b be       	out	0x3b, r0	; 59
    1fc0:	0f 90       	pop	r0
    1fc2:	0a be       	out	0x3a, r0	; 58
    1fc4:	0f 90       	pop	r0
    1fc6:	09 be       	out	0x39, r0	; 57
    1fc8:	0f 90       	pop	r0
    1fca:	08 be       	out	0x38, r0	; 56
    1fcc:	0f 90       	pop	r0
    1fce:	0f be       	out	0x3f, r0	; 63
    1fd0:	0f 90       	pop	r0
    1fd2:	1f 90       	pop	r1
    1fd4:	18 95       	reti

00001fd6 <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
    1fd6:	cf 93       	push	r28
    1fd8:	df 93       	push	r29
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
    1fde:	25 97       	sbiw	r28, 0x05	; 5
    1fe0:	cd bf       	out	0x3d, r28	; 61
    1fe2:	de bf       	out	0x3e, r29	; 62
    1fe4:	6c e1       	ldi	r22, 0x1C	; 28
    1fe6:	70 e0       	ldi	r23, 0x00	; 0
    1fe8:	82 e0       	ldi	r24, 0x02	; 2
    1fea:	8f d0       	rcall	.+286    	; 0x210a <nvm_read_byte>
    1fec:	8a 83       	std	Y+2, r24	; 0x02
    1fee:	6d e1       	ldi	r22, 0x1D	; 29
    1ff0:	70 e0       	ldi	r23, 0x00	; 0
    1ff2:	82 e0       	ldi	r24, 0x02	; 2
    1ff4:	8a d0       	rcall	.+276    	; 0x210a <nvm_read_byte>
    1ff6:	89 83       	std	Y+1, r24	; 0x01
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01
    1ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffc:	01 96       	adiw	r24, 0x01	; 1
    1ffe:	21 f4       	brne	.+8      	; 0x2008 <sysclk_init+0x32>
    2000:	80 e4       	ldi	r24, 0x40	; 64
    2002:	93 e2       	ldi	r25, 0x23	; 35
    2004:	89 83       	std	Y+1, r24	; 0x01
    2006:	9a 83       	std	Y+2, r25	; 0x02
    2008:	89 81       	ldd	r24, Y+1	; 0x01
    200a:	9a 81       	ldd	r25, Y+2	; 0x02
    200c:	8b 83       	std	Y+3, r24	; 0x03
    200e:	9c 83       	std	Y+4, r25	; 0x04
    2010:	e0 e6       	ldi	r30, 0x60	; 96
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	82 83       	std	Z+2, r24	; 0x02
    2016:	8c 81       	ldd	r24, Y+4	; 0x04
    2018:	83 83       	std	Z+3, r24	; 0x03
    201a:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    201e:	84 fd       	sbrc	r24, 4
    2020:	0f c0       	rjmp	.+30     	; 0x2040 <sysclk_init+0x6a>
    2022:	8f b7       	in	r24, 0x3f	; 63
    2024:	8d 83       	std	Y+5, r24	; 0x05
    2026:	f8 94       	cli
    2028:	9d 81       	ldd	r25, Y+5	; 0x05
    202a:	e0 e5       	ldi	r30, 0x50	; 80
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 e1       	ldi	r24, 0x10	; 16
    2030:	85 83       	std	Z+5, r24	; 0x05
    2032:	80 81       	ld	r24, Z
    2034:	80 61       	ori	r24, 0x10	; 16
    2036:	80 83       	st	Z, r24
    2038:	9f bf       	out	0x3f, r25	; 63
    203a:	81 81       	ldd	r24, Z+1	; 0x01
    203c:	84 ff       	sbrs	r24, 4
    203e:	fd cf       	rjmp	.-6      	; 0x203a <sysclk_init+0x64>
    2040:	64 e0       	ldi	r22, 0x04	; 4
    2042:	80 e4       	ldi	r24, 0x40	; 64
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	6b d0       	rcall	.+214    	; 0x211e <ccp_write_io>
    2048:	25 96       	adiw	r28, 0x05	; 5
    204a:	cd bf       	out	0x3d, r28	; 61
    204c:	de bf       	out	0x3e, r29	; 62
    204e:	df 91       	pop	r29
    2050:	cf 91       	pop	r28
    2052:	08 95       	ret

00002054 <sysclk_enable_module>:
    2054:	cf 93       	push	r28
    2056:	df 93       	push	r29
    2058:	1f 92       	push	r1
    205a:	cd b7       	in	r28, 0x3d	; 61
    205c:	de b7       	in	r29, 0x3e	; 62
    205e:	9f b7       	in	r25, 0x3f	; 63
    2060:	99 83       	std	Y+1, r25	; 0x01
    2062:	f8 94       	cli
    2064:	99 81       	ldd	r25, Y+1	; 0x01
    2066:	e8 2f       	mov	r30, r24
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	e0 59       	subi	r30, 0x90	; 144
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	60 95       	com	r22
    2070:	80 81       	ld	r24, Z
    2072:	68 23       	and	r22, r24
    2074:	60 83       	st	Z, r22
    2076:	9f bf       	out	0x3f, r25	; 63
    2078:	0f 90       	pop	r0
    207a:	df 91       	pop	r29
    207c:	cf 91       	pop	r28
    207e:	08 95       	ret

00002080 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    2080:	cf 93       	push	r28
    2082:	df 93       	push	r29
    2084:	1f 92       	push	r1
    2086:	1f 92       	push	r1
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    208c:	86 30       	cpi	r24, 0x06	; 6
    208e:	11 f0       	breq	.+4      	; 0x2094 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    2090:	60 e0       	ldi	r22, 0x00	; 0
    2092:	01 c0       	rjmp	.+2      	; 0x2096 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    2094:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2096:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    209a:	81 fd       	sbrc	r24, 1
    209c:	2a c0       	rjmp	.+84     	; 0x20f2 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    209e:	8f b7       	in	r24, 0x3f	; 63
    20a0:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    20a2:	f8 94       	cli
	return flags;
    20a4:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    20a6:	e0 e5       	ldi	r30, 0x50	; 80
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	82 60       	ori	r24, 0x02	; 2
    20ae:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    20b0:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    20b2:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    20b4:	81 ff       	sbrs	r24, 1
    20b6:	fd cf       	rjmp	.-6      	; 0x20b2 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    20b8:	8f b7       	in	r24, 0x3f	; 63
    20ba:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    20bc:	f8 94       	cli
	return flags;
    20be:	99 81       	ldd	r25, Y+1	; 0x01
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    20c0:	a0 e5       	ldi	r26, 0x50	; 80
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	16 96       	adiw	r26, 0x06	; 6
    20c6:	8c 91       	ld	r24, X
    20c8:	16 97       	sbiw	r26, 0x06	; 6
    20ca:	89 7f       	andi	r24, 0xF9	; 249
    20cc:	16 96       	adiw	r26, 0x06	; 6
    20ce:	8c 93       	st	X, r24
    20d0:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    20d2:	e0 e6       	ldi	r30, 0x60	; 96
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 e8       	ldi	r24, 0x80	; 128
    20d8:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    20da:	8b eb       	ldi	r24, 0xBB	; 187
    20dc:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    20de:	16 96       	adiw	r26, 0x06	; 6
    20e0:	8c 91       	ld	r24, X
    20e2:	16 97       	sbiw	r26, 0x06	; 6
    20e4:	84 60       	ori	r24, 0x04	; 4
    20e6:	16 96       	adiw	r26, 0x06	; 6
    20e8:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    20ea:	80 81       	ld	r24, Z
    20ec:	81 60       	ori	r24, 0x01	; 1
    20ee:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    20f0:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    20f2:	63 60       	ori	r22, 0x03	; 3
    20f4:	84 e4       	ldi	r24, 0x44	; 68
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	12 d0       	rcall	.+36     	; 0x211e <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    20fa:	60 e4       	ldi	r22, 0x40	; 64
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	aa df       	rcall	.-172    	; 0x2054 <sysclk_enable_module>
}
    2100:	0f 90       	pop	r0
    2102:	0f 90       	pop	r0
    2104:	df 91       	pop	r29
    2106:	cf 91       	pop	r28
    2108:	08 95       	ret

0000210a <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    210a:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    210e:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    2110:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    2112:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    2116:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    2118:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    211c:	08 95       	ret

0000211e <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    211e:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    2120:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    2122:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    2124:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    2126:	60 83       	st	Z, r22
	ret                             // Return to caller
    2128:	08 95       	ret

0000212a <__udivmodhi4>:
    212a:	aa 1b       	sub	r26, r26
    212c:	bb 1b       	sub	r27, r27
    212e:	51 e1       	ldi	r21, 0x11	; 17
    2130:	07 c0       	rjmp	.+14     	; 0x2140 <__udivmodhi4_ep>

00002132 <__udivmodhi4_loop>:
    2132:	aa 1f       	adc	r26, r26
    2134:	bb 1f       	adc	r27, r27
    2136:	a6 17       	cp	r26, r22
    2138:	b7 07       	cpc	r27, r23
    213a:	10 f0       	brcs	.+4      	; 0x2140 <__udivmodhi4_ep>
    213c:	a6 1b       	sub	r26, r22
    213e:	b7 0b       	sbc	r27, r23

00002140 <__udivmodhi4_ep>:
    2140:	88 1f       	adc	r24, r24
    2142:	99 1f       	adc	r25, r25
    2144:	5a 95       	dec	r21
    2146:	a9 f7       	brne	.-22     	; 0x2132 <__udivmodhi4_loop>
    2148:	80 95       	com	r24
    214a:	90 95       	com	r25
    214c:	bc 01       	movw	r22, r24
    214e:	cd 01       	movw	r24, r26
    2150:	08 95       	ret

00002152 <__tablejump2__>:
    2152:	ee 0f       	add	r30, r30
    2154:	ff 1f       	adc	r31, r31
    2156:	88 1f       	adc	r24, r24
    2158:	8b bf       	out	0x3b, r24	; 59
    215a:	07 90       	elpm	r0, Z+
    215c:	f6 91       	elpm	r31, Z
    215e:	e0 2d       	mov	r30, r0
    2160:	1b be       	out	0x3b, r1	; 59
    2162:	19 94       	eijmp

00002164 <memcpy>:
    2164:	fb 01       	movw	r30, r22
    2166:	dc 01       	movw	r26, r24
    2168:	02 c0       	rjmp	.+4      	; 0x216e <memcpy+0xa>
    216a:	01 90       	ld	r0, Z+
    216c:	0d 92       	st	X+, r0
    216e:	41 50       	subi	r20, 0x01	; 1
    2170:	50 40       	sbci	r21, 0x00	; 0
    2172:	d8 f7       	brcc	.-10     	; 0x216a <memcpy+0x6>
    2174:	08 95       	ret

00002176 <_exit>:
    2176:	f8 94       	cli

00002178 <__stop_program>:
    2178:	ff cf       	rjmp	.-2      	; 0x2178 <__stop_program>
