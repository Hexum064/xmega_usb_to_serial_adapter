
xmega128a4u_USB_Serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000219c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000de  00802000  0000219c  00002230  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000027f  008020de  008020de  0000230e  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000230e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000418  00000000  00000000  00002380  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008dc3  00000000  00000000  00002798  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ab4  00000000  00000000  0000b55b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004c10  00000000  00000000  0000f00f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ac0  00000000  00000000  00013c20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00032917  00000000  00000000  000146e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002db9  00000000  00000000  00046ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f0  00000000  00000000  00049db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000a73e  00000000  00000000  0004a1a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	27 c1       	rjmp	.+590    	; 0x254 <__bad_interrupt>
       6:	00 00       	nop
       8:	25 c1       	rjmp	.+586    	; 0x254 <__bad_interrupt>
       a:	00 00       	nop
       c:	23 c1       	rjmp	.+582    	; 0x254 <__bad_interrupt>
       e:	00 00       	nop
      10:	21 c1       	rjmp	.+578    	; 0x254 <__bad_interrupt>
      12:	00 00       	nop
      14:	1f c1       	rjmp	.+574    	; 0x254 <__bad_interrupt>
      16:	00 00       	nop
      18:	1d c1       	rjmp	.+570    	; 0x254 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1b c1       	rjmp	.+566    	; 0x254 <__bad_interrupt>
      1e:	00 00       	nop
      20:	19 c1       	rjmp	.+562    	; 0x254 <__bad_interrupt>
      22:	00 00       	nop
      24:	17 c1       	rjmp	.+558    	; 0x254 <__bad_interrupt>
      26:	00 00       	nop
      28:	15 c1       	rjmp	.+554    	; 0x254 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	13 c1       	rjmp	.+550    	; 0x254 <__bad_interrupt>
      2e:	00 00       	nop
      30:	11 c1       	rjmp	.+546    	; 0x254 <__bad_interrupt>
      32:	00 00       	nop
      34:	0f c1       	rjmp	.+542    	; 0x254 <__bad_interrupt>
      36:	00 00       	nop
      38:	0d c1       	rjmp	.+538    	; 0x254 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0b c1       	rjmp	.+534    	; 0x254 <__bad_interrupt>
      3e:	00 00       	nop
      40:	09 c1       	rjmp	.+530    	; 0x254 <__bad_interrupt>
      42:	00 00       	nop
      44:	07 c1       	rjmp	.+526    	; 0x254 <__bad_interrupt>
      46:	00 00       	nop
      48:	05 c1       	rjmp	.+522    	; 0x254 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	03 c1       	rjmp	.+518    	; 0x254 <__bad_interrupt>
      4e:	00 00       	nop
      50:	01 c1       	rjmp	.+514    	; 0x254 <__bad_interrupt>
      52:	00 00       	nop
      54:	ff c0       	rjmp	.+510    	; 0x254 <__bad_interrupt>
      56:	00 00       	nop
      58:	fd c0       	rjmp	.+506    	; 0x254 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	fb c0       	rjmp	.+502    	; 0x254 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f9 c0       	rjmp	.+498    	; 0x254 <__bad_interrupt>
      62:	00 00       	nop
      64:	f7 c0       	rjmp	.+494    	; 0x254 <__bad_interrupt>
      66:	00 00       	nop
      68:	f5 c0       	rjmp	.+490    	; 0x254 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f3 c0       	rjmp	.+486    	; 0x254 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f1 c0       	rjmp	.+482    	; 0x254 <__bad_interrupt>
      72:	00 00       	nop
      74:	ef c0       	rjmp	.+478    	; 0x254 <__bad_interrupt>
      76:	00 00       	nop
      78:	ed c0       	rjmp	.+474    	; 0x254 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	eb c0       	rjmp	.+470    	; 0x254 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e9 c0       	rjmp	.+466    	; 0x254 <__bad_interrupt>
      82:	00 00       	nop
      84:	e7 c0       	rjmp	.+462    	; 0x254 <__bad_interrupt>
      86:	00 00       	nop
      88:	e5 c0       	rjmp	.+458    	; 0x254 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e3 c0       	rjmp	.+454    	; 0x254 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e1 c0       	rjmp	.+450    	; 0x254 <__bad_interrupt>
      92:	00 00       	nop
      94:	df c0       	rjmp	.+446    	; 0x254 <__bad_interrupt>
      96:	00 00       	nop
      98:	dd c0       	rjmp	.+442    	; 0x254 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	db c0       	rjmp	.+438    	; 0x254 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d9 c0       	rjmp	.+434    	; 0x254 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d7 c0       	rjmp	.+430    	; 0x254 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d5 c0       	rjmp	.+426    	; 0x254 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d3 c0       	rjmp	.+422    	; 0x254 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d1 c0       	rjmp	.+418    	; 0x254 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cf c0       	rjmp	.+414    	; 0x254 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	cd c0       	rjmp	.+410    	; 0x254 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	cb c0       	rjmp	.+406    	; 0x254 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c9 c0       	rjmp	.+402    	; 0x254 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c7 c0       	rjmp	.+398    	; 0x254 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c5 c0       	rjmp	.+394    	; 0x254 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c3 c0       	rjmp	.+390    	; 0x254 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c1 c0       	rjmp	.+386    	; 0x254 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	bf c0       	rjmp	.+382    	; 0x254 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	bd c0       	rjmp	.+378    	; 0x254 <__bad_interrupt>
      da:	00 00       	nop
      dc:	bb c0       	rjmp	.+374    	; 0x254 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b9 c0       	rjmp	.+370    	; 0x254 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b7 c0       	rjmp	.+366    	; 0x254 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b5 c0       	rjmp	.+362    	; 0x254 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b3 c0       	rjmp	.+358    	; 0x254 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b1 c0       	rjmp	.+354    	; 0x254 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	af c0       	rjmp	.+350    	; 0x254 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ad c0       	rjmp	.+346    	; 0x254 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ab c0       	rjmp	.+342    	; 0x254 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a9 c0       	rjmp	.+338    	; 0x254 <__bad_interrupt>
     102:	00 00       	nop
     104:	a7 c0       	rjmp	.+334    	; 0x254 <__bad_interrupt>
     106:	00 00       	nop
     108:	a5 c0       	rjmp	.+330    	; 0x254 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a3 c0       	rjmp	.+326    	; 0x254 <__bad_interrupt>
     10e:	00 00       	nop
     110:	a1 c0       	rjmp	.+322    	; 0x254 <__bad_interrupt>
     112:	00 00       	nop
     114:	9f c0       	rjmp	.+318    	; 0x254 <__bad_interrupt>
     116:	00 00       	nop
     118:	9d c0       	rjmp	.+314    	; 0x254 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	9b c0       	rjmp	.+310    	; 0x254 <__bad_interrupt>
     11e:	00 00       	nop
     120:	99 c0       	rjmp	.+306    	; 0x254 <__bad_interrupt>
     122:	00 00       	nop
     124:	97 c0       	rjmp	.+302    	; 0x254 <__bad_interrupt>
     126:	00 00       	nop
     128:	95 c0       	rjmp	.+298    	; 0x254 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	93 c0       	rjmp	.+294    	; 0x254 <__bad_interrupt>
     12e:	00 00       	nop
     130:	91 c0       	rjmp	.+290    	; 0x254 <__bad_interrupt>
     132:	00 00       	nop
     134:	8f c0       	rjmp	.+286    	; 0x254 <__bad_interrupt>
     136:	00 00       	nop
     138:	8d c0       	rjmp	.+282    	; 0x254 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	8b c0       	rjmp	.+278    	; 0x254 <__bad_interrupt>
     13e:	00 00       	nop
     140:	89 c0       	rjmp	.+274    	; 0x254 <__bad_interrupt>
     142:	00 00       	nop
     144:	87 c0       	rjmp	.+270    	; 0x254 <__bad_interrupt>
     146:	00 00       	nop
     148:	85 c0       	rjmp	.+266    	; 0x254 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	83 c0       	rjmp	.+262    	; 0x254 <__bad_interrupt>
     14e:	00 00       	nop
     150:	81 c0       	rjmp	.+258    	; 0x254 <__bad_interrupt>
     152:	00 00       	nop
     154:	7f c0       	rjmp	.+254    	; 0x254 <__bad_interrupt>
     156:	00 00       	nop
     158:	7d c0       	rjmp	.+250    	; 0x254 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	7b c0       	rjmp	.+246    	; 0x254 <__bad_interrupt>
     15e:	00 00       	nop
     160:	79 c0       	rjmp	.+242    	; 0x254 <__bad_interrupt>
     162:	00 00       	nop
     164:	77 c0       	rjmp	.+238    	; 0x254 <__bad_interrupt>
     166:	00 00       	nop
     168:	75 c0       	rjmp	.+234    	; 0x254 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	73 c0       	rjmp	.+230    	; 0x254 <__bad_interrupt>
     16e:	00 00       	nop
     170:	71 c0       	rjmp	.+226    	; 0x254 <__bad_interrupt>
     172:	00 00       	nop
     174:	6f c0       	rjmp	.+222    	; 0x254 <__bad_interrupt>
     176:	00 00       	nop
     178:	6d c0       	rjmp	.+218    	; 0x254 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	6b c0       	rjmp	.+214    	; 0x254 <__bad_interrupt>
     17e:	00 00       	nop
     180:	69 c0       	rjmp	.+210    	; 0x254 <__bad_interrupt>
     182:	00 00       	nop
     184:	67 c0       	rjmp	.+206    	; 0x254 <__bad_interrupt>
     186:	00 00       	nop
     188:	65 c0       	rjmp	.+202    	; 0x254 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	63 c0       	rjmp	.+198    	; 0x254 <__bad_interrupt>
     18e:	00 00       	nop
     190:	61 c0       	rjmp	.+194    	; 0x254 <__bad_interrupt>
     192:	00 00       	nop
     194:	5f c0       	rjmp	.+190    	; 0x254 <__bad_interrupt>
     196:	00 00       	nop
     198:	5d c0       	rjmp	.+186    	; 0x254 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	5b c0       	rjmp	.+182    	; 0x254 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	59 c0       	rjmp	.+178    	; 0x254 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	57 c0       	rjmp	.+174    	; 0x254 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	55 c0       	rjmp	.+170    	; 0x254 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	53 c0       	rjmp	.+166    	; 0x254 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	51 c0       	rjmp	.+162    	; 0x254 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	4f c0       	rjmp	.+158    	; 0x254 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	4d c0       	rjmp	.+154    	; 0x254 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	4b c0       	rjmp	.+150    	; 0x254 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	49 c0       	rjmp	.+146    	; 0x254 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	47 c0       	rjmp	.+142    	; 0x254 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	45 c0       	rjmp	.+138    	; 0x254 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	43 c0       	rjmp	.+134    	; 0x254 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	41 c0       	rjmp	.+130    	; 0x254 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	3f c0       	rjmp	.+126    	; 0x254 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	3d c0       	rjmp	.+122    	; 0x254 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	3b c0       	rjmp	.+118    	; 0x254 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	39 c0       	rjmp	.+114    	; 0x254 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	37 c0       	rjmp	.+110    	; 0x254 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	35 c0       	rjmp	.+106    	; 0x254 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	33 c0       	rjmp	.+102    	; 0x254 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	31 c0       	rjmp	.+98     	; 0x254 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__vector_125>
     1f8:	0c 94 f4 0e 	jmp	0x1de8	; 0x1de8 <__vector_126>
     1fc:	27 09       	sbc	r18, r7
     1fe:	2a 09       	sbc	r18, r10
     200:	2d 09       	sbc	r18, r13
     202:	30 09       	sbc	r19, r0
     204:	33 09       	sbc	r19, r3
     206:	36 09       	sbc	r19, r6
     208:	39 09       	sbc	r19, r9

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e3       	ldi	r29, 0x3F	; 63
     214:	de bf       	out	0x3e, r29	; 62
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0c bf       	out	0x3c, r16	; 60
     21a:	18 be       	out	0x38, r1	; 56
     21c:	19 be       	out	0x39, r1	; 57
     21e:	1a be       	out	0x3a, r1	; 58
     220:	1b be       	out	0x3b, r1	; 59

00000222 <__do_copy_data>:
     222:	10 e2       	ldi	r17, 0x20	; 32
     224:	a0 e0       	ldi	r26, 0x00	; 0
     226:	b0 e2       	ldi	r27, 0x20	; 32
     228:	ec e9       	ldi	r30, 0x9C	; 156
     22a:	f1 e2       	ldi	r31, 0x21	; 33
     22c:	00 e0       	ldi	r16, 0x00	; 0
     22e:	0b bf       	out	0x3b, r16	; 59
     230:	02 c0       	rjmp	.+4      	; 0x236 <__do_copy_data+0x14>
     232:	07 90       	elpm	r0, Z+
     234:	0d 92       	st	X+, r0
     236:	ae 3d       	cpi	r26, 0xDE	; 222
     238:	b1 07       	cpc	r27, r17
     23a:	d9 f7       	brne	.-10     	; 0x232 <__do_copy_data+0x10>
     23c:	1b be       	out	0x3b, r1	; 59

0000023e <__do_clear_bss>:
     23e:	23 e2       	ldi	r18, 0x23	; 35
     240:	ae ed       	ldi	r26, 0xDE	; 222
     242:	b0 e2       	ldi	r27, 0x20	; 32
     244:	01 c0       	rjmp	.+2      	; 0x248 <.do_clear_bss_start>

00000246 <.do_clear_bss_loop>:
     246:	1d 92       	st	X+, r1

00000248 <.do_clear_bss_start>:
     248:	ad 35       	cpi	r26, 0x5D	; 93
     24a:	b2 07       	cpc	r27, r18
     24c:	e1 f7       	brne	.-8      	; 0x246 <.do_clear_bss_loop>
     24e:	1b d0       	rcall	.+54     	; 0x286 <main>
     250:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <_exit>

00000254 <__bad_interrupt>:
     254:	d5 ce       	rjmp	.-598    	; 0x0 <__vectors>

00000256 <uart_putchar>:
}

uint8_t sendSPIDummy()
{
	return sendSPI(0x00);
}
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	39 c3       	rjmp	.+1650   	; 0x8cc <udi_cdc_putc>
     25a:	08 95       	ret

0000025c <sendSPI>:
     25c:	e0 ec       	ldi	r30, 0xC0	; 192
     25e:	f8 e0       	ldi	r31, 0x08	; 8
     260:	83 83       	std	Z+3, r24	; 0x03
     262:	82 81       	ldd	r24, Z+2	; 0x02
     264:	83 81       	ldd	r24, Z+3	; 0x03
     266:	08 95       	ret

00000268 <my_callback_cdc_enable>:
}

bool my_callback_cdc_enable(void)
{
	return true;
}
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	08 95       	ret

0000026c <my_callback_cdc_disable>:

void my_callback_cdc_disable(void)
{
     26c:	08 95       	ret

0000026e <my_callback_rx_notify>:

}

void my_callback_rx_notify(uint8_t port)
{
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
	uint8_t data = udi_cdc_getc();
     272:	a3 d2       	rcall	.+1350   	; 0x7ba <udi_cdc_getc>
     274:	ec 01       	movw	r28, r24
	//echo test
	udi_cdc_putc(data);
     276:	99 27       	eor	r25, r25
     278:	29 d3       	rcall	.+1618   	; 0x8cc <udi_cdc_putc>
	sendSPI(data);
     27a:	8c 2f       	mov	r24, r28
     27c:	ef df       	rcall	.-34     	; 0x25c <sendSPI>
	
}
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	08 95       	ret

00000284 <my_callback_tx_empty_notify>:

void my_callback_tx_empty_notify(uint8_t port)
{
     284:	08 95       	ret

00000286 <main>:

int main(void)
{


	cli();
     286:	f8 94       	cli

	sysclk_init();
     288:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <sysclk_init>
	udc_start();
     28c:	08 d4       	rcall	.+2064   	; 0xa9e <udc_start>
FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);


void initSPI()
{
	SPIC.CTRL = SPI_CLK2X_bm | SPI_ENABLE_bm | SPI_MASTER_bm | SPI_PRESCALER_DIV4_gc;
     28e:	80 ed       	ldi	r24, 0xD0	; 208
     290:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>

	sysclk_init();
	udc_start();
	initSPI();
	
	stdout = &mystdout;
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	90 e2       	ldi	r25, 0x20	; 32
     298:	80 93 59 23 	sts	0x2359, r24	; 0x802359 <__iob+0x2>
     29c:	90 93 5a 23 	sts	0x235A, r25	; 0x80235a <__iob+0x3>
	
	irq_initialize_vectors();
     2a0:	87 e0       	ldi	r24, 0x07	; 7
     2a2:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>


	sei();
     2a6:	78 94       	sei
	
	
	
	
	while(1){ }
     2a8:	ff cf       	rjmp	.-2      	; 0x2a8 <main+0x22>

000002aa <udi_cdc_comm_disable>:
}

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
}
     2aa:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <udi_cdc_nb_comm_enabled>
     2ae:	81 50       	subi	r24, 0x01	; 1
     2b0:	80 93 f4 21 	sts	0x21F4, r24	; 0x8021f4 <udi_cdc_nb_comm_enabled>
     2b4:	08 95       	ret

000002b6 <udi_cdc_data_setup>:
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	08 95       	ret

000002ba <udi_cdc_getsetting>:
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	08 95       	ret

000002be <udi_cdc_comm_setup>:
     2be:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <udd_g_ctrlreq>
     2c2:	88 23       	and	r24, r24
     2c4:	cc f4       	brge	.+50     	; 0x2f8 <udi_cdc_comm_setup+0x3a>
     2c6:	80 76       	andi	r24, 0x60	; 96
     2c8:	80 32       	cpi	r24, 0x20	; 32
     2ca:	b9 f5       	brne	.+110    	; 0x33a <udi_cdc_comm_setup+0x7c>
     2cc:	80 91 42 23 	lds	r24, 0x2342	; 0x802342 <udd_g_ctrlreq+0x1>
     2d0:	81 32       	cpi	r24, 0x21	; 33
     2d2:	a9 f5       	brne	.+106    	; 0x33e <udi_cdc_comm_setup+0x80>
     2d4:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <udd_g_ctrlreq+0x6>
     2d8:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <udd_g_ctrlreq+0x7>
     2dc:	07 97       	sbiw	r24, 0x07	; 7
     2de:	89 f5       	brne	.+98     	; 0x342 <udi_cdc_comm_setup+0x84>
     2e0:	e1 e4       	ldi	r30, 0x41	; 65
     2e2:	f3 e2       	ldi	r31, 0x23	; 35
     2e4:	82 e0       	ldi	r24, 0x02	; 2
     2e6:	92 e2       	ldi	r25, 0x22	; 34
     2e8:	80 87       	std	Z+8, r24	; 0x08
     2ea:	91 87       	std	Z+9, r25	; 0x09
     2ec:	87 e0       	ldi	r24, 0x07	; 7
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	82 87       	std	Z+10, r24	; 0x0a
     2f2:	93 87       	std	Z+11, r25	; 0x0b
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	08 95       	ret
     2f8:	80 76       	andi	r24, 0x60	; 96
     2fa:	80 32       	cpi	r24, 0x20	; 32
     2fc:	21 f5       	brne	.+72     	; 0x346 <udi_cdc_comm_setup+0x88>
     2fe:	80 91 42 23 	lds	r24, 0x2342	; 0x802342 <udd_g_ctrlreq+0x1>
     302:	80 32       	cpi	r24, 0x20	; 32
     304:	21 f0       	breq	.+8      	; 0x30e <udi_cdc_comm_setup+0x50>
     306:	82 32       	cpi	r24, 0x22	; 34
     308:	01 f1       	breq	.+64     	; 0x34a <udi_cdc_comm_setup+0x8c>
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	08 95       	ret
     30e:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <udd_g_ctrlreq+0x6>
     312:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <udd_g_ctrlreq+0x7>
     316:	07 97       	sbiw	r24, 0x07	; 7
     318:	d1 f4       	brne	.+52     	; 0x34e <udi_cdc_comm_setup+0x90>
     31a:	e1 e4       	ldi	r30, 0x41	; 65
     31c:	f3 e2       	ldi	r31, 0x23	; 35
     31e:	89 ea       	ldi	r24, 0xA9	; 169
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	84 87       	std	Z+12, r24	; 0x0c
     324:	95 87       	std	Z+13, r25	; 0x0d
     326:	82 e0       	ldi	r24, 0x02	; 2
     328:	92 e2       	ldi	r25, 0x22	; 34
     32a:	80 87       	std	Z+8, r24	; 0x08
     32c:	91 87       	std	Z+9, r25	; 0x09
     32e:	87 e0       	ldi	r24, 0x07	; 7
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	82 87       	std	Z+10, r24	; 0x0a
     334:	93 87       	std	Z+11, r25	; 0x0b
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	08 95       	ret
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	08 95       	ret
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	08 95       	ret
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	08 95       	ret
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	08 95       	ret
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	08 95       	ret
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	08 95       	ret

00000352 <udi_cdc_line_coding_received>:
     352:	08 95       	ret

00000354 <udi_cdc_comm_enable>:
     354:	10 92 f4 21 	sts	0x21F4, r1	; 0x8021f4 <udi_cdc_nb_comm_enabled>
     358:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <udi_cdc_state>
     35c:	10 92 01 22 	sts	0x2201, r1	; 0x802201 <udi_cdc_state+0x1>
     360:	e6 ef       	ldi	r30, 0xF6	; 246
     362:	f1 e2       	ldi	r31, 0x21	; 33
     364:	81 ea       	ldi	r24, 0xA1	; 161
     366:	80 83       	st	Z, r24
     368:	80 e2       	ldi	r24, 0x20	; 32
     36a:	81 83       	std	Z+1, r24	; 0x01
     36c:	12 82       	std	Z+2, r1	; 0x02
     36e:	13 82       	std	Z+3, r1	; 0x03
     370:	14 82       	std	Z+4, r1	; 0x04
     372:	15 82       	std	Z+5, r1	; 0x05
     374:	82 e0       	ldi	r24, 0x02	; 2
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	86 83       	std	Z+6, r24	; 0x06
     37a:	97 83       	std	Z+7, r25	; 0x07
     37c:	10 86       	std	Z+8, r1	; 0x08
     37e:	11 86       	std	Z+9, r1	; 0x09
     380:	e2 e0       	ldi	r30, 0x02	; 2
     382:	f2 e2       	ldi	r31, 0x22	; 34
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	92 ec       	ldi	r25, 0xC2	; 194
     388:	a1 e0       	ldi	r26, 0x01	; 1
     38a:	b0 e0       	ldi	r27, 0x00	; 0
     38c:	80 83       	st	Z, r24
     38e:	91 83       	std	Z+1, r25	; 0x01
     390:	a2 83       	std	Z+2, r26	; 0x02
     392:	b3 83       	std	Z+3, r27	; 0x03
     394:	14 82       	std	Z+4, r1	; 0x04
     396:	15 82       	std	Z+5, r1	; 0x05
     398:	88 e0       	ldi	r24, 0x08	; 8
     39a:	86 83       	std	Z+6, r24	; 0x06
     39c:	65 df       	rcall	.-310    	; 0x268 <my_callback_cdc_enable>
     39e:	88 23       	and	r24, r24
     3a0:	29 f0       	breq	.+10     	; 0x3ac <udi_cdc_comm_enable+0x58>
     3a2:	90 91 f4 21 	lds	r25, 0x21F4	; 0x8021f4 <udi_cdc_nb_comm_enabled>
     3a6:	9f 5f       	subi	r25, 0xFF	; 255
     3a8:	90 93 f4 21 	sts	0x21F4, r25	; 0x8021f4 <udi_cdc_nb_comm_enabled>
     3ac:	08 95       	ret

000003ae <udi_cdc_tx_send>:
     3ae:	ff 92       	push	r15
     3b0:	0f 93       	push	r16
     3b2:	1f 93       	push	r17
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	1f 92       	push	r1
     3ba:	cd b7       	in	r28, 0x3d	; 61
     3bc:	de b7       	in	r29, 0x3e	; 62
     3be:	80 91 e1 20 	lds	r24, 0x20E1	; 0x8020e1 <udi_cdc_tx_trans_ongoing>
     3c2:	81 11       	cpse	r24, r1
     3c4:	9e c0       	rjmp	.+316    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
     3c6:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <udd_is_high_speed>
     3ca:	88 23       	and	r24, r24
     3cc:	51 f0       	breq	.+20     	; 0x3e2 <udi_cdc_tx_send+0x34>
     3ce:	00 91 e2 20 	lds	r16, 0x20E2	; 0x8020e2 <udi_cdc_tx_sof_num>
     3d2:	10 91 e3 20 	lds	r17, 0x20E3	; 0x8020e3 <udi_cdc_tx_sof_num+0x1>
     3d6:	0e 94 04 0c 	call	0x1808	; 0x1808 <udd_get_micro_frame_number>
     3da:	08 17       	cp	r16, r24
     3dc:	19 07       	cpc	r17, r25
     3de:	59 f4       	brne	.+22     	; 0x3f6 <udi_cdc_tx_send+0x48>
     3e0:	90 c0       	rjmp	.+288    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
     3e2:	00 91 e2 20 	lds	r16, 0x20E2	; 0x8020e2 <udi_cdc_tx_sof_num>
     3e6:	10 91 e3 20 	lds	r17, 0x20E3	; 0x8020e3 <udi_cdc_tx_sof_num+0x1>
     3ea:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <udd_get_frame_number>
     3ee:	08 17       	cp	r16, r24
     3f0:	19 07       	cpc	r17, r25
     3f2:	09 f4       	brne	.+2      	; 0x3f6 <udi_cdc_tx_send+0x48>
     3f4:	86 c0       	rjmp	.+268    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
     3f6:	8f b7       	in	r24, 0x3f	; 63
     3f8:	89 83       	std	Y+1, r24	; 0x01
     3fa:	f8 94       	cli
     3fc:	19 81       	ldd	r17, Y+1	; 0x01
     3fe:	00 91 e4 20 	lds	r16, 0x20E4	; 0x8020e4 <udi_cdc_tx_buf_sel>
     402:	e0 2f       	mov	r30, r16
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	ee 0f       	add	r30, r30
     408:	ff 1f       	adc	r31, r31
     40a:	eb 51       	subi	r30, 0x1B	; 27
     40c:	ff 4d       	sbci	r31, 0xDF	; 223
     40e:	80 81       	ld	r24, Z
     410:	91 81       	ldd	r25, Z+1	; 0x01
     412:	89 2b       	or	r24, r25
     414:	09 f5       	brne	.+66     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     416:	80 91 de 20 	lds	r24, 0x20DE	; 0x8020de <__data_end>
     41a:	90 91 df 20 	lds	r25, 0x20DF	; 0x8020df <__data_end+0x1>
     41e:	01 96       	adiw	r24, 0x01	; 1
     420:	80 93 de 20 	sts	0x20DE, r24	; 0x8020de <__data_end>
     424:	90 93 df 20 	sts	0x20DF, r25	; 0x8020df <__data_end+0x1>
     428:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <udd_is_high_speed>
     42c:	81 11       	cpse	r24, r1
     42e:	07 c0       	rjmp	.+14     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     430:	80 91 de 20 	lds	r24, 0x20DE	; 0x8020de <__data_end>
     434:	90 91 df 20 	lds	r25, 0x20DF	; 0x8020df <__data_end+0x1>
     438:	84 36       	cpi	r24, 0x64	; 100
     43a:	91 05       	cpc	r25, r1
     43c:	58 f0       	brcs	.+22     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     43e:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <udd_is_high_speed>
     442:	88 23       	and	r24, r24
     444:	49 f0       	breq	.+18     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     446:	80 91 de 20 	lds	r24, 0x20DE	; 0x8020de <__data_end>
     44a:	90 91 df 20 	lds	r25, 0x20DF	; 0x8020df <__data_end+0x1>
     44e:	80 32       	cpi	r24, 0x20	; 32
     450:	93 40       	sbci	r25, 0x03	; 3
     452:	10 f4       	brcc	.+4      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     454:	1f bf       	out	0x3f, r17	; 63
     456:	55 c0       	rjmp	.+170    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
     458:	10 92 de 20 	sts	0x20DE, r1	; 0x8020de <__data_end>
     45c:	10 92 df 20 	sts	0x20DF, r1	; 0x8020df <__data_end+0x1>
     460:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <udi_cdc_tx_both_buf_to_send>
     464:	81 11       	cpse	r24, r1
     466:	06 c0       	rjmp	.+12     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	01 11       	cpse	r16, r1
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	80 93 e4 20 	sts	0x20E4, r24	; 0x8020e4 <udi_cdc_tx_buf_sel>
     472:	04 c0       	rjmp	.+8      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	01 11       	cpse	r16, r1
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	08 2f       	mov	r16, r24
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	80 93 e1 20 	sts	0x20E1, r24	; 0x8020e1 <udi_cdc_tx_trans_ongoing>
     482:	1f bf       	out	0x3f, r17	; 63
     484:	10 e0       	ldi	r17, 0x00	; 0
     486:	f8 01       	movw	r30, r16
     488:	ee 0f       	add	r30, r30
     48a:	ff 1f       	adc	r31, r31
     48c:	eb 51       	subi	r30, 0x1B	; 27
     48e:	ff 4d       	sbci	r31, 0xDF	; 223
     490:	ff 24       	eor	r15, r15
     492:	f3 94       	inc	r15
     494:	80 81       	ld	r24, Z
     496:	91 81       	ldd	r25, Z+1	; 0x01
     498:	80 34       	cpi	r24, 0x40	; 64
     49a:	91 05       	cpc	r25, r1
     49c:	09 f4       	brne	.+2      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     49e:	f1 2c       	mov	r15, r1
     4a0:	ff 20       	and	r15, r15
     4a2:	91 f0       	breq	.+36     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4a4:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <udd_is_high_speed>
     4a8:	88 23       	and	r24, r24
     4aa:	39 f0       	breq	.+14     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4ac:	0e 94 04 0c 	call	0x1808	; 0x1808 <udd_get_micro_frame_number>
     4b0:	80 93 e2 20 	sts	0x20E2, r24	; 0x8020e2 <udi_cdc_tx_sof_num>
     4b4:	90 93 e3 20 	sts	0x20E3, r25	; 0x8020e3 <udi_cdc_tx_sof_num+0x1>
     4b8:	0b c0       	rjmp	.+22     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4ba:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <udd_get_frame_number>
     4be:	80 93 e2 20 	sts	0x20E2, r24	; 0x8020e2 <udi_cdc_tx_sof_num>
     4c2:	90 93 e3 20 	sts	0x20E3, r25	; 0x8020e3 <udi_cdc_tx_sof_num+0x1>
     4c6:	04 c0       	rjmp	.+8      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4c8:	10 92 e2 20 	sts	0x20E2, r1	; 0x8020e2 <udi_cdc_tx_sof_num>
     4cc:	10 92 e3 20 	sts	0x20E3, r1	; 0x8020e3 <udi_cdc_tx_sof_num+0x1>
     4d0:	f8 01       	movw	r30, r16
     4d2:	ee 0f       	add	r30, r30
     4d4:	ff 1f       	adc	r31, r31
     4d6:	eb 51       	subi	r30, 0x1B	; 27
     4d8:	ff 4d       	sbci	r31, 0xDF	; 223
     4da:	20 81       	ld	r18, Z
     4dc:	31 81       	ldd	r19, Z+1	; 0x01
     4de:	a8 01       	movw	r20, r16
     4e0:	00 24       	eor	r0, r0
     4e2:	56 95       	lsr	r21
     4e4:	47 95       	ror	r20
     4e6:	07 94       	ror	r0
     4e8:	56 95       	lsr	r21
     4ea:	47 95       	ror	r20
     4ec:	07 94       	ror	r0
     4ee:	54 2f       	mov	r21, r20
     4f0:	40 2d       	mov	r20, r0
     4f2:	46 51       	subi	r20, 0x16	; 22
     4f4:	5f 4d       	sbci	r21, 0xDF	; 223
     4f6:	0b e8       	ldi	r16, 0x8B	; 139
     4f8:	12 e0       	ldi	r17, 0x02	; 2
     4fa:	6f 2d       	mov	r22, r15
     4fc:	81 e8       	ldi	r24, 0x81	; 129
     4fe:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <udd_ep_run>
     502:	0f 90       	pop	r0
     504:	df 91       	pop	r29
     506:	cf 91       	pop	r28
     508:	1f 91       	pop	r17
     50a:	0f 91       	pop	r16
     50c:	ff 90       	pop	r15
     50e:	08 95       	ret

00000510 <udi_cdc_data_sof_notify>:
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	4d cf       	rjmp	.-358    	; 0x3ae <udi_cdc_tx_send>
     514:	08 95       	ret

00000516 <udi_cdc_data_sent>:
     516:	81 11       	cpse	r24, r1
     518:	19 c0       	rjmp	.+50     	; 0x54c <udi_cdc_data_sent+0x36>
     51a:	20 91 e4 20 	lds	r18, 0x20E4	; 0x8020e4 <udi_cdc_tx_buf_sel>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	22 23       	and	r18, r18
     524:	11 f0       	breq	.+4      	; 0x52a <udi_cdc_data_sent+0x14>
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	88 0f       	add	r24, r24
     52c:	99 1f       	adc	r25, r25
     52e:	fc 01       	movw	r30, r24
     530:	eb 51       	subi	r30, 0x1B	; 27
     532:	ff 4d       	sbci	r31, 0xDF	; 223
     534:	10 82       	st	Z, r1
     536:	11 82       	std	Z+1, r1	; 0x01
     538:	10 92 e0 20 	sts	0x20E0, r1	; 0x8020e0 <udi_cdc_tx_both_buf_to_send>
     53c:	10 92 e1 20 	sts	0x20E1, r1	; 0x8020e1 <udi_cdc_tx_trans_ongoing>
     540:	67 2b       	or	r22, r23
     542:	11 f0       	breq	.+4      	; 0x548 <udi_cdc_data_sent+0x32>
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	9e de       	rcall	.-708    	; 0x284 <my_callback_tx_empty_notify>
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	31 cf       	rjmp	.-414    	; 0x3ae <udi_cdc_tx_send>
     54c:	08 95       	ret

0000054e <udi_cdc_data_disable>:
     54e:	80 91 f3 21 	lds	r24, 0x21F3	; 0x8021f3 <udi_cdc_nb_data_enabled>
     552:	81 50       	subi	r24, 0x01	; 1
     554:	80 93 f3 21 	sts	0x21F3, r24	; 0x8021f3 <udi_cdc_nb_data_enabled>
     558:	80 91 f3 21 	lds	r24, 0x21F3	; 0x8021f3 <udi_cdc_nb_data_enabled>
     55c:	87 de       	rcall	.-754    	; 0x26c <my_callback_cdc_disable>
     55e:	10 92 f2 21 	sts	0x21F2, r1	; 0x8021f2 <udi_cdc_data_running>
     562:	08 95       	ret

00000564 <udi_cdc_multi_get_nb_received_data>:
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	1f 92       	push	r1
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
     56e:	8f b7       	in	r24, 0x3f	; 63
     570:	89 83       	std	Y+1, r24	; 0x01
     572:	f8 94       	cli
     574:	49 81       	ldd	r20, Y+1	; 0x01
     576:	20 91 6b 21 	lds	r18, 0x216B	; 0x80216b <udi_cdc_rx_pos>
     57a:	30 91 6c 21 	lds	r19, 0x216C	; 0x80216c <udi_cdc_rx_pos+0x1>
     57e:	e0 91 6d 21 	lds	r30, 0x216D	; 0x80216d <udi_cdc_rx_buf_sel>
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	ee 0f       	add	r30, r30
     586:	ff 1f       	adc	r31, r31
     588:	e2 59       	subi	r30, 0x92	; 146
     58a:	fe 4d       	sbci	r31, 0xDE	; 222
     58c:	80 81       	ld	r24, Z
     58e:	91 81       	ldd	r25, Z+1	; 0x01
     590:	4f bf       	out	0x3f, r20	; 63
     592:	82 1b       	sub	r24, r18
     594:	93 0b       	sbc	r25, r19
     596:	0f 90       	pop	r0
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <udi_cdc_multi_is_rx_ready>:
     59e:	e2 df       	rcall	.-60     	; 0x564 <udi_cdc_multi_get_nb_received_data>
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	89 2b       	or	r24, r25
     5a4:	09 f4       	brne	.+2      	; 0x5a8 <udi_cdc_multi_is_rx_ready+0xa>
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	82 2f       	mov	r24, r18
     5aa:	08 95       	ret

000005ac <udi_cdc_rx_start>:
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	1f 92       	push	r1
     5b6:	cd b7       	in	r28, 0x3d	; 61
     5b8:	de b7       	in	r29, 0x3e	; 62
     5ba:	8f b7       	in	r24, 0x3f	; 63
     5bc:	89 83       	std	Y+1, r24	; 0x01
     5be:	f8 94       	cli
     5c0:	99 81       	ldd	r25, Y+1	; 0x01
     5c2:	20 91 6d 21 	lds	r18, 0x216D	; 0x80216d <udi_cdc_rx_buf_sel>
     5c6:	80 91 6a 21 	lds	r24, 0x216A	; 0x80216a <udi_cdc_rx_trans_ongoing>
     5ca:	81 11       	cpse	r24, r1
     5cc:	10 c0       	rjmp	.+32     	; 0x5ee <udi_cdc_rx_start+0x42>
     5ce:	60 91 6b 21 	lds	r22, 0x216B	; 0x80216b <udi_cdc_rx_pos>
     5d2:	70 91 6c 21 	lds	r23, 0x216C	; 0x80216c <udi_cdc_rx_pos+0x1>
     5d6:	02 2f       	mov	r16, r18
     5d8:	10 e0       	ldi	r17, 0x00	; 0
     5da:	f8 01       	movw	r30, r16
     5dc:	ee 0f       	add	r30, r30
     5de:	ff 1f       	adc	r31, r31
     5e0:	e2 59       	subi	r30, 0x92	; 146
     5e2:	fe 4d       	sbci	r31, 0xDE	; 222
     5e4:	40 81       	ld	r20, Z
     5e6:	51 81       	ldd	r21, Z+1	; 0x01
     5e8:	64 17       	cp	r22, r20
     5ea:	75 07       	cpc	r23, r21
     5ec:	18 f4       	brcc	.+6      	; 0x5f4 <udi_cdc_rx_start+0x48>
     5ee:	9f bf       	out	0x3f, r25	; 63
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	27 c0       	rjmp	.+78     	; 0x642 <udi_cdc_rx_start+0x96>
     5f4:	10 92 6b 21 	sts	0x216B, r1	; 0x80216b <udi_cdc_rx_pos>
     5f8:	10 92 6c 21 	sts	0x216C, r1	; 0x80216c <udi_cdc_rx_pos+0x1>
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	21 11       	cpse	r18, r1
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	80 93 6d 21 	sts	0x216D, r24	; 0x80216d <udi_cdc_rx_buf_sel>
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	80 93 6a 21 	sts	0x216A, r24	; 0x80216a <udi_cdc_rx_trans_ongoing>
     60c:	9f bf       	out	0x3f, r25	; 63
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	c6 df       	rcall	.-116    	; 0x59e <udi_cdc_multi_is_rx_ready>
     612:	88 23       	and	r24, r24
     614:	11 f0       	breq	.+4      	; 0x61a <udi_cdc_rx_start+0x6e>
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	2a de       	rcall	.-940    	; 0x26e <my_callback_rx_notify>
     61a:	a8 01       	movw	r20, r16
     61c:	00 24       	eor	r0, r0
     61e:	56 95       	lsr	r21
     620:	47 95       	ror	r20
     622:	07 94       	ror	r0
     624:	56 95       	lsr	r21
     626:	47 95       	ror	r20
     628:	07 94       	ror	r0
     62a:	54 2f       	mov	r21, r20
     62c:	40 2d       	mov	r20, r0
     62e:	4e 58       	subi	r20, 0x8E	; 142
     630:	5e 4d       	sbci	r21, 0xDE	; 222
     632:	09 e5       	ldi	r16, 0x59	; 89
     634:	13 e0       	ldi	r17, 0x03	; 3
     636:	20 e4       	ldi	r18, 0x40	; 64
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	61 e0       	ldi	r22, 0x01	; 1
     63c:	82 e0       	ldi	r24, 0x02	; 2
     63e:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <udd_ep_run>
     642:	0f 90       	pop	r0
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	1f 91       	pop	r17
     64a:	0f 91       	pop	r16
     64c:	08 95       	ret

0000064e <udi_cdc_data_enable>:
     64e:	10 92 f3 21 	sts	0x21F3, r1	; 0x8021f3 <udi_cdc_nb_data_enabled>
     652:	10 92 e1 20 	sts	0x20E1, r1	; 0x8020e1 <udi_cdc_tx_trans_ongoing>
     656:	10 92 e0 20 	sts	0x20E0, r1	; 0x8020e0 <udi_cdc_tx_both_buf_to_send>
     65a:	10 92 e4 20 	sts	0x20E4, r1	; 0x8020e4 <udi_cdc_tx_buf_sel>
     65e:	e5 ee       	ldi	r30, 0xE5	; 229
     660:	f0 e2       	ldi	r31, 0x20	; 32
     662:	10 82       	st	Z, r1
     664:	11 82       	std	Z+1, r1	; 0x01
     666:	12 82       	std	Z+2, r1	; 0x02
     668:	13 82       	std	Z+3, r1	; 0x03
     66a:	10 92 e2 20 	sts	0x20E2, r1	; 0x8020e2 <udi_cdc_tx_sof_num>
     66e:	10 92 e3 20 	sts	0x20E3, r1	; 0x8020e3 <udi_cdc_tx_sof_num+0x1>
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	9c de       	rcall	.-712    	; 0x3ae <udi_cdc_tx_send>
     676:	10 92 6a 21 	sts	0x216A, r1	; 0x80216a <udi_cdc_rx_trans_ongoing>
     67a:	10 92 6d 21 	sts	0x216D, r1	; 0x80216d <udi_cdc_rx_buf_sel>
     67e:	ee e6       	ldi	r30, 0x6E	; 110
     680:	f1 e2       	ldi	r31, 0x21	; 33
     682:	10 82       	st	Z, r1
     684:	11 82       	std	Z+1, r1	; 0x01
     686:	12 82       	std	Z+2, r1	; 0x02
     688:	13 82       	std	Z+3, r1	; 0x03
     68a:	10 92 6b 21 	sts	0x216B, r1	; 0x80216b <udi_cdc_rx_pos>
     68e:	10 92 6c 21 	sts	0x216C, r1	; 0x80216c <udi_cdc_rx_pos+0x1>
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	8b df       	rcall	.-234    	; 0x5ac <udi_cdc_rx_start>
     696:	88 23       	and	r24, r24
     698:	59 f0       	breq	.+22     	; 0x6b0 <udi_cdc_data_enable+0x62>
     69a:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <udi_cdc_nb_data_enabled>
     69e:	9f 5f       	subi	r25, 0xFF	; 255
     6a0:	90 93 f3 21 	sts	0x21F3, r25	; 0x8021f3 <udi_cdc_nb_data_enabled>
     6a4:	90 91 f3 21 	lds	r25, 0x21F3	; 0x8021f3 <udi_cdc_nb_data_enabled>
     6a8:	91 30       	cpi	r25, 0x01	; 1
     6aa:	11 f4       	brne	.+4      	; 0x6b0 <udi_cdc_data_enable+0x62>
     6ac:	90 93 f2 21 	sts	0x21F2, r25	; 0x8021f2 <udi_cdc_data_running>
     6b0:	08 95       	ret

000006b2 <udi_cdc_data_received>:
     6b2:	0f 93       	push	r16
     6b4:	1f 93       	push	r17
     6b6:	81 11       	cpse	r24, r1
     6b8:	29 c0       	rjmp	.+82     	; 0x70c <udi_cdc_data_received+0x5a>
     6ba:	80 91 6d 21 	lds	r24, 0x216D	; 0x80216d <udi_cdc_rx_buf_sel>
     6be:	e1 e0       	ldi	r30, 0x01	; 1
     6c0:	81 11       	cpse	r24, r1
     6c2:	e0 e0       	ldi	r30, 0x00	; 0
     6c4:	84 2f       	mov	r24, r20
     6c6:	61 15       	cp	r22, r1
     6c8:	71 05       	cpc	r23, r1
     6ca:	a9 f4       	brne	.+42     	; 0x6f6 <udi_cdc_data_received+0x44>
     6cc:	f0 e0       	ldi	r31, 0x00	; 0
     6ce:	00 24       	eor	r0, r0
     6d0:	f6 95       	lsr	r31
     6d2:	e7 95       	ror	r30
     6d4:	07 94       	ror	r0
     6d6:	f6 95       	lsr	r31
     6d8:	e7 95       	ror	r30
     6da:	07 94       	ror	r0
     6dc:	fe 2f       	mov	r31, r30
     6de:	e0 2d       	mov	r30, r0
     6e0:	af 01       	movw	r20, r30
     6e2:	4e 58       	subi	r20, 0x8E	; 142
     6e4:	5e 4d       	sbci	r21, 0xDE	; 222
     6e6:	09 e5       	ldi	r16, 0x59	; 89
     6e8:	13 e0       	ldi	r17, 0x03	; 3
     6ea:	20 e4       	ldi	r18, 0x40	; 64
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	61 e0       	ldi	r22, 0x01	; 1
     6f0:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <udd_ep_run>
     6f4:	0b c0       	rjmp	.+22     	; 0x70c <udi_cdc_data_received+0x5a>
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	ee 0f       	add	r30, r30
     6fa:	ff 1f       	adc	r31, r31
     6fc:	e2 59       	subi	r30, 0x92	; 146
     6fe:	fe 4d       	sbci	r31, 0xDE	; 222
     700:	60 83       	st	Z, r22
     702:	71 83       	std	Z+1, r23	; 0x01
     704:	10 92 6a 21 	sts	0x216A, r1	; 0x80216a <udi_cdc_rx_trans_ongoing>
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	50 df       	rcall	.-352    	; 0x5ac <udi_cdc_rx_start>
     70c:	1f 91       	pop	r17
     70e:	0f 91       	pop	r16
     710:	08 95       	ret

00000712 <udi_cdc_multi_getc>:
     712:	ef 92       	push	r14
     714:	ff 92       	push	r15
     716:	1f 93       	push	r17
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	1f 92       	push	r1
     71e:	cd b7       	in	r28, 0x3d	; 61
     720:	de b7       	in	r29, 0x3e	; 62
     722:	11 e0       	ldi	r17, 0x01	; 1
     724:	80 91 08 22 	lds	r24, 0x2208	; 0x802208 <udi_cdc_line_coding+0x6>
     728:	89 30       	cpi	r24, 0x09	; 9
     72a:	09 f0       	breq	.+2      	; 0x72e <udi_cdc_multi_getc+0x1c>
     72c:	10 e0       	ldi	r17, 0x00	; 0
     72e:	40 e0       	ldi	r20, 0x00	; 0
     730:	50 e0       	ldi	r21, 0x00	; 0
     732:	8f b7       	in	r24, 0x3f	; 63
     734:	89 83       	std	Y+1, r24	; 0x01
     736:	f8 94       	cli
     738:	a9 81       	ldd	r26, Y+1	; 0x01
     73a:	20 91 6b 21 	lds	r18, 0x216B	; 0x80216b <udi_cdc_rx_pos>
     73e:	30 91 6c 21 	lds	r19, 0x216C	; 0x80216c <udi_cdc_rx_pos+0x1>
     742:	80 91 6d 21 	lds	r24, 0x216D	; 0x80216d <udi_cdc_rx_buf_sel>
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	fc 01       	movw	r30, r24
     74a:	ee 0f       	add	r30, r30
     74c:	ff 1f       	adc	r31, r31
     74e:	e2 59       	subi	r30, 0x92	; 146
     750:	fe 4d       	sbci	r31, 0xDE	; 222
     752:	60 81       	ld	r22, Z
     754:	71 81       	ldd	r23, Z+1	; 0x01
     756:	af bf       	out	0x3f, r26	; 63
     758:	26 17       	cp	r18, r22
     75a:	37 07       	cpc	r19, r23
     75c:	30 f0       	brcs	.+12     	; 0x76a <udi_cdc_multi_getc+0x58>
     75e:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <udi_cdc_data_running>
     762:	81 11       	cpse	r24, r1
     764:	e6 cf       	rjmp	.-52     	; 0x732 <udi_cdc_multi_getc+0x20>
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	21 c0       	rjmp	.+66     	; 0x7ac <udi_cdc_multi_getc+0x9a>
     76a:	fc 01       	movw	r30, r24
     76c:	00 24       	eor	r0, r0
     76e:	f6 95       	lsr	r31
     770:	e7 95       	ror	r30
     772:	07 94       	ror	r0
     774:	f6 95       	lsr	r31
     776:	e7 95       	ror	r30
     778:	07 94       	ror	r0
     77a:	fe 2f       	mov	r31, r30
     77c:	e0 2d       	mov	r30, r0
     77e:	e2 0f       	add	r30, r18
     780:	f3 1f       	adc	r31, r19
     782:	ee 58       	subi	r30, 0x8E	; 142
     784:	fe 4d       	sbci	r31, 0xDE	; 222
     786:	80 81       	ld	r24, Z
     788:	7a 01       	movw	r14, r20
     78a:	e8 2a       	or	r14, r24
     78c:	2f 5f       	subi	r18, 0xFF	; 255
     78e:	3f 4f       	sbci	r19, 0xFF	; 255
     790:	20 93 6b 21 	sts	0x216B, r18	; 0x80216b <udi_cdc_rx_pos>
     794:	30 93 6c 21 	sts	0x216C, r19	; 0x80216c <udi_cdc_rx_pos+0x1>
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	08 df       	rcall	.-496    	; 0x5ac <udi_cdc_rx_start>
     79c:	11 23       	and	r17, r17
     79e:	21 f0       	breq	.+8      	; 0x7a8 <udi_cdc_multi_getc+0x96>
     7a0:	5e 2d       	mov	r21, r14
     7a2:	44 27       	eor	r20, r20
     7a4:	10 e0       	ldi	r17, 0x00	; 0
     7a6:	c5 cf       	rjmp	.-118    	; 0x732 <udi_cdc_multi_getc+0x20>
     7a8:	8e 2d       	mov	r24, r14
     7aa:	9f 2d       	mov	r25, r15
     7ac:	0f 90       	pop	r0
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	1f 91       	pop	r17
     7b4:	ff 90       	pop	r15
     7b6:	ef 90       	pop	r14
     7b8:	08 95       	ret

000007ba <udi_cdc_getc>:
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	aa cf       	rjmp	.-172    	; 0x712 <udi_cdc_multi_getc>
     7be:	08 95       	ret

000007c0 <udi_cdc_multi_get_free_tx_buffer>:
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	1f 92       	push	r1
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
     7ca:	8f b7       	in	r24, 0x3f	; 63
     7cc:	89 83       	std	Y+1, r24	; 0x01
     7ce:	f8 94       	cli
     7d0:	99 81       	ldd	r25, Y+1	; 0x01
     7d2:	80 91 e4 20 	lds	r24, 0x20E4	; 0x8020e4 <udi_cdc_tx_buf_sel>
     7d6:	e8 2f       	mov	r30, r24
     7d8:	f0 e0       	ldi	r31, 0x00	; 0
     7da:	ee 0f       	add	r30, r30
     7dc:	ff 1f       	adc	r31, r31
     7de:	eb 51       	subi	r30, 0x1B	; 27
     7e0:	ff 4d       	sbci	r31, 0xDF	; 223
     7e2:	20 81       	ld	r18, Z
     7e4:	31 81       	ldd	r19, Z+1	; 0x01
     7e6:	20 34       	cpi	r18, 0x40	; 64
     7e8:	31 05       	cpc	r19, r1
     7ea:	89 f4       	brne	.+34     	; 0x80e <udi_cdc_multi_get_free_tx_buffer+0x4e>
     7ec:	40 91 e1 20 	lds	r20, 0x20E1	; 0x8020e1 <udi_cdc_tx_trans_ongoing>
     7f0:	41 11       	cpse	r20, r1
     7f2:	0d c0       	rjmp	.+26     	; 0x80e <udi_cdc_multi_get_free_tx_buffer+0x4e>
     7f4:	40 91 e0 20 	lds	r20, 0x20E0	; 0x8020e0 <udi_cdc_tx_both_buf_to_send>
     7f8:	41 11       	cpse	r20, r1
     7fa:	09 c0       	rjmp	.+18     	; 0x80e <udi_cdc_multi_get_free_tx_buffer+0x4e>
     7fc:	21 e0       	ldi	r18, 0x01	; 1
     7fe:	20 93 e0 20 	sts	0x20E0, r18	; 0x8020e0 <udi_cdc_tx_both_buf_to_send>
     802:	81 11       	cpse	r24, r1
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	20 93 e4 20 	sts	0x20E4, r18	; 0x8020e4 <udi_cdc_tx_buf_sel>
     80a:	20 e0       	ldi	r18, 0x00	; 0
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	9f bf       	out	0x3f, r25	; 63
     810:	80 e4       	ldi	r24, 0x40	; 64
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	82 1b       	sub	r24, r18
     816:	93 0b       	sbc	r25, r19
     818:	0f 90       	pop	r0
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	08 95       	ret

00000820 <udi_cdc_multi_is_tx_ready>:
     820:	cf df       	rcall	.-98     	; 0x7c0 <udi_cdc_multi_get_free_tx_buffer>
     822:	21 e0       	ldi	r18, 0x01	; 1
     824:	89 2b       	or	r24, r25
     826:	09 f4       	brne	.+2      	; 0x82a <udi_cdc_multi_is_tx_ready+0xa>
     828:	20 e0       	ldi	r18, 0x00	; 0
     82a:	82 2f       	mov	r24, r18
     82c:	08 95       	ret

0000082e <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
     82e:	ff 92       	push	r15
     830:	0f 93       	push	r16
     832:	1f 93       	push	r17
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	1f 92       	push	r1
     83a:	cd b7       	in	r28, 0x3d	; 61
     83c:	de b7       	in	r29, 0x3e	; 62
     83e:	f6 2e       	mov	r15, r22
     840:	17 2f       	mov	r17, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     842:	01 e0       	ldi	r16, 0x01	; 1
     844:	80 91 08 22 	lds	r24, 0x2208	; 0x802208 <udi_cdc_line_coding+0x6>
     848:	89 30       	cpi	r24, 0x09	; 9
     84a:	09 f0       	breq	.+2      	; 0x84e <udi_cdc_multi_putc+0x20>
     84c:	00 e0       	ldi	r16, 0x00	; 0

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	e7 df       	rcall	.-50     	; 0x820 <udi_cdc_multi_is_tx_ready>
     852:	81 11       	cpse	r24, r1
     854:	07 c0       	rjmp	.+14     	; 0x864 <udi_cdc_multi_putc+0x36>
		if (!udi_cdc_data_running) {
     856:	80 91 f2 21 	lds	r24, 0x21F2	; 0x8021f2 <udi_cdc_data_running>
     85a:	81 11       	cpse	r24, r1
     85c:	f8 cf       	rjmp	.-16     	; 0x84e <udi_cdc_multi_putc+0x20>
			return false;
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	2d c0       	rjmp	.+90     	; 0x8be <udi_cdc_multi_putc+0x90>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     864:	8f b7       	in	r24, 0x3f	; 63
     866:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     868:	f8 94       	cli
	return flags;
     86a:	29 81       	ldd	r18, Y+1	; 0x01
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     86c:	e0 91 e4 20 	lds	r30, 0x20E4	; 0x8020e4 <udi_cdc_tx_buf_sel>
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     870:	f0 e0       	ldi	r31, 0x00	; 0
     872:	df 01       	movw	r26, r30
     874:	aa 0f       	add	r26, r26
     876:	bb 1f       	adc	r27, r27
     878:	ab 51       	subi	r26, 0x1B	; 27
     87a:	bf 4d       	sbci	r27, 0xDF	; 223
     87c:	8d 91       	ld	r24, X+
     87e:	9c 91       	ld	r25, X
     880:	11 97       	sbiw	r26, 0x01	; 1
     882:	ac 01       	movw	r20, r24
     884:	4f 5f       	subi	r20, 0xFF	; 255
     886:	5f 4f       	sbci	r21, 0xFF	; 255
     888:	4d 93       	st	X+, r20
     88a:	5c 93       	st	X, r21
     88c:	00 24       	eor	r0, r0
     88e:	f6 95       	lsr	r31
     890:	e7 95       	ror	r30
     892:	07 94       	ror	r0
     894:	f6 95       	lsr	r31
     896:	e7 95       	ror	r30
     898:	07 94       	ror	r0
     89a:	fe 2f       	mov	r31, r30
     89c:	e0 2d       	mov	r30, r0
     89e:	8e 0f       	add	r24, r30
     8a0:	9f 1f       	adc	r25, r31
     8a2:	fc 01       	movw	r30, r24
     8a4:	e6 51       	subi	r30, 0x16	; 22
     8a6:	ff 4d       	sbci	r31, 0xDF	; 223
     8a8:	f0 82       	st	Z, r15
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8aa:	2f bf       	out	0x3f, r18	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
     8ac:	00 23       	and	r16, r16
     8ae:	29 f0       	breq	.+10     	; 0x8ba <udi_cdc_multi_putc+0x8c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     8b0:	f1 2e       	mov	r15, r17
     8b2:	11 0f       	add	r17, r17
     8b4:	11 0b       	sbc	r17, r17
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
     8b6:	00 e0       	ldi	r16, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
     8b8:	ca cf       	rjmp	.-108    	; 0x84e <udi_cdc_multi_putc+0x20>
	}
	return true;
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	90 e0       	ldi	r25, 0x00	; 0
}
     8be:	0f 90       	pop	r0
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	ff 90       	pop	r15
     8ca:	08 95       	ret

000008cc <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
     8cc:	bc 01       	movw	r22, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	ae cf       	rjmp	.-164    	; 0x82e <udi_cdc_multi_putc>
}
     8d2:	08 95       	ret

000008d4 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     8d4:	e0 91 0e 22 	lds	r30, 0x220E	; 0x80220e <udc_ptr_conf>
     8d8:	f0 91 0f 22 	lds	r31, 0x220F	; 0x80220f <udc_ptr_conf+0x1>
     8dc:	01 90       	ld	r0, Z+
     8de:	f0 81       	ld	r31, Z
     8e0:	e0 2d       	mov	r30, r0
     8e2:	22 81       	ldd	r18, Z+2	; 0x02
     8e4:	33 81       	ldd	r19, Z+3	; 0x03
     8e6:	2e 0f       	add	r18, r30
     8e8:	3f 1f       	adc	r19, r31
     8ea:	fc 01       	movw	r30, r24
     8ec:	40 81       	ld	r20, Z
     8ee:	e4 0f       	add	r30, r20
     8f0:	f1 1d       	adc	r31, r1
     8f2:	e2 17       	cp	r30, r18
     8f4:	f3 07       	cpc	r31, r19
     8f6:	b8 f4       	brcc	.+46     	; 0x926 <udc_next_desc_in_iface+0x52>
     8f8:	81 81       	ldd	r24, Z+1	; 0x01
     8fa:	84 30       	cpi	r24, 0x04	; 4
     8fc:	b9 f0       	breq	.+46     	; 0x92c <udc_next_desc_in_iface+0x58>
     8fe:	86 13       	cpse	r24, r22
     900:	09 c0       	rjmp	.+18     	; 0x914 <udc_next_desc_in_iface+0x40>
     902:	05 c0       	rjmp	.+10     	; 0x90e <udc_next_desc_in_iface+0x3a>
     904:	81 81       	ldd	r24, Z+1	; 0x01
     906:	84 30       	cpi	r24, 0x04	; 4
     908:	a1 f0       	breq	.+40     	; 0x932 <udc_next_desc_in_iface+0x5e>
     90a:	86 13       	cpse	r24, r22
     90c:	03 c0       	rjmp	.+6      	; 0x914 <udc_next_desc_in_iface+0x40>
     90e:	8e 2f       	mov	r24, r30
     910:	9f 2f       	mov	r25, r31
     912:	08 95       	ret
     914:	80 81       	ld	r24, Z
     916:	e8 0f       	add	r30, r24
     918:	f1 1d       	adc	r31, r1
     91a:	e2 17       	cp	r30, r18
     91c:	f3 07       	cpc	r31, r19
     91e:	90 f3       	brcs	.-28     	; 0x904 <udc_next_desc_in_iface+0x30>
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	08 95       	ret
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	08 95       	ret
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	08 95       	ret
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	08 95       	ret

00000938 <udc_valid_address>:
     938:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <udd_g_ctrlreq+0x2>
     93c:	8f 77       	andi	r24, 0x7F	; 127
     93e:	59 c7       	rjmp	.+3762   	; 0x17f2 <udd_set_address>
     940:	08 95       	ret

00000942 <udc_update_iface_desc>:
     942:	90 91 10 22 	lds	r25, 0x2210	; 0x802210 <udc_num_configuration>
     946:	99 23       	and	r25, r25
     948:	81 f1       	breq	.+96     	; 0x9aa <udc_update_iface_desc+0x68>
     94a:	e0 91 0e 22 	lds	r30, 0x220E	; 0x80220e <udc_ptr_conf>
     94e:	f0 91 0f 22 	lds	r31, 0x220F	; 0x80220f <udc_ptr_conf+0x1>
     952:	01 90       	ld	r0, Z+
     954:	f0 81       	ld	r31, Z
     956:	e0 2d       	mov	r30, r0
     958:	94 81       	ldd	r25, Z+4	; 0x04
     95a:	89 17       	cp	r24, r25
     95c:	40 f5       	brcc	.+80     	; 0x9ae <udc_update_iface_desc+0x6c>
     95e:	e0 93 0c 22 	sts	0x220C, r30	; 0x80220c <udc_ptr_iface>
     962:	f0 93 0d 22 	sts	0x220D, r31	; 0x80220d <udc_ptr_iface+0x1>
     966:	22 81       	ldd	r18, Z+2	; 0x02
     968:	33 81       	ldd	r19, Z+3	; 0x03
     96a:	2e 0f       	add	r18, r30
     96c:	3f 1f       	adc	r19, r31
     96e:	e2 17       	cp	r30, r18
     970:	f3 07       	cpc	r31, r19
     972:	f8 f4       	brcc	.+62     	; 0x9b2 <udc_update_iface_desc+0x70>
     974:	91 81       	ldd	r25, Z+1	; 0x01
     976:	94 30       	cpi	r25, 0x04	; 4
     978:	61 f4       	brne	.+24     	; 0x992 <udc_update_iface_desc+0x50>
     97a:	92 81       	ldd	r25, Z+2	; 0x02
     97c:	98 13       	cpse	r25, r24
     97e:	09 c0       	rjmp	.+18     	; 0x992 <udc_update_iface_desc+0x50>
     980:	93 81       	ldd	r25, Z+3	; 0x03
     982:	96 13       	cpse	r25, r22
     984:	06 c0       	rjmp	.+12     	; 0x992 <udc_update_iface_desc+0x50>
     986:	e0 93 0c 22 	sts	0x220C, r30	; 0x80220c <udc_ptr_iface>
     98a:	f0 93 0d 22 	sts	0x220D, r31	; 0x80220d <udc_ptr_iface+0x1>
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	08 95       	ret
     992:	90 81       	ld	r25, Z
     994:	e9 0f       	add	r30, r25
     996:	f1 1d       	adc	r31, r1
     998:	e2 17       	cp	r30, r18
     99a:	f3 07       	cpc	r31, r19
     99c:	58 f3       	brcs	.-42     	; 0x974 <udc_update_iface_desc+0x32>
     99e:	e0 93 0c 22 	sts	0x220C, r30	; 0x80220c <udc_ptr_iface>
     9a2:	f0 93 0d 22 	sts	0x220D, r31	; 0x80220d <udc_ptr_iface+0x1>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	08 95       	ret
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	08 95       	ret
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	08 95       	ret
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	08 95       	ret

000009b6 <udc_iface_disable>:
     9b6:	ef 92       	push	r14
     9b8:	ff 92       	push	r15
     9ba:	1f 93       	push	r17
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	c8 2f       	mov	r28, r24
     9c2:	60 e0       	ldi	r22, 0x00	; 0
     9c4:	be df       	rcall	.-132    	; 0x942 <udc_update_iface_desc>
     9c6:	18 2f       	mov	r17, r24
     9c8:	88 23       	and	r24, r24
     9ca:	81 f1       	breq	.+96     	; 0xa2c <udc_iface_disable+0x76>
     9cc:	a0 91 0e 22 	lds	r26, 0x220E	; 0x80220e <udc_ptr_conf>
     9d0:	b0 91 0f 22 	lds	r27, 0x220F	; 0x80220f <udc_ptr_conf+0x1>
     9d4:	ec 2f       	mov	r30, r28
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	ee 0f       	add	r30, r30
     9da:	ff 1f       	adc	r31, r31
     9dc:	12 96       	adiw	r26, 0x02	; 2
     9de:	8d 91       	ld	r24, X+
     9e0:	9c 91       	ld	r25, X
     9e2:	13 97       	sbiw	r26, 0x03	; 3
     9e4:	e8 0f       	add	r30, r24
     9e6:	f9 1f       	adc	r31, r25
     9e8:	e0 80       	ld	r14, Z
     9ea:	f1 80       	ldd	r15, Z+1	; 0x01
     9ec:	d7 01       	movw	r26, r14
     9ee:	16 96       	adiw	r26, 0x06	; 6
     9f0:	ed 91       	ld	r30, X+
     9f2:	fc 91       	ld	r31, X
     9f4:	17 97       	sbiw	r26, 0x07	; 7
     9f6:	19 95       	eicall
     9f8:	68 2f       	mov	r22, r24
     9fa:	8c 2f       	mov	r24, r28
     9fc:	a2 df       	rcall	.-188    	; 0x942 <udc_update_iface_desc>
     9fe:	18 2f       	mov	r17, r24
     a00:	88 23       	and	r24, r24
     a02:	a1 f0       	breq	.+40     	; 0xa2c <udc_iface_disable+0x76>
     a04:	c0 91 0c 22 	lds	r28, 0x220C	; 0x80220c <udc_ptr_iface>
     a08:	d0 91 0d 22 	lds	r29, 0x220D	; 0x80220d <udc_ptr_iface+0x1>
     a0c:	65 e0       	ldi	r22, 0x05	; 5
     a0e:	ce 01       	movw	r24, r28
     a10:	61 df       	rcall	.-318    	; 0x8d4 <udc_next_desc_in_iface>
     a12:	ec 01       	movw	r28, r24
     a14:	89 2b       	or	r24, r25
     a16:	21 f0       	breq	.+8      	; 0xa20 <udc_iface_disable+0x6a>
     a18:	8a 81       	ldd	r24, Y+2	; 0x02
     a1a:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <udd_ep_free>
     a1e:	f6 cf       	rjmp	.-20     	; 0xa0c <udc_iface_disable+0x56>
     a20:	d7 01       	movw	r26, r14
     a22:	12 96       	adiw	r26, 0x02	; 2
     a24:	ed 91       	ld	r30, X+
     a26:	fc 91       	ld	r31, X
     a28:	13 97       	sbiw	r26, 0x03	; 3
     a2a:	19 95       	eicall
     a2c:	81 2f       	mov	r24, r17
     a2e:	df 91       	pop	r29
     a30:	cf 91       	pop	r28
     a32:	1f 91       	pop	r17
     a34:	ff 90       	pop	r15
     a36:	ef 90       	pop	r14
     a38:	08 95       	ret

00000a3a <udc_iface_enable>:
     a3a:	1f 93       	push	r17
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
     a40:	18 2f       	mov	r17, r24
     a42:	7f df       	rcall	.-258    	; 0x942 <udc_update_iface_desc>
     a44:	88 23       	and	r24, r24
     a46:	39 f1       	breq	.+78     	; 0xa96 <udc_iface_enable+0x5c>
     a48:	c0 91 0c 22 	lds	r28, 0x220C	; 0x80220c <udc_ptr_iface>
     a4c:	d0 91 0d 22 	lds	r29, 0x220D	; 0x80220d <udc_ptr_iface+0x1>
     a50:	65 e0       	ldi	r22, 0x05	; 5
     a52:	ce 01       	movw	r24, r28
     a54:	3f df       	rcall	.-386    	; 0x8d4 <udc_next_desc_in_iface>
     a56:	ec 01       	movw	r28, r24
     a58:	89 2b       	or	r24, r25
     a5a:	41 f0       	breq	.+16     	; 0xa6c <udc_iface_enable+0x32>
     a5c:	4c 81       	ldd	r20, Y+4	; 0x04
     a5e:	5d 81       	ldd	r21, Y+5	; 0x05
     a60:	6b 81       	ldd	r22, Y+3	; 0x03
     a62:	8a 81       	ldd	r24, Y+2	; 0x02
     a64:	db d6       	rcall	.+3510   	; 0x181c <udd_ep_alloc>
     a66:	81 11       	cpse	r24, r1
     a68:	f3 cf       	rjmp	.-26     	; 0xa50 <udc_iface_enable+0x16>
     a6a:	15 c0       	rjmp	.+42     	; 0xa96 <udc_iface_enable+0x5c>
     a6c:	a0 91 0e 22 	lds	r26, 0x220E	; 0x80220e <udc_ptr_conf>
     a70:	b0 91 0f 22 	lds	r27, 0x220F	; 0x80220f <udc_ptr_conf+0x1>
     a74:	e1 2f       	mov	r30, r17
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	ee 0f       	add	r30, r30
     a7a:	ff 1f       	adc	r31, r31
     a7c:	12 96       	adiw	r26, 0x02	; 2
     a7e:	8d 91       	ld	r24, X+
     a80:	9c 91       	ld	r25, X
     a82:	13 97       	sbiw	r26, 0x03	; 3
     a84:	e8 0f       	add	r30, r24
     a86:	f9 1f       	adc	r31, r25
     a88:	01 90       	ld	r0, Z+
     a8a:	f0 81       	ld	r31, Z
     a8c:	e0 2d       	mov	r30, r0
     a8e:	01 90       	ld	r0, Z+
     a90:	f0 81       	ld	r31, Z
     a92:	e0 2d       	mov	r30, r0
     a94:	19 95       	eicall
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	1f 91       	pop	r17
     a9c:	08 95       	ret

00000a9e <udc_start>:
     a9e:	25 c6       	rjmp	.+3146   	; 0x16ea <udd_enable>
     aa0:	08 95       	ret

00000aa2 <udc_reset>:
     aa2:	cf 93       	push	r28
     aa4:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <udc_num_configuration>
     aa8:	88 23       	and	r24, r24
     aaa:	c1 f0       	breq	.+48     	; 0xadc <udc_reset+0x3a>
     aac:	e0 91 0e 22 	lds	r30, 0x220E	; 0x80220e <udc_ptr_conf>
     ab0:	f0 91 0f 22 	lds	r31, 0x220F	; 0x80220f <udc_ptr_conf+0x1>
     ab4:	01 90       	ld	r0, Z+
     ab6:	f0 81       	ld	r31, Z
     ab8:	e0 2d       	mov	r30, r0
     aba:	84 81       	ldd	r24, Z+4	; 0x04
     abc:	88 23       	and	r24, r24
     abe:	71 f0       	breq	.+28     	; 0xadc <udc_reset+0x3a>
     ac0:	c0 e0       	ldi	r28, 0x00	; 0
     ac2:	8c 2f       	mov	r24, r28
     ac4:	78 df       	rcall	.-272    	; 0x9b6 <udc_iface_disable>
     ac6:	cf 5f       	subi	r28, 0xFF	; 255
     ac8:	e0 91 0e 22 	lds	r30, 0x220E	; 0x80220e <udc_ptr_conf>
     acc:	f0 91 0f 22 	lds	r31, 0x220F	; 0x80220f <udc_ptr_conf+0x1>
     ad0:	01 90       	ld	r0, Z+
     ad2:	f0 81       	ld	r31, Z
     ad4:	e0 2d       	mov	r30, r0
     ad6:	84 81       	ldd	r24, Z+4	; 0x04
     ad8:	c8 17       	cp	r28, r24
     ada:	98 f3       	brcs	.-26     	; 0xac2 <udc_reset+0x20>
     adc:	10 92 10 22 	sts	0x2210, r1	; 0x802210 <udc_num_configuration>
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	80 93 14 22 	sts	0x2214, r24	; 0x802214 <udc_device_status>
     ae8:	90 93 15 22 	sts	0x2215, r25	; 0x802215 <udc_device_status+0x1>
     aec:	cf 91       	pop	r28
     aee:	08 95       	ret

00000af0 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     af0:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     af2:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <udc_num_configuration>
     af6:	88 23       	and	r24, r24
     af8:	49 f1       	breq	.+82     	; 0xb4c <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     afa:	a0 91 0e 22 	lds	r26, 0x220E	; 0x80220e <udc_ptr_conf>
     afe:	b0 91 0f 22 	lds	r27, 0x220F	; 0x80220f <udc_ptr_conf+0x1>
     b02:	ed 91       	ld	r30, X+
     b04:	fc 91       	ld	r31, X
     b06:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     b08:	84 81       	ldd	r24, Z+4	; 0x04
     b0a:	88 23       	and	r24, r24
     b0c:	f9 f0       	breq	.+62     	; 0xb4c <udc_sof_notify+0x5c>
     b0e:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     b10:	ec 2f       	mov	r30, r28
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	ee 0f       	add	r30, r30
     b16:	ff 1f       	adc	r31, r31
     b18:	12 96       	adiw	r26, 0x02	; 2
     b1a:	8d 91       	ld	r24, X+
     b1c:	9c 91       	ld	r25, X
     b1e:	13 97       	sbiw	r26, 0x03	; 3
     b20:	e8 0f       	add	r30, r24
     b22:	f9 1f       	adc	r31, r25
     b24:	01 90       	ld	r0, Z+
     b26:	f0 81       	ld	r31, Z
     b28:	e0 2d       	mov	r30, r0
     b2a:	00 84       	ldd	r0, Z+8	; 0x08
     b2c:	f1 85       	ldd	r31, Z+9	; 0x09
     b2e:	e0 2d       	mov	r30, r0
     b30:	30 97       	sbiw	r30, 0x00	; 0
     b32:	09 f0       	breq	.+2      	; 0xb36 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     b34:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     b36:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     b38:	a0 91 0e 22 	lds	r26, 0x220E	; 0x80220e <udc_ptr_conf>
     b3c:	b0 91 0f 22 	lds	r27, 0x220F	; 0x80220f <udc_ptr_conf+0x1>
     b40:	ed 91       	ld	r30, X+
     b42:	fc 91       	ld	r31, X
     b44:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     b46:	84 81       	ldd	r24, Z+4	; 0x04
     b48:	c8 17       	cp	r28, r24
     b4a:	10 f3       	brcs	.-60     	; 0xb10 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     b4c:	cf 91       	pop	r28
     b4e:	08 95       	ret

00000b50 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     b50:	0f 93       	push	r16
     b52:	1f 93       	push	r17
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     b58:	e1 e4       	ldi	r30, 0x41	; 65
     b5a:	f3 e2       	ldi	r31, 0x23	; 35
     b5c:	12 86       	std	Z+10, r1	; 0x0a
     b5e:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
     b60:	14 86       	std	Z+12, r1	; 0x0c
     b62:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
     b64:	16 86       	std	Z+14, r1	; 0x0e
     b66:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
     b68:	80 81       	ld	r24, Z
     b6a:	88 23       	and	r24, r24
     b6c:	0c f0       	brlt	.+2      	; 0xb70 <udc_process_setup+0x20>
     b6e:	63 c2       	rjmp	.+1222   	; 0x1036 <udc_process_setup+0x4e6>
		if (udd_g_ctrlreq.req.wLength == 0) {
     b70:	20 91 47 23 	lds	r18, 0x2347	; 0x802347 <udd_g_ctrlreq+0x6>
     b74:	30 91 48 23 	lds	r19, 0x2348	; 0x802348 <udd_g_ctrlreq+0x7>
     b78:	21 15       	cp	r18, r1
     b7a:	31 05       	cpc	r19, r1
     b7c:	09 f0       	breq	.+2      	; 0xb80 <udc_process_setup+0x30>
     b7e:	56 c2       	rjmp	.+1196   	; 0x102c <udc_process_setup+0x4dc>
     b80:	51 c2       	rjmp	.+1186   	; 0x1024 <udc_process_setup+0x4d4>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     b82:	8f 71       	andi	r24, 0x1F	; 31
     b84:	09 f0       	breq	.+2      	; 0xb88 <udc_process_setup+0x38>
     b86:	a7 c0       	rjmp	.+334    	; 0xcd6 <udc_process_setup+0x186>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     b88:	90 91 42 23 	lds	r25, 0x2342	; 0x802342 <udd_g_ctrlreq+0x1>
     b8c:	96 30       	cpi	r25, 0x06	; 6
     b8e:	79 f0       	breq	.+30     	; 0xbae <udc_process_setup+0x5e>
     b90:	98 30       	cpi	r25, 0x08	; 8
     b92:	09 f4       	brne	.+2      	; 0xb96 <udc_process_setup+0x46>
     b94:	96 c0       	rjmp	.+300    	; 0xcc2 <udc_process_setup+0x172>
     b96:	91 11       	cpse	r25, r1
     b98:	9e c0       	rjmp	.+316    	; 0xcd6 <udc_process_setup+0x186>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     b9a:	22 30       	cpi	r18, 0x02	; 2
     b9c:	31 05       	cpc	r19, r1
     b9e:	09 f0       	breq	.+2      	; 0xba2 <udc_process_setup+0x52>
     ba0:	ca c1       	rjmp	.+916    	; 0xf36 <udc_process_setup+0x3e6>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     ba2:	62 e0       	ldi	r22, 0x02	; 2
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	84 e1       	ldi	r24, 0x14	; 20
     ba8:	92 e2       	ldi	r25, 0x22	; 34
     baa:	31 d6       	rcall	.+3170   	; 0x180e <udd_set_setup_payload>
     bac:	4d c2       	rjmp	.+1178   	; 0x1048 <udc_process_setup+0x4f8>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     bae:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <udd_g_ctrlreq+0x2>
     bb2:	90 91 44 23 	lds	r25, 0x2344	; 0x802344 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     bb6:	29 2f       	mov	r18, r25
     bb8:	33 27       	eor	r19, r19
     bba:	22 30       	cpi	r18, 0x02	; 2
     bbc:	31 05       	cpc	r19, r1
     bbe:	a9 f0       	breq	.+42     	; 0xbea <udc_process_setup+0x9a>
     bc0:	24 f4       	brge	.+8      	; 0xbca <udc_process_setup+0x7a>
     bc2:	21 30       	cpi	r18, 0x01	; 1
     bc4:	31 05       	cpc	r19, r1
     bc6:	41 f0       	breq	.+16     	; 0xbd8 <udc_process_setup+0x88>
     bc8:	ad c1       	rjmp	.+858    	; 0xf24 <udc_process_setup+0x3d4>
     bca:	23 30       	cpi	r18, 0x03	; 3
     bcc:	31 05       	cpc	r19, r1
     bce:	d9 f1       	breq	.+118    	; 0xc46 <udc_process_setup+0xf6>
     bd0:	2f 30       	cpi	r18, 0x0F	; 15
     bd2:	31 05       	cpc	r19, r1
     bd4:	51 f1       	breq	.+84     	; 0xc2a <udc_process_setup+0xda>
     bd6:	a6 c1       	rjmp	.+844    	; 0xf24 <udc_process_setup+0x3d4>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     bd8:	80 91 72 20 	lds	r24, 0x2072	; 0x802072 <udc_config>
     bdc:	90 91 73 20 	lds	r25, 0x2073	; 0x802073 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     be0:	dc 01       	movw	r26, r24
     be2:	6c 91       	ld	r22, X
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	13 d6       	rcall	.+3110   	; 0x180e <udd_set_setup_payload>
     be8:	5d c0       	rjmp	.+186    	; 0xca4 <udc_process_setup+0x154>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     bea:	e0 91 72 20 	lds	r30, 0x2072	; 0x802072 <udc_config>
     bee:	f0 91 73 20 	lds	r31, 0x2073	; 0x802073 <udc_config+0x1>
     bf2:	21 89       	ldd	r18, Z+17	; 0x11
     bf4:	82 17       	cp	r24, r18
     bf6:	08 f0       	brcs	.+2      	; 0xbfa <udc_process_setup+0xaa>
     bf8:	9e c1       	rjmp	.+828    	; 0xf36 <udc_process_setup+0x3e6>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     bfa:	99 27       	eor	r25, r25
     bfc:	88 0f       	add	r24, r24
     bfe:	99 1f       	adc	r25, r25
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	e0 91 74 20 	lds	r30, 0x2074	; 0x802074 <udc_config+0x2>
     c08:	f0 91 75 20 	lds	r31, 0x2075	; 0x802075 <udc_config+0x3>
     c0c:	e8 0f       	add	r30, r24
     c0e:	f9 1f       	adc	r31, r25
     c10:	80 81       	ld	r24, Z
     c12:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     c14:	fc 01       	movw	r30, r24
     c16:	62 81       	ldd	r22, Z+2	; 0x02
     c18:	73 81       	ldd	r23, Z+3	; 0x03
     c1a:	f9 d5       	rcall	.+3058   	; 0x180e <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     c1c:	e0 91 49 23 	lds	r30, 0x2349	; 0x802349 <udd_g_ctrlreq+0x8>
     c20:	f0 91 4a 23 	lds	r31, 0x234A	; 0x80234a <udd_g_ctrlreq+0x9>
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	81 83       	std	Z+1, r24	; 0x01
     c28:	3d c0       	rjmp	.+122    	; 0xca4 <udc_process_setup+0x154>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
     c2a:	80 91 76 20 	lds	r24, 0x2076	; 0x802076 <udc_config+0x4>
     c2e:	90 91 77 20 	lds	r25, 0x2077	; 0x802077 <udc_config+0x5>
     c32:	00 97       	sbiw	r24, 0x00	; 0
     c34:	09 f4       	brne	.+2      	; 0xc38 <udc_process_setup+0xe8>
     c36:	7f c1       	rjmp	.+766    	; 0xf36 <udc_process_setup+0x3e6>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     c38:	dc 01       	movw	r26, r24
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	6d 91       	ld	r22, X+
     c3e:	7c 91       	ld	r23, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	e5 d5       	rcall	.+3018   	; 0x180e <udd_set_setup_payload>
     c44:	2f c0       	rjmp	.+94     	; 0xca4 <udc_process_setup+0x154>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     c46:	99 27       	eor	r25, r25
     c48:	81 30       	cpi	r24, 0x01	; 1
     c4a:	91 05       	cpc	r25, r1
     c4c:	91 f0       	breq	.+36     	; 0xc72 <udc_process_setup+0x122>
     c4e:	58 f0       	brcs	.+22     	; 0xc66 <udc_process_setup+0x116>
     c50:	82 30       	cpi	r24, 0x02	; 2
     c52:	91 05       	cpc	r25, r1
     c54:	09 f4       	brne	.+2      	; 0xc58 <udc_process_setup+0x108>
     c56:	f4 c1       	rjmp	.+1000   	; 0x1040 <udc_process_setup+0x4f0>
     c58:	03 97       	sbiw	r24, 0x03	; 3
     c5a:	09 f0       	breq	.+2      	; 0xc5e <udc_process_setup+0x10e>
     c5c:	6c c1       	rjmp	.+728    	; 0xf36 <udc_process_setup+0x3e6>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
     c5e:	27 e0       	ldi	r18, 0x07	; 7
		str = udc_get_string_serial_name();
     c60:	86 ed       	ldi	r24, 0xD6	; 214
     c62:	90 e2       	ldi	r25, 0x20	; 32
     c64:	09 c0       	rjmp	.+18     	; 0xc78 <udc_process_setup+0x128>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     c66:	64 e0       	ldi	r22, 0x04	; 4
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	8e e6       	ldi	r24, 0x6E	; 110
     c6c:	90 e2       	ldi	r25, 0x20	; 32
     c6e:	cf d5       	rcall	.+2974   	; 0x180e <udd_set_setup_payload>
     c70:	19 c0       	rjmp	.+50     	; 0xca4 <udc_process_setup+0x154>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
     c72:	8b e5       	ldi	r24, 0x5B	; 91
     c74:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     c76:	22 e1       	ldi	r18, 0x12	; 18
     c78:	38 2f       	mov	r19, r24
     c7a:	a4 e2       	ldi	r26, 0x24	; 36
     c7c:	b0 e2       	ldi	r27, 0x20	; 32
     c7e:	e8 2f       	mov	r30, r24
     c80:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     c82:	81 91       	ld	r24, Z+
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	8d 93       	st	X+, r24
     c88:	9d 93       	st	X+, r25
     c8a:	8e 2f       	mov	r24, r30
     c8c:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
     c8e:	82 17       	cp	r24, r18
     c90:	c0 f3       	brcs	.-16     	; 0xc82 <udc_process_setup+0x132>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     c92:	62 2f       	mov	r22, r18
     c94:	66 0f       	add	r22, r22
     c96:	6e 5f       	subi	r22, 0xFE	; 254
     c98:	60 93 22 20 	sts	0x2022, r22	; 0x802022 <udc_string_desc>
		udd_set_setup_payload(
     c9c:	70 e0       	ldi	r23, 0x00	; 0
     c9e:	82 e2       	ldi	r24, 0x22	; 34
     ca0:	90 e2       	ldi	r25, 0x20	; 32
     ca2:	b5 d5       	rcall	.+2922   	; 0x180e <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     ca4:	e1 e4       	ldi	r30, 0x41	; 65
     ca6:	f3 e2       	ldi	r31, 0x23	; 35
     ca8:	86 81       	ldd	r24, Z+6	; 0x06
     caa:	97 81       	ldd	r25, Z+7	; 0x07
     cac:	22 85       	ldd	r18, Z+10	; 0x0a
     cae:	33 85       	ldd	r19, Z+11	; 0x0b
     cb0:	82 17       	cp	r24, r18
     cb2:	93 07       	cpc	r25, r19
     cb4:	08 f0       	brcs	.+2      	; 0xcb8 <udc_process_setup+0x168>
     cb6:	c8 c1       	rjmp	.+912    	; 0x1048 <udc_process_setup+0x4f8>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     cb8:	80 93 4b 23 	sts	0x234B, r24	; 0x80234b <udd_g_ctrlreq+0xa>
     cbc:	90 93 4c 23 	sts	0x234C, r25	; 0x80234c <udd_g_ctrlreq+0xb>
     cc0:	c3 c1       	rjmp	.+902    	; 0x1048 <udc_process_setup+0x4f8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     cc2:	21 30       	cpi	r18, 0x01	; 1
     cc4:	31 05       	cpc	r19, r1
     cc6:	09 f0       	breq	.+2      	; 0xcca <udc_process_setup+0x17a>
     cc8:	36 c1       	rjmp	.+620    	; 0xf36 <udc_process_setup+0x3e6>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     cca:	61 e0       	ldi	r22, 0x01	; 1
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	80 e1       	ldi	r24, 0x10	; 16
     cd0:	92 e2       	ldi	r25, 0x22	; 34
     cd2:	9d d5       	rcall	.+2874   	; 0x180e <udd_set_setup_payload>
     cd4:	b9 c1       	rjmp	.+882    	; 0x1048 <udc_process_setup+0x4f8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	e1 f5       	brne	.+120    	; 0xd52 <udc_process_setup+0x202>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     cda:	90 91 42 23 	lds	r25, 0x2342	; 0x802342 <udd_g_ctrlreq+0x1>
     cde:	9a 30       	cpi	r25, 0x0A	; 10
     ce0:	c1 f5       	brne	.+112    	; 0xd52 <udc_process_setup+0x202>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     ce2:	21 30       	cpi	r18, 0x01	; 1
     ce4:	31 05       	cpc	r19, r1
     ce6:	09 f0       	breq	.+2      	; 0xcea <udc_process_setup+0x19a>
     ce8:	26 c1       	rjmp	.+588    	; 0xf36 <udc_process_setup+0x3e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     cea:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <udc_num_configuration>
     cee:	88 23       	and	r24, r24
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <udc_process_setup+0x1a4>
     cf2:	21 c1       	rjmp	.+578    	; 0xf36 <udc_process_setup+0x3e6>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     cf4:	c0 91 45 23 	lds	r28, 0x2345	; 0x802345 <udd_g_ctrlreq+0x4>
     cf8:	d0 91 46 23 	lds	r29, 0x2346	; 0x802346 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     cfc:	00 91 0e 22 	lds	r16, 0x220E	; 0x80220e <udc_ptr_conf>
     d00:	10 91 0f 22 	lds	r17, 0x220F	; 0x80220f <udc_ptr_conf+0x1>
     d04:	d8 01       	movw	r26, r16
     d06:	ed 91       	ld	r30, X+
     d08:	fc 91       	ld	r31, X
     d0a:	84 81       	ldd	r24, Z+4	; 0x04
     d0c:	c8 17       	cp	r28, r24
     d0e:	08 f0       	brcs	.+2      	; 0xd12 <udc_process_setup+0x1c2>
     d10:	12 c1       	rjmp	.+548    	; 0xf36 <udc_process_setup+0x3e6>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     d12:	60 e0       	ldi	r22, 0x00	; 0
     d14:	8c 2f       	mov	r24, r28
     d16:	15 de       	rcall	.-982    	; 0x942 <udc_update_iface_desc>
     d18:	88 23       	and	r24, r24
     d1a:	09 f4       	brne	.+2      	; 0xd1e <udc_process_setup+0x1ce>
     d1c:	0c c1       	rjmp	.+536    	; 0xf36 <udc_process_setup+0x3e6>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     d1e:	ce 01       	movw	r24, r28
     d20:	99 27       	eor	r25, r25
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	d8 01       	movw	r26, r16
     d28:	12 96       	adiw	r26, 0x02	; 2
     d2a:	ed 91       	ld	r30, X+
     d2c:	fc 91       	ld	r31, X
     d2e:	13 97       	sbiw	r26, 0x03	; 3
     d30:	e8 0f       	add	r30, r24
     d32:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     d34:	01 90       	ld	r0, Z+
     d36:	f0 81       	ld	r31, Z
     d38:	e0 2d       	mov	r30, r0
     d3a:	86 81       	ldd	r24, Z+6	; 0x06
     d3c:	97 81       	ldd	r25, Z+7	; 0x07
     d3e:	fc 01       	movw	r30, r24
     d40:	19 95       	eicall
     d42:	80 93 12 22 	sts	0x2212, r24	; 0x802212 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     d46:	61 e0       	ldi	r22, 0x01	; 1
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	82 e1       	ldi	r24, 0x12	; 18
     d4c:	92 e2       	ldi	r25, 0x22	; 34
     d4e:	5f d5       	rcall	.+2750   	; 0x180e <udd_set_setup_payload>
     d50:	7b c1       	rjmp	.+758    	; 0x1048 <udc_process_setup+0x4f8>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     d52:	82 30       	cpi	r24, 0x02	; 2
     d54:	09 f0       	breq	.+2      	; 0xd58 <udc_process_setup+0x208>
     d56:	ef c0       	rjmp	.+478    	; 0xf36 <udc_process_setup+0x3e6>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     d58:	80 91 42 23 	lds	r24, 0x2342	; 0x802342 <udd_g_ctrlreq+0x1>
     d5c:	81 11       	cpse	r24, r1
     d5e:	e4 c0       	rjmp	.+456    	; 0xf28 <udc_process_setup+0x3d8>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     d60:	22 30       	cpi	r18, 0x02	; 2
     d62:	31 05       	cpc	r19, r1
     d64:	09 f0       	breq	.+2      	; 0xd68 <udc_process_setup+0x218>
     d66:	e7 c0       	rjmp	.+462    	; 0xf36 <udc_process_setup+0x3e6>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     d68:	80 91 45 23 	lds	r24, 0x2345	; 0x802345 <udd_g_ctrlreq+0x4>
     d6c:	df d5       	rcall	.+3006   	; 0x192c <udd_ep_is_halted>
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	80 93 0a 22 	sts	0x220A, r24	; 0x80220a <udc_ep_status.4671>
     d74:	90 93 0b 22 	sts	0x220B, r25	; 0x80220b <udc_ep_status.4671+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     d78:	62 e0       	ldi	r22, 0x02	; 2
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	8a e0       	ldi	r24, 0x0A	; 10
     d7e:	92 e2       	ldi	r25, 0x22	; 34
     d80:	46 d5       	rcall	.+2700   	; 0x180e <udd_set_setup_payload>
     d82:	62 c1       	rjmp	.+708    	; 0x1048 <udc_process_setup+0x4f8>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     d84:	8f 71       	andi	r24, 0x1F	; 31
     d86:	09 f0       	breq	.+2      	; 0xd8a <udc_process_setup+0x23a>
     d88:	83 c0       	rjmp	.+262    	; 0xe90 <udc_process_setup+0x340>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     d8a:	90 91 42 23 	lds	r25, 0x2342	; 0x802342 <udd_g_ctrlreq+0x1>
     d8e:	93 30       	cpi	r25, 0x03	; 3
     d90:	09 f4       	brne	.+2      	; 0xd94 <udc_process_setup+0x244>
     d92:	cc c0       	rjmp	.+408    	; 0xf2c <udc_process_setup+0x3dc>
     d94:	18 f4       	brcc	.+6      	; 0xd9c <udc_process_setup+0x24c>
     d96:	91 30       	cpi	r25, 0x01	; 1
     d98:	a1 f0       	breq	.+40     	; 0xdc2 <udc_process_setup+0x272>
     d9a:	7a c0       	rjmp	.+244    	; 0xe90 <udc_process_setup+0x340>
     d9c:	95 30       	cpi	r25, 0x05	; 5
     d9e:	19 f0       	breq	.+6      	; 0xda6 <udc_process_setup+0x256>
     da0:	99 30       	cpi	r25, 0x09	; 9
     da2:	39 f1       	breq	.+78     	; 0xdf2 <udc_process_setup+0x2a2>
     da4:	75 c0       	rjmp	.+234    	; 0xe90 <udc_process_setup+0x340>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     da6:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <udd_g_ctrlreq+0x6>
     daa:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <udd_g_ctrlreq+0x7>
     dae:	89 2b       	or	r24, r25
     db0:	09 f0       	breq	.+2      	; 0xdb4 <udc_process_setup+0x264>
     db2:	c1 c0       	rjmp	.+386    	; 0xf36 <udc_process_setup+0x3e6>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     db4:	8c e9       	ldi	r24, 0x9C	; 156
     db6:	94 e0       	ldi	r25, 0x04	; 4
     db8:	80 93 4d 23 	sts	0x234D, r24	; 0x80234d <udd_g_ctrlreq+0xc>
     dbc:	90 93 4e 23 	sts	0x234E, r25	; 0x80234e <udd_g_ctrlreq+0xd>
     dc0:	43 c1       	rjmp	.+646    	; 0x1048 <udc_process_setup+0x4f8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     dc2:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <udd_g_ctrlreq+0x6>
     dc6:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <udd_g_ctrlreq+0x7>
     dca:	89 2b       	or	r24, r25
     dcc:	09 f0       	breq	.+2      	; 0xdd0 <udc_process_setup+0x280>
     dce:	b3 c0       	rjmp	.+358    	; 0xf36 <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     dd0:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <udd_g_ctrlreq+0x2>
     dd4:	90 91 44 23 	lds	r25, 0x2344	; 0x802344 <udd_g_ctrlreq+0x3>
     dd8:	01 97       	sbiw	r24, 0x01	; 1
     dda:	09 f0       	breq	.+2      	; 0xdde <udc_process_setup+0x28e>
     ddc:	ac c0       	rjmp	.+344    	; 0xf36 <udc_process_setup+0x3e6>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     dde:	80 91 14 22 	lds	r24, 0x2214	; 0x802214 <udc_device_status>
     de2:	90 91 15 22 	lds	r25, 0x2215	; 0x802215 <udc_device_status+0x1>
     de6:	8d 7f       	andi	r24, 0xFD	; 253
     de8:	80 93 14 22 	sts	0x2214, r24	; 0x802214 <udc_device_status>
     dec:	90 93 15 22 	sts	0x2215, r25	; 0x802215 <udc_device_status+0x1>
     df0:	2b c1       	rjmp	.+598    	; 0x1048 <udc_process_setup+0x4f8>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     df2:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <udd_g_ctrlreq+0x6>
     df6:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <udd_g_ctrlreq+0x7>
     dfa:	89 2b       	or	r24, r25
     dfc:	09 f0       	breq	.+2      	; 0xe00 <udc_process_setup+0x2b0>
     dfe:	9b c0       	rjmp	.+310    	; 0xf36 <udc_process_setup+0x3e6>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     e00:	fb d4       	rcall	.+2550   	; 0x17f8 <udd_getaddress>
     e02:	88 23       	and	r24, r24
     e04:	09 f4       	brne	.+2      	; 0xe08 <udc_process_setup+0x2b8>
     e06:	97 c0       	rjmp	.+302    	; 0xf36 <udc_process_setup+0x3e6>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     e08:	20 91 43 23 	lds	r18, 0x2343	; 0x802343 <udd_g_ctrlreq+0x2>
     e0c:	30 91 44 23 	lds	r19, 0x2344	; 0x802344 <udd_g_ctrlreq+0x3>
     e10:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
     e12:	e0 91 72 20 	lds	r30, 0x2072	; 0x802072 <udc_config>
     e16:	f0 91 73 20 	lds	r31, 0x2073	; 0x802073 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     e1a:	81 89       	ldd	r24, Z+17	; 0x11
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	82 17       	cp	r24, r18
     e20:	93 07       	cpc	r25, r19
     e22:	08 f4       	brcc	.+2      	; 0xe26 <udc_process_setup+0x2d6>
     e24:	88 c0       	rjmp	.+272    	; 0xf36 <udc_process_setup+0x3e6>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     e26:	3d de       	rcall	.-902    	; 0xaa2 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     e28:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <udd_g_ctrlreq+0x2>
     e2c:	90 91 44 23 	lds	r25, 0x2344	; 0x802344 <udd_g_ctrlreq+0x3>
     e30:	80 93 10 22 	sts	0x2210, r24	; 0x802210 <udc_num_configuration>
	if (udc_num_configuration == 0) {
     e34:	88 23       	and	r24, r24
     e36:	09 f4       	brne	.+2      	; 0xe3a <udc_process_setup+0x2ea>
     e38:	07 c1       	rjmp	.+526    	; 0x1048 <udc_process_setup+0x4f8>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     e3a:	99 27       	eor	r25, r25
     e3c:	81 50       	subi	r24, 0x01	; 1
     e3e:	90 4c       	sbci	r25, 0xC0	; 192
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	e0 91 74 20 	lds	r30, 0x2074	; 0x802074 <udc_config+0x2>
     e4c:	f0 91 75 20 	lds	r31, 0x2075	; 0x802075 <udc_config+0x3>
     e50:	e8 0f       	add	r30, r24
     e52:	f9 1f       	adc	r31, r25
     e54:	e0 93 0e 22 	sts	0x220E, r30	; 0x80220e <udc_ptr_conf>
     e58:	f0 93 0f 22 	sts	0x220F, r31	; 0x80220f <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     e5c:	01 90       	ld	r0, Z+
     e5e:	f0 81       	ld	r31, Z
     e60:	e0 2d       	mov	r30, r0
     e62:	84 81       	ldd	r24, Z+4	; 0x04
     e64:	88 23       	and	r24, r24
     e66:	09 f4       	brne	.+2      	; 0xe6a <udc_process_setup+0x31a>
     e68:	ef c0       	rjmp	.+478    	; 0x1048 <udc_process_setup+0x4f8>
     e6a:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	8c 2f       	mov	r24, r28
     e70:	e4 dd       	rcall	.-1080   	; 0xa3a <udc_iface_enable>
     e72:	88 23       	and	r24, r24
     e74:	09 f4       	brne	.+2      	; 0xe78 <udc_process_setup+0x328>
     e76:	5f c0       	rjmp	.+190    	; 0xf36 <udc_process_setup+0x3e6>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     e78:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     e7a:	e0 91 0e 22 	lds	r30, 0x220E	; 0x80220e <udc_ptr_conf>
     e7e:	f0 91 0f 22 	lds	r31, 0x220F	; 0x80220f <udc_ptr_conf+0x1>
     e82:	01 90       	ld	r0, Z+
     e84:	f0 81       	ld	r31, Z
     e86:	e0 2d       	mov	r30, r0
     e88:	84 81       	ldd	r24, Z+4	; 0x04
     e8a:	c8 17       	cp	r28, r24
     e8c:	78 f3       	brcs	.-34     	; 0xe6c <udc_process_setup+0x31c>
     e8e:	dc c0       	rjmp	.+440    	; 0x1048 <udc_process_setup+0x4f8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     e90:	81 30       	cpi	r24, 0x01	; 1
     e92:	e1 f4       	brne	.+56     	; 0xecc <udc_process_setup+0x37c>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     e94:	90 91 42 23 	lds	r25, 0x2342	; 0x802342 <udd_g_ctrlreq+0x1>
     e98:	9b 30       	cpi	r25, 0x0B	; 11
     e9a:	c1 f4       	brne	.+48     	; 0xecc <udc_process_setup+0x37c>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     e9c:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <udd_g_ctrlreq+0x6>
     ea0:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <udd_g_ctrlreq+0x7>
     ea4:	89 2b       	or	r24, r25
     ea6:	09 f0       	breq	.+2      	; 0xeaa <udc_process_setup+0x35a>
     ea8:	46 c0       	rjmp	.+140    	; 0xf36 <udc_process_setup+0x3e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     eaa:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <udc_num_configuration>
     eae:	88 23       	and	r24, r24
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <udc_process_setup+0x364>
     eb2:	41 c0       	rjmp	.+130    	; 0xf36 <udc_process_setup+0x3e6>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     eb4:	e1 e4       	ldi	r30, 0x41	; 65
     eb6:	f3 e2       	ldi	r31, 0x23	; 35
     eb8:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     eba:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     ebc:	8c 2f       	mov	r24, r28
     ebe:	7b dd       	rcall	.-1290   	; 0x9b6 <udc_iface_disable>
     ec0:	88 23       	and	r24, r24
     ec2:	c9 f1       	breq	.+114    	; 0xf36 <udc_process_setup+0x3e6>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     ec4:	6d 2f       	mov	r22, r29
     ec6:	8c 2f       	mov	r24, r28
     ec8:	b8 dd       	rcall	.-1168   	; 0xa3a <udc_iface_enable>
     eca:	33 c0       	rjmp	.+102    	; 0xf32 <udc_process_setup+0x3e2>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     ecc:	82 30       	cpi	r24, 0x02	; 2
     ece:	99 f5       	brne	.+102    	; 0xf36 <udc_process_setup+0x3e6>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     ed0:	80 91 42 23 	lds	r24, 0x2342	; 0x802342 <udd_g_ctrlreq+0x1>
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	19 f0       	breq	.+6      	; 0xede <udc_process_setup+0x38e>
     ed8:	83 30       	cpi	r24, 0x03	; 3
     eda:	89 f0       	breq	.+34     	; 0xefe <udc_process_setup+0x3ae>
     edc:	29 c0       	rjmp	.+82     	; 0xf30 <udc_process_setup+0x3e0>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     ede:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <udd_g_ctrlreq+0x6>
     ee2:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <udd_g_ctrlreq+0x7>
     ee6:	89 2b       	or	r24, r25
     ee8:	31 f5       	brne	.+76     	; 0xf36 <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     eea:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <udd_g_ctrlreq+0x2>
     eee:	90 91 44 23 	lds	r25, 0x2344	; 0x802344 <udd_g_ctrlreq+0x3>
     ef2:	89 2b       	or	r24, r25
     ef4:	01 f5       	brne	.+64     	; 0xf36 <udc_process_setup+0x3e6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     ef6:	80 91 45 23 	lds	r24, 0x2345	; 0x802345 <udd_g_ctrlreq+0x4>
     efa:	33 d5       	rcall	.+2662   	; 0x1962 <udd_ep_clear_halt>
     efc:	1a c0       	rjmp	.+52     	; 0xf32 <udc_process_setup+0x3e2>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     efe:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <udd_g_ctrlreq+0x6>
     f02:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <udd_g_ctrlreq+0x7>
     f06:	89 2b       	or	r24, r25
     f08:	b1 f4       	brne	.+44     	; 0xf36 <udc_process_setup+0x3e6>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     f0a:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <udd_g_ctrlreq+0x2>
     f0e:	90 91 44 23 	lds	r25, 0x2344	; 0x802344 <udd_g_ctrlreq+0x3>
     f12:	89 2b       	or	r24, r25
     f14:	81 f4       	brne	.+32     	; 0xf36 <udc_process_setup+0x3e6>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     f16:	c1 e4       	ldi	r28, 0x41	; 65
     f18:	d3 e2       	ldi	r29, 0x23	; 35
     f1a:	8c 81       	ldd	r24, Y+4	; 0x04
     f1c:	20 d6       	rcall	.+3136   	; 0x1b5e <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     f1e:	8c 81       	ldd	r24, Y+4	; 0x04
     f20:	83 d6       	rcall	.+3334   	; 0x1c28 <udd_ep_set_halt>
     f22:	07 c0       	rjmp	.+14     	; 0xf32 <udc_process_setup+0x3e2>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	05 c0       	rjmp	.+10     	; 0xf32 <udc_process_setup+0x3e2>
				break;
			}
		}
#endif
	}
	return false;
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	03 c0       	rjmp	.+6      	; 0xf32 <udc_process_setup+0x3e2>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	01 c0       	rjmp	.+2      	; 0xf32 <udc_process_setup+0x3e2>
				break;
			}
		}
#endif
	}
	return false;
     f30:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
     f32:	81 11       	cpse	r24, r1
     f34:	8a c0       	rjmp	.+276    	; 0x104a <udc_process_setup+0x4fa>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     f36:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <udd_g_ctrlreq>
     f3a:	8f 71       	andi	r24, 0x1F	; 31
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	71 f5       	brne	.+92     	; 0xf9c <udc_process_setup+0x44c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     f40:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <udc_num_configuration>
     f44:	88 23       	and	r24, r24
     f46:	51 f1       	breq	.+84     	; 0xf9c <udc_process_setup+0x44c>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     f48:	00 91 45 23 	lds	r16, 0x2345	; 0x802345 <udd_g_ctrlreq+0x4>
     f4c:	10 91 46 23 	lds	r17, 0x2346	; 0x802346 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     f50:	c0 91 0e 22 	lds	r28, 0x220E	; 0x80220e <udc_ptr_conf>
     f54:	d0 91 0f 22 	lds	r29, 0x220F	; 0x80220f <udc_ptr_conf+0x1>
     f58:	e8 81       	ld	r30, Y
     f5a:	f9 81       	ldd	r31, Y+1	; 0x01
     f5c:	84 81       	ldd	r24, Z+4	; 0x04
     f5e:	08 17       	cp	r16, r24
     f60:	e8 f4       	brcc	.+58     	; 0xf9c <udc_process_setup+0x44c>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	80 2f       	mov	r24, r16
     f66:	ed dc       	rcall	.-1574   	; 0x942 <udc_update_iface_desc>
     f68:	88 23       	and	r24, r24
     f6a:	c1 f0       	breq	.+48     	; 0xf9c <udc_process_setup+0x44c>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     f6c:	f8 01       	movw	r30, r16
     f6e:	ff 27       	eor	r31, r31
     f70:	cf 01       	movw	r24, r30
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	ea 81       	ldd	r30, Y+2	; 0x02
     f78:	fb 81       	ldd	r31, Y+3	; 0x03
     f7a:	e8 0f       	add	r30, r24
     f7c:	f9 1f       	adc	r31, r25
     f7e:	c0 81       	ld	r28, Z
     f80:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     f82:	ee 81       	ldd	r30, Y+6	; 0x06
     f84:	ff 81       	ldd	r31, Y+7	; 0x07
     f86:	19 95       	eicall
     f88:	68 2f       	mov	r22, r24
     f8a:	80 2f       	mov	r24, r16
     f8c:	da dc       	rcall	.-1612   	; 0x942 <udc_update_iface_desc>
     f8e:	88 23       	and	r24, r24
     f90:	29 f0       	breq	.+10     	; 0xf9c <udc_process_setup+0x44c>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
     f92:	ec 81       	ldd	r30, Y+4	; 0x04
     f94:	fd 81       	ldd	r31, Y+5	; 0x05
     f96:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
     f98:	81 11       	cpse	r24, r1
     f9a:	57 c0       	rjmp	.+174    	; 0x104a <udc_process_setup+0x4fa>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     f9c:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <udd_g_ctrlreq>
     fa0:	8f 71       	andi	r24, 0x1F	; 31
     fa2:	82 30       	cpi	r24, 0x02	; 2
     fa4:	09 f0       	breq	.+2      	; 0xfa8 <udc_process_setup+0x458>
     fa6:	40 c0       	rjmp	.+128    	; 0x1028 <udc_process_setup+0x4d8>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     fa8:	80 91 10 22 	lds	r24, 0x2210	; 0x802210 <udc_num_configuration>
     fac:	88 23       	and	r24, r24
     fae:	b1 f1       	breq	.+108    	; 0x101c <udc_process_setup+0x4cc>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     fb0:	a0 91 0e 22 	lds	r26, 0x220E	; 0x80220e <udc_ptr_conf>
     fb4:	b0 91 0f 22 	lds	r27, 0x220F	; 0x80220f <udc_ptr_conf+0x1>
     fb8:	ed 91       	ld	r30, X+
     fba:	fc 91       	ld	r31, X
     fbc:	11 97       	sbiw	r26, 0x01	; 1
     fbe:	84 81       	ldd	r24, Z+4	; 0x04
     fc0:	88 23       	and	r24, r24
     fc2:	71 f1       	breq	.+92     	; 0x1020 <udc_process_setup+0x4d0>
     fc4:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     fc6:	ec 2f       	mov	r30, r28
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	ee 0f       	add	r30, r30
     fcc:	ff 1f       	adc	r31, r31
     fce:	12 96       	adiw	r26, 0x02	; 2
     fd0:	8d 91       	ld	r24, X+
     fd2:	9c 91       	ld	r25, X
     fd4:	13 97       	sbiw	r26, 0x03	; 3
     fd6:	e8 0f       	add	r30, r24
     fd8:	f9 1f       	adc	r31, r25
     fda:	00 81       	ld	r16, Z
     fdc:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     fde:	d8 01       	movw	r26, r16
     fe0:	16 96       	adiw	r26, 0x06	; 6
     fe2:	ed 91       	ld	r30, X+
     fe4:	fc 91       	ld	r31, X
     fe6:	17 97       	sbiw	r26, 0x07	; 7
     fe8:	19 95       	eicall
     fea:	68 2f       	mov	r22, r24
     fec:	8c 2f       	mov	r24, r28
     fee:	a9 dc       	rcall	.-1710   	; 0x942 <udc_update_iface_desc>
     ff0:	88 23       	and	r24, r24
     ff2:	59 f1       	breq	.+86     	; 0x104a <udc_process_setup+0x4fa>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
     ff4:	d8 01       	movw	r26, r16
     ff6:	14 96       	adiw	r26, 0x04	; 4
     ff8:	ed 91       	ld	r30, X+
     ffa:	fc 91       	ld	r31, X
     ffc:	15 97       	sbiw	r26, 0x05	; 5
     ffe:	19 95       	eicall
    1000:	81 11       	cpse	r24, r1
    1002:	23 c0       	rjmp	.+70     	; 0x104a <udc_process_setup+0x4fa>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1004:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1006:	a0 91 0e 22 	lds	r26, 0x220E	; 0x80220e <udc_ptr_conf>
    100a:	b0 91 0f 22 	lds	r27, 0x220F	; 0x80220f <udc_ptr_conf+0x1>
    100e:	ed 91       	ld	r30, X+
    1010:	fc 91       	ld	r31, X
    1012:	11 97       	sbiw	r26, 0x01	; 1
    1014:	94 81       	ldd	r25, Z+4	; 0x04
    1016:	c9 17       	cp	r28, r25
    1018:	b0 f2       	brcs	.-84     	; 0xfc6 <udc_process_setup+0x476>
    101a:	17 c0       	rjmp	.+46     	; 0x104a <udc_process_setup+0x4fa>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	15 c0       	rjmp	.+42     	; 0x104a <udc_process_setup+0x4fa>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	13 c0       	rjmp	.+38     	; 0x104a <udc_process_setup+0x4fa>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	11 c0       	rjmp	.+34     	; 0x104a <udc_process_setup+0x4fa>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	0f c0       	rjmp	.+30     	; 0x104a <udc_process_setup+0x4fa>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    102c:	98 2f       	mov	r25, r24
    102e:	90 76       	andi	r25, 0x60	; 96
    1030:	09 f0       	breq	.+2      	; 0x1034 <udc_process_setup+0x4e4>
    1032:	81 cf       	rjmp	.-254    	; 0xf36 <udc_process_setup+0x3e6>
    1034:	a6 cd       	rjmp	.-1204   	; 0xb82 <udc_process_setup+0x32>
    1036:	98 2f       	mov	r25, r24
    1038:	90 76       	andi	r25, 0x60	; 96
    103a:	09 f0       	breq	.+2      	; 0x103e <udc_process_setup+0x4ee>
    103c:	7c cf       	rjmp	.-264    	; 0xf36 <udc_process_setup+0x3e6>
    103e:	a2 ce       	rjmp	.-700    	; 0xd84 <udc_process_setup+0x234>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1040:	22 e1       	ldi	r18, 0x12	; 18
		str = udc_string_product_name;
    1042:	88 e4       	ldi	r24, 0x48	; 72
    1044:	90 e2       	ldi	r25, 0x20	; 32
    1046:	18 ce       	rjmp	.-976    	; 0xc78 <udc_process_setup+0x128>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1048:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	1f 91       	pop	r17
    1050:	0f 91       	pop	r16
    1052:	08 95       	ret

00001054 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	1f 92       	push	r1
    105a:	1f 92       	push	r1
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    1060:	81 11       	cpse	r24, r1
    1062:	26 c0       	rjmp	.+76     	; 0x10b0 <udd_sleep_mode+0x5c>
    1064:	90 91 40 23 	lds	r25, 0x2340	; 0x802340 <udd_b_idle>
    1068:	99 23       	and	r25, r25
    106a:	f9 f0       	breq	.+62     	; 0x10aa <udd_sleep_mode+0x56>
    106c:	90 91 52 23 	lds	r25, 0x2352	; 0x802352 <sleepmgr_locks+0x1>
    1070:	91 11       	cpse	r25, r1
    1072:	01 c0       	rjmp	.+2      	; 0x1076 <udd_sleep_mode+0x22>
    1074:	ff cf       	rjmp	.-2      	; 0x1074 <udd_sleep_mode+0x20>
    1076:	9f b7       	in	r25, 0x3f	; 63
    1078:	9a 83       	std	Y+2, r25	; 0x02
    107a:	f8 94       	cli
    107c:	2a 81       	ldd	r18, Y+2	; 0x02
    107e:	e1 e5       	ldi	r30, 0x51	; 81
    1080:	f3 e2       	ldi	r31, 0x23	; 35
    1082:	91 81       	ldd	r25, Z+1	; 0x01
    1084:	91 50       	subi	r25, 0x01	; 1
    1086:	91 83       	std	Z+1, r25	; 0x01
    1088:	2f bf       	out	0x3f, r18	; 63
    108a:	0f c0       	rjmp	.+30     	; 0x10aa <udd_sleep_mode+0x56>
    108c:	90 91 52 23 	lds	r25, 0x2352	; 0x802352 <sleepmgr_locks+0x1>
    1090:	9f 3f       	cpi	r25, 0xFF	; 255
    1092:	09 f4       	brne	.+2      	; 0x1096 <udd_sleep_mode+0x42>
    1094:	ff cf       	rjmp	.-2      	; 0x1094 <udd_sleep_mode+0x40>
    1096:	9f b7       	in	r25, 0x3f	; 63
    1098:	99 83       	std	Y+1, r25	; 0x01
    109a:	f8 94       	cli
    109c:	29 81       	ldd	r18, Y+1	; 0x01
    109e:	e1 e5       	ldi	r30, 0x51	; 81
    10a0:	f3 e2       	ldi	r31, 0x23	; 35
    10a2:	91 81       	ldd	r25, Z+1	; 0x01
    10a4:	9f 5f       	subi	r25, 0xFF	; 255
    10a6:	91 83       	std	Z+1, r25	; 0x01
    10a8:	2f bf       	out	0x3f, r18	; 63
    10aa:	80 93 40 23 	sts	0x2340, r24	; 0x802340 <udd_b_idle>
    10ae:	05 c0       	rjmp	.+10     	; 0x10ba <udd_sleep_mode+0x66>
    10b0:	90 91 40 23 	lds	r25, 0x2340	; 0x802340 <udd_b_idle>
    10b4:	99 23       	and	r25, r25
    10b6:	51 f3       	breq	.-44     	; 0x108c <udd_sleep_mode+0x38>
    10b8:	f8 cf       	rjmp	.-16     	; 0x10aa <udd_sleep_mode+0x56>
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	08 95       	ret

000010c4 <udd_ctrl_init>:
    10c4:	0f 93       	push	r16
    10c6:	e8 ec       	ldi	r30, 0xC8	; 200
    10c8:	f4 e0       	ldi	r31, 0x04	; 4
    10ca:	80 81       	ld	r24, Z
    10cc:	8f 7d       	andi	r24, 0xDF	; 223
    10ce:	80 83       	st	Z, r24
    10d0:	80 81       	ld	r24, Z
    10d2:	8f 7d       	andi	r24, 0xDF	; 223
    10d4:	80 83       	st	Z, r24
    10d6:	e4 e1       	ldi	r30, 0x14	; 20
    10d8:	f3 e2       	ldi	r31, 0x23	; 35
    10da:	02 e0       	ldi	r16, 0x02	; 2
    10dc:	05 93       	las	Z, r16
    10de:	10 92 16 23 	sts	0x2316, r1	; 0x802316 <udd_sram+0x16>
    10e2:	10 92 17 23 	sts	0x2317, r1	; 0x802317 <udd_sram+0x17>
    10e6:	00 e2       	ldi	r16, 0x20	; 32
    10e8:	06 93       	lac	Z, r16
    10ea:	00 e4       	ldi	r16, 0x40	; 64
    10ec:	06 93       	lac	Z, r16
    10ee:	ec e0       	ldi	r30, 0x0C	; 12
    10f0:	f3 e2       	ldi	r31, 0x23	; 35
    10f2:	00 e4       	ldi	r16, 0x40	; 64
    10f4:	06 93       	lac	Z, r16
    10f6:	e1 e4       	ldi	r30, 0x41	; 65
    10f8:	f3 e2       	ldi	r31, 0x23	; 35
    10fa:	14 86       	std	Z+12, r1	; 0x0c
    10fc:	15 86       	std	Z+13, r1	; 0x0d
    10fe:	16 86       	std	Z+14, r1	; 0x0e
    1100:	17 86       	std	Z+15, r1	; 0x0f
    1102:	12 86       	std	Z+10, r1	; 0x0a
    1104:	13 86       	std	Z+11, r1	; 0x0b
    1106:	10 92 ff 22 	sts	0x22FF, r1	; 0x8022ff <udd_ep_control_state>
    110a:	0f 91       	pop	r16
    110c:	08 95       	ret

0000110e <udd_ctrl_stall_data>:
    110e:	0f 93       	push	r16
    1110:	85 e0       	ldi	r24, 0x05	; 5
    1112:	80 93 ff 22 	sts	0x22FF, r24	; 0x8022ff <udd_ep_control_state>
    1116:	e5 e1       	ldi	r30, 0x15	; 21
    1118:	f3 e2       	ldi	r31, 0x23	; 35
    111a:	04 e0       	ldi	r16, 0x04	; 4
    111c:	05 93       	las	Z, r16
    111e:	ed e0       	ldi	r30, 0x0D	; 13
    1120:	f3 e2       	ldi	r31, 0x23	; 35
    1122:	04 e0       	ldi	r16, 0x04	; 4
    1124:	05 93       	las	Z, r16
    1126:	0f 91       	pop	r16
    1128:	08 95       	ret

0000112a <udd_ctrl_send_zlp_in>:
    112a:	0f 93       	push	r16
    112c:	83 e0       	ldi	r24, 0x03	; 3
    112e:	80 93 ff 22 	sts	0x22FF, r24	; 0x8022ff <udd_ep_control_state>
    1132:	10 92 16 23 	sts	0x2316, r1	; 0x802316 <udd_sram+0x16>
    1136:	10 92 17 23 	sts	0x2317, r1	; 0x802317 <udd_sram+0x17>
    113a:	e4 e1       	ldi	r30, 0x14	; 20
    113c:	f3 e2       	ldi	r31, 0x23	; 35
    113e:	02 e0       	ldi	r16, 0x02	; 2
    1140:	06 93       	lac	Z, r16
    1142:	0f 91       	pop	r16
    1144:	08 95       	ret

00001146 <udd_ctrl_endofrequest>:
    1146:	e0 91 4d 23 	lds	r30, 0x234D	; 0x80234d <udd_g_ctrlreq+0xc>
    114a:	f0 91 4e 23 	lds	r31, 0x234E	; 0x80234e <udd_g_ctrlreq+0xd>
    114e:	30 97       	sbiw	r30, 0x00	; 0
    1150:	09 f0       	breq	.+2      	; 0x1154 <udd_ctrl_endofrequest+0xe>
    1152:	19 95       	eicall
    1154:	08 95       	ret

00001156 <udd_ctrl_in_sent>:
    1156:	0f 93       	push	r16
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	80 91 ff 22 	lds	r24, 0x22FF	; 0x8022ff <udd_ep_control_state>
    1160:	83 30       	cpi	r24, 0x03	; 3
    1162:	19 f4       	brne	.+6      	; 0x116a <udd_ctrl_in_sent+0x14>
    1164:	f0 df       	rcall	.-32     	; 0x1146 <udd_ctrl_endofrequest>
    1166:	ae df       	rcall	.-164    	; 0x10c4 <udd_ctrl_init>
    1168:	5e c0       	rjmp	.+188    	; 0x1226 <udd_ctrl_in_sent+0xd0>
    116a:	80 91 fb 22 	lds	r24, 0x22FB	; 0x8022fb <udd_ctrl_payload_nb_trans>
    116e:	90 91 fc 22 	lds	r25, 0x22FC	; 0x8022fc <udd_ctrl_payload_nb_trans+0x1>
    1172:	c0 91 4b 23 	lds	r28, 0x234B	; 0x80234b <udd_g_ctrlreq+0xa>
    1176:	d0 91 4c 23 	lds	r29, 0x234C	; 0x80234c <udd_g_ctrlreq+0xb>
    117a:	c8 1b       	sub	r28, r24
    117c:	d9 0b       	sbc	r29, r25
    117e:	71 f5       	brne	.+92     	; 0x11dc <udd_ctrl_in_sent+0x86>
    1180:	20 91 fd 22 	lds	r18, 0x22FD	; 0x8022fd <udd_ctrl_prev_payload_nb_trans>
    1184:	30 91 fe 22 	lds	r19, 0x22FE	; 0x8022fe <udd_ctrl_prev_payload_nb_trans+0x1>
    1188:	82 0f       	add	r24, r18
    118a:	93 1f       	adc	r25, r19
    118c:	80 93 fd 22 	sts	0x22FD, r24	; 0x8022fd <udd_ctrl_prev_payload_nb_trans>
    1190:	90 93 fe 22 	sts	0x22FE, r25	; 0x8022fe <udd_ctrl_prev_payload_nb_trans+0x1>
    1194:	20 91 47 23 	lds	r18, 0x2347	; 0x802347 <udd_g_ctrlreq+0x6>
    1198:	30 91 48 23 	lds	r19, 0x2348	; 0x802348 <udd_g_ctrlreq+0x7>
    119c:	82 17       	cp	r24, r18
    119e:	93 07       	cpc	r25, r19
    11a0:	21 f0       	breq	.+8      	; 0x11aa <udd_ctrl_in_sent+0x54>
    11a2:	80 91 16 22 	lds	r24, 0x2216	; 0x802216 <b_shortpacket.5383>
    11a6:	88 23       	and	r24, r24
    11a8:	41 f0       	breq	.+16     	; 0x11ba <udd_ctrl_in_sent+0x64>
    11aa:	84 e0       	ldi	r24, 0x04	; 4
    11ac:	80 93 ff 22 	sts	0x22FF, r24	; 0x8022ff <udd_ep_control_state>
    11b0:	ec e0       	ldi	r30, 0x0C	; 12
    11b2:	f3 e2       	ldi	r31, 0x23	; 35
    11b4:	02 e0       	ldi	r16, 0x02	; 2
    11b6:	06 93       	lac	Z, r16
    11b8:	36 c0       	rjmp	.+108    	; 0x1226 <udd_ctrl_in_sent+0xd0>
    11ba:	e0 91 4f 23 	lds	r30, 0x234F	; 0x80234f <udd_g_ctrlreq+0xe>
    11be:	f0 91 50 23 	lds	r31, 0x2350	; 0x802350 <udd_g_ctrlreq+0xf>
    11c2:	30 97       	sbiw	r30, 0x00	; 0
    11c4:	99 f0       	breq	.+38     	; 0x11ec <udd_ctrl_in_sent+0x96>
    11c6:	19 95       	eicall
    11c8:	88 23       	and	r24, r24
    11ca:	81 f0       	breq	.+32     	; 0x11ec <udd_ctrl_in_sent+0x96>
    11cc:	10 92 fb 22 	sts	0x22FB, r1	; 0x8022fb <udd_ctrl_payload_nb_trans>
    11d0:	10 92 fc 22 	sts	0x22FC, r1	; 0x8022fc <udd_ctrl_payload_nb_trans+0x1>
    11d4:	c0 91 4b 23 	lds	r28, 0x234B	; 0x80234b <udd_g_ctrlreq+0xa>
    11d8:	d0 91 4c 23 	lds	r29, 0x234C	; 0x80234c <udd_g_ctrlreq+0xb>
    11dc:	c0 34       	cpi	r28, 0x40	; 64
    11de:	d1 05       	cpc	r29, r1
    11e0:	28 f0       	brcs	.+10     	; 0x11ec <udd_ctrl_in_sent+0x96>
    11e2:	10 92 16 22 	sts	0x2216, r1	; 0x802216 <b_shortpacket.5383>
    11e6:	c0 e4       	ldi	r28, 0x40	; 64
    11e8:	d0 e0       	ldi	r29, 0x00	; 0
    11ea:	03 c0       	rjmp	.+6      	; 0x11f2 <udd_ctrl_in_sent+0x9c>
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	80 93 16 22 	sts	0x2216, r24	; 0x802216 <b_shortpacket.5383>
    11f2:	e0 e0       	ldi	r30, 0x00	; 0
    11f4:	f3 e2       	ldi	r31, 0x23	; 35
    11f6:	c6 8b       	std	Z+22, r28	; 0x16
    11f8:	d7 8b       	std	Z+23, r29	; 0x17
    11fa:	80 91 fb 22 	lds	r24, 0x22FB	; 0x8022fb <udd_ctrl_payload_nb_trans>
    11fe:	90 91 fc 22 	lds	r25, 0x22FC	; 0x8022fc <udd_ctrl_payload_nb_trans+0x1>
    1202:	20 91 49 23 	lds	r18, 0x2349	; 0x802349 <udd_g_ctrlreq+0x8>
    1206:	30 91 4a 23 	lds	r19, 0x234A	; 0x80234a <udd_g_ctrlreq+0x9>
    120a:	28 0f       	add	r18, r24
    120c:	39 1f       	adc	r19, r25
    120e:	20 8f       	std	Z+24, r18	; 0x18
    1210:	31 8f       	std	Z+25, r19	; 0x19
    1212:	c8 0f       	add	r28, r24
    1214:	d9 1f       	adc	r29, r25
    1216:	c0 93 fb 22 	sts	0x22FB, r28	; 0x8022fb <udd_ctrl_payload_nb_trans>
    121a:	d0 93 fc 22 	sts	0x22FC, r29	; 0x8022fc <udd_ctrl_payload_nb_trans+0x1>
    121e:	e4 e1       	ldi	r30, 0x14	; 20
    1220:	f3 e2       	ldi	r31, 0x23	; 35
    1222:	02 e0       	ldi	r16, 0x02	; 2
    1224:	06 93       	lac	Z, r16
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	0f 91       	pop	r16
    122c:	08 95       	ret

0000122e <udd_ep_get_size>:
    122e:	fc 01       	movw	r30, r24
    1230:	81 81       	ldd	r24, Z+1	; 0x01
    1232:	e8 2f       	mov	r30, r24
    1234:	e7 70       	andi	r30, 0x07	; 7
    1236:	8e 2f       	mov	r24, r30
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	fc 01       	movw	r30, r24
    123c:	31 97       	sbiw	r30, 0x01	; 1
    123e:	e7 30       	cpi	r30, 0x07	; 7
    1240:	f1 05       	cpc	r31, r1
    1242:	d0 f4       	brcc	.+52     	; 0x1278 <udd_ep_get_size+0x4a>
    1244:	88 27       	eor	r24, r24
    1246:	e2 50       	subi	r30, 0x02	; 2
    1248:	ff 4f       	sbci	r31, 0xFF	; 255
    124a:	8f 4f       	sbci	r24, 0xFF	; 255
    124c:	93 c7       	rjmp	.+3878   	; 0x2174 <__tablejump2__>
    124e:	80 e1       	ldi	r24, 0x10	; 16
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	08 95       	ret
    1254:	80 e2       	ldi	r24, 0x20	; 32
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	08 95       	ret
    125a:	80 e4       	ldi	r24, 0x40	; 64
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	08 95       	ret
    1260:	80 e8       	ldi	r24, 0x80	; 128
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	08 95       	ret
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	91 e0       	ldi	r25, 0x01	; 1
    126a:	08 95       	ret
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	92 e0       	ldi	r25, 0x02	; 2
    1270:	08 95       	ret
    1272:	8f ef       	ldi	r24, 0xFF	; 255
    1274:	93 e0       	ldi	r25, 0x03	; 3
    1276:	08 95       	ret
    1278:	88 e0       	ldi	r24, 0x08	; 8
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	08 95       	ret

0000127e <udd_ep_get_job>:
    127e:	28 2f       	mov	r18, r24
    1280:	2f 70       	andi	r18, 0x0F	; 15
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	22 0f       	add	r18, r18
    1286:	33 1f       	adc	r19, r19
    1288:	08 2e       	mov	r0, r24
    128a:	00 0c       	add	r0, r0
    128c:	99 0b       	sbc	r25, r25
    128e:	88 27       	eor	r24, r24
    1290:	99 0f       	add	r25, r25
    1292:	88 1f       	adc	r24, r24
    1294:	99 27       	eor	r25, r25
    1296:	82 0f       	add	r24, r18
    1298:	93 1f       	adc	r25, r19
    129a:	02 97       	sbiw	r24, 0x02	; 2
    129c:	9c 01       	movw	r18, r24
    129e:	22 0f       	add	r18, r18
    12a0:	33 1f       	adc	r19, r19
    12a2:	22 0f       	add	r18, r18
    12a4:	33 1f       	adc	r19, r19
    12a6:	22 0f       	add	r18, r18
    12a8:	33 1f       	adc	r19, r19
    12aa:	82 0f       	add	r24, r18
    12ac:	93 1f       	adc	r25, r19
    12ae:	89 56       	subi	r24, 0x69	; 105
    12b0:	9d 4d       	sbci	r25, 0xDD	; 221
    12b2:	08 95       	ret

000012b4 <udd_ctrl_interrupt_tc_setup>:
    12b4:	0f 93       	push	r16
    12b6:	cf 93       	push	r28
    12b8:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    12bc:	80 ff       	sbrs	r24, 0
    12be:	64 c0       	rjmp	.+200    	; 0x1388 <udd_ctrl_interrupt_tc_setup+0xd4>
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    12c6:	ec e0       	ldi	r30, 0x0C	; 12
    12c8:	f3 e2       	ldi	r31, 0x23	; 35
    12ca:	00 e8       	ldi	r16, 0x80	; 128
    12cc:	06 93       	lac	Z, r16
    12ce:	e4 e1       	ldi	r30, 0x14	; 20
    12d0:	f3 e2       	ldi	r31, 0x23	; 35
    12d2:	00 e8       	ldi	r16, 0x80	; 128
    12d4:	06 93       	lac	Z, r16
    12d6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    12da:	ec e0       	ldi	r30, 0x0C	; 12
    12dc:	f3 e2       	ldi	r31, 0x23	; 35
    12de:	00 e1       	ldi	r16, 0x10	; 16
    12e0:	06 93       	lac	Z, r16
    12e2:	80 91 ff 22 	lds	r24, 0x22FF	; 0x8022ff <udd_ep_control_state>
    12e6:	88 23       	and	r24, r24
    12e8:	29 f0       	breq	.+10     	; 0x12f4 <udd_ctrl_interrupt_tc_setup+0x40>
    12ea:	83 50       	subi	r24, 0x03	; 3
    12ec:	82 30       	cpi	r24, 0x02	; 2
    12ee:	08 f4       	brcc	.+2      	; 0x12f2 <udd_ctrl_interrupt_tc_setup+0x3e>
    12f0:	2a df       	rcall	.-428    	; 0x1146 <udd_ctrl_endofrequest>
    12f2:	e8 de       	rcall	.-560    	; 0x10c4 <udd_ctrl_init>
    12f4:	80 91 0e 23 	lds	r24, 0x230E	; 0x80230e <udd_sram+0xe>
    12f8:	90 91 0f 23 	lds	r25, 0x230F	; 0x80230f <udd_sram+0xf>
    12fc:	08 97       	sbiw	r24, 0x08	; 8
    12fe:	09 f0       	breq	.+2      	; 0x1302 <udd_ctrl_interrupt_tc_setup+0x4e>
    1300:	45 c0       	rjmp	.+138    	; 0x138c <udd_ctrl_interrupt_tc_setup+0xd8>
    1302:	88 e0       	ldi	r24, 0x08	; 8
    1304:	eb eb       	ldi	r30, 0xBB	; 187
    1306:	f2 e2       	ldi	r31, 0x22	; 34
    1308:	a1 e4       	ldi	r26, 0x41	; 65
    130a:	b3 e2       	ldi	r27, 0x23	; 35
    130c:	01 90       	ld	r0, Z+
    130e:	0d 92       	st	X+, r0
    1310:	8a 95       	dec	r24
    1312:	e1 f7       	brne	.-8      	; 0x130c <udd_ctrl_interrupt_tc_setup+0x58>
    1314:	e8 ec       	ldi	r30, 0xC8	; 200
    1316:	f4 e0       	ldi	r31, 0x04	; 4
    1318:	80 81       	ld	r24, Z
    131a:	80 62       	ori	r24, 0x20	; 32
    131c:	80 83       	st	Z, r24
    131e:	80 81       	ld	r24, Z
    1320:	80 62       	ori	r24, 0x20	; 32
    1322:	80 83       	st	Z, r24
    1324:	15 dc       	rcall	.-2006   	; 0xb50 <udc_process_setup>
    1326:	c8 2f       	mov	r28, r24
    1328:	81 11       	cpse	r24, r1
    132a:	03 c0       	rjmp	.+6      	; 0x1332 <udd_ctrl_interrupt_tc_setup+0x7e>
    132c:	f0 de       	rcall	.-544    	; 0x110e <udd_ctrl_stall_data>
    132e:	c1 e0       	ldi	r28, 0x01	; 1
    1330:	2e c0       	rjmp	.+92     	; 0x138e <udd_ctrl_interrupt_tc_setup+0xda>
    1332:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <udd_g_ctrlreq>
    1336:	88 23       	and	r24, r24
    1338:	6c f4       	brge	.+26     	; 0x1354 <udd_ctrl_interrupt_tc_setup+0xa0>
    133a:	10 92 fd 22 	sts	0x22FD, r1	; 0x8022fd <udd_ctrl_prev_payload_nb_trans>
    133e:	10 92 fe 22 	sts	0x22FE, r1	; 0x8022fe <udd_ctrl_prev_payload_nb_trans+0x1>
    1342:	10 92 fb 22 	sts	0x22FB, r1	; 0x8022fb <udd_ctrl_payload_nb_trans>
    1346:	10 92 fc 22 	sts	0x22FC, r1	; 0x8022fc <udd_ctrl_payload_nb_trans+0x1>
    134a:	82 e0       	ldi	r24, 0x02	; 2
    134c:	80 93 ff 22 	sts	0x22FF, r24	; 0x8022ff <udd_ep_control_state>
    1350:	02 df       	rcall	.-508    	; 0x1156 <udd_ctrl_in_sent>
    1352:	1d c0       	rjmp	.+58     	; 0x138e <udd_ctrl_interrupt_tc_setup+0xda>
    1354:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <udd_g_ctrlreq+0x6>
    1358:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <udd_g_ctrlreq+0x7>
    135c:	89 2b       	or	r24, r25
    135e:	11 f4       	brne	.+4      	; 0x1364 <udd_ctrl_interrupt_tc_setup+0xb0>
    1360:	e4 de       	rcall	.-568    	; 0x112a <udd_ctrl_send_zlp_in>
    1362:	15 c0       	rjmp	.+42     	; 0x138e <udd_ctrl_interrupt_tc_setup+0xda>
    1364:	10 92 fd 22 	sts	0x22FD, r1	; 0x8022fd <udd_ctrl_prev_payload_nb_trans>
    1368:	10 92 fe 22 	sts	0x22FE, r1	; 0x8022fe <udd_ctrl_prev_payload_nb_trans+0x1>
    136c:	10 92 fb 22 	sts	0x22FB, r1	; 0x8022fb <udd_ctrl_payload_nb_trans>
    1370:	10 92 fc 22 	sts	0x22FC, r1	; 0x8022fc <udd_ctrl_payload_nb_trans+0x1>
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	80 93 ff 22 	sts	0x22FF, r24	; 0x8022ff <udd_ep_control_state>
    137a:	ec e0       	ldi	r30, 0x0C	; 12
    137c:	f3 e2       	ldi	r31, 0x23	; 35
    137e:	02 e0       	ldi	r16, 0x02	; 2
    1380:	06 93       	lac	Z, r16
    1382:	00 e2       	ldi	r16, 0x20	; 32
    1384:	06 93       	lac	Z, r16
    1386:	03 c0       	rjmp	.+6      	; 0x138e <udd_ctrl_interrupt_tc_setup+0xda>
    1388:	c0 e0       	ldi	r28, 0x00	; 0
    138a:	01 c0       	rjmp	.+2      	; 0x138e <udd_ctrl_interrupt_tc_setup+0xda>
    138c:	c1 e0       	ldi	r28, 0x01	; 1
    138e:	8c 2f       	mov	r24, r28
    1390:	cf 91       	pop	r28
    1392:	0f 91       	pop	r16
    1394:	08 95       	ret

00001396 <udd_ep_trans_complet>:
    1396:	8f 92       	push	r8
    1398:	9f 92       	push	r9
    139a:	af 92       	push	r10
    139c:	bf 92       	push	r11
    139e:	df 92       	push	r13
    13a0:	ef 92       	push	r14
    13a2:	ff 92       	push	r15
    13a4:	0f 93       	push	r16
    13a6:	1f 93       	push	r17
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	d8 2e       	mov	r13, r24
    13ae:	67 df       	rcall	.-306    	; 0x127e <udd_ep_get_job>
    13b0:	8c 01       	movw	r16, r24
    13b2:	bd 2c       	mov	r11, r13
    13b4:	bb 1c       	adc	r11, r11
    13b6:	bb 24       	eor	r11, r11
    13b8:	bb 1c       	adc	r11, r11
    13ba:	cd 2d       	mov	r28, r13
    13bc:	cf 70       	andi	r28, 0x0F	; 15
    13be:	d0 e0       	ldi	r29, 0x00	; 0
    13c0:	cc 0f       	add	r28, r28
    13c2:	dd 1f       	adc	r29, r29
    13c4:	cb 0d       	add	r28, r11
    13c6:	d1 1d       	adc	r29, r1
    13c8:	ce 01       	movw	r24, r28
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	9c 01       	movw	r18, r24
    13d8:	24 5f       	subi	r18, 0xF4	; 244
    13da:	3c 4d       	sbci	r19, 0xDC	; 220
    13dc:	79 01       	movw	r14, r18
    13de:	c9 01       	movw	r24, r18
    13e0:	26 df       	rcall	.-436    	; 0x122e <udd_ep_get_size>
    13e2:	4c 01       	movw	r8, r24
    13e4:	bb 20       	and	r11, r11
    13e6:	09 f4       	brne	.+2      	; 0x13ea <udd_ep_trans_complet+0x54>
    13e8:	79 c0       	rjmp	.+242    	; 0x14dc <udd_ep_trans_complet+0x146>
    13ea:	fe 01       	movw	r30, r28
    13ec:	ee 0f       	add	r30, r30
    13ee:	ff 1f       	adc	r31, r31
    13f0:	ee 0f       	add	r30, r30
    13f2:	ff 1f       	adc	r31, r31
    13f4:	ee 0f       	add	r30, r30
    13f6:	ff 1f       	adc	r31, r31
    13f8:	e0 50       	subi	r30, 0x00	; 0
    13fa:	fd 4d       	sbci	r31, 0xDD	; 221
    13fc:	22 89       	ldd	r18, Z+18	; 0x12
    13fe:	33 89       	ldd	r19, Z+19	; 0x13
    1400:	d8 01       	movw	r26, r16
    1402:	15 96       	adiw	r26, 0x05	; 5
    1404:	8d 91       	ld	r24, X+
    1406:	9c 91       	ld	r25, X
    1408:	16 97       	sbiw	r26, 0x06	; 6
    140a:	82 0f       	add	r24, r18
    140c:	93 1f       	adc	r25, r19
    140e:	15 96       	adiw	r26, 0x05	; 5
    1410:	8d 93       	st	X+, r24
    1412:	9c 93       	st	X, r25
    1414:	16 97       	sbiw	r26, 0x06	; 6
    1416:	13 96       	adiw	r26, 0x03	; 3
    1418:	2d 91       	ld	r18, X+
    141a:	3c 91       	ld	r19, X
    141c:	14 97       	sbiw	r26, 0x04	; 4
    141e:	82 17       	cp	r24, r18
    1420:	93 07       	cpc	r25, r19
    1422:	09 f4       	brne	.+2      	; 0x1426 <udd_ep_trans_complet+0x90>
    1424:	45 c0       	rjmp	.+138    	; 0x14b0 <udd_ep_trans_complet+0x11a>
    1426:	28 1b       	sub	r18, r24
    1428:	39 0b       	sbc	r19, r25
    142a:	21 15       	cp	r18, r1
    142c:	b4 e0       	ldi	r27, 0x04	; 4
    142e:	3b 07       	cpc	r19, r27
    1430:	38 f0       	brcs	.+14     	; 0x1440 <udd_ep_trans_complet+0xaa>
    1432:	2f ef       	ldi	r18, 0xFF	; 255
    1434:	33 e0       	ldi	r19, 0x03	; 3
    1436:	c9 01       	movw	r24, r18
    1438:	b4 01       	movw	r22, r8
    143a:	88 d6       	rcall	.+3344   	; 0x214c <__udivmodhi4>
    143c:	28 1b       	sub	r18, r24
    143e:	39 0b       	sbc	r19, r25
    1440:	f8 01       	movw	r30, r16
    1442:	80 81       	ld	r24, Z
    1444:	81 ff       	sbrs	r24, 1
    1446:	09 c0       	rjmp	.+18     	; 0x145a <udd_ep_trans_complet+0xc4>
    1448:	c9 01       	movw	r24, r18
    144a:	b4 01       	movw	r22, r8
    144c:	7f d6       	rcall	.+3326   	; 0x214c <__udivmodhi4>
    144e:	41 e0       	ldi	r20, 0x01	; 1
    1450:	89 2b       	or	r24, r25
    1452:	09 f0       	breq	.+2      	; 0x1456 <udd_ep_trans_complet+0xc0>
    1454:	40 e0       	ldi	r20, 0x00	; 0
    1456:	84 2f       	mov	r24, r20
    1458:	01 c0       	rjmp	.+2      	; 0x145c <udd_ep_trans_complet+0xc6>
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	d8 01       	movw	r26, r16
    145e:	9c 91       	ld	r25, X
    1460:	80 fb       	bst	r24, 0
    1462:	91 f9       	bld	r25, 1
    1464:	9c 93       	st	X, r25
    1466:	fe 01       	movw	r30, r28
    1468:	ee 0f       	add	r30, r30
    146a:	ff 1f       	adc	r31, r31
    146c:	ee 0f       	add	r30, r30
    146e:	ff 1f       	adc	r31, r31
    1470:	ee 0f       	add	r30, r30
    1472:	ff 1f       	adc	r31, r31
    1474:	e0 50       	subi	r30, 0x00	; 0
    1476:	fd 4d       	sbci	r31, 0xDD	; 221
    1478:	12 8a       	std	Z+18, r1	; 0x12
    147a:	13 8a       	std	Z+19, r1	; 0x13
    147c:	26 87       	std	Z+14, r18	; 0x0e
    147e:	37 87       	std	Z+15, r19	; 0x0f
    1480:	11 96       	adiw	r26, 0x01	; 1
    1482:	2d 91       	ld	r18, X+
    1484:	3c 91       	ld	r19, X
    1486:	12 97       	sbiw	r26, 0x02	; 2
    1488:	15 96       	adiw	r26, 0x05	; 5
    148a:	8d 91       	ld	r24, X+
    148c:	9c 91       	ld	r25, X
    148e:	16 97       	sbiw	r26, 0x06	; 6
    1490:	82 0f       	add	r24, r18
    1492:	93 1f       	adc	r25, r19
    1494:	cc 0f       	add	r28, r28
    1496:	dd 1f       	adc	r29, r29
    1498:	cc 0f       	add	r28, r28
    149a:	dd 1f       	adc	r29, r29
    149c:	cc 0f       	add	r28, r28
    149e:	dd 1f       	adc	r29, r29
    14a0:	c0 5f       	subi	r28, 0xF0	; 240
    14a2:	dc 4d       	sbci	r29, 0xDC	; 220
    14a4:	88 83       	st	Y, r24
    14a6:	99 83       	std	Y+1, r25	; 0x01
    14a8:	f7 01       	movw	r30, r14
    14aa:	02 e0       	ldi	r16, 0x02	; 2
    14ac:	06 93       	lac	Z, r16
    14ae:	e4 c0       	rjmp	.+456    	; 0x1678 <udd_ep_trans_complet+0x2e2>
    14b0:	d8 01       	movw	r26, r16
    14b2:	8c 91       	ld	r24, X
    14b4:	81 ff       	sbrs	r24, 1
    14b6:	cd c0       	rjmp	.+410    	; 0x1652 <udd_ep_trans_complet+0x2bc>
    14b8:	8d 7f       	andi	r24, 0xFD	; 253
    14ba:	8c 93       	st	X, r24
    14bc:	cc 0f       	add	r28, r28
    14be:	dd 1f       	adc	r29, r29
    14c0:	cc 0f       	add	r28, r28
    14c2:	dd 1f       	adc	r29, r29
    14c4:	cc 0f       	add	r28, r28
    14c6:	dd 1f       	adc	r29, r29
    14c8:	c0 50       	subi	r28, 0x00	; 0
    14ca:	dd 4d       	sbci	r29, 0xDD	; 221
    14cc:	1a 8a       	std	Y+18, r1	; 0x12
    14ce:	1b 8a       	std	Y+19, r1	; 0x13
    14d0:	1e 86       	std	Y+14, r1	; 0x0e
    14d2:	1f 86       	std	Y+15, r1	; 0x0f
    14d4:	f7 01       	movw	r30, r14
    14d6:	02 e0       	ldi	r16, 0x02	; 2
    14d8:	06 93       	lac	Z, r16
    14da:	ce c0       	rjmp	.+412    	; 0x1678 <udd_ep_trans_complet+0x2e2>
    14dc:	fe 01       	movw	r30, r28
    14de:	ee 0f       	add	r30, r30
    14e0:	ff 1f       	adc	r31, r31
    14e2:	ee 0f       	add	r30, r30
    14e4:	ff 1f       	adc	r31, r31
    14e6:	ee 0f       	add	r30, r30
    14e8:	ff 1f       	adc	r31, r31
    14ea:	e0 50       	subi	r30, 0x00	; 0
    14ec:	fd 4d       	sbci	r31, 0xDD	; 221
    14ee:	a6 84       	ldd	r10, Z+14	; 0x0e
    14f0:	b7 84       	ldd	r11, Z+15	; 0x0f
    14f2:	d8 01       	movw	r26, r16
    14f4:	8c 91       	ld	r24, X
    14f6:	82 ff       	sbrs	r24, 2
    14f8:	19 c0       	rjmp	.+50     	; 0x152c <udd_ep_trans_complet+0x196>
    14fa:	11 96       	adiw	r26, 0x01	; 1
    14fc:	ed 91       	ld	r30, X+
    14fe:	fc 91       	ld	r31, X
    1500:	12 97       	sbiw	r26, 0x02	; 2
    1502:	15 96       	adiw	r26, 0x05	; 5
    1504:	2d 91       	ld	r18, X+
    1506:	3c 91       	ld	r19, X
    1508:	16 97       	sbiw	r26, 0x06	; 6
    150a:	13 96       	adiw	r26, 0x03	; 3
    150c:	8d 91       	ld	r24, X+
    150e:	9c 91       	ld	r25, X
    1510:	14 97       	sbiw	r26, 0x04	; 4
    1512:	b4 01       	movw	r22, r8
    1514:	1b d6       	rcall	.+3126   	; 0x214c <__udivmodhi4>
    1516:	b0 e4       	ldi	r27, 0x40	; 64
    1518:	db 9e       	mul	r13, r27
    151a:	b0 01       	movw	r22, r0
    151c:	11 24       	eor	r1, r1
    151e:	69 52       	subi	r22, 0x29	; 41
    1520:	7e 4d       	sbci	r23, 0xDE	; 222
    1522:	ac 01       	movw	r20, r24
    1524:	cf 01       	movw	r24, r30
    1526:	82 0f       	add	r24, r18
    1528:	93 1f       	adc	r25, r19
    152a:	2d d6       	rcall	.+3162   	; 0x2186 <memcpy>
    152c:	f8 01       	movw	r30, r16
    152e:	25 81       	ldd	r18, Z+5	; 0x05
    1530:	36 81       	ldd	r19, Z+6	; 0x06
    1532:	2a 0d       	add	r18, r10
    1534:	3b 1d       	adc	r19, r11
    1536:	25 83       	std	Z+5, r18	; 0x05
    1538:	36 83       	std	Z+6, r19	; 0x06
    153a:	83 81       	ldd	r24, Z+3	; 0x03
    153c:	94 81       	ldd	r25, Z+4	; 0x04
    153e:	82 17       	cp	r24, r18
    1540:	93 07       	cpc	r25, r19
    1542:	68 f4       	brcc	.+26     	; 0x155e <udd_ep_trans_complet+0x1c8>
    1544:	85 83       	std	Z+5, r24	; 0x05
    1546:	96 83       	std	Z+6, r25	; 0x06
    1548:	cc 0f       	add	r28, r28
    154a:	dd 1f       	adc	r29, r29
    154c:	cc 0f       	add	r28, r28
    154e:	dd 1f       	adc	r29, r29
    1550:	cc 0f       	add	r28, r28
    1552:	dd 1f       	adc	r29, r29
    1554:	c0 50       	subi	r28, 0x00	; 0
    1556:	dd 4d       	sbci	r29, 0xDD	; 221
    1558:	8a 89       	ldd	r24, Y+18	; 0x12
    155a:	9b 89       	ldd	r25, Y+19	; 0x13
    155c:	7a c0       	rjmp	.+244    	; 0x1652 <udd_ep_trans_complet+0x2bc>
    155e:	fe 01       	movw	r30, r28
    1560:	ee 0f       	add	r30, r30
    1562:	ff 1f       	adc	r31, r31
    1564:	ee 0f       	add	r30, r30
    1566:	ff 1f       	adc	r31, r31
    1568:	ee 0f       	add	r30, r30
    156a:	ff 1f       	adc	r31, r31
    156c:	e0 50       	subi	r30, 0x00	; 0
    156e:	fd 4d       	sbci	r31, 0xDD	; 221
    1570:	42 89       	ldd	r20, Z+18	; 0x12
    1572:	53 89       	ldd	r21, Z+19	; 0x13
    1574:	4a 15       	cp	r20, r10
    1576:	5b 05       	cpc	r21, r11
    1578:	09 f0       	breq	.+2      	; 0x157c <udd_ep_trans_complet+0x1e6>
    157a:	6b c0       	rjmp	.+214    	; 0x1652 <udd_ep_trans_complet+0x2bc>
    157c:	28 17       	cp	r18, r24
    157e:	39 07       	cpc	r19, r25
    1580:	09 f4       	brne	.+2      	; 0x1584 <udd_ep_trans_complet+0x1ee>
    1582:	67 c0       	rjmp	.+206    	; 0x1652 <udd_ep_trans_complet+0x2bc>
    1584:	ac 01       	movw	r20, r24
    1586:	42 1b       	sub	r20, r18
    1588:	53 0b       	sbc	r21, r19
    158a:	9a 01       	movw	r18, r20
    158c:	21 15       	cp	r18, r1
    158e:	54 e0       	ldi	r21, 0x04	; 4
    1590:	35 07       	cpc	r19, r21
    1592:	50 f0       	brcs	.+20     	; 0x15a8 <udd_ep_trans_complet+0x212>
    1594:	2f ef       	ldi	r18, 0xFF	; 255
    1596:	33 e0       	ldi	r19, 0x03	; 3
    1598:	c9 01       	movw	r24, r18
    159a:	b4 01       	movw	r22, r8
    159c:	d7 d5       	rcall	.+2990   	; 0x214c <__udivmodhi4>
    159e:	d9 01       	movw	r26, r18
    15a0:	a8 1b       	sub	r26, r24
    15a2:	b9 0b       	sbc	r27, r25
    15a4:	cd 01       	movw	r24, r26
    15a6:	07 c0       	rjmp	.+14     	; 0x15b6 <udd_ep_trans_complet+0x220>
    15a8:	c9 01       	movw	r24, r18
    15aa:	b4 01       	movw	r22, r8
    15ac:	cf d5       	rcall	.+2974   	; 0x214c <__udivmodhi4>
    15ae:	f9 01       	movw	r30, r18
    15b0:	e8 1b       	sub	r30, r24
    15b2:	f9 0b       	sbc	r31, r25
    15b4:	cf 01       	movw	r24, r30
    15b6:	fe 01       	movw	r30, r28
    15b8:	ee 0f       	add	r30, r30
    15ba:	ff 1f       	adc	r31, r31
    15bc:	ee 0f       	add	r30, r30
    15be:	ff 1f       	adc	r31, r31
    15c0:	ee 0f       	add	r30, r30
    15c2:	ff 1f       	adc	r31, r31
    15c4:	e0 50       	subi	r30, 0x00	; 0
    15c6:	fd 4d       	sbci	r31, 0xDD	; 221
    15c8:	16 86       	std	Z+14, r1	; 0x0e
    15ca:	17 86       	std	Z+15, r1	; 0x0f
    15cc:	88 15       	cp	r24, r8
    15ce:	99 05       	cpc	r25, r9
    15d0:	00 f5       	brcc	.+64     	; 0x1612 <udd_ep_trans_complet+0x27c>
    15d2:	d8 01       	movw	r26, r16
    15d4:	8c 91       	ld	r24, X
    15d6:	84 60       	ori	r24, 0x04	; 4
    15d8:	8c 93       	st	X, r24
    15da:	b0 e4       	ldi	r27, 0x40	; 64
    15dc:	db 9e       	mul	r13, r27
    15de:	c0 01       	movw	r24, r0
    15e0:	11 24       	eor	r1, r1
    15e2:	89 52       	subi	r24, 0x29	; 41
    15e4:	9e 4d       	sbci	r25, 0xDE	; 222
    15e6:	fe 01       	movw	r30, r28
    15e8:	ee 0f       	add	r30, r30
    15ea:	ff 1f       	adc	r31, r31
    15ec:	ee 0f       	add	r30, r30
    15ee:	ff 1f       	adc	r31, r31
    15f0:	ee 0f       	add	r30, r30
    15f2:	ff 1f       	adc	r31, r31
    15f4:	e0 5f       	subi	r30, 0xF0	; 240
    15f6:	fc 4d       	sbci	r31, 0xDC	; 220
    15f8:	80 83       	st	Z, r24
    15fa:	91 83       	std	Z+1, r25	; 0x01
    15fc:	cc 0f       	add	r28, r28
    15fe:	dd 1f       	adc	r29, r29
    1600:	cc 0f       	add	r28, r28
    1602:	dd 1f       	adc	r29, r29
    1604:	cc 0f       	add	r28, r28
    1606:	dd 1f       	adc	r29, r29
    1608:	c0 50       	subi	r28, 0x00	; 0
    160a:	dd 4d       	sbci	r29, 0xDD	; 221
    160c:	8a 8a       	std	Y+18, r8	; 0x12
    160e:	9b 8a       	std	Y+19, r9	; 0x13
    1610:	1c c0       	rjmp	.+56     	; 0x164a <udd_ep_trans_complet+0x2b4>
    1612:	f8 01       	movw	r30, r16
    1614:	41 81       	ldd	r20, Z+1	; 0x01
    1616:	52 81       	ldd	r21, Z+2	; 0x02
    1618:	25 81       	ldd	r18, Z+5	; 0x05
    161a:	36 81       	ldd	r19, Z+6	; 0x06
    161c:	24 0f       	add	r18, r20
    161e:	35 1f       	adc	r19, r21
    1620:	fe 01       	movw	r30, r28
    1622:	ee 0f       	add	r30, r30
    1624:	ff 1f       	adc	r31, r31
    1626:	ee 0f       	add	r30, r30
    1628:	ff 1f       	adc	r31, r31
    162a:	ee 0f       	add	r30, r30
    162c:	ff 1f       	adc	r31, r31
    162e:	e0 5f       	subi	r30, 0xF0	; 240
    1630:	fc 4d       	sbci	r31, 0xDC	; 220
    1632:	20 83       	st	Z, r18
    1634:	31 83       	std	Z+1, r19	; 0x01
    1636:	cc 0f       	add	r28, r28
    1638:	dd 1f       	adc	r29, r29
    163a:	cc 0f       	add	r28, r28
    163c:	dd 1f       	adc	r29, r29
    163e:	cc 0f       	add	r28, r28
    1640:	dd 1f       	adc	r29, r29
    1642:	c0 50       	subi	r28, 0x00	; 0
    1644:	dd 4d       	sbci	r29, 0xDD	; 221
    1646:	8a 8b       	std	Y+18, r24	; 0x12
    1648:	9b 8b       	std	Y+19, r25	; 0x13
    164a:	f7 01       	movw	r30, r14
    164c:	02 e0       	ldi	r16, 0x02	; 2
    164e:	06 93       	lac	Z, r16
    1650:	13 c0       	rjmp	.+38     	; 0x1678 <udd_ep_trans_complet+0x2e2>
    1652:	d8 01       	movw	r26, r16
    1654:	8c 91       	ld	r24, X
    1656:	80 ff       	sbrs	r24, 0
    1658:	0f c0       	rjmp	.+30     	; 0x1678 <udd_ep_trans_complet+0x2e2>
    165a:	8e 7f       	andi	r24, 0xFE	; 254
    165c:	8c 93       	st	X, r24
    165e:	17 96       	adiw	r26, 0x07	; 7
    1660:	ed 91       	ld	r30, X+
    1662:	fc 91       	ld	r31, X
    1664:	18 97       	sbiw	r26, 0x08	; 8
    1666:	30 97       	sbiw	r30, 0x00	; 0
    1668:	39 f0       	breq	.+14     	; 0x1678 <udd_ep_trans_complet+0x2e2>
    166a:	15 96       	adiw	r26, 0x05	; 5
    166c:	6d 91       	ld	r22, X+
    166e:	7c 91       	ld	r23, X
    1670:	16 97       	sbiw	r26, 0x06	; 6
    1672:	4d 2d       	mov	r20, r13
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	19 95       	eicall
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	1f 91       	pop	r17
    167e:	0f 91       	pop	r16
    1680:	ff 90       	pop	r15
    1682:	ef 90       	pop	r14
    1684:	df 90       	pop	r13
    1686:	bf 90       	pop	r11
    1688:	af 90       	pop	r10
    168a:	9f 90       	pop	r9
    168c:	8f 90       	pop	r8
    168e:	08 95       	ret

00001690 <udd_attach>:
    1690:	1f 93       	push	r17
    1692:	cf 93       	push	r28
    1694:	df 93       	push	r29
    1696:	1f 92       	push	r1
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
    169c:	8f b7       	in	r24, 0x3f	; 63
    169e:	89 83       	std	Y+1, r24	; 0x01
    16a0:	f8 94       	cli
    16a2:	19 81       	ldd	r17, Y+1	; 0x01
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	d6 dc       	rcall	.-1620   	; 0x1054 <udd_sleep_mode>
    16a8:	ea ec       	ldi	r30, 0xCA	; 202
    16aa:	f4 e0       	ldi	r31, 0x04	; 4
    16ac:	80 e4       	ldi	r24, 0x40	; 64
    16ae:	80 83       	st	Z, r24
    16b0:	80 e2       	ldi	r24, 0x20	; 32
    16b2:	80 83       	st	Z, r24
    16b4:	e1 ec       	ldi	r30, 0xC1	; 193
    16b6:	f4 e0       	ldi	r31, 0x04	; 4
    16b8:	80 81       	ld	r24, Z
    16ba:	81 60       	ori	r24, 0x01	; 1
    16bc:	80 83       	st	Z, r24
    16be:	a9 ec       	ldi	r26, 0xC9	; 201
    16c0:	b4 e0       	ldi	r27, 0x04	; 4
    16c2:	8c 91       	ld	r24, X
    16c4:	82 60       	ori	r24, 0x02	; 2
    16c6:	8c 93       	st	X, r24
    16c8:	e8 ec       	ldi	r30, 0xC8	; 200
    16ca:	f4 e0       	ldi	r31, 0x04	; 4
    16cc:	80 81       	ld	r24, Z
    16ce:	80 64       	ori	r24, 0x40	; 64
    16d0:	80 83       	st	Z, r24
    16d2:	8c 91       	ld	r24, X
    16d4:	81 60       	ori	r24, 0x01	; 1
    16d6:	8c 93       	st	X, r24
    16d8:	80 81       	ld	r24, Z
    16da:	80 68       	ori	r24, 0x80	; 128
    16dc:	80 83       	st	Z, r24
    16de:	1f bf       	out	0x3f, r17	; 63
    16e0:	0f 90       	pop	r0
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	1f 91       	pop	r17
    16e8:	08 95       	ret

000016ea <udd_enable>:
    16ea:	0f 93       	push	r16
    16ec:	1f 93       	push	r17
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	1f 92       	push	r1
    16f4:	1f 92       	push	r1
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
    16fa:	00 e6       	ldi	r16, 0x60	; 96
    16fc:	10 e0       	ldi	r17, 0x00	; 0
    16fe:	f8 01       	movw	r30, r16
    1700:	10 82       	st	Z, r1
    1702:	80 e3       	ldi	r24, 0x30	; 48
    1704:	ce d4       	rcall	.+2460   	; 0x20a2 <sysclk_enable_usb>
    1706:	e0 ec       	ldi	r30, 0xC0	; 192
    1708:	f4 e0       	ldi	r31, 0x04	; 4
    170a:	80 81       	ld	r24, Z
    170c:	80 64       	ori	r24, 0x40	; 64
    170e:	80 83       	st	Z, r24
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	f8 01       	movw	r30, r16
    1714:	80 83       	st	Z, r24
    1716:	8f b7       	in	r24, 0x3f	; 63
    1718:	8a 83       	std	Y+2, r24	; 0x02
    171a:	f8 94       	cli
    171c:	1a 81       	ldd	r17, Y+2	; 0x02
    171e:	e0 e0       	ldi	r30, 0x00	; 0
    1720:	f3 e2       	ldi	r31, 0x23	; 35
    1722:	15 86       	std	Z+13, r1	; 0x0d
    1724:	15 8a       	std	Z+21, r1	; 0x15
    1726:	15 8e       	std	Z+29, r1	; 0x1d
    1728:	15 a2       	std	Z+37, r1	; 0x25
    172a:	15 a6       	std	Z+45, r1	; 0x2d
    172c:	15 aa       	std	Z+53, r1	; 0x35
    172e:	e7 e9       	ldi	r30, 0x97	; 151
    1730:	f2 e2       	ldi	r31, 0x22	; 34
    1732:	80 81       	ld	r24, Z
    1734:	8e 7f       	andi	r24, 0xFE	; 254
    1736:	80 83       	st	Z, r24
    1738:	e0 ea       	ldi	r30, 0xA0	; 160
    173a:	f2 e2       	ldi	r31, 0x22	; 34
    173c:	80 81       	ld	r24, Z
    173e:	8e 7f       	andi	r24, 0xFE	; 254
    1740:	80 83       	st	Z, r24
    1742:	e9 ea       	ldi	r30, 0xA9	; 169
    1744:	f2 e2       	ldi	r31, 0x22	; 34
    1746:	80 81       	ld	r24, Z
    1748:	8e 7f       	andi	r24, 0xFE	; 254
    174a:	80 83       	st	Z, r24
    174c:	e2 eb       	ldi	r30, 0xB2	; 178
    174e:	f2 e2       	ldi	r31, 0x22	; 34
    1750:	80 81       	ld	r24, Z
    1752:	8e 7f       	andi	r24, 0xFE	; 254
    1754:	80 83       	st	Z, r24
    1756:	6a e1       	ldi	r22, 0x1A	; 26
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	82 e0       	ldi	r24, 0x02	; 2
    175c:	e7 d4       	rcall	.+2510   	; 0x212c <nvm_read_byte>
    175e:	8f 3f       	cpi	r24, 0xFF	; 255
    1760:	19 f0       	breq	.+6      	; 0x1768 <udd_enable+0x7e>
    1762:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    1766:	03 c0       	rjmp	.+6      	; 0x176e <udd_enable+0x84>
    1768:	8f e1       	ldi	r24, 0x1F	; 31
    176a:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    176e:	6b e1       	ldi	r22, 0x1B	; 27
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	82 e0       	ldi	r24, 0x02	; 2
    1774:	db d4       	rcall	.+2486   	; 0x212c <nvm_read_byte>
    1776:	8f 3f       	cpi	r24, 0xFF	; 255
    1778:	19 f0       	breq	.+6      	; 0x1780 <udd_enable+0x96>
    177a:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    177e:	03 c0       	rjmp	.+6      	; 0x1786 <udd_enable+0x9c>
    1780:	8f e1       	ldi	r24, 0x1F	; 31
    1782:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    1786:	e0 ec       	ldi	r30, 0xC0	; 192
    1788:	f4 e0       	ldi	r31, 0x04	; 4
    178a:	80 81       	ld	r24, Z
    178c:	82 60       	ori	r24, 0x02	; 2
    178e:	80 83       	st	Z, r24
    1790:	80 81       	ld	r24, Z
    1792:	80 68       	ori	r24, 0x80	; 128
    1794:	80 83       	st	Z, r24
    1796:	80 81       	ld	r24, Z
    1798:	80 61       	ori	r24, 0x10	; 16
    179a:	80 83       	st	Z, r24
    179c:	8c e0       	ldi	r24, 0x0C	; 12
    179e:	93 e2       	ldi	r25, 0x23	; 35
    17a0:	86 83       	std	Z+6, r24	; 0x06
    17a2:	97 83       	std	Z+7, r25	; 0x07
    17a4:	80 81       	ld	r24, Z
    17a6:	80 62       	ori	r24, 0x20	; 32
    17a8:	80 83       	st	Z, r24
    17aa:	8f ef       	ldi	r24, 0xFF	; 255
    17ac:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    17b0:	e8 ec       	ldi	r30, 0xC8	; 200
    17b2:	f4 e0       	ldi	r31, 0x04	; 4
    17b4:	80 81       	ld	r24, Z
    17b6:	81 60       	ori	r24, 0x01	; 1
    17b8:	80 83       	st	Z, r24
    17ba:	10 92 40 23 	sts	0x2340, r1	; 0x802340 <udd_b_idle>
    17be:	80 91 56 23 	lds	r24, 0x2356	; 0x802356 <sleepmgr_locks+0x5>
    17c2:	8f 3f       	cpi	r24, 0xFF	; 255
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <udd_enable+0xde>
    17c6:	ff cf       	rjmp	.-2      	; 0x17c6 <udd_enable+0xdc>
    17c8:	8f b7       	in	r24, 0x3f	; 63
    17ca:	89 83       	std	Y+1, r24	; 0x01
    17cc:	f8 94       	cli
    17ce:	99 81       	ldd	r25, Y+1	; 0x01
    17d0:	e1 e5       	ldi	r30, 0x51	; 81
    17d2:	f3 e2       	ldi	r31, 0x23	; 35
    17d4:	85 81       	ldd	r24, Z+5	; 0x05
    17d6:	8f 5f       	subi	r24, 0xFF	; 255
    17d8:	85 83       	std	Z+5, r24	; 0x05
    17da:	9f bf       	out	0x3f, r25	; 63
    17dc:	59 df       	rcall	.-334    	; 0x1690 <udd_attach>
    17de:	1f bf       	out	0x3f, r17	; 63
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	08 95       	ret

000017ee <udd_is_high_speed>:
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	08 95       	ret

000017f2 <udd_set_address>:
    17f2:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    17f6:	08 95       	ret

000017f8 <udd_getaddress>:
    17f8:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    17fc:	08 95       	ret

000017fe <udd_get_frame_number>:
    17fe:	80 91 3c 23 	lds	r24, 0x233C	; 0x80233c <udd_sram+0x3c>
    1802:	90 91 3d 23 	lds	r25, 0x233D	; 0x80233d <udd_sram+0x3d>
    1806:	08 95       	ret

00001808 <udd_get_micro_frame_number>:
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	08 95       	ret

0000180e <udd_set_setup_payload>:
    180e:	e1 e4       	ldi	r30, 0x41	; 65
    1810:	f3 e2       	ldi	r31, 0x23	; 35
    1812:	80 87       	std	Z+8, r24	; 0x08
    1814:	91 87       	std	Z+9, r25	; 0x09
    1816:	62 87       	std	Z+10, r22	; 0x0a
    1818:	73 87       	std	Z+11, r23	; 0x0b
    181a:	08 95       	ret

0000181c <udd_ep_alloc>:
    181c:	28 2f       	mov	r18, r24
    181e:	2f 70       	andi	r18, 0x0F	; 15
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	22 0f       	add	r18, r18
    1824:	33 1f       	adc	r19, r19
    1826:	08 2e       	mov	r0, r24
    1828:	00 0c       	add	r0, r0
    182a:	99 0b       	sbc	r25, r25
    182c:	88 27       	eor	r24, r24
    182e:	99 0f       	add	r25, r25
    1830:	88 1f       	adc	r24, r24
    1832:	99 27       	eor	r25, r25
    1834:	82 0f       	add	r24, r18
    1836:	93 1f       	adc	r25, r19
    1838:	fc 01       	movw	r30, r24
    183a:	ee 0f       	add	r30, r30
    183c:	ff 1f       	adc	r31, r31
    183e:	ee 0f       	add	r30, r30
    1840:	ff 1f       	adc	r31, r31
    1842:	ee 0f       	add	r30, r30
    1844:	ff 1f       	adc	r31, r31
    1846:	e0 50       	subi	r30, 0x00	; 0
    1848:	fd 4d       	sbci	r31, 0xDD	; 221
    184a:	25 85       	ldd	r18, Z+13	; 0x0d
    184c:	20 7c       	andi	r18, 0xC0	; 192
    184e:	09 f0       	breq	.+2      	; 0x1852 <udd_ep_alloc+0x36>
    1850:	69 c0       	rjmp	.+210    	; 0x1924 <udd_ep_alloc+0x108>
    1852:	63 70       	andi	r22, 0x03	; 3
    1854:	61 30       	cpi	r22, 0x01	; 1
    1856:	11 f0       	breq	.+4      	; 0x185c <udd_ep_alloc+0x40>
    1858:	18 f4       	brcc	.+6      	; 0x1860 <udd_ep_alloc+0x44>
    185a:	04 c0       	rjmp	.+8      	; 0x1864 <udd_ep_alloc+0x48>
    185c:	20 ec       	ldi	r18, 0xC0	; 192
    185e:	03 c0       	rjmp	.+6      	; 0x1866 <udd_ep_alloc+0x4a>
    1860:	20 e8       	ldi	r18, 0x80	; 128
    1862:	01 c0       	rjmp	.+2      	; 0x1866 <udd_ep_alloc+0x4a>
    1864:	20 e4       	ldi	r18, 0x40	; 64
    1866:	40 38       	cpi	r20, 0x80	; 128
    1868:	51 05       	cpc	r21, r1
    186a:	e9 f0       	breq	.+58     	; 0x18a6 <udd_ep_alloc+0x8a>
    186c:	50 f4       	brcc	.+20     	; 0x1882 <udd_ep_alloc+0x66>
    186e:	40 32       	cpi	r20, 0x20	; 32
    1870:	51 05       	cpc	r21, r1
    1872:	a9 f0       	breq	.+42     	; 0x189e <udd_ep_alloc+0x82>
    1874:	40 34       	cpi	r20, 0x40	; 64
    1876:	51 05       	cpc	r21, r1
    1878:	a1 f0       	breq	.+40     	; 0x18a2 <udd_ep_alloc+0x86>
    187a:	40 31       	cpi	r20, 0x10	; 16
    187c:	51 05       	cpc	r21, r1
    187e:	d9 f4       	brne	.+54     	; 0x18b6 <udd_ep_alloc+0x9a>
    1880:	0c c0       	rjmp	.+24     	; 0x189a <udd_ep_alloc+0x7e>
    1882:	41 15       	cp	r20, r1
    1884:	32 e0       	ldi	r19, 0x02	; 2
    1886:	53 07       	cpc	r21, r19
    1888:	91 f0       	breq	.+36     	; 0x18ae <udd_ep_alloc+0x92>
    188a:	4f 3f       	cpi	r20, 0xFF	; 255
    188c:	33 e0       	ldi	r19, 0x03	; 3
    188e:	53 07       	cpc	r21, r19
    1890:	81 f0       	breq	.+32     	; 0x18b2 <udd_ep_alloc+0x96>
    1892:	41 15       	cp	r20, r1
    1894:	51 40       	sbci	r21, 0x01	; 1
    1896:	79 f4       	brne	.+30     	; 0x18b6 <udd_ep_alloc+0x9a>
    1898:	08 c0       	rjmp	.+16     	; 0x18aa <udd_ep_alloc+0x8e>
    189a:	41 e0       	ldi	r20, 0x01	; 1
    189c:	0d c0       	rjmp	.+26     	; 0x18b8 <udd_ep_alloc+0x9c>
    189e:	42 e0       	ldi	r20, 0x02	; 2
    18a0:	0b c0       	rjmp	.+22     	; 0x18b8 <udd_ep_alloc+0x9c>
    18a2:	43 e0       	ldi	r20, 0x03	; 3
    18a4:	09 c0       	rjmp	.+18     	; 0x18b8 <udd_ep_alloc+0x9c>
    18a6:	44 e0       	ldi	r20, 0x04	; 4
    18a8:	07 c0       	rjmp	.+14     	; 0x18b8 <udd_ep_alloc+0x9c>
    18aa:	45 e0       	ldi	r20, 0x05	; 5
    18ac:	05 c0       	rjmp	.+10     	; 0x18b8 <udd_ep_alloc+0x9c>
    18ae:	46 e0       	ldi	r20, 0x06	; 6
    18b0:	03 c0       	rjmp	.+6      	; 0x18b8 <udd_ep_alloc+0x9c>
    18b2:	47 e0       	ldi	r20, 0x07	; 7
    18b4:	01 c0       	rjmp	.+2      	; 0x18b8 <udd_ep_alloc+0x9c>
    18b6:	40 e0       	ldi	r20, 0x00	; 0
    18b8:	fc 01       	movw	r30, r24
    18ba:	ee 0f       	add	r30, r30
    18bc:	ff 1f       	adc	r31, r31
    18be:	ee 0f       	add	r30, r30
    18c0:	ff 1f       	adc	r31, r31
    18c2:	ee 0f       	add	r30, r30
    18c4:	ff 1f       	adc	r31, r31
    18c6:	e0 50       	subi	r30, 0x00	; 0
    18c8:	fd 4d       	sbci	r31, 0xDD	; 221
    18ca:	15 86       	std	Z+13, r1	; 0x0d
    18cc:	36 e0       	ldi	r19, 0x06	; 6
    18ce:	34 87       	std	Z+12, r19	; 0x0c
    18d0:	24 2b       	or	r18, r20
    18d2:	25 87       	std	Z+13, r18	; 0x0d
    18d4:	fc 01       	movw	r30, r24
    18d6:	ee 0f       	add	r30, r30
    18d8:	ff 1f       	adc	r31, r31
    18da:	ee 0f       	add	r30, r30
    18dc:	ff 1f       	adc	r31, r31
    18de:	ee 0f       	add	r30, r30
    18e0:	ff 1f       	adc	r31, r31
    18e2:	e0 50       	subi	r30, 0x00	; 0
    18e4:	fd 4d       	sbci	r31, 0xDD	; 221
    18e6:	25 85       	ldd	r18, Z+13	; 0x0d
    18e8:	20 7c       	andi	r18, 0xC0	; 192
    18ea:	20 3c       	cpi	r18, 0xC0	; 192
    18ec:	69 f4       	brne	.+26     	; 0x1908 <udd_ep_alloc+0xec>
    18ee:	fc 01       	movw	r30, r24
    18f0:	ee 0f       	add	r30, r30
    18f2:	ff 1f       	adc	r31, r31
    18f4:	ee 0f       	add	r30, r30
    18f6:	ff 1f       	adc	r31, r31
    18f8:	ee 0f       	add	r30, r30
    18fa:	ff 1f       	adc	r31, r31
    18fc:	e0 50       	subi	r30, 0x00	; 0
    18fe:	fd 4d       	sbci	r31, 0xDD	; 221
    1900:	25 85       	ldd	r18, Z+13	; 0x0d
    1902:	27 70       	andi	r18, 0x07	; 7
    1904:	27 30       	cpi	r18, 0x07	; 7
    1906:	81 f0       	breq	.+32     	; 0x1928 <udd_ep_alloc+0x10c>
    1908:	88 0f       	add	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	fc 01       	movw	r30, r24
    1916:	e0 50       	subi	r30, 0x00	; 0
    1918:	fd 4d       	sbci	r31, 0xDD	; 221
    191a:	85 85       	ldd	r24, Z+13	; 0x0d
    191c:	80 62       	ori	r24, 0x20	; 32
    191e:	85 87       	std	Z+13, r24	; 0x0d
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	08 95       	ret
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	08 95       	ret
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	08 95       	ret

0000192c <udd_ep_is_halted>:
    192c:	e8 2f       	mov	r30, r24
    192e:	ef 70       	andi	r30, 0x0F	; 15
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	ee 0f       	add	r30, r30
    1934:	ff 1f       	adc	r31, r31
    1936:	08 2e       	mov	r0, r24
    1938:	00 0c       	add	r0, r0
    193a:	99 0b       	sbc	r25, r25
    193c:	88 27       	eor	r24, r24
    193e:	99 0f       	add	r25, r25
    1940:	88 1f       	adc	r24, r24
    1942:	99 27       	eor	r25, r25
    1944:	e8 0f       	add	r30, r24
    1946:	f9 1f       	adc	r31, r25
    1948:	ee 0f       	add	r30, r30
    194a:	ff 1f       	adc	r31, r31
    194c:	ee 0f       	add	r30, r30
    194e:	ff 1f       	adc	r31, r31
    1950:	ee 0f       	add	r30, r30
    1952:	ff 1f       	adc	r31, r31
    1954:	e0 50       	subi	r30, 0x00	; 0
    1956:	fd 4d       	sbci	r31, 0xDD	; 221
    1958:	85 85       	ldd	r24, Z+13	; 0x0d
    195a:	82 fb       	bst	r24, 2
    195c:	88 27       	eor	r24, r24
    195e:	80 f9       	bld	r24, 0
    1960:	08 95       	ret

00001962 <udd_ep_clear_halt>:
    1962:	0f 93       	push	r16
    1964:	28 2f       	mov	r18, r24
    1966:	2f 70       	andi	r18, 0x0F	; 15
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	a9 01       	movw	r20, r18
    196c:	44 0f       	add	r20, r20
    196e:	55 1f       	adc	r21, r21
    1970:	28 2f       	mov	r18, r24
    1972:	08 2e       	mov	r0, r24
    1974:	00 0c       	add	r0, r0
    1976:	33 0b       	sbc	r19, r19
    1978:	22 27       	eor	r18, r18
    197a:	33 0f       	add	r19, r19
    197c:	22 1f       	adc	r18, r18
    197e:	33 27       	eor	r19, r19
    1980:	24 0f       	add	r18, r20
    1982:	35 1f       	adc	r19, r21
    1984:	a9 01       	movw	r20, r18
    1986:	44 0f       	add	r20, r20
    1988:	55 1f       	adc	r21, r21
    198a:	44 0f       	add	r20, r20
    198c:	55 1f       	adc	r21, r21
    198e:	44 0f       	add	r20, r20
    1990:	55 1f       	adc	r21, r21
    1992:	fa 01       	movw	r30, r20
    1994:	e4 5f       	subi	r30, 0xF4	; 244
    1996:	fc 4d       	sbci	r31, 0xDC	; 220
    1998:	01 e0       	ldi	r16, 0x01	; 1
    199a:	06 93       	lac	Z, r16
    199c:	fa 01       	movw	r30, r20
    199e:	e0 50       	subi	r30, 0x00	; 0
    19a0:	fd 4d       	sbci	r31, 0xDD	; 221
    19a2:	95 85       	ldd	r25, Z+13	; 0x0d
    19a4:	92 ff       	sbrs	r25, 2
    19a6:	11 c0       	rjmp	.+34     	; 0x19ca <udd_ep_clear_halt+0x68>
    19a8:	fa 01       	movw	r30, r20
    19aa:	e0 50       	subi	r30, 0x00	; 0
    19ac:	fd 4d       	sbci	r31, 0xDD	; 221
    19ae:	95 85       	ldd	r25, Z+13	; 0x0d
    19b0:	9b 7f       	andi	r25, 0xFB	; 251
    19b2:	95 87       	std	Z+13, r25	; 0x0d
    19b4:	64 dc       	rcall	.-1848   	; 0x127e <udd_ep_get_job>
    19b6:	fc 01       	movw	r30, r24
    19b8:	80 81       	ld	r24, Z
    19ba:	80 ff       	sbrs	r24, 0
    19bc:	06 c0       	rjmp	.+12     	; 0x19ca <udd_ep_clear_halt+0x68>
    19be:	8e 7f       	andi	r24, 0xFE	; 254
    19c0:	80 83       	st	Z, r24
    19c2:	07 80       	ldd	r0, Z+7	; 0x07
    19c4:	f0 85       	ldd	r31, Z+8	; 0x08
    19c6:	e0 2d       	mov	r30, r0
    19c8:	19 95       	eicall
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	0f 91       	pop	r16
    19ce:	08 95       	ret

000019d0 <udd_ep_run>:
    19d0:	5f 92       	push	r5
    19d2:	6f 92       	push	r6
    19d4:	7f 92       	push	r7
    19d6:	8f 92       	push	r8
    19d8:	9f 92       	push	r9
    19da:	af 92       	push	r10
    19dc:	bf 92       	push	r11
    19de:	cf 92       	push	r12
    19e0:	df 92       	push	r13
    19e2:	ef 92       	push	r14
    19e4:	ff 92       	push	r15
    19e6:	0f 93       	push	r16
    19e8:	1f 93       	push	r17
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	1f 92       	push	r1
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	78 2e       	mov	r7, r24
    19f6:	66 2e       	mov	r6, r22
    19f8:	4a 01       	movw	r8, r20
    19fa:	59 01       	movw	r10, r18
    19fc:	40 dc       	rcall	.-1920   	; 0x127e <udd_ep_get_job>
    19fe:	6c 01       	movw	r12, r24
    1a00:	57 2c       	mov	r5, r7
    1a02:	55 1c       	adc	r5, r5
    1a04:	55 24       	eor	r5, r5
    1a06:	55 1c       	adc	r5, r5
    1a08:	87 2d       	mov	r24, r7
    1a0a:	8f 70       	andi	r24, 0x0F	; 15
    1a0c:	e8 2e       	mov	r14, r24
    1a0e:	f1 2c       	mov	r15, r1
    1a10:	ee 0c       	add	r14, r14
    1a12:	ff 1c       	adc	r15, r15
    1a14:	e5 0c       	add	r14, r5
    1a16:	f1 1c       	adc	r15, r1
    1a18:	f7 01       	movw	r30, r14
    1a1a:	ee 0f       	add	r30, r30
    1a1c:	ff 1f       	adc	r31, r31
    1a1e:	ee 0f       	add	r30, r30
    1a20:	ff 1f       	adc	r31, r31
    1a22:	ee 0f       	add	r30, r30
    1a24:	ff 1f       	adc	r31, r31
    1a26:	e0 50       	subi	r30, 0x00	; 0
    1a28:	fd 4d       	sbci	r31, 0xDD	; 221
    1a2a:	85 85       	ldd	r24, Z+13	; 0x0d
    1a2c:	80 7c       	andi	r24, 0xC0	; 192
    1a2e:	09 f4       	brne	.+2      	; 0x1a32 <udd_ep_run+0x62>
    1a30:	81 c0       	rjmp	.+258    	; 0x1b34 <udd_ep_run+0x164>
    1a32:	f7 01       	movw	r30, r14
    1a34:	ee 0f       	add	r30, r30
    1a36:	ff 1f       	adc	r31, r31
    1a38:	ee 0f       	add	r30, r30
    1a3a:	ff 1f       	adc	r31, r31
    1a3c:	ee 0f       	add	r30, r30
    1a3e:	ff 1f       	adc	r31, r31
    1a40:	e0 50       	subi	r30, 0x00	; 0
    1a42:	fd 4d       	sbci	r31, 0xDD	; 221
    1a44:	85 85       	ldd	r24, Z+13	; 0x0d
    1a46:	80 7c       	andi	r24, 0xC0	; 192
    1a48:	80 3c       	cpi	r24, 0xC0	; 192
    1a4a:	61 f0       	breq	.+24     	; 0x1a64 <udd_ep_run+0x94>
    1a4c:	f7 01       	movw	r30, r14
    1a4e:	ee 0f       	add	r30, r30
    1a50:	ff 1f       	adc	r31, r31
    1a52:	ee 0f       	add	r30, r30
    1a54:	ff 1f       	adc	r31, r31
    1a56:	ee 0f       	add	r30, r30
    1a58:	ff 1f       	adc	r31, r31
    1a5a:	e0 50       	subi	r30, 0x00	; 0
    1a5c:	fd 4d       	sbci	r31, 0xDD	; 221
    1a5e:	85 85       	ldd	r24, Z+13	; 0x0d
    1a60:	82 fd       	sbrc	r24, 2
    1a62:	6a c0       	rjmp	.+212    	; 0x1b38 <udd_ep_run+0x168>
    1a64:	8f b7       	in	r24, 0x3f	; 63
    1a66:	89 83       	std	Y+1, r24	; 0x01
    1a68:	f8 94       	cli
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	f6 01       	movw	r30, r12
    1a6e:	90 81       	ld	r25, Z
    1a70:	90 ff       	sbrs	r25, 0
    1a72:	03 c0       	rjmp	.+6      	; 0x1a7a <udd_ep_run+0xaa>
    1a74:	8f bf       	out	0x3f, r24	; 63
    1a76:	51 2c       	mov	r5, r1
    1a78:	60 c0       	rjmp	.+192    	; 0x1b3a <udd_ep_run+0x16a>
    1a7a:	f6 01       	movw	r30, r12
    1a7c:	90 81       	ld	r25, Z
    1a7e:	91 60       	ori	r25, 0x01	; 1
    1a80:	90 83       	st	Z, r25
    1a82:	8f bf       	out	0x3f, r24	; 63
    1a84:	81 82       	std	Z+1, r8	; 0x01
    1a86:	92 82       	std	Z+2, r9	; 0x02
    1a88:	a3 82       	std	Z+3, r10	; 0x03
    1a8a:	b4 82       	std	Z+4, r11	; 0x04
    1a8c:	15 82       	std	Z+5, r1	; 0x05
    1a8e:	16 82       	std	Z+6, r1	; 0x06
    1a90:	07 83       	std	Z+7, r16	; 0x07
    1a92:	10 87       	std	Z+8, r17	; 0x08
    1a94:	61 10       	cpse	r6, r1
    1a96:	06 c0       	rjmp	.+12     	; 0x1aa4 <udd_ep_run+0xd4>
    1a98:	91 e0       	ldi	r25, 0x01	; 1
    1a9a:	a1 14       	cp	r10, r1
    1a9c:	b1 04       	cpc	r11, r1
    1a9e:	19 f0       	breq	.+6      	; 0x1aa6 <udd_ep_run+0xd6>
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	01 c0       	rjmp	.+2      	; 0x1aa6 <udd_ep_run+0xd6>
    1aa4:	91 e0       	ldi	r25, 0x01	; 1
    1aa6:	f6 01       	movw	r30, r12
    1aa8:	80 81       	ld	r24, Z
    1aaa:	90 fb       	bst	r25, 0
    1aac:	81 f9       	bld	r24, 1
    1aae:	8b 7f       	andi	r24, 0xFB	; 251
    1ab0:	80 83       	st	Z, r24
    1ab2:	55 20       	and	r5, r5
    1ab4:	61 f0       	breq	.+24     	; 0x1ace <udd_ep_run+0xfe>
    1ab6:	f7 01       	movw	r30, r14
    1ab8:	ee 0f       	add	r30, r30
    1aba:	ff 1f       	adc	r31, r31
    1abc:	ee 0f       	add	r30, r30
    1abe:	ff 1f       	adc	r31, r31
    1ac0:	ee 0f       	add	r30, r30
    1ac2:	ff 1f       	adc	r31, r31
    1ac4:	e0 50       	subi	r30, 0x00	; 0
    1ac6:	fd 4d       	sbci	r31, 0xDD	; 221
    1ac8:	12 8a       	std	Z+18, r1	; 0x12
    1aca:	13 8a       	std	Z+19, r1	; 0x13
    1acc:	2e c0       	rjmp	.+92     	; 0x1b2a <udd_ep_run+0x15a>
    1ace:	f7 01       	movw	r30, r14
    1ad0:	ee 0f       	add	r30, r30
    1ad2:	ff 1f       	adc	r31, r31
    1ad4:	ee 0f       	add	r30, r30
    1ad6:	ff 1f       	adc	r31, r31
    1ad8:	ee 0f       	add	r30, r30
    1ada:	ff 1f       	adc	r31, r31
    1adc:	e0 50       	subi	r30, 0x00	; 0
    1ade:	fd 4d       	sbci	r31, 0xDD	; 221
    1ae0:	85 85       	ldd	r24, Z+13	; 0x0d
    1ae2:	80 7c       	andi	r24, 0xC0	; 192
    1ae4:	80 3c       	cpi	r24, 0xC0	; 192
    1ae6:	a1 f4       	brne	.+40     	; 0x1b10 <udd_ep_run+0x140>
    1ae8:	c7 01       	movw	r24, r14
    1aea:	88 0f       	add	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	88 0f       	add	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	84 5f       	subi	r24, 0xF4	; 244
    1af8:	9c 4d       	sbci	r25, 0xDC	; 220
    1afa:	99 db       	rcall	.-2254   	; 0x122e <udd_ep_get_size>
    1afc:	bc 01       	movw	r22, r24
    1afe:	c5 01       	movw	r24, r10
    1b00:	25 d3       	rcall	.+1610   	; 0x214c <__udivmodhi4>
    1b02:	89 2b       	or	r24, r25
    1b04:	29 f0       	breq	.+10     	; 0x1b10 <udd_ep_run+0x140>
    1b06:	f6 01       	movw	r30, r12
    1b08:	80 81       	ld	r24, Z
    1b0a:	8e 7f       	andi	r24, 0xFE	; 254
    1b0c:	80 83       	st	Z, r24
    1b0e:	15 c0       	rjmp	.+42     	; 0x1b3a <udd_ep_run+0x16a>
    1b10:	f7 01       	movw	r30, r14
    1b12:	ee 0f       	add	r30, r30
    1b14:	ff 1f       	adc	r31, r31
    1b16:	ee 0f       	add	r30, r30
    1b18:	ff 1f       	adc	r31, r31
    1b1a:	ee 0f       	add	r30, r30
    1b1c:	ff 1f       	adc	r31, r31
    1b1e:	e0 50       	subi	r30, 0x00	; 0
    1b20:	fd 4d       	sbci	r31, 0xDD	; 221
    1b22:	16 86       	std	Z+14, r1	; 0x0e
    1b24:	17 86       	std	Z+15, r1	; 0x0f
    1b26:	12 8a       	std	Z+18, r1	; 0x12
    1b28:	13 8a       	std	Z+19, r1	; 0x13
    1b2a:	87 2d       	mov	r24, r7
    1b2c:	34 dc       	rcall	.-1944   	; 0x1396 <udd_ep_trans_complet>
    1b2e:	55 24       	eor	r5, r5
    1b30:	53 94       	inc	r5
    1b32:	03 c0       	rjmp	.+6      	; 0x1b3a <udd_ep_run+0x16a>
    1b34:	51 2c       	mov	r5, r1
    1b36:	01 c0       	rjmp	.+2      	; 0x1b3a <udd_ep_run+0x16a>
    1b38:	51 2c       	mov	r5, r1
    1b3a:	85 2d       	mov	r24, r5
    1b3c:	0f 90       	pop	r0
    1b3e:	df 91       	pop	r29
    1b40:	cf 91       	pop	r28
    1b42:	1f 91       	pop	r17
    1b44:	0f 91       	pop	r16
    1b46:	ff 90       	pop	r15
    1b48:	ef 90       	pop	r14
    1b4a:	df 90       	pop	r13
    1b4c:	cf 90       	pop	r12
    1b4e:	bf 90       	pop	r11
    1b50:	af 90       	pop	r10
    1b52:	9f 90       	pop	r9
    1b54:	8f 90       	pop	r8
    1b56:	7f 90       	pop	r7
    1b58:	6f 90       	pop	r6
    1b5a:	5f 90       	pop	r5
    1b5c:	08 95       	ret

00001b5e <udd_ep_abort>:
    1b5e:	ff 92       	push	r15
    1b60:	0f 93       	push	r16
    1b62:	1f 93       	push	r17
    1b64:	cf 93       	push	r28
    1b66:	df 93       	push	r29
    1b68:	18 2f       	mov	r17, r24
    1b6a:	f8 2e       	mov	r15, r24
    1b6c:	ff 1c       	adc	r15, r15
    1b6e:	ff 24       	eor	r15, r15
    1b70:	ff 1c       	adc	r15, r15
    1b72:	c8 2f       	mov	r28, r24
    1b74:	cf 70       	andi	r28, 0x0F	; 15
    1b76:	d0 e0       	ldi	r29, 0x00	; 0
    1b78:	cc 0f       	add	r28, r28
    1b7a:	dd 1f       	adc	r29, r29
    1b7c:	cf 0d       	add	r28, r15
    1b7e:	d1 1d       	adc	r29, r1
    1b80:	7e db       	rcall	.-2308   	; 0x127e <udd_ep_get_job>
    1b82:	dc 01       	movw	r26, r24
    1b84:	fe 01       	movw	r30, r28
    1b86:	ee 0f       	add	r30, r30
    1b88:	ff 1f       	adc	r31, r31
    1b8a:	ee 0f       	add	r30, r30
    1b8c:	ff 1f       	adc	r31, r31
    1b8e:	ee 0f       	add	r30, r30
    1b90:	ff 1f       	adc	r31, r31
    1b92:	e4 5f       	subi	r30, 0xF4	; 244
    1b94:	fc 4d       	sbci	r31, 0xDC	; 220
    1b96:	02 e0       	ldi	r16, 0x02	; 2
    1b98:	05 93       	las	Z, r16
    1b9a:	8c 91       	ld	r24, X
    1b9c:	80 ff       	sbrs	r24, 0
    1b9e:	22 c0       	rjmp	.+68     	; 0x1be4 <udd_ep_abort+0x86>
    1ba0:	8e 7f       	andi	r24, 0xFE	; 254
    1ba2:	8c 93       	st	X, r24
    1ba4:	17 96       	adiw	r26, 0x07	; 7
    1ba6:	ed 91       	ld	r30, X+
    1ba8:	fc 91       	ld	r31, X
    1baa:	18 97       	sbiw	r26, 0x08	; 8
    1bac:	30 97       	sbiw	r30, 0x00	; 0
    1bae:	d1 f0       	breq	.+52     	; 0x1be4 <udd_ep_abort+0x86>
    1bb0:	ff 20       	and	r15, r15
    1bb2:	59 f0       	breq	.+22     	; 0x1bca <udd_ep_abort+0x6c>
    1bb4:	cc 0f       	add	r28, r28
    1bb6:	dd 1f       	adc	r29, r29
    1bb8:	cc 0f       	add	r28, r28
    1bba:	dd 1f       	adc	r29, r29
    1bbc:	cc 0f       	add	r28, r28
    1bbe:	dd 1f       	adc	r29, r29
    1bc0:	c0 50       	subi	r28, 0x00	; 0
    1bc2:	dd 4d       	sbci	r29, 0xDD	; 221
    1bc4:	6a 89       	ldd	r22, Y+18	; 0x12
    1bc6:	7b 89       	ldd	r23, Y+19	; 0x13
    1bc8:	0a c0       	rjmp	.+20     	; 0x1bde <udd_ep_abort+0x80>
    1bca:	cc 0f       	add	r28, r28
    1bcc:	dd 1f       	adc	r29, r29
    1bce:	cc 0f       	add	r28, r28
    1bd0:	dd 1f       	adc	r29, r29
    1bd2:	cc 0f       	add	r28, r28
    1bd4:	dd 1f       	adc	r29, r29
    1bd6:	c0 50       	subi	r28, 0x00	; 0
    1bd8:	dd 4d       	sbci	r29, 0xDD	; 221
    1bda:	6e 85       	ldd	r22, Y+14	; 0x0e
    1bdc:	7f 85       	ldd	r23, Y+15	; 0x0f
    1bde:	41 2f       	mov	r20, r17
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	19 95       	eicall
    1be4:	df 91       	pop	r29
    1be6:	cf 91       	pop	r28
    1be8:	1f 91       	pop	r17
    1bea:	0f 91       	pop	r16
    1bec:	ff 90       	pop	r15
    1bee:	08 95       	ret

00001bf0 <udd_ep_free>:
    1bf0:	cf 93       	push	r28
    1bf2:	c8 2f       	mov	r28, r24
    1bf4:	b4 df       	rcall	.-152    	; 0x1b5e <udd_ep_abort>
    1bf6:	ec 2f       	mov	r30, r28
    1bf8:	ef 70       	andi	r30, 0x0F	; 15
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	ee 0f       	add	r30, r30
    1bfe:	ff 1f       	adc	r31, r31
    1c00:	8c 2f       	mov	r24, r28
    1c02:	cc 0f       	add	r28, r28
    1c04:	99 0b       	sbc	r25, r25
    1c06:	88 27       	eor	r24, r24
    1c08:	99 0f       	add	r25, r25
    1c0a:	88 1f       	adc	r24, r24
    1c0c:	99 27       	eor	r25, r25
    1c0e:	e8 0f       	add	r30, r24
    1c10:	f9 1f       	adc	r31, r25
    1c12:	ee 0f       	add	r30, r30
    1c14:	ff 1f       	adc	r31, r31
    1c16:	ee 0f       	add	r30, r30
    1c18:	ff 1f       	adc	r31, r31
    1c1a:	ee 0f       	add	r30, r30
    1c1c:	ff 1f       	adc	r31, r31
    1c1e:	e0 50       	subi	r30, 0x00	; 0
    1c20:	fd 4d       	sbci	r31, 0xDD	; 221
    1c22:	15 86       	std	Z+13, r1	; 0x0d
    1c24:	cf 91       	pop	r28
    1c26:	08 95       	ret

00001c28 <udd_ep_set_halt>:
    1c28:	e8 2f       	mov	r30, r24
    1c2a:	ef 70       	andi	r30, 0x0F	; 15
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	ee 0f       	add	r30, r30
    1c30:	ff 1f       	adc	r31, r31
    1c32:	28 2f       	mov	r18, r24
    1c34:	08 2e       	mov	r0, r24
    1c36:	00 0c       	add	r0, r0
    1c38:	33 0b       	sbc	r19, r19
    1c3a:	22 27       	eor	r18, r18
    1c3c:	33 0f       	add	r19, r19
    1c3e:	22 1f       	adc	r18, r18
    1c40:	33 27       	eor	r19, r19
    1c42:	e2 0f       	add	r30, r18
    1c44:	f3 1f       	adc	r31, r19
    1c46:	ee 0f       	add	r30, r30
    1c48:	ff 1f       	adc	r31, r31
    1c4a:	ee 0f       	add	r30, r30
    1c4c:	ff 1f       	adc	r31, r31
    1c4e:	ee 0f       	add	r30, r30
    1c50:	ff 1f       	adc	r31, r31
    1c52:	e0 50       	subi	r30, 0x00	; 0
    1c54:	fd 4d       	sbci	r31, 0xDD	; 221
    1c56:	95 85       	ldd	r25, Z+13	; 0x0d
    1c58:	94 60       	ori	r25, 0x04	; 4
    1c5a:	95 87       	std	Z+13, r25	; 0x0d
    1c5c:	80 df       	rcall	.-256    	; 0x1b5e <udd_ep_abort>
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	08 95       	ret

00001c62 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    1c62:	1f 92       	push	r1
    1c64:	0f 92       	push	r0
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	0f 92       	push	r0
    1c6a:	11 24       	eor	r1, r1
    1c6c:	08 b6       	in	r0, 0x38	; 56
    1c6e:	0f 92       	push	r0
    1c70:	18 be       	out	0x38, r1	; 56
    1c72:	09 b6       	in	r0, 0x39	; 57
    1c74:	0f 92       	push	r0
    1c76:	19 be       	out	0x39, r1	; 57
    1c78:	0b b6       	in	r0, 0x3b	; 59
    1c7a:	0f 92       	push	r0
    1c7c:	1b be       	out	0x3b, r1	; 59
    1c7e:	0f 93       	push	r16
    1c80:	2f 93       	push	r18
    1c82:	3f 93       	push	r19
    1c84:	4f 93       	push	r20
    1c86:	5f 93       	push	r21
    1c88:	6f 93       	push	r22
    1c8a:	7f 93       	push	r23
    1c8c:	8f 93       	push	r24
    1c8e:	9f 93       	push	r25
    1c90:	af 93       	push	r26
    1c92:	bf 93       	push	r27
    1c94:	ef 93       	push	r30
    1c96:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    1c98:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    1c9c:	88 23       	and	r24, r24
    1c9e:	34 f4       	brge	.+12     	; 0x1cac <__vector_125+0x4a>
		udd_ack_start_of_frame_event();
    1ca0:	80 e8       	ldi	r24, 0x80	; 128
    1ca2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    1ca6:	0e 94 78 05 	call	0xaf0	; 0xaf0 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1caa:	86 c0       	rjmp	.+268    	; 0x1db8 <__vector_125+0x156>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    1cac:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    1cb0:	82 ff       	sbrs	r24, 2
    1cb2:	20 c0       	rjmp	.+64     	; 0x1cf4 <__vector_125+0x92>
		udd_ack_underflow_event();
    1cb4:	84 e0       	ldi	r24, 0x04	; 4
    1cb6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    1cba:	80 91 14 23 	lds	r24, 0x2314	; 0x802314 <udd_sram+0x14>
    1cbe:	86 ff       	sbrs	r24, 6
    1cc0:	7b c0       	rjmp	.+246    	; 0x1db8 <__vector_125+0x156>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1cc2:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1cc6:	81 fd       	sbrc	r24, 1
    1cc8:	77 c0       	rjmp	.+238    	; 0x1db8 <__vector_125+0x156>
    1cca:	f4 da       	rcall	.-2584   	; 0x12b4 <udd_ctrl_interrupt_tc_setup>
    1ccc:	81 11       	cpse	r24, r1
    1cce:	74 c0       	rjmp	.+232    	; 0x1db8 <__vector_125+0x156>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1cd0:	80 91 ff 22 	lds	r24, 0x22FF	; 0x8022ff <udd_ep_control_state>
    1cd4:	81 30       	cpi	r24, 0x01	; 1
    1cd6:	11 f4       	brne	.+4      	; 0x1cdc <__vector_125+0x7a>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    1cd8:	28 da       	rcall	.-2992   	; 0x112a <udd_ctrl_send_zlp_in>
    1cda:	6e c0       	rjmp	.+220    	; 0x1db8 <__vector_125+0x156>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1cdc:	84 30       	cpi	r24, 0x04	; 4
    1cde:	09 f0       	breq	.+2      	; 0x1ce2 <__vector_125+0x80>
    1ce0:	6b c0       	rjmp	.+214    	; 0x1db8 <__vector_125+0x156>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    1ce2:	e5 e1       	ldi	r30, 0x15	; 21
    1ce4:	f3 e2       	ldi	r31, 0x23	; 35
    1ce6:	04 e0       	ldi	r16, 0x04	; 4
    1ce8:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1cea:	ed e0       	ldi	r30, 0x0D	; 13
    1cec:	f3 e2       	ldi	r31, 0x23	; 35
    1cee:	04 e0       	ldi	r16, 0x04	; 4
    1cf0:	05 93       	las	Z, r16
    1cf2:	62 c0       	rjmp	.+196    	; 0x1db8 <__vector_125+0x156>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    1cf4:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    1cf8:	81 ff       	sbrs	r24, 1
    1cfa:	59 c0       	rjmp	.+178    	; 0x1dae <__vector_125+0x14c>
		udd_ack_overflow_event();
    1cfc:	82 e0       	ldi	r24, 0x02	; 2
    1cfe:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    1d02:	80 91 0c 23 	lds	r24, 0x230C	; 0x80230c <udd_sram+0xc>
    1d06:	86 ff       	sbrs	r24, 6
    1d08:	57 c0       	rjmp	.+174    	; 0x1db8 <__vector_125+0x156>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1d0a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1d0e:	81 fd       	sbrc	r24, 1
    1d10:	53 c0       	rjmp	.+166    	; 0x1db8 <__vector_125+0x156>
    1d12:	d0 da       	rcall	.-2656   	; 0x12b4 <udd_ctrl_interrupt_tc_setup>
    1d14:	81 11       	cpse	r24, r1
    1d16:	50 c0       	rjmp	.+160    	; 0x1db8 <__vector_125+0x156>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1d18:	80 91 ff 22 	lds	r24, 0x22FF	; 0x8022ff <udd_ep_control_state>
    1d1c:	82 30       	cpi	r24, 0x02	; 2
    1d1e:	41 f4       	brne	.+16     	; 0x1d30 <__vector_125+0xce>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1d20:	84 e0       	ldi	r24, 0x04	; 4
    1d22:	80 93 ff 22 	sts	0x22FF, r24	; 0x8022ff <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    1d26:	ec e0       	ldi	r30, 0x0C	; 12
    1d28:	f3 e2       	ldi	r31, 0x23	; 35
    1d2a:	02 e0       	ldi	r16, 0x02	; 2
    1d2c:	06 93       	lac	Z, r16
    1d2e:	44 c0       	rjmp	.+136    	; 0x1db8 <__vector_125+0x156>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1d30:	83 30       	cpi	r24, 0x03	; 3
    1d32:	09 f0       	breq	.+2      	; 0x1d36 <__vector_125+0xd4>
    1d34:	41 c0       	rjmp	.+130    	; 0x1db8 <__vector_125+0x156>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    1d36:	e5 e1       	ldi	r30, 0x15	; 21
    1d38:	f3 e2       	ldi	r31, 0x23	; 35
    1d3a:	04 e0       	ldi	r16, 0x04	; 4
    1d3c:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1d3e:	ed e0       	ldi	r30, 0x0D	; 13
    1d40:	f3 e2       	ldi	r31, 0x23	; 35
    1d42:	04 e0       	ldi	r16, 0x04	; 4
    1d44:	05 93       	las	Z, r16
    1d46:	38 c0       	rjmp	.+112    	; 0x1db8 <__vector_125+0x156>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    1d48:	80 e1       	ldi	r24, 0x10	; 16
    1d4a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	06 df       	rcall	.-500    	; 0x1b5e <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    1d52:	81 e8       	ldi	r24, 0x81	; 129
    1d54:	04 df       	rcall	.-504    	; 0x1b5e <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    1d56:	82 e0       	ldi	r24, 0x02	; 2
    1d58:	02 df       	rcall	.-508    	; 0x1b5e <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    1d5a:	82 e8       	ldi	r24, 0x82	; 130
    1d5c:	00 df       	rcall	.-512    	; 0x1b5e <udd_ep_abort>
		}
#endif
		udc_reset();
    1d5e:	0e 94 51 05 	call	0xaa2	; 0xaa2 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    1d62:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    1d66:	e0 e0       	ldi	r30, 0x00	; 0
    1d68:	f3 e2       	ldi	r31, 0x23	; 35
    1d6a:	15 86       	std	Z+13, r1	; 0x0d
	udd_endpoint_clear_status(ep_ctrl);
    1d6c:	96 e0       	ldi	r25, 0x06	; 6
    1d6e:	94 87       	std	Z+12, r25	; 0x0c
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    1d70:	83 e4       	ldi	r24, 0x43	; 67
    1d72:	85 87       	std	Z+13, r24	; 0x0d
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    1d74:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    1d76:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    1d78:	85 8b       	std	Z+21, r24	; 0x15
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    1d7a:	8b eb       	ldi	r24, 0xBB	; 187
    1d7c:	92 e2       	ldi	r25, 0x22	; 34
    1d7e:	80 8b       	std	Z+16, r24	; 0x10
    1d80:	91 8b       	std	Z+17, r25	; 0x11
		// Reset endpoint control management
		udd_ctrl_init();
    1d82:	a0 d9       	rcall	.-3264   	; 0x10c4 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    1d84:	19 c0       	rjmp	.+50     	; 0x1db8 <__vector_125+0x156>
	}

	if (udd_is_suspend_event()) {
    1d86:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    1d8a:	86 ff       	sbrs	r24, 6
    1d8c:	06 c0       	rjmp	.+12     	; 0x1d9a <__vector_125+0x138>
		udd_ack_suspend_event();
    1d8e:	80 e4       	ldi	r24, 0x40	; 64
    1d90:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	5e d9       	rcall	.-3396   	; 0x1054 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1d98:	0f c0       	rjmp	.+30     	; 0x1db8 <__vector_125+0x156>
	}

	if (udd_is_resume_event()) {
    1d9a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    1d9e:	85 ff       	sbrs	r24, 5
    1da0:	0b c0       	rjmp	.+22     	; 0x1db8 <__vector_125+0x156>
		udd_ack_resume_event();
    1da2:	80 e2       	ldi	r24, 0x20	; 32
    1da4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	54 d9       	rcall	.-3416   	; 0x1054 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1dac:	05 c0       	rjmp	.+10     	; 0x1db8 <__vector_125+0x156>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    1dae:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    1db2:	84 fd       	sbrc	r24, 4
    1db4:	c9 cf       	rjmp	.-110    	; 0x1d48 <__vector_125+0xe6>
    1db6:	e7 cf       	rjmp	.-50     	; 0x1d86 <__vector_125+0x124>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    1db8:	ff 91       	pop	r31
    1dba:	ef 91       	pop	r30
    1dbc:	bf 91       	pop	r27
    1dbe:	af 91       	pop	r26
    1dc0:	9f 91       	pop	r25
    1dc2:	8f 91       	pop	r24
    1dc4:	7f 91       	pop	r23
    1dc6:	6f 91       	pop	r22
    1dc8:	5f 91       	pop	r21
    1dca:	4f 91       	pop	r20
    1dcc:	3f 91       	pop	r19
    1dce:	2f 91       	pop	r18
    1dd0:	0f 91       	pop	r16
    1dd2:	0f 90       	pop	r0
    1dd4:	0b be       	out	0x3b, r0	; 59
    1dd6:	0f 90       	pop	r0
    1dd8:	09 be       	out	0x39, r0	; 57
    1dda:	0f 90       	pop	r0
    1ddc:	08 be       	out	0x38, r0	; 56
    1dde:	0f 90       	pop	r0
    1de0:	0f be       	out	0x3f, r0	; 63
    1de2:	0f 90       	pop	r0
    1de4:	1f 90       	pop	r1
    1de6:	18 95       	reti

00001de8 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    1de8:	1f 92       	push	r1
    1dea:	0f 92       	push	r0
    1dec:	0f b6       	in	r0, 0x3f	; 63
    1dee:	0f 92       	push	r0
    1df0:	11 24       	eor	r1, r1
    1df2:	08 b6       	in	r0, 0x38	; 56
    1df4:	0f 92       	push	r0
    1df6:	18 be       	out	0x38, r1	; 56
    1df8:	09 b6       	in	r0, 0x39	; 57
    1dfa:	0f 92       	push	r0
    1dfc:	19 be       	out	0x39, r1	; 57
    1dfe:	0a b6       	in	r0, 0x3a	; 58
    1e00:	0f 92       	push	r0
    1e02:	1a be       	out	0x3a, r1	; 58
    1e04:	0b b6       	in	r0, 0x3b	; 59
    1e06:	0f 92       	push	r0
    1e08:	1b be       	out	0x3b, r1	; 59
    1e0a:	0f 93       	push	r16
    1e0c:	1f 93       	push	r17
    1e0e:	2f 93       	push	r18
    1e10:	3f 93       	push	r19
    1e12:	4f 93       	push	r20
    1e14:	5f 93       	push	r21
    1e16:	6f 93       	push	r22
    1e18:	7f 93       	push	r23
    1e1a:	8f 93       	push	r24
    1e1c:	9f 93       	push	r25
    1e1e:	af 93       	push	r26
    1e20:	bf 93       	push	r27
    1e22:	cf 93       	push	r28
    1e24:	df 93       	push	r29
    1e26:	ef 93       	push	r30
    1e28:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    1e2a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1e2e:	81 fd       	sbrc	r24, 1
    1e30:	03 c0       	rjmp	.+6      	; 0x1e38 <__vector_126+0x50>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    1e32:	40 da       	rcall	.-2944   	; 0x12b4 <udd_ctrl_interrupt_tc_setup>
    1e34:	81 11       	cpse	r24, r1
    1e36:	c3 c0       	rjmp	.+390    	; 0x1fbe <__vector_126+0x1d6>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    1e38:	82 e0       	ldi	r24, 0x02	; 2
    1e3a:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    1e3e:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    1e42:	81 95       	neg	r24
    1e44:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    1e46:	ec e0       	ldi	r30, 0x0C	; 12
    1e48:	f3 e2       	ldi	r31, 0x23	; 35
    1e4a:	e8 1b       	sub	r30, r24
    1e4c:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    1e4e:	20 81       	ld	r18, Z
    1e50:	31 81       	ldd	r19, Z+1	; 0x01
    1e52:	2c 50       	subi	r18, 0x0C	; 12
    1e54:	33 42       	sbci	r19, 0x23	; 35
    1e56:	36 95       	lsr	r19
    1e58:	27 95       	ror	r18
    1e5a:	36 95       	lsr	r19
    1e5c:	27 95       	ror	r18
    1e5e:	36 95       	lsr	r19
    1e60:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    1e62:	82 2f       	mov	r24, r18
    1e64:	86 95       	lsr	r24
    1e66:	20 fd       	sbrc	r18, 0
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <__vector_126+0x86>
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	01 c0       	rjmp	.+2      	; 0x1e70 <__vector_126+0x88>
    1e6e:	90 e8       	ldi	r25, 0x80	; 128
    1e70:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    1e72:	e8 2f       	mov	r30, r24
    1e74:	ef 70       	andi	r30, 0x0F	; 15
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	ee 0f       	add	r30, r30
    1e7a:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	08 2e       	mov	r0, r24
    1e80:	00 0c       	add	r0, r0
    1e82:	33 0b       	sbc	r19, r19
    1e84:	22 27       	eor	r18, r18
    1e86:	33 0f       	add	r19, r19
    1e88:	22 1f       	adc	r18, r18
    1e8a:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    1e8c:	e2 0f       	add	r30, r18
    1e8e:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    1e90:	df 01       	movw	r26, r30
    1e92:	aa 0f       	add	r26, r26
    1e94:	bb 1f       	adc	r27, r27
    1e96:	aa 0f       	add	r26, r26
    1e98:	bb 1f       	adc	r27, r27
    1e9a:	aa 0f       	add	r26, r26
    1e9c:	bb 1f       	adc	r27, r27
    1e9e:	a0 50       	subi	r26, 0x00	; 0
    1ea0:	bd 4d       	sbci	r27, 0xDD	; 221
    1ea2:	1c 96       	adiw	r26, 0x0c	; 12
    1ea4:	9c 91       	ld	r25, X
    1ea6:	95 ff       	sbrs	r25, 5
    1ea8:	8a c0       	rjmp	.+276    	; 0x1fbe <__vector_126+0x1d6>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    1eaa:	ee 0f       	add	r30, r30
    1eac:	ff 1f       	adc	r31, r31
    1eae:	ee 0f       	add	r30, r30
    1eb0:	ff 1f       	adc	r31, r31
    1eb2:	ee 0f       	add	r30, r30
    1eb4:	ff 1f       	adc	r31, r31
    1eb6:	e4 5f       	subi	r30, 0xF4	; 244
    1eb8:	fc 4d       	sbci	r31, 0xDC	; 220
    1eba:	00 e2       	ldi	r16, 0x20	; 32
    1ebc:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    1ebe:	81 11       	cpse	r24, r1
    1ec0:	79 c0       	rjmp	.+242    	; 0x1fb4 <__vector_126+0x1cc>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1ec2:	80 91 ff 22 	lds	r24, 0x22FF	; 0x8022ff <udd_ep_control_state>
    1ec6:	84 30       	cpi	r24, 0x04	; 4
    1ec8:	19 f4       	brne	.+6      	; 0x1ed0 <__vector_126+0xe8>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    1eca:	3d d9       	rcall	.-3462   	; 0x1146 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    1ecc:	fb d8       	rcall	.-3594   	; 0x10c4 <udd_ctrl_init>
    1ece:	77 c0       	rjmp	.+238    	; 0x1fbe <__vector_126+0x1d6>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    1ed0:	00 91 0e 23 	lds	r16, 0x230E	; 0x80230e <udd_sram+0xe>
    1ed4:	10 91 0f 23 	lds	r17, 0x230F	; 0x80230f <udd_sram+0xf>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    1ed8:	80 91 4b 23 	lds	r24, 0x234B	; 0x80234b <udd_g_ctrlreq+0xa>
    1edc:	90 91 4c 23 	lds	r25, 0x234C	; 0x80234c <udd_g_ctrlreq+0xb>
    1ee0:	c0 91 fb 22 	lds	r28, 0x22FB	; 0x8022fb <udd_ctrl_payload_nb_trans>
    1ee4:	d0 91 fc 22 	lds	r29, 0x22FC	; 0x8022fc <udd_ctrl_payload_nb_trans+0x1>
    1ee8:	9e 01       	movw	r18, r28
    1eea:	20 0f       	add	r18, r16
    1eec:	31 1f       	adc	r19, r17
    1eee:	82 17       	cp	r24, r18
    1ef0:	93 07       	cpc	r25, r19
    1ef2:	18 f4       	brcc	.+6      	; 0x1efa <__vector_126+0x112>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1ef4:	8c 01       	movw	r16, r24
    1ef6:	0c 1b       	sub	r16, r28
    1ef8:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    1efa:	80 91 49 23 	lds	r24, 0x2349	; 0x802349 <udd_g_ctrlreq+0x8>
    1efe:	90 91 4a 23 	lds	r25, 0x234A	; 0x80234a <udd_g_ctrlreq+0x9>
    1f02:	a8 01       	movw	r20, r16
    1f04:	6b eb       	ldi	r22, 0xBB	; 187
    1f06:	72 e2       	ldi	r23, 0x22	; 34
    1f08:	8c 0f       	add	r24, r28
    1f0a:	9d 1f       	adc	r25, r29
    1f0c:	3c d1       	rcall	.+632    	; 0x2186 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    1f0e:	c0 0f       	add	r28, r16
    1f10:	d1 1f       	adc	r29, r17
    1f12:	c0 93 fb 22 	sts	0x22FB, r28	; 0x8022fb <udd_ctrl_payload_nb_trans>
    1f16:	d0 93 fc 22 	sts	0x22FC, r29	; 0x8022fc <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1f1a:	00 34       	cpi	r16, 0x40	; 64
    1f1c:	11 05       	cpc	r17, r1
    1f1e:	69 f4       	brne	.+26     	; 0x1f3a <__vector_126+0x152>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    1f20:	80 91 fd 22 	lds	r24, 0x22FD	; 0x8022fd <udd_ctrl_prev_payload_nb_trans>
    1f24:	90 91 fe 22 	lds	r25, 0x22FE	; 0x8022fe <udd_ctrl_prev_payload_nb_trans+0x1>
    1f28:	8c 0f       	add	r24, r28
    1f2a:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1f2c:	20 91 47 23 	lds	r18, 0x2347	; 0x802347 <udd_g_ctrlreq+0x6>
    1f30:	30 91 48 23 	lds	r19, 0x2348	; 0x802348 <udd_g_ctrlreq+0x7>
    1f34:	82 17       	cp	r24, r18
    1f36:	93 07       	cpc	r25, r19
    1f38:	80 f0       	brcs	.+32     	; 0x1f5a <__vector_126+0x172>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    1f3a:	e1 e4       	ldi	r30, 0x41	; 65
    1f3c:	f3 e2       	ldi	r31, 0x23	; 35
    1f3e:	c2 87       	std	Z+10, r28	; 0x0a
    1f40:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    1f42:	06 84       	ldd	r0, Z+14	; 0x0e
    1f44:	f7 85       	ldd	r31, Z+15	; 0x0f
    1f46:	e0 2d       	mov	r30, r0
    1f48:	30 97       	sbiw	r30, 0x00	; 0
    1f4a:	29 f0       	breq	.+10     	; 0x1f56 <__vector_126+0x16e>
			if (!udd_g_ctrlreq.over_under_run()) {
    1f4c:	19 95       	eicall
    1f4e:	81 11       	cpse	r24, r1
    1f50:	02 c0       	rjmp	.+4      	; 0x1f56 <__vector_126+0x16e>
				// Stall ZLP
				udd_ctrl_stall_data();
    1f52:	dd d8       	rcall	.-3654   	; 0x110e <udd_ctrl_stall_data>
    1f54:	34 c0       	rjmp	.+104    	; 0x1fbe <__vector_126+0x1d6>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    1f56:	e9 d8       	rcall	.-3630   	; 0x112a <udd_ctrl_send_zlp_in>
    1f58:	32 c0       	rjmp	.+100    	; 0x1fbe <__vector_126+0x1d6>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    1f5a:	80 91 4b 23 	lds	r24, 0x234B	; 0x80234b <udd_g_ctrlreq+0xa>
    1f5e:	90 91 4c 23 	lds	r25, 0x234C	; 0x80234c <udd_g_ctrlreq+0xb>
    1f62:	c8 17       	cp	r28, r24
    1f64:	d9 07       	cpc	r29, r25
    1f66:	f9 f4       	brne	.+62     	; 0x1fa6 <__vector_126+0x1be>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    1f68:	e0 91 4f 23 	lds	r30, 0x234F	; 0x80234f <udd_g_ctrlreq+0xe>
    1f6c:	f0 91 50 23 	lds	r31, 0x2350	; 0x802350 <udd_g_ctrlreq+0xf>
    1f70:	30 97       	sbiw	r30, 0x00	; 0
    1f72:	11 f4       	brne	.+4      	; 0x1f78 <__vector_126+0x190>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    1f74:	cc d8       	rcall	.-3688   	; 0x110e <udd_ctrl_stall_data>
    1f76:	23 c0       	rjmp	.+70     	; 0x1fbe <__vector_126+0x1d6>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    1f78:	19 95       	eicall
    1f7a:	81 11       	cpse	r24, r1
    1f7c:	02 c0       	rjmp	.+4      	; 0x1f82 <__vector_126+0x19a>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    1f7e:	c7 d8       	rcall	.-3698   	; 0x110e <udd_ctrl_stall_data>
    1f80:	1e c0       	rjmp	.+60     	; 0x1fbe <__vector_126+0x1d6>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1f82:	20 91 fd 22 	lds	r18, 0x22FD	; 0x8022fd <udd_ctrl_prev_payload_nb_trans>
    1f86:	30 91 fe 22 	lds	r19, 0x22FE	; 0x8022fe <udd_ctrl_prev_payload_nb_trans+0x1>
    1f8a:	80 91 fb 22 	lds	r24, 0x22FB	; 0x8022fb <udd_ctrl_payload_nb_trans>
    1f8e:	90 91 fc 22 	lds	r25, 0x22FC	; 0x8022fc <udd_ctrl_payload_nb_trans+0x1>
    1f92:	82 0f       	add	r24, r18
    1f94:	93 1f       	adc	r25, r19
    1f96:	80 93 fd 22 	sts	0x22FD, r24	; 0x8022fd <udd_ctrl_prev_payload_nb_trans>
    1f9a:	90 93 fe 22 	sts	0x22FE, r25	; 0x8022fe <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    1f9e:	10 92 fb 22 	sts	0x22FB, r1	; 0x8022fb <udd_ctrl_payload_nb_trans>
    1fa2:	10 92 fc 22 	sts	0x22FC, r1	; 0x8022fc <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    1fa6:	ec e0       	ldi	r30, 0x0C	; 12
    1fa8:	f3 e2       	ldi	r31, 0x23	; 35
    1faa:	02 e0       	ldi	r16, 0x02	; 2
    1fac:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    1fae:	00 e2       	ldi	r16, 0x20	; 32
    1fb0:	06 93       	lac	Z, r16
    1fb2:	05 c0       	rjmp	.+10     	; 0x1fbe <__vector_126+0x1d6>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    1fb4:	80 38       	cpi	r24, 0x80	; 128
    1fb6:	11 f4       	brne	.+4      	; 0x1fbc <__vector_126+0x1d4>
		udd_ctrl_in_sent();
    1fb8:	ce d8       	rcall	.-3684   	; 0x1156 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    1fba:	01 c0       	rjmp	.+2      	; 0x1fbe <__vector_126+0x1d6>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    1fbc:	ec d9       	rcall	.-3112   	; 0x1396 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    1fbe:	ff 91       	pop	r31
    1fc0:	ef 91       	pop	r30
    1fc2:	df 91       	pop	r29
    1fc4:	cf 91       	pop	r28
    1fc6:	bf 91       	pop	r27
    1fc8:	af 91       	pop	r26
    1fca:	9f 91       	pop	r25
    1fcc:	8f 91       	pop	r24
    1fce:	7f 91       	pop	r23
    1fd0:	6f 91       	pop	r22
    1fd2:	5f 91       	pop	r21
    1fd4:	4f 91       	pop	r20
    1fd6:	3f 91       	pop	r19
    1fd8:	2f 91       	pop	r18
    1fda:	1f 91       	pop	r17
    1fdc:	0f 91       	pop	r16
    1fde:	0f 90       	pop	r0
    1fe0:	0b be       	out	0x3b, r0	; 59
    1fe2:	0f 90       	pop	r0
    1fe4:	0a be       	out	0x3a, r0	; 58
    1fe6:	0f 90       	pop	r0
    1fe8:	09 be       	out	0x39, r0	; 57
    1fea:	0f 90       	pop	r0
    1fec:	08 be       	out	0x38, r0	; 56
    1fee:	0f 90       	pop	r0
    1ff0:	0f be       	out	0x3f, r0	; 63
    1ff2:	0f 90       	pop	r0
    1ff4:	1f 90       	pop	r1
    1ff6:	18 95       	reti

00001ff8 <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
    1ff8:	cf 93       	push	r28
    1ffa:	df 93       	push	r29
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	25 97       	sbiw	r28, 0x05	; 5
    2002:	cd bf       	out	0x3d, r28	; 61
    2004:	de bf       	out	0x3e, r29	; 62
    2006:	6c e1       	ldi	r22, 0x1C	; 28
    2008:	70 e0       	ldi	r23, 0x00	; 0
    200a:	82 e0       	ldi	r24, 0x02	; 2
    200c:	8f d0       	rcall	.+286    	; 0x212c <nvm_read_byte>
    200e:	8a 83       	std	Y+2, r24	; 0x02
    2010:	6d e1       	ldi	r22, 0x1D	; 29
    2012:	70 e0       	ldi	r23, 0x00	; 0
    2014:	82 e0       	ldi	r24, 0x02	; 2
    2016:	8a d0       	rcall	.+276    	; 0x212c <nvm_read_byte>
    2018:	89 83       	std	Y+1, r24	; 0x01
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	9a 81       	ldd	r25, Y+2	; 0x02
    201e:	01 96       	adiw	r24, 0x01	; 1
    2020:	21 f4       	brne	.+8      	; 0x202a <sysclk_init+0x32>
    2022:	80 e4       	ldi	r24, 0x40	; 64
    2024:	93 e2       	ldi	r25, 0x23	; 35
    2026:	89 83       	std	Y+1, r24	; 0x01
    2028:	9a 83       	std	Y+2, r25	; 0x02
    202a:	89 81       	ldd	r24, Y+1	; 0x01
    202c:	9a 81       	ldd	r25, Y+2	; 0x02
    202e:	8b 83       	std	Y+3, r24	; 0x03
    2030:	9c 83       	std	Y+4, r25	; 0x04
    2032:	e0 e6       	ldi	r30, 0x60	; 96
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	82 83       	std	Z+2, r24	; 0x02
    2038:	8c 81       	ldd	r24, Y+4	; 0x04
    203a:	83 83       	std	Z+3, r24	; 0x03
    203c:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    2040:	84 fd       	sbrc	r24, 4
    2042:	0f c0       	rjmp	.+30     	; 0x2062 <sysclk_init+0x6a>
    2044:	8f b7       	in	r24, 0x3f	; 63
    2046:	8d 83       	std	Y+5, r24	; 0x05
    2048:	f8 94       	cli
    204a:	9d 81       	ldd	r25, Y+5	; 0x05
    204c:	e0 e5       	ldi	r30, 0x50	; 80
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 e1       	ldi	r24, 0x10	; 16
    2052:	85 83       	std	Z+5, r24	; 0x05
    2054:	80 81       	ld	r24, Z
    2056:	80 61       	ori	r24, 0x10	; 16
    2058:	80 83       	st	Z, r24
    205a:	9f bf       	out	0x3f, r25	; 63
    205c:	81 81       	ldd	r24, Z+1	; 0x01
    205e:	84 ff       	sbrs	r24, 4
    2060:	fd cf       	rjmp	.-6      	; 0x205c <sysclk_init+0x64>
    2062:	64 e0       	ldi	r22, 0x04	; 4
    2064:	80 e4       	ldi	r24, 0x40	; 64
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	6b d0       	rcall	.+214    	; 0x2140 <ccp_write_io>
    206a:	25 96       	adiw	r28, 0x05	; 5
    206c:	cd bf       	out	0x3d, r28	; 61
    206e:	de bf       	out	0x3e, r29	; 62
    2070:	df 91       	pop	r29
    2072:	cf 91       	pop	r28
    2074:	08 95       	ret

00002076 <sysclk_enable_module>:
    2076:	cf 93       	push	r28
    2078:	df 93       	push	r29
    207a:	1f 92       	push	r1
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
    2080:	9f b7       	in	r25, 0x3f	; 63
    2082:	99 83       	std	Y+1, r25	; 0x01
    2084:	f8 94       	cli
    2086:	99 81       	ldd	r25, Y+1	; 0x01
    2088:	e8 2f       	mov	r30, r24
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	e0 59       	subi	r30, 0x90	; 144
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	60 95       	com	r22
    2092:	80 81       	ld	r24, Z
    2094:	68 23       	and	r22, r24
    2096:	60 83       	st	Z, r22
    2098:	9f bf       	out	0x3f, r25	; 63
    209a:	0f 90       	pop	r0
    209c:	df 91       	pop	r29
    209e:	cf 91       	pop	r28
    20a0:	08 95       	ret

000020a2 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    20a2:	cf 93       	push	r28
    20a4:	df 93       	push	r29
    20a6:	1f 92       	push	r1
    20a8:	1f 92       	push	r1
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    20ae:	86 30       	cpi	r24, 0x06	; 6
    20b0:	11 f0       	breq	.+4      	; 0x20b6 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    20b2:	60 e0       	ldi	r22, 0x00	; 0
    20b4:	01 c0       	rjmp	.+2      	; 0x20b8 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    20b6:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    20b8:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    20bc:	81 fd       	sbrc	r24, 1
    20be:	2a c0       	rjmp	.+84     	; 0x2114 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    20c0:	8f b7       	in	r24, 0x3f	; 63
    20c2:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    20c4:	f8 94       	cli
	return flags;
    20c6:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    20c8:	e0 e5       	ldi	r30, 0x50	; 80
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	82 60       	ori	r24, 0x02	; 2
    20d0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    20d2:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    20d4:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    20d6:	81 ff       	sbrs	r24, 1
    20d8:	fd cf       	rjmp	.-6      	; 0x20d4 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    20da:	8f b7       	in	r24, 0x3f	; 63
    20dc:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    20de:	f8 94       	cli
	return flags;
    20e0:	99 81       	ldd	r25, Y+1	; 0x01
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    20e2:	a0 e5       	ldi	r26, 0x50	; 80
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	16 96       	adiw	r26, 0x06	; 6
    20e8:	8c 91       	ld	r24, X
    20ea:	16 97       	sbiw	r26, 0x06	; 6
    20ec:	89 7f       	andi	r24, 0xF9	; 249
    20ee:	16 96       	adiw	r26, 0x06	; 6
    20f0:	8c 93       	st	X, r24
    20f2:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    20f4:	e0 e6       	ldi	r30, 0x60	; 96
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 e8       	ldi	r24, 0x80	; 128
    20fa:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    20fc:	8b eb       	ldi	r24, 0xBB	; 187
    20fe:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    2100:	16 96       	adiw	r26, 0x06	; 6
    2102:	8c 91       	ld	r24, X
    2104:	16 97       	sbiw	r26, 0x06	; 6
    2106:	84 60       	ori	r24, 0x04	; 4
    2108:	16 96       	adiw	r26, 0x06	; 6
    210a:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    210c:	80 81       	ld	r24, Z
    210e:	81 60       	ori	r24, 0x01	; 1
    2110:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2112:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    2114:	63 60       	ori	r22, 0x03	; 3
    2116:	84 e4       	ldi	r24, 0x44	; 68
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	12 d0       	rcall	.+36     	; 0x2140 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    211c:	60 e4       	ldi	r22, 0x40	; 64
    211e:	80 e0       	ldi	r24, 0x00	; 0
    2120:	aa df       	rcall	.-172    	; 0x2076 <sysclk_enable_module>
}
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	df 91       	pop	r29
    2128:	cf 91       	pop	r28
    212a:	08 95       	ret

0000212c <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    212c:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    2130:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    2132:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    2134:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    2138:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    213a:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    213e:	08 95       	ret

00002140 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    2140:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    2142:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    2144:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    2146:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    2148:	60 83       	st	Z, r22
	ret                             // Return to caller
    214a:	08 95       	ret

0000214c <__udivmodhi4>:
    214c:	aa 1b       	sub	r26, r26
    214e:	bb 1b       	sub	r27, r27
    2150:	51 e1       	ldi	r21, 0x11	; 17
    2152:	07 c0       	rjmp	.+14     	; 0x2162 <__udivmodhi4_ep>

00002154 <__udivmodhi4_loop>:
    2154:	aa 1f       	adc	r26, r26
    2156:	bb 1f       	adc	r27, r27
    2158:	a6 17       	cp	r26, r22
    215a:	b7 07       	cpc	r27, r23
    215c:	10 f0       	brcs	.+4      	; 0x2162 <__udivmodhi4_ep>
    215e:	a6 1b       	sub	r26, r22
    2160:	b7 0b       	sbc	r27, r23

00002162 <__udivmodhi4_ep>:
    2162:	88 1f       	adc	r24, r24
    2164:	99 1f       	adc	r25, r25
    2166:	5a 95       	dec	r21
    2168:	a9 f7       	brne	.-22     	; 0x2154 <__udivmodhi4_loop>
    216a:	80 95       	com	r24
    216c:	90 95       	com	r25
    216e:	bc 01       	movw	r22, r24
    2170:	cd 01       	movw	r24, r26
    2172:	08 95       	ret

00002174 <__tablejump2__>:
    2174:	ee 0f       	add	r30, r30
    2176:	ff 1f       	adc	r31, r31
    2178:	88 1f       	adc	r24, r24
    217a:	8b bf       	out	0x3b, r24	; 59
    217c:	07 90       	elpm	r0, Z+
    217e:	f6 91       	elpm	r31, Z
    2180:	e0 2d       	mov	r30, r0
    2182:	1b be       	out	0x3b, r1	; 59
    2184:	19 94       	eijmp

00002186 <memcpy>:
    2186:	fb 01       	movw	r30, r22
    2188:	dc 01       	movw	r26, r24
    218a:	02 c0       	rjmp	.+4      	; 0x2190 <memcpy+0xa>
    218c:	01 90       	ld	r0, Z+
    218e:	0d 92       	st	X+, r0
    2190:	41 50       	subi	r20, 0x01	; 1
    2192:	50 40       	sbci	r21, 0x00	; 0
    2194:	d8 f7       	brcc	.-10     	; 0x218c <memcpy+0x6>
    2196:	08 95       	ret

00002198 <_exit>:
    2198:	f8 94       	cli

0000219a <__stop_program>:
    219a:	ff cf       	rjmp	.-2      	; 0x219a <__stop_program>
